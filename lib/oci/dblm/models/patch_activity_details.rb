# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240102
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of deploy, update and migrate-listener(only for single Instance database) operations for this resource.
  class Dblm::Models::PatchActivityDetails
    DEPLOY_STATUS_ENUM = [
      DEPLOY_STATUS_SCHEDULED = 'SCHEDULED'.freeze,
      DEPLOY_STATUS_RUNNING = 'RUNNING'.freeze,
      DEPLOY_STATUS_COMPLETED = 'COMPLETED'.freeze,
      DEPLOY_STATUS_FAILED = 'FAILED'.freeze,
      DEPLOY_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    UPDATE_STATUS_ENUM = [
      UPDATE_STATUS_SCHEDULED = 'SCHEDULED'.freeze,
      UPDATE_STATUS_RUNNING = 'RUNNING'.freeze,
      UPDATE_STATUS_COMPLETED = 'COMPLETED'.freeze,
      UPDATE_STATUS_FAILED = 'FAILED'.freeze,
      UPDATE_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MIGRATE_LISTENER_STATUS_ENUM = [
      MIGRATE_LISTENER_STATUS_SCHEDULED = 'SCHEDULED'.freeze,
      MIGRATE_LISTENER_STATUS_RUNNING = 'RUNNING'.freeze,
      MIGRATE_LISTENER_STATUS_COMPLETED = 'COMPLETED'.freeze,
      MIGRATE_LISTENER_STATUS_FAILED = 'FAILED'.freeze,
      MIGRATE_LISTENER_STATUS_NA = 'NA'.freeze,
      MIGRATE_LISTENER_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Operation Identifier for deploy operation.
    # @return [String]
    attr_accessor :deploy_operation_id

    # Task identifier for deploy operation.
    # @return [String]
    attr_accessor :deploy_task_id

    # Status of deploy operation.
    # @return [String]
    attr_reader :deploy_status

    # Operation Identifier for update operation.
    # @return [String]
    attr_accessor :update_operation_id

    # Task identifier for update operation.
    # @return [String]
    attr_accessor :update_task_id

    # Status of update operation.
    # @return [String]
    attr_reader :update_status

    # Operation Identifier for migrate listener operation.
    # @return [String]
    attr_accessor :migrate_listener_operation_id

    # Task identifier for migrate listener operation.
    # @return [String]
    attr_accessor :migrate_listener_task_id

    # Status of migrate listener operation.
    # @return [String]
    attr_reader :migrate_listener_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'deploy_operation_id': :'deployOperationId',
        'deploy_task_id': :'deployTaskId',
        'deploy_status': :'deployStatus',
        'update_operation_id': :'updateOperationId',
        'update_task_id': :'updateTaskId',
        'update_status': :'updateStatus',
        'migrate_listener_operation_id': :'migrateListenerOperationId',
        'migrate_listener_task_id': :'migrateListenerTaskId',
        'migrate_listener_status': :'migrateListenerStatus'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'deploy_operation_id': :'String',
        'deploy_task_id': :'String',
        'deploy_status': :'String',
        'update_operation_id': :'String',
        'update_task_id': :'String',
        'update_status': :'String',
        'migrate_listener_operation_id': :'String',
        'migrate_listener_task_id': :'String',
        'migrate_listener_status': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :deploy_operation_id The value to assign to the {#deploy_operation_id} property
    # @option attributes [String] :deploy_task_id The value to assign to the {#deploy_task_id} property
    # @option attributes [String] :deploy_status The value to assign to the {#deploy_status} property
    # @option attributes [String] :update_operation_id The value to assign to the {#update_operation_id} property
    # @option attributes [String] :update_task_id The value to assign to the {#update_task_id} property
    # @option attributes [String] :update_status The value to assign to the {#update_status} property
    # @option attributes [String] :migrate_listener_operation_id The value to assign to the {#migrate_listener_operation_id} property
    # @option attributes [String] :migrate_listener_task_id The value to assign to the {#migrate_listener_task_id} property
    # @option attributes [String] :migrate_listener_status The value to assign to the {#migrate_listener_status} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.deploy_operation_id = attributes[:'deployOperationId'] if attributes[:'deployOperationId']

      raise 'You cannot provide both :deployOperationId and :deploy_operation_id' if attributes.key?(:'deployOperationId') && attributes.key?(:'deploy_operation_id')

      self.deploy_operation_id = attributes[:'deploy_operation_id'] if attributes[:'deploy_operation_id']

      self.deploy_task_id = attributes[:'deployTaskId'] if attributes[:'deployTaskId']

      raise 'You cannot provide both :deployTaskId and :deploy_task_id' if attributes.key?(:'deployTaskId') && attributes.key?(:'deploy_task_id')

      self.deploy_task_id = attributes[:'deploy_task_id'] if attributes[:'deploy_task_id']

      self.deploy_status = attributes[:'deployStatus'] if attributes[:'deployStatus']

      raise 'You cannot provide both :deployStatus and :deploy_status' if attributes.key?(:'deployStatus') && attributes.key?(:'deploy_status')

      self.deploy_status = attributes[:'deploy_status'] if attributes[:'deploy_status']

      self.update_operation_id = attributes[:'updateOperationId'] if attributes[:'updateOperationId']

      raise 'You cannot provide both :updateOperationId and :update_operation_id' if attributes.key?(:'updateOperationId') && attributes.key?(:'update_operation_id')

      self.update_operation_id = attributes[:'update_operation_id'] if attributes[:'update_operation_id']

      self.update_task_id = attributes[:'updateTaskId'] if attributes[:'updateTaskId']

      raise 'You cannot provide both :updateTaskId and :update_task_id' if attributes.key?(:'updateTaskId') && attributes.key?(:'update_task_id')

      self.update_task_id = attributes[:'update_task_id'] if attributes[:'update_task_id']

      self.update_status = attributes[:'updateStatus'] if attributes[:'updateStatus']

      raise 'You cannot provide both :updateStatus and :update_status' if attributes.key?(:'updateStatus') && attributes.key?(:'update_status')

      self.update_status = attributes[:'update_status'] if attributes[:'update_status']

      self.migrate_listener_operation_id = attributes[:'migrateListenerOperationId'] if attributes[:'migrateListenerOperationId']

      raise 'You cannot provide both :migrateListenerOperationId and :migrate_listener_operation_id' if attributes.key?(:'migrateListenerOperationId') && attributes.key?(:'migrate_listener_operation_id')

      self.migrate_listener_operation_id = attributes[:'migrate_listener_operation_id'] if attributes[:'migrate_listener_operation_id']

      self.migrate_listener_task_id = attributes[:'migrateListenerTaskId'] if attributes[:'migrateListenerTaskId']

      raise 'You cannot provide both :migrateListenerTaskId and :migrate_listener_task_id' if attributes.key?(:'migrateListenerTaskId') && attributes.key?(:'migrate_listener_task_id')

      self.migrate_listener_task_id = attributes[:'migrate_listener_task_id'] if attributes[:'migrate_listener_task_id']

      self.migrate_listener_status = attributes[:'migrateListenerStatus'] if attributes[:'migrateListenerStatus']

      raise 'You cannot provide both :migrateListenerStatus and :migrate_listener_status' if attributes.key?(:'migrateListenerStatus') && attributes.key?(:'migrate_listener_status')

      self.migrate_listener_status = attributes[:'migrate_listener_status'] if attributes[:'migrate_listener_status']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deploy_status Object to be assigned
    def deploy_status=(deploy_status)
      # rubocop:disable Style/ConditionalAssignment
      if deploy_status && !DEPLOY_STATUS_ENUM.include?(deploy_status)
        OCI.logger.debug("Unknown value for 'deploy_status' [" + deploy_status + "]. Mapping to 'DEPLOY_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @deploy_status = DEPLOY_STATUS_UNKNOWN_ENUM_VALUE
      else
        @deploy_status = deploy_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update_status Object to be assigned
    def update_status=(update_status)
      # rubocop:disable Style/ConditionalAssignment
      if update_status && !UPDATE_STATUS_ENUM.include?(update_status)
        OCI.logger.debug("Unknown value for 'update_status' [" + update_status + "]. Mapping to 'UPDATE_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @update_status = UPDATE_STATUS_UNKNOWN_ENUM_VALUE
      else
        @update_status = update_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] migrate_listener_status Object to be assigned
    def migrate_listener_status=(migrate_listener_status)
      # rubocop:disable Style/ConditionalAssignment
      if migrate_listener_status && !MIGRATE_LISTENER_STATUS_ENUM.include?(migrate_listener_status)
        OCI.logger.debug("Unknown value for 'migrate_listener_status' [" + migrate_listener_status + "]. Mapping to 'MIGRATE_LISTENER_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @migrate_listener_status = MIGRATE_LISTENER_STATUS_UNKNOWN_ENUM_VALUE
      else
        @migrate_listener_status = migrate_listener_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        deploy_operation_id == other.deploy_operation_id &&
        deploy_task_id == other.deploy_task_id &&
        deploy_status == other.deploy_status &&
        update_operation_id == other.update_operation_id &&
        update_task_id == other.update_task_id &&
        update_status == other.update_status &&
        migrate_listener_operation_id == other.migrate_listener_operation_id &&
        migrate_listener_task_id == other.migrate_listener_task_id &&
        migrate_listener_status == other.migrate_listener_status
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [deploy_operation_id, deploy_task_id, deploy_status, update_operation_id, update_task_id, update_status, migrate_listener_operation_id, migrate_listener_task_id, migrate_listener_status].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
