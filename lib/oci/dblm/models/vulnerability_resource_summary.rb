# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240102
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The assessed Resources.
  class Dblm::Models::VulnerabilityResourceSummary
    # **[Required]** The resource ID for this resource.
    # @return [String]
    attr_accessor :id

    # **[Required]** The name of the resource.
    # @return [String]
    attr_accessor :name

    # **[Required]** A string representing the version of the resource.
    # @return [String]
    attr_accessor :version

    # **[Required]** A string representing the release of the resource.
    # @return [String]
    attr_accessor :release

    # **[Required]** A string representing the platform of the resource.
    # @return [String]
    attr_accessor :platform

    # **[Required]** Time when the latest configuration collection happened.
    # @return [DateTime]
    attr_accessor :time_config_collected

    # **[Required]** Time when the latest scan happened for the resource.
    # @return [DateTime]
    attr_accessor :time_scan_ended

    # **[Required]** Identifier for the resource is subscribed to.
    # @return [String]
    attr_accessor :image_id

    # **[Required]** Image the resource is subscribed to.
    # @return [String]
    attr_accessor :subscribed_image

    # **[Required]** Metric errors.
    # @return [Array<OCI::Dblm::Models::MetricError>]
    attr_accessor :metric_errors

    # **[Required]** PDBs for a CDB.
    # @return [Array<OCI::Dblm::Models::ChildPdb>]
    attr_accessor :child_pdbs

    # **[Required]** Summary of the resources that are registered and may or may not have vulnerabilities.
    # @return [Object]
    attr_accessor :vulnerabilities_summary

    # **[Required]** Summary of the patch recommendations for databases.
    # @return [Object]
    attr_accessor :patch_recommendations_summary

    # **[Required]** List of the patch recommendations for databases
    # @return [Array<OCI::Dblm::Models::PatchRecommendationsDetailsSummary>]
    attr_accessor :patch_recommendations_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'name': :'name',
        'version': :'version',
        'release': :'release',
        'platform': :'platform',
        'time_config_collected': :'timeConfigCollected',
        'time_scan_ended': :'timeScanEnded',
        'image_id': :'imageId',
        'subscribed_image': :'subscribedImage',
        'metric_errors': :'metricErrors',
        'child_pdbs': :'childPdbs',
        'vulnerabilities_summary': :'vulnerabilitiesSummary',
        'patch_recommendations_summary': :'patchRecommendationsSummary',
        'patch_recommendations_details': :'patchRecommendationsDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'name': :'String',
        'version': :'String',
        'release': :'String',
        'platform': :'String',
        'time_config_collected': :'DateTime',
        'time_scan_ended': :'DateTime',
        'image_id': :'String',
        'subscribed_image': :'String',
        'metric_errors': :'Array<OCI::Dblm::Models::MetricError>',
        'child_pdbs': :'Array<OCI::Dblm::Models::ChildPdb>',
        'vulnerabilities_summary': :'Object',
        'patch_recommendations_summary': :'Object',
        'patch_recommendations_details': :'Array<OCI::Dblm::Models::PatchRecommendationsDetailsSummary>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [String] :release The value to assign to the {#release} property
    # @option attributes [String] :platform The value to assign to the {#platform} property
    # @option attributes [DateTime] :time_config_collected The value to assign to the {#time_config_collected} property
    # @option attributes [DateTime] :time_scan_ended The value to assign to the {#time_scan_ended} property
    # @option attributes [String] :image_id The value to assign to the {#image_id} property
    # @option attributes [String] :subscribed_image The value to assign to the {#subscribed_image} property
    # @option attributes [Array<OCI::Dblm::Models::MetricError>] :metric_errors The value to assign to the {#metric_errors} property
    # @option attributes [Array<OCI::Dblm::Models::ChildPdb>] :child_pdbs The value to assign to the {#child_pdbs} property
    # @option attributes [Object] :vulnerabilities_summary The value to assign to the {#vulnerabilities_summary} property
    # @option attributes [Object] :patch_recommendations_summary The value to assign to the {#patch_recommendations_summary} property
    # @option attributes [Array<OCI::Dblm::Models::PatchRecommendationsDetailsSummary>] :patch_recommendations_details The value to assign to the {#patch_recommendations_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.version = attributes[:'version'] if attributes[:'version']

      self.release = attributes[:'release'] if attributes[:'release']

      self.platform = attributes[:'platform'] if attributes[:'platform']

      self.time_config_collected = attributes[:'timeConfigCollected'] if attributes[:'timeConfigCollected']

      raise 'You cannot provide both :timeConfigCollected and :time_config_collected' if attributes.key?(:'timeConfigCollected') && attributes.key?(:'time_config_collected')

      self.time_config_collected = attributes[:'time_config_collected'] if attributes[:'time_config_collected']

      self.time_scan_ended = attributes[:'timeScanEnded'] if attributes[:'timeScanEnded']

      raise 'You cannot provide both :timeScanEnded and :time_scan_ended' if attributes.key?(:'timeScanEnded') && attributes.key?(:'time_scan_ended')

      self.time_scan_ended = attributes[:'time_scan_ended'] if attributes[:'time_scan_ended']

      self.image_id = attributes[:'imageId'] if attributes[:'imageId']

      raise 'You cannot provide both :imageId and :image_id' if attributes.key?(:'imageId') && attributes.key?(:'image_id')

      self.image_id = attributes[:'image_id'] if attributes[:'image_id']

      self.subscribed_image = attributes[:'subscribedImage'] if attributes[:'subscribedImage']

      raise 'You cannot provide both :subscribedImage and :subscribed_image' if attributes.key?(:'subscribedImage') && attributes.key?(:'subscribed_image')

      self.subscribed_image = attributes[:'subscribed_image'] if attributes[:'subscribed_image']

      self.metric_errors = attributes[:'metricErrors'] if attributes[:'metricErrors']

      raise 'You cannot provide both :metricErrors and :metric_errors' if attributes.key?(:'metricErrors') && attributes.key?(:'metric_errors')

      self.metric_errors = attributes[:'metric_errors'] if attributes[:'metric_errors']

      self.child_pdbs = attributes[:'childPdbs'] if attributes[:'childPdbs']

      raise 'You cannot provide both :childPdbs and :child_pdbs' if attributes.key?(:'childPdbs') && attributes.key?(:'child_pdbs')

      self.child_pdbs = attributes[:'child_pdbs'] if attributes[:'child_pdbs']

      self.vulnerabilities_summary = attributes[:'vulnerabilitiesSummary'] if attributes[:'vulnerabilitiesSummary']

      raise 'You cannot provide both :vulnerabilitiesSummary and :vulnerabilities_summary' if attributes.key?(:'vulnerabilitiesSummary') && attributes.key?(:'vulnerabilities_summary')

      self.vulnerabilities_summary = attributes[:'vulnerabilities_summary'] if attributes[:'vulnerabilities_summary']

      self.patch_recommendations_summary = attributes[:'patchRecommendationsSummary'] if attributes[:'patchRecommendationsSummary']

      raise 'You cannot provide both :patchRecommendationsSummary and :patch_recommendations_summary' if attributes.key?(:'patchRecommendationsSummary') && attributes.key?(:'patch_recommendations_summary')

      self.patch_recommendations_summary = attributes[:'patch_recommendations_summary'] if attributes[:'patch_recommendations_summary']

      self.patch_recommendations_details = attributes[:'patchRecommendationsDetails'] if attributes[:'patchRecommendationsDetails']

      raise 'You cannot provide both :patchRecommendationsDetails and :patch_recommendations_details' if attributes.key?(:'patchRecommendationsDetails') && attributes.key?(:'patch_recommendations_details')

      self.patch_recommendations_details = attributes[:'patch_recommendations_details'] if attributes[:'patch_recommendations_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        version == other.version &&
        release == other.release &&
        platform == other.platform &&
        time_config_collected == other.time_config_collected &&
        time_scan_ended == other.time_scan_ended &&
        image_id == other.image_id &&
        subscribed_image == other.subscribed_image &&
        metric_errors == other.metric_errors &&
        child_pdbs == other.child_pdbs &&
        vulnerabilities_summary == other.vulnerabilities_summary &&
        patch_recommendations_summary == other.patch_recommendations_summary &&
        patch_recommendations_details == other.patch_recommendations_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, version, release, platform, time_config_collected, time_scan_ended, image_id, subscribed_image, metric_errors, child_pdbs, vulnerabilities_summary, patch_recommendations_summary, patch_recommendations_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
