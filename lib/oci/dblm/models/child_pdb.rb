# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240102
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Child PDB for a CDB.
  class Dblm::Models::ChildPdb
    # **[Required]** Identifier for the pluggable database.
    # @return [String]
    attr_accessor :pdb_id

    # **[Required]** Name fo the pluggable database.
    # @return [String]
    attr_accessor :name

    # **[Required]** Open mode
    # @return [String]
    attr_accessor :open_mode

    # **[Required]** Restricted
    # @return [String]
    attr_accessor :restricted

    # **[Required]** Recovery status
    # @return [String]
    attr_accessor :recovery_status

    # **[Required]** Last changed by
    # @return [String]
    attr_accessor :last_changed_by

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'pdb_id': :'pdbId',
        'name': :'name',
        'open_mode': :'openMode',
        'restricted': :'restricted',
        'recovery_status': :'recoveryStatus',
        'last_changed_by': :'lastChangedBy'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'pdb_id': :'String',
        'name': :'String',
        'open_mode': :'String',
        'restricted': :'String',
        'recovery_status': :'String',
        'last_changed_by': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :pdb_id The value to assign to the {#pdb_id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :open_mode The value to assign to the {#open_mode} property
    # @option attributes [String] :restricted The value to assign to the {#restricted} property
    # @option attributes [String] :recovery_status The value to assign to the {#recovery_status} property
    # @option attributes [String] :last_changed_by The value to assign to the {#last_changed_by} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.pdb_id = attributes[:'pdbId'] if attributes[:'pdbId']

      raise 'You cannot provide both :pdbId and :pdb_id' if attributes.key?(:'pdbId') && attributes.key?(:'pdb_id')

      self.pdb_id = attributes[:'pdb_id'] if attributes[:'pdb_id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.open_mode = attributes[:'openMode'] if attributes[:'openMode']

      raise 'You cannot provide both :openMode and :open_mode' if attributes.key?(:'openMode') && attributes.key?(:'open_mode')

      self.open_mode = attributes[:'open_mode'] if attributes[:'open_mode']

      self.restricted = attributes[:'restricted'] if attributes[:'restricted']

      self.recovery_status = attributes[:'recoveryStatus'] if attributes[:'recoveryStatus']

      raise 'You cannot provide both :recoveryStatus and :recovery_status' if attributes.key?(:'recoveryStatus') && attributes.key?(:'recovery_status')

      self.recovery_status = attributes[:'recovery_status'] if attributes[:'recovery_status']

      self.last_changed_by = attributes[:'lastChangedBy'] if attributes[:'lastChangedBy']

      raise 'You cannot provide both :lastChangedBy and :last_changed_by' if attributes.key?(:'lastChangedBy') && attributes.key?(:'last_changed_by')

      self.last_changed_by = attributes[:'last_changed_by'] if attributes[:'last_changed_by']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        pdb_id == other.pdb_id &&
        name == other.name &&
        open_mode == other.open_mode &&
        restricted == other.restricted &&
        recovery_status == other.recovery_status &&
        last_changed_by == other.last_changed_by
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [pdb_id, name, open_mode, restricted, recovery_status, last_changed_by].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
