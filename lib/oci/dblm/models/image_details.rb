# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240102
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Image details containing the subscribed image, its status, version, owner and time of creation.
  class Dblm::Models::ImageDetails
    IMAGE_STATUS_ENUM = [
      IMAGE_STATUS_GREEN = 'GREEN'.freeze,
      IMAGE_STATUS_YELLOW = 'YELLOW'.freeze,
      IMAGE_STATUS_RED = 'RED'.freeze,
      IMAGE_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Image identifier.
    # @return [String]
    attr_accessor :image_id

    # Subscribed image.
    # @return [String]
    attr_accessor :subscribed_image

    # Name of the image version marked as current of the image.
    # @return [String]
    attr_accessor :current_version

    # Image status.
    # @return [String]
    attr_reader :image_status

    # Release version of the image.
    # @return [String]
    attr_accessor :image_version

    # Owner of the image.
    # @return [String]
    attr_accessor :image_owner

    # Name of the person who created the image.
    # @return [String]
    attr_accessor :created_by

    # Date when the image was created.
    # @return [DateTime]
    attr_accessor :time_image_creation

    # An image version name, that is up to date and has no recommendations.
    # @return [String]
    attr_accessor :up_to_date_image_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'image_id': :'imageId',
        'subscribed_image': :'subscribedImage',
        'current_version': :'currentVersion',
        'image_status': :'imageStatus',
        'image_version': :'imageVersion',
        'image_owner': :'imageOwner',
        'created_by': :'createdBy',
        'time_image_creation': :'timeImageCreation',
        'up_to_date_image_version': :'upToDateImageVersion'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'image_id': :'String',
        'subscribed_image': :'String',
        'current_version': :'String',
        'image_status': :'String',
        'image_version': :'String',
        'image_owner': :'String',
        'created_by': :'String',
        'time_image_creation': :'DateTime',
        'up_to_date_image_version': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :image_id The value to assign to the {#image_id} property
    # @option attributes [String] :subscribed_image The value to assign to the {#subscribed_image} property
    # @option attributes [String] :current_version The value to assign to the {#current_version} property
    # @option attributes [String] :image_status The value to assign to the {#image_status} property
    # @option attributes [String] :image_version The value to assign to the {#image_version} property
    # @option attributes [String] :image_owner The value to assign to the {#image_owner} property
    # @option attributes [String] :created_by The value to assign to the {#created_by} property
    # @option attributes [DateTime] :time_image_creation The value to assign to the {#time_image_creation} property
    # @option attributes [String] :up_to_date_image_version The value to assign to the {#up_to_date_image_version} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.image_id = attributes[:'imageId'] if attributes[:'imageId']

      raise 'You cannot provide both :imageId and :image_id' if attributes.key?(:'imageId') && attributes.key?(:'image_id')

      self.image_id = attributes[:'image_id'] if attributes[:'image_id']

      self.subscribed_image = attributes[:'subscribedImage'] if attributes[:'subscribedImage']

      raise 'You cannot provide both :subscribedImage and :subscribed_image' if attributes.key?(:'subscribedImage') && attributes.key?(:'subscribed_image')

      self.subscribed_image = attributes[:'subscribed_image'] if attributes[:'subscribed_image']

      self.current_version = attributes[:'currentVersion'] if attributes[:'currentVersion']

      raise 'You cannot provide both :currentVersion and :current_version' if attributes.key?(:'currentVersion') && attributes.key?(:'current_version')

      self.current_version = attributes[:'current_version'] if attributes[:'current_version']

      self.image_status = attributes[:'imageStatus'] if attributes[:'imageStatus']

      raise 'You cannot provide both :imageStatus and :image_status' if attributes.key?(:'imageStatus') && attributes.key?(:'image_status')

      self.image_status = attributes[:'image_status'] if attributes[:'image_status']

      self.image_version = attributes[:'imageVersion'] if attributes[:'imageVersion']

      raise 'You cannot provide both :imageVersion and :image_version' if attributes.key?(:'imageVersion') && attributes.key?(:'image_version')

      self.image_version = attributes[:'image_version'] if attributes[:'image_version']

      self.image_owner = attributes[:'imageOwner'] if attributes[:'imageOwner']

      raise 'You cannot provide both :imageOwner and :image_owner' if attributes.key?(:'imageOwner') && attributes.key?(:'image_owner')

      self.image_owner = attributes[:'image_owner'] if attributes[:'image_owner']

      self.created_by = attributes[:'createdBy'] if attributes[:'createdBy']

      raise 'You cannot provide both :createdBy and :created_by' if attributes.key?(:'createdBy') && attributes.key?(:'created_by')

      self.created_by = attributes[:'created_by'] if attributes[:'created_by']

      self.time_image_creation = attributes[:'timeImageCreation'] if attributes[:'timeImageCreation']

      raise 'You cannot provide both :timeImageCreation and :time_image_creation' if attributes.key?(:'timeImageCreation') && attributes.key?(:'time_image_creation')

      self.time_image_creation = attributes[:'time_image_creation'] if attributes[:'time_image_creation']

      self.up_to_date_image_version = attributes[:'upToDateImageVersion'] if attributes[:'upToDateImageVersion']

      raise 'You cannot provide both :upToDateImageVersion and :up_to_date_image_version' if attributes.key?(:'upToDateImageVersion') && attributes.key?(:'up_to_date_image_version')

      self.up_to_date_image_version = attributes[:'up_to_date_image_version'] if attributes[:'up_to_date_image_version']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image_status Object to be assigned
    def image_status=(image_status)
      # rubocop:disable Style/ConditionalAssignment
      if image_status && !IMAGE_STATUS_ENUM.include?(image_status)
        OCI.logger.debug("Unknown value for 'image_status' [" + image_status + "]. Mapping to 'IMAGE_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @image_status = IMAGE_STATUS_UNKNOWN_ENUM_VALUE
      else
        @image_status = image_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        image_id == other.image_id &&
        subscribed_image == other.subscribed_image &&
        current_version == other.current_version &&
        image_status == other.image_status &&
        image_version == other.image_version &&
        image_owner == other.image_owner &&
        created_by == other.created_by &&
        time_image_creation == other.time_image_creation &&
        up_to_date_image_version == other.up_to_date_image_version
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [image_id, subscribed_image, current_version, image_status, image_version, image_owner, created_by, time_image_creation, up_to_date_image_version].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
