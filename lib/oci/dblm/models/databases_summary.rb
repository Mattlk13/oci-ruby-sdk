# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240102
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of a databases.
  class Dblm::Models::DatabasesSummary
    DATABASE_TYPE_ENUM = [
      DATABASE_TYPE_SI = 'SI'.freeze,
      DATABASE_TYPE_RAC = 'RAC'.freeze,
      DATABASE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Database ocid.
    # @return [String]
    attr_accessor :database_id

    # Database name.
    # @return [String]
    attr_accessor :database_name

    # Database type.
    # @return [String]
    attr_reader :database_type

    # Database release.
    # @return [String]
    attr_accessor :release

    # Database release full version.
    # @return [String]
    attr_accessor :release_full_version

    # Path to the Oracle home.
    # @return [String]
    attr_accessor :oracle_home_path

    # This is the hashcode representing the list of patches applied.
    # @return [String]
    attr_accessor :current_patch_watermark

    # For SI, hosted on host and for RAC, host on cluster.
    # @return [String]
    attr_accessor :host_or_cluster

    # This attribute is required.
    # @return [OCI::Dblm::Models::ImageDetails]
    attr_accessor :image_details

    # This attribute is required.
    # @return [OCI::Dblm::Models::PatchComplianceDetails]
    attr_accessor :patch_compliance_details

    # This attribute is required.
    # @return [OCI::Dblm::Models::PatchActivityDetails]
    attr_accessor :patch_activity_details

    # Intermediate user to be used for patching, created and maintained by customers. This user requires sudo access to switch as Oracle home owner and root user
    # @return [String]
    attr_accessor :patch_user

    # Path to sudo binary (executable) file
    # @return [String]
    attr_accessor :sudo_file_path

    # List of additional patches on database.
    # @return [Array<OCI::Dblm::Models::AdditionalPatches>]
    attr_accessor :additional_patches

    # Summary of vulnerabilities found in registered resources grouped by severity.
    # @return [Object]
    attr_accessor :vulnerabilities_summary

    # The current state of the database.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'database_id': :'databaseId',
        'database_name': :'databaseName',
        'database_type': :'databaseType',
        'release': :'release',
        'release_full_version': :'releaseFullVersion',
        'oracle_home_path': :'oracleHomePath',
        'current_patch_watermark': :'currentPatchWatermark',
        'host_or_cluster': :'hostOrCluster',
        'image_details': :'imageDetails',
        'patch_compliance_details': :'patchComplianceDetails',
        'patch_activity_details': :'patchActivityDetails',
        'patch_user': :'patchUser',
        'sudo_file_path': :'sudoFilePath',
        'additional_patches': :'additionalPatches',
        'vulnerabilities_summary': :'vulnerabilitiesSummary',
        'lifecycle_state': :'lifecycleState',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'database_id': :'String',
        'database_name': :'String',
        'database_type': :'String',
        'release': :'String',
        'release_full_version': :'String',
        'oracle_home_path': :'String',
        'current_patch_watermark': :'String',
        'host_or_cluster': :'String',
        'image_details': :'OCI::Dblm::Models::ImageDetails',
        'patch_compliance_details': :'OCI::Dblm::Models::PatchComplianceDetails',
        'patch_activity_details': :'OCI::Dblm::Models::PatchActivityDetails',
        'patch_user': :'String',
        'sudo_file_path': :'String',
        'additional_patches': :'Array<OCI::Dblm::Models::AdditionalPatches>',
        'vulnerabilities_summary': :'Object',
        'lifecycle_state': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :database_id The value to assign to the {#database_id} property
    # @option attributes [String] :database_name The value to assign to the {#database_name} property
    # @option attributes [String] :database_type The value to assign to the {#database_type} property
    # @option attributes [String] :release The value to assign to the {#release} property
    # @option attributes [String] :release_full_version The value to assign to the {#release_full_version} property
    # @option attributes [String] :oracle_home_path The value to assign to the {#oracle_home_path} property
    # @option attributes [String] :current_patch_watermark The value to assign to the {#current_patch_watermark} property
    # @option attributes [String] :host_or_cluster The value to assign to the {#host_or_cluster} property
    # @option attributes [OCI::Dblm::Models::ImageDetails] :image_details The value to assign to the {#image_details} property
    # @option attributes [OCI::Dblm::Models::PatchComplianceDetails] :patch_compliance_details The value to assign to the {#patch_compliance_details} property
    # @option attributes [OCI::Dblm::Models::PatchActivityDetails] :patch_activity_details The value to assign to the {#patch_activity_details} property
    # @option attributes [String] :patch_user The value to assign to the {#patch_user} property
    # @option attributes [String] :sudo_file_path The value to assign to the {#sudo_file_path} property
    # @option attributes [Array<OCI::Dblm::Models::AdditionalPatches>] :additional_patches The value to assign to the {#additional_patches} property
    # @option attributes [Object] :vulnerabilities_summary The value to assign to the {#vulnerabilities_summary} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.database_id = attributes[:'databaseId'] if attributes[:'databaseId']

      raise 'You cannot provide both :databaseId and :database_id' if attributes.key?(:'databaseId') && attributes.key?(:'database_id')

      self.database_id = attributes[:'database_id'] if attributes[:'database_id']

      self.database_name = attributes[:'databaseName'] if attributes[:'databaseName']

      raise 'You cannot provide both :databaseName and :database_name' if attributes.key?(:'databaseName') && attributes.key?(:'database_name')

      self.database_name = attributes[:'database_name'] if attributes[:'database_name']

      self.database_type = attributes[:'databaseType'] if attributes[:'databaseType']

      raise 'You cannot provide both :databaseType and :database_type' if attributes.key?(:'databaseType') && attributes.key?(:'database_type')

      self.database_type = attributes[:'database_type'] if attributes[:'database_type']

      self.release = attributes[:'release'] if attributes[:'release']

      self.release_full_version = attributes[:'releaseFullVersion'] if attributes[:'releaseFullVersion']

      raise 'You cannot provide both :releaseFullVersion and :release_full_version' if attributes.key?(:'releaseFullVersion') && attributes.key?(:'release_full_version')

      self.release_full_version = attributes[:'release_full_version'] if attributes[:'release_full_version']

      self.oracle_home_path = attributes[:'oracleHomePath'] if attributes[:'oracleHomePath']

      raise 'You cannot provide both :oracleHomePath and :oracle_home_path' if attributes.key?(:'oracleHomePath') && attributes.key?(:'oracle_home_path')

      self.oracle_home_path = attributes[:'oracle_home_path'] if attributes[:'oracle_home_path']

      self.current_patch_watermark = attributes[:'currentPatchWatermark'] if attributes[:'currentPatchWatermark']

      raise 'You cannot provide both :currentPatchWatermark and :current_patch_watermark' if attributes.key?(:'currentPatchWatermark') && attributes.key?(:'current_patch_watermark')

      self.current_patch_watermark = attributes[:'current_patch_watermark'] if attributes[:'current_patch_watermark']

      self.host_or_cluster = attributes[:'hostOrCluster'] if attributes[:'hostOrCluster']

      raise 'You cannot provide both :hostOrCluster and :host_or_cluster' if attributes.key?(:'hostOrCluster') && attributes.key?(:'host_or_cluster')

      self.host_or_cluster = attributes[:'host_or_cluster'] if attributes[:'host_or_cluster']

      self.image_details = attributes[:'imageDetails'] if attributes[:'imageDetails']

      raise 'You cannot provide both :imageDetails and :image_details' if attributes.key?(:'imageDetails') && attributes.key?(:'image_details')

      self.image_details = attributes[:'image_details'] if attributes[:'image_details']

      self.patch_compliance_details = attributes[:'patchComplianceDetails'] if attributes[:'patchComplianceDetails']

      raise 'You cannot provide both :patchComplianceDetails and :patch_compliance_details' if attributes.key?(:'patchComplianceDetails') && attributes.key?(:'patch_compliance_details')

      self.patch_compliance_details = attributes[:'patch_compliance_details'] if attributes[:'patch_compliance_details']

      self.patch_activity_details = attributes[:'patchActivityDetails'] if attributes[:'patchActivityDetails']

      raise 'You cannot provide both :patchActivityDetails and :patch_activity_details' if attributes.key?(:'patchActivityDetails') && attributes.key?(:'patch_activity_details')

      self.patch_activity_details = attributes[:'patch_activity_details'] if attributes[:'patch_activity_details']

      self.patch_user = attributes[:'patchUser'] if attributes[:'patchUser']

      raise 'You cannot provide both :patchUser and :patch_user' if attributes.key?(:'patchUser') && attributes.key?(:'patch_user')

      self.patch_user = attributes[:'patch_user'] if attributes[:'patch_user']

      self.sudo_file_path = attributes[:'sudoFilePath'] if attributes[:'sudoFilePath']

      raise 'You cannot provide both :sudoFilePath and :sudo_file_path' if attributes.key?(:'sudoFilePath') && attributes.key?(:'sudo_file_path')

      self.sudo_file_path = attributes[:'sudo_file_path'] if attributes[:'sudo_file_path']

      self.additional_patches = attributes[:'additionalPatches'] if attributes[:'additionalPatches']

      raise 'You cannot provide both :additionalPatches and :additional_patches' if attributes.key?(:'additionalPatches') && attributes.key?(:'additional_patches')

      self.additional_patches = attributes[:'additional_patches'] if attributes[:'additional_patches']

      self.vulnerabilities_summary = attributes[:'vulnerabilitiesSummary'] if attributes[:'vulnerabilitiesSummary']

      raise 'You cannot provide both :vulnerabilitiesSummary and :vulnerabilities_summary' if attributes.key?(:'vulnerabilitiesSummary') && attributes.key?(:'vulnerabilities_summary')

      self.vulnerabilities_summary = attributes[:'vulnerabilities_summary'] if attributes[:'vulnerabilities_summary']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] database_type Object to be assigned
    def database_type=(database_type)
      # rubocop:disable Style/ConditionalAssignment
      if database_type && !DATABASE_TYPE_ENUM.include?(database_type)
        OCI.logger.debug("Unknown value for 'database_type' [" + database_type + "]. Mapping to 'DATABASE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @database_type = DATABASE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @database_type = database_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        database_id == other.database_id &&
        database_name == other.database_name &&
        database_type == other.database_type &&
        release == other.release &&
        release_full_version == other.release_full_version &&
        oracle_home_path == other.oracle_home_path &&
        current_patch_watermark == other.current_patch_watermark &&
        host_or_cluster == other.host_or_cluster &&
        image_details == other.image_details &&
        patch_compliance_details == other.patch_compliance_details &&
        patch_activity_details == other.patch_activity_details &&
        patch_user == other.patch_user &&
        sudo_file_path == other.sudo_file_path &&
        additional_patches == other.additional_patches &&
        vulnerabilities_summary == other.vulnerabilities_summary &&
        lifecycle_state == other.lifecycle_state &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [database_id, database_name, database_type, release, release_full_version, oracle_home_path, current_patch_watermark, host_or_cluster, image_details, patch_compliance_details, patch_activity_details, patch_user, sudo_file_path, additional_patches, vulnerabilities_summary, lifecycle_state, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
