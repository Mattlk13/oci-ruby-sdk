# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240102
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A Dblm Vulnerability is a description of a Dblm Vulnerability.
  #
  # To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized, talk to
  # an administrator. If you're an administrator who needs to write policies to give users access, see
  # [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/policiesgs/get-started-with-policies.htm).
  #
  class Dblm::Models::DblmVulnerability
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Compartment Identifier.
    # @return [String]
    attr_accessor :compartment_id

    # Resources objects.
    # @return [Array<OCI::Dblm::Models::ResourceInfo>]
    attr_accessor :resources

    # A message describing the status of the feature's state.
    # @return [String]
    attr_accessor :message

    # The time the the Vulnerability was enabled. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_enabled

    # The current state of the feature.
    # @return [String]
    attr_reader :lifecycle_state

    # Summary of dblm registered and unregistered resources.
    # @return [Object]
    attr_accessor :resources_summary

    # Summary of vulnerabilities found in registered resources grouped by severity.
    # @return [Object]
    attr_accessor :vulnerabilities_summary

    # Summary of the patch recommendations for databases.
    # @return [Object]
    attr_accessor :patch_recommendations_summary

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'resources': :'resources',
        'message': :'message',
        'time_enabled': :'timeEnabled',
        'lifecycle_state': :'lifecycleState',
        'resources_summary': :'resourcesSummary',
        'vulnerabilities_summary': :'vulnerabilitiesSummary',
        'patch_recommendations_summary': :'patchRecommendationsSummary',
        'freeform_tags': :'freeformTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'resources': :'Array<OCI::Dblm::Models::ResourceInfo>',
        'message': :'String',
        'time_enabled': :'DateTime',
        'lifecycle_state': :'String',
        'resources_summary': :'Object',
        'vulnerabilities_summary': :'Object',
        'patch_recommendations_summary': :'Object',
        'freeform_tags': :'Hash<String, String>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [Array<OCI::Dblm::Models::ResourceInfo>] :resources The value to assign to the {#resources} property
    # @option attributes [String] :message The value to assign to the {#message} property
    # @option attributes [DateTime] :time_enabled The value to assign to the {#time_enabled} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Object] :resources_summary The value to assign to the {#resources_summary} property
    # @option attributes [Object] :vulnerabilities_summary The value to assign to the {#vulnerabilities_summary} property
    # @option attributes [Object] :patch_recommendations_summary The value to assign to the {#patch_recommendations_summary} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.resources = attributes[:'resources'] if attributes[:'resources']

      self.message = attributes[:'message'] if attributes[:'message']

      self.time_enabled = attributes[:'timeEnabled'] if attributes[:'timeEnabled']

      raise 'You cannot provide both :timeEnabled and :time_enabled' if attributes.key?(:'timeEnabled') && attributes.key?(:'time_enabled')

      self.time_enabled = attributes[:'time_enabled'] if attributes[:'time_enabled']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.resources_summary = attributes[:'resourcesSummary'] if attributes[:'resourcesSummary']

      raise 'You cannot provide both :resourcesSummary and :resources_summary' if attributes.key?(:'resourcesSummary') && attributes.key?(:'resources_summary')

      self.resources_summary = attributes[:'resources_summary'] if attributes[:'resources_summary']

      self.vulnerabilities_summary = attributes[:'vulnerabilitiesSummary'] if attributes[:'vulnerabilitiesSummary']

      raise 'You cannot provide both :vulnerabilitiesSummary and :vulnerabilities_summary' if attributes.key?(:'vulnerabilitiesSummary') && attributes.key?(:'vulnerabilities_summary')

      self.vulnerabilities_summary = attributes[:'vulnerabilities_summary'] if attributes[:'vulnerabilities_summary']

      self.patch_recommendations_summary = attributes[:'patchRecommendationsSummary'] if attributes[:'patchRecommendationsSummary']

      raise 'You cannot provide both :patchRecommendationsSummary and :patch_recommendations_summary' if attributes.key?(:'patchRecommendationsSummary') && attributes.key?(:'patch_recommendations_summary')

      self.patch_recommendations_summary = attributes[:'patch_recommendations_summary'] if attributes[:'patch_recommendations_summary']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        resources == other.resources &&
        message == other.message &&
        time_enabled == other.time_enabled &&
        lifecycle_state == other.lifecycle_state &&
        resources_summary == other.resources_summary &&
        vulnerabilities_summary == other.vulnerabilities_summary &&
        patch_recommendations_summary == other.patch_recommendations_summary &&
        freeform_tags == other.freeform_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, resources, message, time_enabled, lifecycle_state, resources_summary, vulnerabilities_summary, patch_recommendations_summary, freeform_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
