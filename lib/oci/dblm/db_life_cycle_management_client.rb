# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240102

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A description of the Dblm API
  class Dblm::DbLifeCycleManagementClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new DbLifeCycleManagementClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20240102'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "DbLifeCycleManagementClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://dbmgmt.{region}.oci.{secondLevelDomain}') + '/20240102'
      logger.info "DbLifeCycleManagementClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a VulnerabilityScan.
    #
    # @param [OCI::Dblm::Models::CreateVulnerabilityScanDetails] create_vulnerability_scan_details Details for the new VulnerabilityScan.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::VulnerabilityScan VulnerabilityScan}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/create_vulnerability_scan.rb.html) to see an example of how to use create_vulnerability_scan API.
    def create_vulnerability_scan(create_vulnerability_scan_details, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#create_vulnerability_scan.' if logger

      raise "Missing the required parameter 'create_vulnerability_scan_details' when calling create_vulnerability_scan." if create_vulnerability_scan_details.nil?

      path = '/vulnerabilityScans'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_vulnerability_scan_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#create_vulnerability_scan') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::VulnerabilityScan'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Overview of Patch Management.
    #
    # @param [String] compartment_id The required ID of the compartment in which to list resources.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :database_release A filter to return only database that match the given release version.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @option opts [DateTime] :time_started_greater_than_or_equal_to A filter to return only resources whose timeStarted is greater than or equal to the given date-time.
    # @option opts [DateTime] :time_started_less_than A filter to return only resources whose timeStarted is less than the given date-time.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::DblmPatchManagement DblmPatchManagement}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/get_patch_management.rb.html) to see an example of how to use get_patch_management API.
    def get_patch_management(compartment_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#get_patch_management.' if logger

      raise "Missing the required parameter 'compartment_id' when calling get_patch_management." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.'
      end

      path = '/patchManagement'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:databaseRelease] = opts[:database_release] if opts[:database_release]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:timeStartedGreaterThanOrEqualTo] = opts[:time_started_greater_than_or_equal_to] if opts[:time_started_greater_than_or_equal_to]
      query_params[:timeStartedLessThan] = opts[:time_started_less_than] if opts[:time_started_less_than]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#get_patch_management') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::DblmPatchManagement'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a Vulnerability
    # @param [String] compartment_id The required ID of the compartment in which to list resources.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :database_release A filter to return only database that match the given release version.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::DblmVulnerability DblmVulnerability}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/get_vulnerability.rb.html) to see an example of how to use get_vulnerability API.
    def get_vulnerability(compartment_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#get_vulnerability.' if logger

      raise "Missing the required parameter 'compartment_id' when calling get_vulnerability." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.'
      end

      path = '/vulnerability'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:databaseRelease] = opts[:database_release] if opts[:database_release]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#get_vulnerability') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::DblmVulnerability'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets information about a VulnerabilityScan.
    # @param [String] vulnerability_scan_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VulnerabilityScan.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::VulnerabilityScan VulnerabilityScan}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/get_vulnerability_scan.rb.html) to see an example of how to use get_vulnerability_scan API.
    def get_vulnerability_scan(vulnerability_scan_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#get_vulnerability_scan.' if logger

      raise "Missing the required parameter 'vulnerability_scan_id' when calling get_vulnerability_scan." if vulnerability_scan_id.nil?
      raise "Parameter value for 'vulnerability_scan_id' must not be blank" if OCI::Internal::Util.blank_string?(vulnerability_scan_id)

      path = '/vulnerabilityScans/{vulnerabilityScanId}'.sub('{vulnerabilityScanId}', vulnerability_scan_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#get_vulnerability_scan') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::VulnerabilityScan'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets details of the work request with the given ID.
    # @param [String] work_request_id The ID of the asynchronous request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::WorkRequest WorkRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/get_work_request.rb.html) to see an example of how to use get_work_request API.
    def get_work_request(work_request_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#get_work_request.' if logger

      raise "Missing the required parameter 'work_request_id' when calling get_work_request." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#get_work_request') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::WorkRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets an AggregatedVulnerabilityData
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [DateTime] :time_created_greater_than The created greater than.
    # @option opts [DateTime] :time_ended_less_than The time ended less than.
    # @option opts [String] :database_release A filter to return only database that match the given release version.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::AggregatedVulnerabilityCollection AggregatedVulnerabilityCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_aggregated_vulnerability_data.rb.html) to see an example of how to use list_aggregated_vulnerability_data API.
    def list_aggregated_vulnerability_data(opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_aggregated_vulnerability_data.' if logger


      if opts[:lifecycle_state] && !OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.'
      end

      path = '/vulnerability/aggregatedVulnerabilityData'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:timeCreatedGreaterThan] = opts[:time_created_greater_than] if opts[:time_created_greater_than]
      query_params[:timeEndedLessThan] = opts[:time_ended_less_than] if opts[:time_ended_less_than]
      query_params[:databaseRelease] = opts[:database_release] if opts[:database_release]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_aggregated_vulnerability_data') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::AggregatedVulnerabilityCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the list of databases
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @option opts [String] :database_release A filter to return only database that match the given release version.
    # @option opts [String] :database_type Filter by database type.
    #   Possible values Single Instance or RAC.
    #
    #   Allowed values are: SI, RAC
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, name, resourceType, release, subscribedImage, patchCompliance
    # @option opts [String] :image_id Subscribed image
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [Integer] :drifter_patch_id A filter to return only database that have given patchId as additional patch (drifter from image version).
    # @option opts [String] :image_compliance Filter databases by image compliance status.
    #    (default to ALL_DATABASES)
    #   Allowed values are: NOT_SUBSCRIBED, NOT_COMPLIANT_WITH_IMAGES, ALL_DATABASES
    # @option opts [Array<String>] :severity_type Filter by one or more severity types.
    #   Possible values are critical, high, medium, low, info and none.
    #    (default to [])
    #   Allowed values are: CRITICAL, HIGH, MEDIUM, LOW, INFO, NONE
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::PatchDatabasesCollection PatchDatabasesCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_databases.rb.html) to see an example of how to use list_databases API.
    def list_databases(opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_databases.' if logger


      if opts[:lifecycle_state] && !OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:database_type] && !%w[SI RAC].include?(opts[:database_type])
        raise 'Invalid value for "database_type", must be one of SI, RAC.'
      end

      if opts[:sort_order] && !OCI::Dblm::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::Dblm::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated name resourceType release subscribedImage patchCompliance].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, name, resourceType, release, subscribedImage, patchCompliance.'
      end

      if opts[:image_compliance] && !%w[NOT_SUBSCRIBED NOT_COMPLIANT_WITH_IMAGES ALL_DATABASES].include?(opts[:image_compliance])
        raise 'Invalid value for "image_compliance", must be one of NOT_SUBSCRIBED, NOT_COMPLIANT_WITH_IMAGES, ALL_DATABASES.'
      end


      severity_type_allowable_values = %w[CRITICAL HIGH MEDIUM LOW INFO NONE]
      if opts[:severity_type] && !opts[:severity_type].empty?
        opts[:severity_type].each do |val_to_check|
          unless severity_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "severity_type", must be one of CRITICAL, HIGH, MEDIUM, LOW, INFO, NONE.'
          end
        end
      end

      path = '/patchManagement/databases'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:databaseRelease] = opts[:database_release] if opts[:database_release]
      query_params[:databaseType] = opts[:database_type] if opts[:database_type]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:imageId] = opts[:image_id] if opts[:image_id]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:drifterPatchId] = opts[:drifter_patch_id] if opts[:drifter_patch_id]
      query_params[:imageCompliance] = opts[:image_compliance] if opts[:image_compliance]
      query_params[:severityType] = OCI::ApiClient.build_collection_params(opts[:severity_type], :multi) if opts[:severity_type] && !opts[:severity_type].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_databases') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::PatchDatabasesCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # List of notifications
    # @param [String] compartment_id The required ID of the compartment in which to list resources.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::NotificationCollection NotificationCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_notifications.rb.html) to see an example of how to use list_notifications API.
    def list_notifications(compartment_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_notifications.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_notifications." if compartment_id.nil?

      path = '/vulnerability/notifications'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_notifications') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::NotificationCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the vulnerabilities summary list
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for vulnerableResources is descending. Default order for cveId is descending.
    #    (default to vulnerableResources)
    #   Allowed values are: cveId, vulnerableResources
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @option opts [String] :database_release A filter to return only database that match the given release version.
    # @option opts [String] :resource_id A filter to return only resources that match the given resource id.
    # @option opts [Array<String>] :severity_type Filter by one or more severity types.
    #   Possible values are critical, high, medium, low, info.
    #    (default to [])
    #   Allowed values are: CRITICAL, HIGH, MEDIUM, LOW, INFO
    # @option opts [String] :search_by The search input for filter cve id and cve description.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::VulnerabilityCollection VulnerabilityCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_vulnerabilities.rb.html) to see an example of how to use list_vulnerabilities API.
    def list_vulnerabilities(opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_vulnerabilities.' if logger


      if opts[:sort_order] && !OCI::Dblm::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::Dblm::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[cveId vulnerableResources].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of cveId, vulnerableResources.'
      end

      if opts[:lifecycle_state] && !OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.'
      end


      severity_type_allowable_values = %w[CRITICAL HIGH MEDIUM LOW INFO]
      if opts[:severity_type] && !opts[:severity_type].empty?
        opts[:severity_type].each do |val_to_check|
          unless severity_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "severity_type", must be one of CRITICAL, HIGH, MEDIUM, LOW, INFO.'
          end
        end
      end

      path = '/vulnerability/vulnerabilities'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:databaseRelease] = opts[:database_release] if opts[:database_release]
      query_params[:resourceId] = opts[:resource_id] if opts[:resource_id]
      query_params[:severityType] = OCI::ApiClient.build_collection_params(opts[:severity_type], :multi) if opts[:severity_type] && !opts[:severity_type].empty?
      query_params[:searchBy] = opts[:search_by] if opts[:search_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_vulnerabilities') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::VulnerabilityCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the summary of vulnerable and clean resourcees
    # @param [String] compartment_id The required ID of the compartment in which to list resources.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName, vulnerabilityCount
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [String] :lifecycle_state A filter to return only resources their lifecycleState matches the given lifecycleState.
    # @option opts [String] :database_release A filter to return only database that match the given release version.
    # @option opts [String] :cve_id The id of a CVE.
    # @option opts [Array<String>] :severity_type Filter by one or more severity types.
    #   Possible values are critical, high, medium, low, info and none.
    #    (default to [])
    #   Allowed values are: CRITICAL, HIGH, MEDIUM, LOW, INFO, NONE
    # @option opts [Array<String>] :patch_recommendation Filter by one or more severity types.
    #   Possible values are upToDate, patchAvailable
    #    (default to [])
    #   Allowed values are: upToDate, patchAvailable
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::VulnerabilityResourceCollection VulnerabilityResourceCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_vulnerability_resources.rb.html) to see an example of how to use list_vulnerability_resources API.
    def list_vulnerability_resources(compartment_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_vulnerability_resources.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_vulnerability_resources." if compartment_id.nil?

      if opts[:sort_order] && !OCI::Dblm::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::Dblm::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName vulnerabilityCount].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName, vulnerabilityCount.'
      end

      if opts[:lifecycle_state] && !OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::Dblm::Models::DblmVulnerability::LIFECYCLE_STATE_ENUM.'
      end


      severity_type_allowable_values = %w[CRITICAL HIGH MEDIUM LOW INFO NONE]
      if opts[:severity_type] && !opts[:severity_type].empty?
        opts[:severity_type].each do |val_to_check|
          unless severity_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "severity_type", must be one of CRITICAL, HIGH, MEDIUM, LOW, INFO, NONE.'
          end
        end
      end


      patch_recommendation_allowable_values = %w[upToDate patchAvailable]
      if opts[:patch_recommendation] && !opts[:patch_recommendation].empty?
        opts[:patch_recommendation].each do |val_to_check|
          unless patch_recommendation_allowable_values.include?(val_to_check)
            raise 'Invalid value for "patch_recommendation", must be one of upToDate, patchAvailable.'
          end
        end
      end

      path = '/vulnerability/resources'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:databaseRelease] = opts[:database_release] if opts[:database_release]
      query_params[:cveId] = opts[:cve_id] if opts[:cve_id]
      query_params[:severityType] = OCI::ApiClient.build_collection_params(opts[:severity_type], :multi) if opts[:severity_type] && !opts[:severity_type].empty?
      query_params[:patchRecommendation] = OCI::ApiClient.build_collection_params(opts[:patch_recommendation], :multi) if opts[:patch_recommendation] && !opts[:patch_recommendation].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_vulnerability_resources') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::VulnerabilityResourceCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a list of VulnerabilityScans.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :vulnerability_scan_id The ID of the vulnerability scan.
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order is descending.
    #    (default to timeCreated)
    #   Allowed values are: id, displayName, timeCreated, timeEnded
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [DateTime] :time_created_greater_than The created greater than.
    # @option opts [DateTime] :time_ended_less_than The time ended less than.
    # @option opts [Array<String>] :vulnerability_scan_status Filter by one or more vulnerability scan status.
    #   Possible values are completed, running, completed with error, aborted.
    #    (default to [])
    #   Allowed values are: COMPLETED, ERROR, RUNNING, ABORTED
    # @option opts [String] :vulnerability_scan_type The scan type to use is 'CVE', 'PATCH' or 'IMAGE_PATCH'.
    #   Allowed values are: CVE, PATCH, IMAGE_PATCH
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::VulnerabilityScanCollection VulnerabilityScanCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_vulnerability_scans.rb.html) to see an example of how to use list_vulnerability_scans API.
    def list_vulnerability_scans(opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_vulnerability_scans.' if logger


      if opts[:sort_order] && !OCI::Dblm::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::Dblm::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[id displayName timeCreated timeEnded].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of id, displayName, timeCreated, timeEnded.'
      end


      vulnerability_scan_status_allowable_values = %w[COMPLETED ERROR RUNNING ABORTED]
      if opts[:vulnerability_scan_status] && !opts[:vulnerability_scan_status].empty?
        opts[:vulnerability_scan_status].each do |val_to_check|
          unless vulnerability_scan_status_allowable_values.include?(val_to_check)
            raise 'Invalid value for "vulnerability_scan_status", must be one of COMPLETED, ERROR, RUNNING, ABORTED.'
          end
        end
      end

      if opts[:vulnerability_scan_type] && !%w[CVE PATCH IMAGE_PATCH].include?(opts[:vulnerability_scan_type])
        raise 'Invalid value for "vulnerability_scan_type", must be one of CVE, PATCH, IMAGE_PATCH.'
      end

      path = '/vulnerabilityScans'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:vulnerabilityScanId] = opts[:vulnerability_scan_id] if opts[:vulnerability_scan_id]
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:timeCreatedGreaterThan] = opts[:time_created_greater_than] if opts[:time_created_greater_than]
      query_params[:timeEndedLessThan] = opts[:time_ended_less_than] if opts[:time_ended_less_than]
      query_params[:vulnerabilityScanStatus] = OCI::ApiClient.build_collection_params(opts[:vulnerability_scan_status], :multi) if opts[:vulnerability_scan_status] && !opts[:vulnerability_scan_status].empty?
      query_params[:vulnerabilityScanType] = opts[:vulnerability_scan_type] if opts[:vulnerability_scan_type]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_vulnerability_scans') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::VulnerabilityScanCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a (paginated) list of errors for the work request with the given ID.
    #
    # @param [String] work_request_id The ID of the asynchronous request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timestamp is descending.
    #    (default to timestamp)
    #   Allowed values are: timestamp
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::WorkRequestErrorCollection WorkRequestErrorCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_work_request_errors.rb.html) to see an example of how to use list_work_request_errors API.
    def list_work_request_errors(work_request_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_work_request_errors.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_work_request_errors." if work_request_id.nil?

      if opts[:sort_by] && !%w[timestamp].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timestamp.'
      end

      if opts[:sort_order] && !OCI::Dblm::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::Dblm::Models::SORT_ORDER_ENUM.'
      end
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}/errors'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_work_request_errors') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::WorkRequestErrorCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a (paginated) list of logs for the work request with the given ID.
    #
    # @param [String] work_request_id The ID of the asynchronous request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timestamp is descending.
    #    (default to timestamp)
    #   Allowed values are: timestamp
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::WorkRequestLogEntryCollection WorkRequestLogEntryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_work_request_logs.rb.html) to see an example of how to use list_work_request_logs API.
    def list_work_request_logs(work_request_id, opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_work_request_logs.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_work_request_logs." if work_request_id.nil?

      if opts[:sort_by] && !%w[timestamp].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timestamp.'
      end

      if opts[:sort_order] && !OCI::Dblm::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::Dblm::Models::SORT_ORDER_ENUM.'
      end
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}/logs'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_work_request_logs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::WorkRequestLogEntryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the work requests in a compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :work_request_id The ID of the asynchronous work request.
    # @option opts [String] :status A filter to return only resources their lifecycleState matches the given OperationStatus.
    # @option opts [String] :resource_id The ID of the resource affected by the work request.
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeAccepted is descending.
    #    (default to timeAccepted)
    #   Allowed values are: timeAccepted
    # @return [Response] A Response object with data of type {OCI::Dblm::Models::WorkRequestSummaryCollection WorkRequestSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dblm/list_work_requests.rb.html) to see an example of how to use list_work_requests API.
    def list_work_requests(opts = {})
      logger.debug 'Calling operation DbLifeCycleManagementClient#list_work_requests.' if logger


      if opts[:status] && !OCI::Dblm::Models::OPERATION_STATUS_ENUM.include?(opts[:status])
        raise 'Invalid value for "status", must be one of the values in OCI::Dblm::Models::OPERATION_STATUS_ENUM.'
      end

      if opts[:sort_order] && !OCI::Dblm::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::Dblm::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeAccepted].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeAccepted.'
      end

      path = '/workRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:workRequestId] = opts[:work_request_id] if opts[:work_request_id]
      query_params[:status] = opts[:status] if opts[:status]
      query_params[:resourceId] = opts[:resource_id] if opts[:resource_id]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DbLifeCycleManagementClient#list_work_requests') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::Dblm::Models::WorkRequestSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
