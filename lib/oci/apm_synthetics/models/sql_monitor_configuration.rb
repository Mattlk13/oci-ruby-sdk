# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'
require_relative 'monitor_configuration'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Request configuration details for the SQL monitor type.
  class ApmSynthetics::Models::SqlMonitorConfiguration < ApmSynthetics::Models::MonitorConfiguration
    DATABASE_TYPE_ENUM = [
      DATABASE_TYPE_ORACLE = 'ORACLE'.freeze,
      DATABASE_TYPE_MYSQL = 'MYSQL'.freeze,
      DATABASE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DATABASE_CONNECTION_TYPE_ENUM = [
      DATABASE_CONNECTION_TYPE_CLOUD_WALLET = 'CLOUD_WALLET'.freeze,
      DATABASE_CONNECTION_TYPE_CUSTOM_JDBC = 'CUSTOM_JDBC'.freeze,
      DATABASE_CONNECTION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Database type.
    # @return [String]
    attr_reader :database_type

    # SQL query to be executed.
    # @return [String]
    attr_accessor :query

    # @return [OCI::ApmSynthetics::Models::BasicAuthenticationDetails]
    attr_accessor :database_authentication_details

    # Database role.
    # @return [String]
    attr_accessor :database_role

    # Database connection type. Only CUSTOM_JDBC is supported for MYSQL database type.
    # @return [String]
    attr_reader :database_connection_type

    # Database connection string.
    # @return [String]
    attr_accessor :connection_string

    # @return [OCI::ApmSynthetics::Models::DatabaseWalletDetails]
    attr_accessor :database_wallet_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'config_type': :'configType',
        'is_failure_retried': :'isFailureRetried',
        'dns_configuration': :'dnsConfiguration',
        'database_type': :'databaseType',
        'query': :'query',
        'database_authentication_details': :'databaseAuthenticationDetails',
        'database_role': :'databaseRole',
        'database_connection_type': :'databaseConnectionType',
        'connection_string': :'connectionString',
        'database_wallet_details': :'databaseWalletDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'config_type': :'String',
        'is_failure_retried': :'BOOLEAN',
        'dns_configuration': :'OCI::ApmSynthetics::Models::DnsConfiguration',
        'database_type': :'String',
        'query': :'String',
        'database_authentication_details': :'OCI::ApmSynthetics::Models::BasicAuthenticationDetails',
        'database_role': :'String',
        'database_connection_type': :'String',
        'connection_string': :'String',
        'database_wallet_details': :'OCI::ApmSynthetics::Models::DatabaseWalletDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_failure_retried The value to assign to the {OCI::ApmSynthetics::Models::MonitorConfiguration#is_failure_retried #is_failure_retried} proprety
    # @option attributes [OCI::ApmSynthetics::Models::DnsConfiguration] :dns_configuration The value to assign to the {OCI::ApmSynthetics::Models::MonitorConfiguration#dns_configuration #dns_configuration} proprety
    # @option attributes [String] :database_type The value to assign to the {#database_type} property
    # @option attributes [String] :query The value to assign to the {#query} property
    # @option attributes [OCI::ApmSynthetics::Models::BasicAuthenticationDetails] :database_authentication_details The value to assign to the {#database_authentication_details} property
    # @option attributes [String] :database_role The value to assign to the {#database_role} property
    # @option attributes [String] :database_connection_type The value to assign to the {#database_connection_type} property
    # @option attributes [String] :connection_string The value to assign to the {#connection_string} property
    # @option attributes [OCI::ApmSynthetics::Models::DatabaseWalletDetails] :database_wallet_details The value to assign to the {#database_wallet_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['configType'] = 'SQL_CONFIG'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.database_type = attributes[:'databaseType'] if attributes[:'databaseType']

      raise 'You cannot provide both :databaseType and :database_type' if attributes.key?(:'databaseType') && attributes.key?(:'database_type')

      self.database_type = attributes[:'database_type'] if attributes[:'database_type']

      self.query = attributes[:'query'] if attributes[:'query']

      self.database_authentication_details = attributes[:'databaseAuthenticationDetails'] if attributes[:'databaseAuthenticationDetails']

      raise 'You cannot provide both :databaseAuthenticationDetails and :database_authentication_details' if attributes.key?(:'databaseAuthenticationDetails') && attributes.key?(:'database_authentication_details')

      self.database_authentication_details = attributes[:'database_authentication_details'] if attributes[:'database_authentication_details']

      self.database_role = attributes[:'databaseRole'] if attributes[:'databaseRole']

      raise 'You cannot provide both :databaseRole and :database_role' if attributes.key?(:'databaseRole') && attributes.key?(:'database_role')

      self.database_role = attributes[:'database_role'] if attributes[:'database_role']

      self.database_connection_type = attributes[:'databaseConnectionType'] if attributes[:'databaseConnectionType']

      raise 'You cannot provide both :databaseConnectionType and :database_connection_type' if attributes.key?(:'databaseConnectionType') && attributes.key?(:'database_connection_type')

      self.database_connection_type = attributes[:'database_connection_type'] if attributes[:'database_connection_type']

      self.connection_string = attributes[:'connectionString'] if attributes[:'connectionString']

      raise 'You cannot provide both :connectionString and :connection_string' if attributes.key?(:'connectionString') && attributes.key?(:'connection_string')

      self.connection_string = attributes[:'connection_string'] if attributes[:'connection_string']

      self.database_wallet_details = attributes[:'databaseWalletDetails'] if attributes[:'databaseWalletDetails']

      raise 'You cannot provide both :databaseWalletDetails and :database_wallet_details' if attributes.key?(:'databaseWalletDetails') && attributes.key?(:'database_wallet_details')

      self.database_wallet_details = attributes[:'database_wallet_details'] if attributes[:'database_wallet_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] database_type Object to be assigned
    def database_type=(database_type)
      # rubocop:disable Style/ConditionalAssignment
      if database_type && !DATABASE_TYPE_ENUM.include?(database_type)
        OCI.logger.debug("Unknown value for 'database_type' [" + database_type + "]. Mapping to 'DATABASE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @database_type = DATABASE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @database_type = database_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] database_connection_type Object to be assigned
    def database_connection_type=(database_connection_type)
      # rubocop:disable Style/ConditionalAssignment
      if database_connection_type && !DATABASE_CONNECTION_TYPE_ENUM.include?(database_connection_type)
        OCI.logger.debug("Unknown value for 'database_connection_type' [" + database_connection_type + "]. Mapping to 'DATABASE_CONNECTION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @database_connection_type = DATABASE_CONNECTION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @database_connection_type = database_connection_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        config_type == other.config_type &&
        is_failure_retried == other.is_failure_retried &&
        dns_configuration == other.dns_configuration &&
        database_type == other.database_type &&
        query == other.query &&
        database_authentication_details == other.database_authentication_details &&
        database_role == other.database_role &&
        database_connection_type == other.database_connection_type &&
        connection_string == other.connection_string &&
        database_wallet_details == other.database_wallet_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [config_type, is_failure_retried, dns_configuration, database_type, query, database_authentication_details, database_role, database_connection_type, connection_string, database_wallet_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
