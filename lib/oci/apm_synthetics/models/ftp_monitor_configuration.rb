# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'
require_relative 'monitor_configuration'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Request configuration details for the FTP monitor type.
  class ApmSynthetics::Models::FtpMonitorConfiguration < ApmSynthetics::Models::MonitorConfiguration
    FTP_PROTOCOL_ENUM = [
      FTP_PROTOCOL_FTP = 'FTP'.freeze,
      FTP_PROTOCOL_FTPS = 'FTPS'.freeze,
      FTP_PROTOCOL_SFTP = 'SFTP'.freeze,
      FTP_PROTOCOL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    FTP_REQUEST_TYPE_ENUM = [
      FTP_REQUEST_TYPE_LIST = 'LIST'.freeze,
      FTP_REQUEST_TYPE_UPLOAD = 'UPLOAD'.freeze,
      FTP_REQUEST_TYPE_DOWNLOAD = 'DOWNLOAD'.freeze,
      FTP_REQUEST_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # FTP protocol type.
    # @return [String]
    attr_reader :ftp_protocol

    # FTP monitor request type.
    # @return [String]
    attr_reader :ftp_request_type

    # If enabled, Active mode will be used for the FTP connection. Not supported for SFTP protocol.
    # @return [BOOLEAN]
    attr_accessor :is_active_mode

    # @return [OCI::ApmSynthetics::Models::BasicAuthenticationDetails]
    attr_accessor :ftp_basic_authentication_details

    # Download size limit in Bytes, at which to stop the transfer. Maximum download size limit is 5 MiB.
    # @return [Integer]
    attr_accessor :download_size_limit_in_bytes

    # File upload size in Bytes, at which to stop the transfer. Maximum upload size is 5 MiB.
    # @return [Integer]
    attr_accessor :upload_file_size_in_bytes

    # @return [OCI::ApmSynthetics::Models::NetworkConfiguration]
    attr_accessor :network_configuration

    # Expected FTP response codes. For status code range, set values such as 2xx, 3xx.
    # @return [Array<String>]
    attr_accessor :verify_response_codes

    # Verify response content against regular expression based string.
    # If response content does not match the verifyResponseContent value, then it will be considered a failure.
    #
    # @return [String]
    attr_accessor :verify_response_content

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'config_type': :'configType',
        'is_failure_retried': :'isFailureRetried',
        'dns_configuration': :'dnsConfiguration',
        'ftp_protocol': :'ftpProtocol',
        'ftp_request_type': :'ftpRequestType',
        'is_active_mode': :'isActiveMode',
        'ftp_basic_authentication_details': :'ftpBasicAuthenticationDetails',
        'download_size_limit_in_bytes': :'downloadSizeLimitInBytes',
        'upload_file_size_in_bytes': :'uploadFileSizeInBytes',
        'network_configuration': :'networkConfiguration',
        'verify_response_codes': :'verifyResponseCodes',
        'verify_response_content': :'verifyResponseContent'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'config_type': :'String',
        'is_failure_retried': :'BOOLEAN',
        'dns_configuration': :'OCI::ApmSynthetics::Models::DnsConfiguration',
        'ftp_protocol': :'String',
        'ftp_request_type': :'String',
        'is_active_mode': :'BOOLEAN',
        'ftp_basic_authentication_details': :'OCI::ApmSynthetics::Models::BasicAuthenticationDetails',
        'download_size_limit_in_bytes': :'Integer',
        'upload_file_size_in_bytes': :'Integer',
        'network_configuration': :'OCI::ApmSynthetics::Models::NetworkConfiguration',
        'verify_response_codes': :'Array<String>',
        'verify_response_content': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_failure_retried The value to assign to the {OCI::ApmSynthetics::Models::MonitorConfiguration#is_failure_retried #is_failure_retried} proprety
    # @option attributes [OCI::ApmSynthetics::Models::DnsConfiguration] :dns_configuration The value to assign to the {OCI::ApmSynthetics::Models::MonitorConfiguration#dns_configuration #dns_configuration} proprety
    # @option attributes [String] :ftp_protocol The value to assign to the {#ftp_protocol} property
    # @option attributes [String] :ftp_request_type The value to assign to the {#ftp_request_type} property
    # @option attributes [BOOLEAN] :is_active_mode The value to assign to the {#is_active_mode} property
    # @option attributes [OCI::ApmSynthetics::Models::BasicAuthenticationDetails] :ftp_basic_authentication_details The value to assign to the {#ftp_basic_authentication_details} property
    # @option attributes [Integer] :download_size_limit_in_bytes The value to assign to the {#download_size_limit_in_bytes} property
    # @option attributes [Integer] :upload_file_size_in_bytes The value to assign to the {#upload_file_size_in_bytes} property
    # @option attributes [OCI::ApmSynthetics::Models::NetworkConfiguration] :network_configuration The value to assign to the {#network_configuration} property
    # @option attributes [Array<String>] :verify_response_codes The value to assign to the {#verify_response_codes} property
    # @option attributes [String] :verify_response_content The value to assign to the {#verify_response_content} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['configType'] = 'FTP_CONFIG'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.ftp_protocol = attributes[:'ftpProtocol'] if attributes[:'ftpProtocol']

      raise 'You cannot provide both :ftpProtocol and :ftp_protocol' if attributes.key?(:'ftpProtocol') && attributes.key?(:'ftp_protocol')

      self.ftp_protocol = attributes[:'ftp_protocol'] if attributes[:'ftp_protocol']

      self.ftp_request_type = attributes[:'ftpRequestType'] if attributes[:'ftpRequestType']

      raise 'You cannot provide both :ftpRequestType and :ftp_request_type' if attributes.key?(:'ftpRequestType') && attributes.key?(:'ftp_request_type')

      self.ftp_request_type = attributes[:'ftp_request_type'] if attributes[:'ftp_request_type']

      self.is_active_mode = attributes[:'isActiveMode'] unless attributes[:'isActiveMode'].nil?
      self.is_active_mode = false if is_active_mode.nil? && !attributes.key?(:'isActiveMode') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isActiveMode and :is_active_mode' if attributes.key?(:'isActiveMode') && attributes.key?(:'is_active_mode')

      self.is_active_mode = attributes[:'is_active_mode'] unless attributes[:'is_active_mode'].nil?
      self.is_active_mode = false if is_active_mode.nil? && !attributes.key?(:'isActiveMode') && !attributes.key?(:'is_active_mode') # rubocop:disable Style/StringLiterals

      self.ftp_basic_authentication_details = attributes[:'ftpBasicAuthenticationDetails'] if attributes[:'ftpBasicAuthenticationDetails']

      raise 'You cannot provide both :ftpBasicAuthenticationDetails and :ftp_basic_authentication_details' if attributes.key?(:'ftpBasicAuthenticationDetails') && attributes.key?(:'ftp_basic_authentication_details')

      self.ftp_basic_authentication_details = attributes[:'ftp_basic_authentication_details'] if attributes[:'ftp_basic_authentication_details']

      self.download_size_limit_in_bytes = attributes[:'downloadSizeLimitInBytes'] if attributes[:'downloadSizeLimitInBytes']

      raise 'You cannot provide both :downloadSizeLimitInBytes and :download_size_limit_in_bytes' if attributes.key?(:'downloadSizeLimitInBytes') && attributes.key?(:'download_size_limit_in_bytes')

      self.download_size_limit_in_bytes = attributes[:'download_size_limit_in_bytes'] if attributes[:'download_size_limit_in_bytes']

      self.upload_file_size_in_bytes = attributes[:'uploadFileSizeInBytes'] if attributes[:'uploadFileSizeInBytes']

      raise 'You cannot provide both :uploadFileSizeInBytes and :upload_file_size_in_bytes' if attributes.key?(:'uploadFileSizeInBytes') && attributes.key?(:'upload_file_size_in_bytes')

      self.upload_file_size_in_bytes = attributes[:'upload_file_size_in_bytes'] if attributes[:'upload_file_size_in_bytes']

      self.network_configuration = attributes[:'networkConfiguration'] if attributes[:'networkConfiguration']

      raise 'You cannot provide both :networkConfiguration and :network_configuration' if attributes.key?(:'networkConfiguration') && attributes.key?(:'network_configuration')

      self.network_configuration = attributes[:'network_configuration'] if attributes[:'network_configuration']

      self.verify_response_codes = attributes[:'verifyResponseCodes'] if attributes[:'verifyResponseCodes']

      raise 'You cannot provide both :verifyResponseCodes and :verify_response_codes' if attributes.key?(:'verifyResponseCodes') && attributes.key?(:'verify_response_codes')

      self.verify_response_codes = attributes[:'verify_response_codes'] if attributes[:'verify_response_codes']

      self.verify_response_content = attributes[:'verifyResponseContent'] if attributes[:'verifyResponseContent']

      raise 'You cannot provide both :verifyResponseContent and :verify_response_content' if attributes.key?(:'verifyResponseContent') && attributes.key?(:'verify_response_content')

      self.verify_response_content = attributes[:'verify_response_content'] if attributes[:'verify_response_content']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ftp_protocol Object to be assigned
    def ftp_protocol=(ftp_protocol)
      # rubocop:disable Style/ConditionalAssignment
      if ftp_protocol && !FTP_PROTOCOL_ENUM.include?(ftp_protocol)
        OCI.logger.debug("Unknown value for 'ftp_protocol' [" + ftp_protocol + "]. Mapping to 'FTP_PROTOCOL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @ftp_protocol = FTP_PROTOCOL_UNKNOWN_ENUM_VALUE
      else
        @ftp_protocol = ftp_protocol
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ftp_request_type Object to be assigned
    def ftp_request_type=(ftp_request_type)
      # rubocop:disable Style/ConditionalAssignment
      if ftp_request_type && !FTP_REQUEST_TYPE_ENUM.include?(ftp_request_type)
        OCI.logger.debug("Unknown value for 'ftp_request_type' [" + ftp_request_type + "]. Mapping to 'FTP_REQUEST_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @ftp_request_type = FTP_REQUEST_TYPE_UNKNOWN_ENUM_VALUE
      else
        @ftp_request_type = ftp_request_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        config_type == other.config_type &&
        is_failure_retried == other.is_failure_retried &&
        dns_configuration == other.dns_configuration &&
        ftp_protocol == other.ftp_protocol &&
        ftp_request_type == other.ftp_request_type &&
        is_active_mode == other.is_active_mode &&
        ftp_basic_authentication_details == other.ftp_basic_authentication_details &&
        download_size_limit_in_bytes == other.download_size_limit_in_bytes &&
        upload_file_size_in_bytes == other.upload_file_size_in_bytes &&
        network_configuration == other.network_configuration &&
        verify_response_codes == other.verify_response_codes &&
        verify_response_content == other.verify_response_content
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [config_type, is_failure_retried, dns_configuration, ftp_protocol, ftp_request_type, is_active_mode, ftp_basic_authentication_details, download_size_limit_in_bytes, upload_file_size_in_bytes, network_configuration, verify_response_codes, verify_response_content].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
