# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210630
require 'date'
require_relative 'merge_pull_request_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about the merge.
  class Devops::Models::ExecuteMergePullRequestDetails < Devops::Models::MergePullRequestDetails
    MERGE_STRATEGY_ENUM = [
      MERGE_STRATEGY_MERGE_COMMIT = 'MERGE_COMMIT'.freeze,
      MERGE_STRATEGY_FAST_FORWARD = 'FAST_FORWARD'.freeze,
      MERGE_STRATEGY_FAST_FORWARD_ONLY = 'FAST_FORWARD_ONLY'.freeze,
      MERGE_STRATEGY_REBASE_AND_MERGE = 'REBASE_AND_MERGE'.freeze,
      MERGE_STRATEGY_REBASE_AND_FAST_FORWARD = 'REBASE_AND_FAST_FORWARD'.freeze,
      MERGE_STRATEGY_SQUASH = 'SQUASH'.freeze,
      MERGE_STRATEGY_SQUASH_FAST_FORWARD_ONLY = 'SQUASH_FAST_FORWARD_ONLY'.freeze
    ].freeze

    POST_MERGE_ACTION_ENUM = [
      POST_MERGE_ACTION_DELETE_SOURCE_BRANCH = 'DELETE_SOURCE_BRANCH'.freeze,
      POST_MERGE_ACTION_KEEP_SOURCE_BRANCH = 'KEEP_SOURCE_BRANCH'.freeze
    ].freeze

    # **[Required]** The commit message to be shown for this pull request in the destination branch after merge is done.
    # @return [String]
    attr_accessor :commit_message

    # **[Required]** the strategy of merging.
    # @return [String]
    attr_reader :merge_strategy

    # What needs to happen after the merge is done successfully.
    # @return [String]
    attr_reader :post_merge_action

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'action_type': :'actionType',
        'commit_message': :'commitMessage',
        'merge_strategy': :'mergeStrategy',
        'post_merge_action': :'postMergeAction'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'action_type': :'String',
        'commit_message': :'String',
        'merge_strategy': :'String',
        'post_merge_action': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :commit_message The value to assign to the {#commit_message} property
    # @option attributes [String] :merge_strategy The value to assign to the {#merge_strategy} property
    # @option attributes [String] :post_merge_action The value to assign to the {#post_merge_action} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['actionType'] = 'EXECUTE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.commit_message = attributes[:'commitMessage'] if attributes[:'commitMessage']

      raise 'You cannot provide both :commitMessage and :commit_message' if attributes.key?(:'commitMessage') && attributes.key?(:'commit_message')

      self.commit_message = attributes[:'commit_message'] if attributes[:'commit_message']

      self.merge_strategy = attributes[:'mergeStrategy'] if attributes[:'mergeStrategy']

      raise 'You cannot provide both :mergeStrategy and :merge_strategy' if attributes.key?(:'mergeStrategy') && attributes.key?(:'merge_strategy')

      self.merge_strategy = attributes[:'merge_strategy'] if attributes[:'merge_strategy']

      self.post_merge_action = attributes[:'postMergeAction'] if attributes[:'postMergeAction']
      self.post_merge_action = "KEEP_SOURCE_BRANCH" if post_merge_action.nil? && !attributes.key?(:'postMergeAction') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :postMergeAction and :post_merge_action' if attributes.key?(:'postMergeAction') && attributes.key?(:'post_merge_action')

      self.post_merge_action = attributes[:'post_merge_action'] if attributes[:'post_merge_action']
      self.post_merge_action = "KEEP_SOURCE_BRANCH" if post_merge_action.nil? && !attributes.key?(:'postMergeAction') && !attributes.key?(:'post_merge_action') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] merge_strategy Object to be assigned
    def merge_strategy=(merge_strategy)
      raise "Invalid value for 'merge_strategy': this must be one of the values in MERGE_STRATEGY_ENUM." if merge_strategy && !MERGE_STRATEGY_ENUM.include?(merge_strategy)

      @merge_strategy = merge_strategy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] post_merge_action Object to be assigned
    def post_merge_action=(post_merge_action)
      raise "Invalid value for 'post_merge_action': this must be one of the values in POST_MERGE_ACTION_ENUM." if post_merge_action && !POST_MERGE_ACTION_ENUM.include?(post_merge_action)

      @post_merge_action = post_merge_action
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        action_type == other.action_type &&
        commit_message == other.commit_message &&
        merge_strategy == other.merge_strategy &&
        post_merge_action == other.post_merge_action
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [action_type, commit_message, merge_strategy, post_merge_action].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
