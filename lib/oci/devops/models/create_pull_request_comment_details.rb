# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210630
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about new Comment.
  class Devops::Models::CreatePullRequestCommentDetails
    # **[Required]** Content of the Comment.
    # @return [String]
    attr_accessor :data

    # ID of parent Comment
    # @return [String]
    attr_accessor :parent_id

    # File path in the commit
    # @return [String]
    attr_accessor :file_path

    # Commit SHA
    # @return [String]
    attr_accessor :commit_id

    # File path in the target commit
    # @return [String]
    attr_accessor :file_type

    # Line number in the file
    # @return [Integer]
    attr_accessor :line_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'data': :'data',
        'parent_id': :'parentId',
        'file_path': :'filePath',
        'commit_id': :'commitId',
        'file_type': :'fileType',
        'line_number': :'lineNumber'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'data': :'String',
        'parent_id': :'String',
        'file_path': :'String',
        'commit_id': :'String',
        'file_type': :'String',
        'line_number': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :data The value to assign to the {#data} property
    # @option attributes [String] :parent_id The value to assign to the {#parent_id} property
    # @option attributes [String] :file_path The value to assign to the {#file_path} property
    # @option attributes [String] :commit_id The value to assign to the {#commit_id} property
    # @option attributes [String] :file_type The value to assign to the {#file_type} property
    # @option attributes [Integer] :line_number The value to assign to the {#line_number} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.data = attributes[:'data'] if attributes[:'data']

      self.parent_id = attributes[:'parentId'] if attributes[:'parentId']

      raise 'You cannot provide both :parentId and :parent_id' if attributes.key?(:'parentId') && attributes.key?(:'parent_id')

      self.parent_id = attributes[:'parent_id'] if attributes[:'parent_id']

      self.file_path = attributes[:'filePath'] if attributes[:'filePath']

      raise 'You cannot provide both :filePath and :file_path' if attributes.key?(:'filePath') && attributes.key?(:'file_path')

      self.file_path = attributes[:'file_path'] if attributes[:'file_path']

      self.commit_id = attributes[:'commitId'] if attributes[:'commitId']

      raise 'You cannot provide both :commitId and :commit_id' if attributes.key?(:'commitId') && attributes.key?(:'commit_id')

      self.commit_id = attributes[:'commit_id'] if attributes[:'commit_id']

      self.file_type = attributes[:'fileType'] if attributes[:'fileType']

      raise 'You cannot provide both :fileType and :file_type' if attributes.key?(:'fileType') && attributes.key?(:'file_type')

      self.file_type = attributes[:'file_type'] if attributes[:'file_type']

      self.line_number = attributes[:'lineNumber'] if attributes[:'lineNumber']

      raise 'You cannot provide both :lineNumber and :line_number' if attributes.key?(:'lineNumber') && attributes.key?(:'line_number')

      self.line_number = attributes[:'line_number'] if attributes[:'line_number']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        data == other.data &&
        parent_id == other.parent_id &&
        file_path == other.file_path &&
        commit_id == other.commit_id &&
        file_type == other.file_type &&
        line_number == other.line_number
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [data, parent_id, file_path, commit_id, file_type, line_number].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
