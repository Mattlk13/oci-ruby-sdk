# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The metrics details of a repository resource.
  class Devops::Models::RepositoryMetricSummary
    METRIC_NAME_ENUM = [
      METRIC_NAME_COMMITS = 'COMMITS'.freeze,
      METRIC_NAME_LINES_ADDED = 'LINES_ADDED'.freeze,
      METRIC_NAME_LINES_DELETED = 'LINES_DELETED'.freeze,
      METRIC_NAME_PULL_REQUEST_CREATED = 'PULL_REQUEST_CREATED'.freeze,
      METRIC_NAME_PULL_REQUEST_MERGED = 'PULL_REQUEST_MERGED'.freeze,
      METRIC_NAME_PULL_REQUEST_DECLINED = 'PULL_REQUEST_DECLINED'.freeze,
      METRIC_NAME_PULL_REQUEST_REVIEW_START_DURATION_IN_DAYS = 'PULL_REQUEST_REVIEW_START_DURATION_IN_DAYS'.freeze,
      METRIC_NAME_PULL_REQUEST_REVIEW_DURATION_IN_DAYS = 'PULL_REQUEST_REVIEW_DURATION_IN_DAYS'.freeze,
      METRIC_NAME_PULL_REQUEST_APPROVED = 'PULL_REQUEST_APPROVED'.freeze,
      METRIC_NAME_PULL_REQUEST_REVIEWED = 'PULL_REQUEST_REVIEWED'.freeze,
      METRIC_NAME_PULL_REQUEST_COMMENTS = 'PULL_REQUEST_COMMENTS'.freeze,
      METRIC_NAME_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Type of metric
    # @return [String]
    attr_reader :metric_name

    # The duration of the returned aggregated data in seconds.
    # @return [Integer]
    attr_accessor :duration_in_seconds

    # The qualifiers provided in the definition of the returned metric.
    # @return [Hash<String, String>]
    attr_accessor :dimensions

    # The start time associated with the value of the metric.
    # @return [Integer]
    attr_accessor :start_timestamp_in_epoch_seconds

    # Represents the total number of the metric being calculated.
    # @return [Float]
    attr_accessor :count

    # Represents the total duration in days calculated corresponding to the total no. of PRs.
    # This is used only for \"PULL_REQUEST_REVIEW_START_DURATION_IN_DAYS\" and \"PULL_REQUEST_REVIEW_DURATION_IN_DAYS\" metrics.
    #
    # @return [Float]
    attr_accessor :sum

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'metricName',
        'duration_in_seconds': :'durationInSeconds',
        'dimensions': :'dimensions',
        'start_timestamp_in_epoch_seconds': :'startTimestampInEpochSeconds',
        'count': :'count',
        'sum': :'sum'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'String',
        'duration_in_seconds': :'Integer',
        'dimensions': :'Hash<String, String>',
        'start_timestamp_in_epoch_seconds': :'Integer',
        'count': :'Float',
        'sum': :'Float'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :metric_name The value to assign to the {#metric_name} property
    # @option attributes [Integer] :duration_in_seconds The value to assign to the {#duration_in_seconds} property
    # @option attributes [Hash<String, String>] :dimensions The value to assign to the {#dimensions} property
    # @option attributes [Integer] :start_timestamp_in_epoch_seconds The value to assign to the {#start_timestamp_in_epoch_seconds} property
    # @option attributes [Float] :count The value to assign to the {#count} property
    # @option attributes [Float] :sum The value to assign to the {#sum} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.metric_name = attributes[:'metricName'] if attributes[:'metricName']

      raise 'You cannot provide both :metricName and :metric_name' if attributes.key?(:'metricName') && attributes.key?(:'metric_name')

      self.metric_name = attributes[:'metric_name'] if attributes[:'metric_name']

      self.duration_in_seconds = attributes[:'durationInSeconds'] if attributes[:'durationInSeconds']

      raise 'You cannot provide both :durationInSeconds and :duration_in_seconds' if attributes.key?(:'durationInSeconds') && attributes.key?(:'duration_in_seconds')

      self.duration_in_seconds = attributes[:'duration_in_seconds'] if attributes[:'duration_in_seconds']

      self.dimensions = attributes[:'dimensions'] if attributes[:'dimensions']

      self.start_timestamp_in_epoch_seconds = attributes[:'startTimestampInEpochSeconds'] if attributes[:'startTimestampInEpochSeconds']

      raise 'You cannot provide both :startTimestampInEpochSeconds and :start_timestamp_in_epoch_seconds' if attributes.key?(:'startTimestampInEpochSeconds') && attributes.key?(:'start_timestamp_in_epoch_seconds')

      self.start_timestamp_in_epoch_seconds = attributes[:'start_timestamp_in_epoch_seconds'] if attributes[:'start_timestamp_in_epoch_seconds']

      self.count = attributes[:'count'] if attributes[:'count']

      self.sum = attributes[:'sum'] if attributes[:'sum']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metric_name Object to be assigned
    def metric_name=(metric_name)
      # rubocop:disable Style/ConditionalAssignment
      if metric_name && !METRIC_NAME_ENUM.include?(metric_name)
        OCI.logger.debug("Unknown value for 'metric_name' [" + metric_name + "]. Mapping to 'METRIC_NAME_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @metric_name = METRIC_NAME_UNKNOWN_ENUM_VALUE
      else
        @metric_name = metric_name
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        metric_name == other.metric_name &&
        duration_in_seconds == other.duration_in_seconds &&
        dimensions == other.dimensions &&
        start_timestamp_in_epoch_seconds == other.start_timestamp_in_epoch_seconds &&
        count == other.count &&
        sum == other.sum
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [metric_name, duration_in_seconds, dimensions, start_timestamp_in_epoch_seconds, count, sum].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
