# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Pull Request containing the diff between a review branch and a destination branch
  class Devops::Models::PullRequest
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_DETAILS_ENUM = [
      LIFECYCLE_DETAILS_OPEN = 'OPEN'.freeze,
      LIFECYCLE_DETAILS_CONFLICT = 'CONFLICT'.freeze,
      LIFECYCLE_DETAILS_CLOSED = 'CLOSED'.freeze,
      LIFECYCLE_DETAILS_MERGING = 'MERGING'.freeze,
      LIFECYCLE_DETAILS_MERGED = 'MERGED'.freeze,
      LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique identifier that is immutable on creation
    # @return [String]
    attr_accessor :id

    # **[Required]** PullRequest title, can be renamed
    # @return [String]
    attr_accessor :display_name

    # Details of the pull request. Avoid entering confidential information.
    # @return [String]
    attr_accessor :description

    # **[Required]** Compartment Identifier
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** DevOps Repository Identifier tells which repository this pull request belongs to
    # @return [String]
    attr_accessor :repository_id

    # **[Required]** The source branch which contains the changes to be reviewed. Example: \"feature/JIRA-123\"
    # @return [String]
    attr_accessor :source_branch

    # **[Required]** The destination branch against which the changes are to be reviewed. Example: \"main\".
    # @return [String]
    attr_accessor :destination_branch

    # The source branch commit ID when the Pull Request status was last changed to merged or closed
    # @return [String]
    attr_accessor :source_commit_id_at_termination

    # The merge base commit ID when the Pull Request status was last changed to merged or closed
    # @return [String]
    attr_accessor :merge_base_commit_id_at_termination

    # **[Required]** The time the PullRequest was created. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_created

    # The time the PullRequest was updated. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** The current state of the PullRequest.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The status of the Pull Request.
    # @return [String]
    attr_reader :lifecycle_details

    # List of Reviewers.
    # @return [Array<OCI::Devops::Models::Reviewer>]
    attr_accessor :reviewers

    # @return [OCI::Devops::Models::MergeCheckCollection]
    attr_accessor :merge_checks

    # This attribute is required.
    # @return [OCI::Devops::Models::PrincipalDetails]
    attr_accessor :created_by

    # @return [OCI::Devops::Models::PrincipalDetails]
    attr_accessor :merged_by

    # The OCID of the forked repository that will act as the source of the changes to be included in the pull request against the parent repository.
    # @return [String]
    attr_accessor :source_repository_id

    # **[Required]** The total number of comments on the pull request.
    # @return [Integer]
    attr_accessor :total_comments

    # **[Required]** The total number of reviewers on the pull request.
    # @return [Integer]
    attr_accessor :total_reviewers

    # **[Required]** Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm). Example: `{\"bar-key\": \"value\"}`
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm). Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # **[Required]** Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm). Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'description': :'description',
        'compartment_id': :'compartmentId',
        'repository_id': :'repositoryId',
        'source_branch': :'sourceBranch',
        'destination_branch': :'destinationBranch',
        'source_commit_id_at_termination': :'sourceCommitIdAtTermination',
        'merge_base_commit_id_at_termination': :'mergeBaseCommitIdAtTermination',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'reviewers': :'reviewers',
        'merge_checks': :'mergeChecks',
        'created_by': :'createdBy',
        'merged_by': :'mergedBy',
        'source_repository_id': :'sourceRepositoryId',
        'total_comments': :'totalComments',
        'total_reviewers': :'totalReviewers',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'description': :'String',
        'compartment_id': :'String',
        'repository_id': :'String',
        'source_branch': :'String',
        'destination_branch': :'String',
        'source_commit_id_at_termination': :'String',
        'merge_base_commit_id_at_termination': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'reviewers': :'Array<OCI::Devops::Models::Reviewer>',
        'merge_checks': :'OCI::Devops::Models::MergeCheckCollection',
        'created_by': :'OCI::Devops::Models::PrincipalDetails',
        'merged_by': :'OCI::Devops::Models::PrincipalDetails',
        'source_repository_id': :'String',
        'total_comments': :'Integer',
        'total_reviewers': :'Integer',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :repository_id The value to assign to the {#repository_id} property
    # @option attributes [String] :source_branch The value to assign to the {#source_branch} property
    # @option attributes [String] :destination_branch The value to assign to the {#destination_branch} property
    # @option attributes [String] :source_commit_id_at_termination The value to assign to the {#source_commit_id_at_termination} property
    # @option attributes [String] :merge_base_commit_id_at_termination The value to assign to the {#merge_base_commit_id_at_termination} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [Array<OCI::Devops::Models::Reviewer>] :reviewers The value to assign to the {#reviewers} property
    # @option attributes [OCI::Devops::Models::MergeCheckCollection] :merge_checks The value to assign to the {#merge_checks} property
    # @option attributes [OCI::Devops::Models::PrincipalDetails] :created_by The value to assign to the {#created_by} property
    # @option attributes [OCI::Devops::Models::PrincipalDetails] :merged_by The value to assign to the {#merged_by} property
    # @option attributes [String] :source_repository_id The value to assign to the {#source_repository_id} property
    # @option attributes [Integer] :total_comments The value to assign to the {#total_comments} property
    # @option attributes [Integer] :total_reviewers The value to assign to the {#total_reviewers} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.repository_id = attributes[:'repositoryId'] if attributes[:'repositoryId']

      raise 'You cannot provide both :repositoryId and :repository_id' if attributes.key?(:'repositoryId') && attributes.key?(:'repository_id')

      self.repository_id = attributes[:'repository_id'] if attributes[:'repository_id']

      self.source_branch = attributes[:'sourceBranch'] if attributes[:'sourceBranch']

      raise 'You cannot provide both :sourceBranch and :source_branch' if attributes.key?(:'sourceBranch') && attributes.key?(:'source_branch')

      self.source_branch = attributes[:'source_branch'] if attributes[:'source_branch']

      self.destination_branch = attributes[:'destinationBranch'] if attributes[:'destinationBranch']

      raise 'You cannot provide both :destinationBranch and :destination_branch' if attributes.key?(:'destinationBranch') && attributes.key?(:'destination_branch')

      self.destination_branch = attributes[:'destination_branch'] if attributes[:'destination_branch']

      self.source_commit_id_at_termination = attributes[:'sourceCommitIdAtTermination'] if attributes[:'sourceCommitIdAtTermination']

      raise 'You cannot provide both :sourceCommitIdAtTermination and :source_commit_id_at_termination' if attributes.key?(:'sourceCommitIdAtTermination') && attributes.key?(:'source_commit_id_at_termination')

      self.source_commit_id_at_termination = attributes[:'source_commit_id_at_termination'] if attributes[:'source_commit_id_at_termination']

      self.merge_base_commit_id_at_termination = attributes[:'mergeBaseCommitIdAtTermination'] if attributes[:'mergeBaseCommitIdAtTermination']

      raise 'You cannot provide both :mergeBaseCommitIdAtTermination and :merge_base_commit_id_at_termination' if attributes.key?(:'mergeBaseCommitIdAtTermination') && attributes.key?(:'merge_base_commit_id_at_termination')

      self.merge_base_commit_id_at_termination = attributes[:'merge_base_commit_id_at_termination'] if attributes[:'merge_base_commit_id_at_termination']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.reviewers = attributes[:'reviewers'] if attributes[:'reviewers']

      self.merge_checks = attributes[:'mergeChecks'] if attributes[:'mergeChecks']

      raise 'You cannot provide both :mergeChecks and :merge_checks' if attributes.key?(:'mergeChecks') && attributes.key?(:'merge_checks')

      self.merge_checks = attributes[:'merge_checks'] if attributes[:'merge_checks']

      self.created_by = attributes[:'createdBy'] if attributes[:'createdBy']

      raise 'You cannot provide both :createdBy and :created_by' if attributes.key?(:'createdBy') && attributes.key?(:'created_by')

      self.created_by = attributes[:'created_by'] if attributes[:'created_by']

      self.merged_by = attributes[:'mergedBy'] if attributes[:'mergedBy']

      raise 'You cannot provide both :mergedBy and :merged_by' if attributes.key?(:'mergedBy') && attributes.key?(:'merged_by')

      self.merged_by = attributes[:'merged_by'] if attributes[:'merged_by']

      self.source_repository_id = attributes[:'sourceRepositoryId'] if attributes[:'sourceRepositoryId']

      raise 'You cannot provide both :sourceRepositoryId and :source_repository_id' if attributes.key?(:'sourceRepositoryId') && attributes.key?(:'source_repository_id')

      self.source_repository_id = attributes[:'source_repository_id'] if attributes[:'source_repository_id']

      self.total_comments = attributes[:'totalComments'] if attributes[:'totalComments']

      raise 'You cannot provide both :totalComments and :total_comments' if attributes.key?(:'totalComments') && attributes.key?(:'total_comments')

      self.total_comments = attributes[:'total_comments'] if attributes[:'total_comments']

      self.total_reviewers = attributes[:'totalReviewers'] if attributes[:'totalReviewers']

      raise 'You cannot provide both :totalReviewers and :total_reviewers' if attributes.key?(:'totalReviewers') && attributes.key?(:'total_reviewers')

      self.total_reviewers = attributes[:'total_reviewers'] if attributes[:'total_reviewers']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_details Object to be assigned
    def lifecycle_details=(lifecycle_details)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_details && !LIFECYCLE_DETAILS_ENUM.include?(lifecycle_details)
        OCI.logger.debug("Unknown value for 'lifecycle_details' [" + lifecycle_details + "]. Mapping to 'LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_details = LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_details = lifecycle_details
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        description == other.description &&
        compartment_id == other.compartment_id &&
        repository_id == other.repository_id &&
        source_branch == other.source_branch &&
        destination_branch == other.destination_branch &&
        source_commit_id_at_termination == other.source_commit_id_at_termination &&
        merge_base_commit_id_at_termination == other.merge_base_commit_id_at_termination &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        reviewers == other.reviewers &&
        merge_checks == other.merge_checks &&
        created_by == other.created_by &&
        merged_by == other.merged_by &&
        source_repository_id == other.source_repository_id &&
        total_comments == other.total_comments &&
        total_reviewers == other.total_reviewers &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, description, compartment_id, repository_id, source_branch, destination_branch, source_commit_id_at_termination, merge_base_commit_id_at_termination, time_created, time_updated, lifecycle_state, lifecycle_details, reviewers, merge_checks, created_by, merged_by, source_repository_id, total_comments, total_reviewers, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
