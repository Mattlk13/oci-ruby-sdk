# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of an activity record in a pull request
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class Devops::Models::PullRequestActivitySummary
    ACTIVITY_TYPE_ENUM = [
      ACTIVITY_TYPE_LIFECYCLE = 'LIFECYCLE'.freeze,
      ACTIVITY_TYPE_APPROVAL = 'APPROVAL'.freeze,
      ACTIVITY_TYPE_COMMIT = 'COMMIT'.freeze,
      ACTIVITY_TYPE_REVIEWER = 'REVIEWER'.freeze,
      ACTIVITY_TYPE_COMMENT = 'COMMENT'.freeze,
      ACTIVITY_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** activity identifier
    # @return [String]
    attr_accessor :id

    # This attribute is required.
    # @return [OCI::Devops::Models::PrincipalDetails]
    attr_accessor :principal

    # **[Required]** pullRequest OCID
    # @return [String]
    attr_accessor :pull_request_id

    # **[Required]** The time the action was performed. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_occurred

    # **[Required]** The type of activity performed
    # @return [String]
    attr_reader :activity_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'principal': :'principal',
        'pull_request_id': :'pullRequestId',
        'time_occurred': :'timeOccurred',
        'activity_type': :'activityType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'principal': :'OCI::Devops::Models::PrincipalDetails',
        'pull_request_id': :'String',
        'time_occurred': :'DateTime',
        'activity_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'activityType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::Devops::Models::CommitActivitySummary' if type == 'COMMIT'
      return 'OCI::Devops::Models::CommentActivitySummary' if type == 'COMMENT'
      return 'OCI::Devops::Models::ApprovalActivitySummary' if type == 'APPROVAL'
      return 'OCI::Devops::Models::ReviewerActivitySummary' if type == 'REVIEWER'
      return 'OCI::Devops::Models::PullRequestLifecycleActivitySummary' if type == 'LIFECYCLE'

      # TODO: Log a warning when the subtype is not found.
      'OCI::Devops::Models::PullRequestActivitySummary'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [OCI::Devops::Models::PrincipalDetails] :principal The value to assign to the {#principal} property
    # @option attributes [String] :pull_request_id The value to assign to the {#pull_request_id} property
    # @option attributes [DateTime] :time_occurred The value to assign to the {#time_occurred} property
    # @option attributes [String] :activity_type The value to assign to the {#activity_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.principal = attributes[:'principal'] if attributes[:'principal']

      self.pull_request_id = attributes[:'pullRequestId'] if attributes[:'pullRequestId']

      raise 'You cannot provide both :pullRequestId and :pull_request_id' if attributes.key?(:'pullRequestId') && attributes.key?(:'pull_request_id')

      self.pull_request_id = attributes[:'pull_request_id'] if attributes[:'pull_request_id']

      self.time_occurred = attributes[:'timeOccurred'] if attributes[:'timeOccurred']

      raise 'You cannot provide both :timeOccurred and :time_occurred' if attributes.key?(:'timeOccurred') && attributes.key?(:'time_occurred')

      self.time_occurred = attributes[:'time_occurred'] if attributes[:'time_occurred']

      self.activity_type = attributes[:'activityType'] if attributes[:'activityType']

      raise 'You cannot provide both :activityType and :activity_type' if attributes.key?(:'activityType') && attributes.key?(:'activity_type')

      self.activity_type = attributes[:'activity_type'] if attributes[:'activity_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] activity_type Object to be assigned
    def activity_type=(activity_type)
      # rubocop:disable Style/ConditionalAssignment
      if activity_type && !ACTIVITY_TYPE_ENUM.include?(activity_type)
        OCI.logger.debug("Unknown value for 'activity_type' [" + activity_type + "]. Mapping to 'ACTIVITY_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @activity_type = ACTIVITY_TYPE_UNKNOWN_ENUM_VALUE
      else
        @activity_type = activity_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        principal == other.principal &&
        pull_request_id == other.pull_request_id &&
        time_occurred == other.time_occurred &&
        activity_type == other.activity_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, principal, pull_request_id, time_occurred, activity_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
