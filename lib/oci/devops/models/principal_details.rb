# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The principal details
  class Devops::Models::PrincipalDetails
    PRINCIPAL_TYPE_ENUM = [
      PRINCIPAL_TYPE_SERVICE = 'SERVICE'.freeze,
      PRINCIPAL_TYPE_USER = 'USER'.freeze,
      PRINCIPAL_TYPE_INSTANCE = 'INSTANCE'.freeze,
      PRINCIPAL_TYPE_RESOURCE = 'RESOURCE'.freeze,
      PRINCIPAL_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PRINCIPAL_STATE_ENUM = [
      PRINCIPAL_STATE_ACTIVE = 'ACTIVE'.freeze,
      PRINCIPAL_STATE_INACTIVE = 'INACTIVE'.freeze,
      PRINCIPAL_STATE_SUPPRESSED = 'SUPPRESSED'.freeze,
      PRINCIPAL_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** the OCID of the principal
    # @return [String]
    attr_accessor :principal_id

    # the name of the principal
    # @return [String]
    attr_accessor :principal_name

    # the type of principal
    # @return [String]
    attr_reader :principal_type

    # The state of the principal, it can be active or inactive or suppressed for emails
    # @return [String]
    attr_reader :principal_state

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'principal_id': :'principalId',
        'principal_name': :'principalName',
        'principal_type': :'principalType',
        'principal_state': :'principalState'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'principal_id': :'String',
        'principal_name': :'String',
        'principal_type': :'String',
        'principal_state': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :principal_id The value to assign to the {#principal_id} property
    # @option attributes [String] :principal_name The value to assign to the {#principal_name} property
    # @option attributes [String] :principal_type The value to assign to the {#principal_type} property
    # @option attributes [String] :principal_state The value to assign to the {#principal_state} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.principal_id = attributes[:'principalId'] if attributes[:'principalId']

      raise 'You cannot provide both :principalId and :principal_id' if attributes.key?(:'principalId') && attributes.key?(:'principal_id')

      self.principal_id = attributes[:'principal_id'] if attributes[:'principal_id']

      self.principal_name = attributes[:'principalName'] if attributes[:'principalName']

      raise 'You cannot provide both :principalName and :principal_name' if attributes.key?(:'principalName') && attributes.key?(:'principal_name')

      self.principal_name = attributes[:'principal_name'] if attributes[:'principal_name']

      self.principal_type = attributes[:'principalType'] if attributes[:'principalType']

      raise 'You cannot provide both :principalType and :principal_type' if attributes.key?(:'principalType') && attributes.key?(:'principal_type')

      self.principal_type = attributes[:'principal_type'] if attributes[:'principal_type']

      self.principal_state = attributes[:'principalState'] if attributes[:'principalState']

      raise 'You cannot provide both :principalState and :principal_state' if attributes.key?(:'principalState') && attributes.key?(:'principal_state')

      self.principal_state = attributes[:'principal_state'] if attributes[:'principal_state']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] principal_type Object to be assigned
    def principal_type=(principal_type)
      # rubocop:disable Style/ConditionalAssignment
      if principal_type && !PRINCIPAL_TYPE_ENUM.include?(principal_type)
        OCI.logger.debug("Unknown value for 'principal_type' [" + principal_type + "]. Mapping to 'PRINCIPAL_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @principal_type = PRINCIPAL_TYPE_UNKNOWN_ENUM_VALUE
      else
        @principal_type = principal_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] principal_state Object to be assigned
    def principal_state=(principal_state)
      # rubocop:disable Style/ConditionalAssignment
      if principal_state && !PRINCIPAL_STATE_ENUM.include?(principal_state)
        OCI.logger.debug("Unknown value for 'principal_state' [" + principal_state + "]. Mapping to 'PRINCIPAL_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @principal_state = PRINCIPAL_STATE_UNKNOWN_ENUM_VALUE
      else
        @principal_state = principal_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        principal_id == other.principal_id &&
        principal_name == other.principal_name &&
        principal_type == other.principal_type &&
        principal_state == other.principal_state
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [principal_id, principal_name, principal_type, principal_state].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
