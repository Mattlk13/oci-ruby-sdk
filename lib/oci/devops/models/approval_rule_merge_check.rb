# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210630
require 'date'
require 'logger'
require_relative 'merge_check'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The status of the approval rules.
  class Devops::Models::ApprovalRuleMergeCheck < Devops::Models::MergeCheck
    STATUS_ENUM = [
      STATUS_NEEDS_APPROVAL = 'NEEDS_APPROVAL'.freeze,
      STATUS_SUCCEEDED = 'SUCCEEDED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LEVEL_ENUM = [
      LEVEL_PROJECT = 'PROJECT'.freeze,
      LEVEL_REPOSITORY = 'REPOSITORY'.freeze,
      LEVEL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The name of the rule.
    # @return [String]
    attr_accessor :rule_name

    # The status of the approval rule.
    # @return [String]
    attr_reader :status

    # The number of total approvals needed.
    # @return [Integer]
    attr_accessor :total_approval_count

    # The current number of approvals.
    # @return [Integer]
    attr_accessor :current_approval_count

    # The list of default reviewers.
    # @return [Array<OCI::Devops::Models::PrincipalDetails>]
    attr_accessor :reviewers

    # The level of rule.
    # @return [String]
    attr_reader :level

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'type',
        'rule_name': :'ruleName',
        'status': :'status',
        'total_approval_count': :'totalApprovalCount',
        'current_approval_count': :'currentApprovalCount',
        'reviewers': :'reviewers',
        'level': :'level'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'String',
        'rule_name': :'String',
        'status': :'String',
        'total_approval_count': :'Integer',
        'current_approval_count': :'Integer',
        'reviewers': :'Array<OCI::Devops::Models::PrincipalDetails>',
        'level': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :rule_name The value to assign to the {#rule_name} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [Integer] :total_approval_count The value to assign to the {#total_approval_count} property
    # @option attributes [Integer] :current_approval_count The value to assign to the {#current_approval_count} property
    # @option attributes [Array<OCI::Devops::Models::PrincipalDetails>] :reviewers The value to assign to the {#reviewers} property
    # @option attributes [String] :level The value to assign to the {#level} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['type'] = 'APPROVAL_RULE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.rule_name = attributes[:'ruleName'] if attributes[:'ruleName']

      raise 'You cannot provide both :ruleName and :rule_name' if attributes.key?(:'ruleName') && attributes.key?(:'rule_name')

      self.rule_name = attributes[:'rule_name'] if attributes[:'rule_name']

      self.status = attributes[:'status'] if attributes[:'status']

      self.total_approval_count = attributes[:'totalApprovalCount'] if attributes[:'totalApprovalCount']

      raise 'You cannot provide both :totalApprovalCount and :total_approval_count' if attributes.key?(:'totalApprovalCount') && attributes.key?(:'total_approval_count')

      self.total_approval_count = attributes[:'total_approval_count'] if attributes[:'total_approval_count']

      self.current_approval_count = attributes[:'currentApprovalCount'] if attributes[:'currentApprovalCount']

      raise 'You cannot provide both :currentApprovalCount and :current_approval_count' if attributes.key?(:'currentApprovalCount') && attributes.key?(:'current_approval_count')

      self.current_approval_count = attributes[:'current_approval_count'] if attributes[:'current_approval_count']

      self.reviewers = attributes[:'reviewers'] if attributes[:'reviewers']

      self.level = attributes[:'level'] if attributes[:'level']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level Object to be assigned
    def level=(level)
      # rubocop:disable Style/ConditionalAssignment
      if level && !LEVEL_ENUM.include?(level)
        OCI.logger.debug("Unknown value for 'level' [" + level + "]. Mapping to 'LEVEL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @level = LEVEL_UNKNOWN_ENUM_VALUE
      else
        @level = level
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        rule_name == other.rule_name &&
        status == other.status &&
        total_approval_count == other.total_approval_count &&
        current_approval_count == other.current_approval_count &&
        reviewers == other.reviewers &&
        level == other.level
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, rule_name, status, total_approval_count, current_approval_count, reviewers, level].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
