# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # An administrative feature that allows you to restrict root level access from clients that try to access your Lustre file system as root.
  class LustreFileStorage::Models::RootSquashConfiguration
    IDENTITY_SQUASH_ENUM = [
      IDENTITY_SQUASH_NONE = 'NONE'.freeze,
      IDENTITY_SQUASH_ROOT = 'ROOT'.freeze,
      IDENTITY_SQUASH_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Used when clients accessing the Lustre file system have their UID and GID remapped to
    # `squashUid` and `squashGid`. If `ROOT`, only the root user and group (UID/GID 0) are remapped;
    # if `NONE`, no remapping is done. If unspecified, defaults to `NONE`.
    #
    # @return [String]
    attr_reader :identity_squash

    # The UID value to remap to when squashing a client UID. See
    # `identitySquash` for more details. If unspecified, defaults
    # to `65534`.
    #
    # @return [Integer]
    attr_accessor :squash_uid

    # The GID value to remap to when squashing a client GID. See
    # `identitySquash` for more details. If unspecified, defaults
    # to `65534`.
    #
    # @return [Integer]
    attr_accessor :squash_gid

    # A list of NIDs allowed with this lustre file system not to be squashed.
    # A maximum of 10 is allowed.
    #
    # @return [Array<String>]
    attr_accessor :client_exceptions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'identity_squash': :'identitySquash',
        'squash_uid': :'squashUid',
        'squash_gid': :'squashGid',
        'client_exceptions': :'clientExceptions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'identity_squash': :'String',
        'squash_uid': :'Integer',
        'squash_gid': :'Integer',
        'client_exceptions': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :identity_squash The value to assign to the {#identity_squash} property
    # @option attributes [Integer] :squash_uid The value to assign to the {#squash_uid} property
    # @option attributes [Integer] :squash_gid The value to assign to the {#squash_gid} property
    # @option attributes [Array<String>] :client_exceptions The value to assign to the {#client_exceptions} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.identity_squash = attributes[:'identitySquash'] if attributes[:'identitySquash']
      self.identity_squash = "NONE" if identity_squash.nil? && !attributes.key?(:'identitySquash') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :identitySquash and :identity_squash' if attributes.key?(:'identitySquash') && attributes.key?(:'identity_squash')

      self.identity_squash = attributes[:'identity_squash'] if attributes[:'identity_squash']
      self.identity_squash = "NONE" if identity_squash.nil? && !attributes.key?(:'identitySquash') && !attributes.key?(:'identity_squash') # rubocop:disable Style/StringLiterals

      self.squash_uid = attributes[:'squashUid'] if attributes[:'squashUid']
      self.squash_uid = 65534 if squash_uid.nil? && !attributes.key?(:'squashUid') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :squashUid and :squash_uid' if attributes.key?(:'squashUid') && attributes.key?(:'squash_uid')

      self.squash_uid = attributes[:'squash_uid'] if attributes[:'squash_uid']
      self.squash_uid = 65534 if squash_uid.nil? && !attributes.key?(:'squashUid') && !attributes.key?(:'squash_uid') # rubocop:disable Style/StringLiterals

      self.squash_gid = attributes[:'squashGid'] if attributes[:'squashGid']
      self.squash_gid = 65534 if squash_gid.nil? && !attributes.key?(:'squashGid') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :squashGid and :squash_gid' if attributes.key?(:'squashGid') && attributes.key?(:'squash_gid')

      self.squash_gid = attributes[:'squash_gid'] if attributes[:'squash_gid']
      self.squash_gid = 65534 if squash_gid.nil? && !attributes.key?(:'squashGid') && !attributes.key?(:'squash_gid') # rubocop:disable Style/StringLiterals

      self.client_exceptions = attributes[:'clientExceptions'] if attributes[:'clientExceptions']

      raise 'You cannot provide both :clientExceptions and :client_exceptions' if attributes.key?(:'clientExceptions') && attributes.key?(:'client_exceptions')

      self.client_exceptions = attributes[:'client_exceptions'] if attributes[:'client_exceptions']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] identity_squash Object to be assigned
    def identity_squash=(identity_squash)
      # rubocop:disable Style/ConditionalAssignment
      if identity_squash && !IDENTITY_SQUASH_ENUM.include?(identity_squash)
        OCI.logger.debug("Unknown value for 'identity_squash' [" + identity_squash + "]. Mapping to 'IDENTITY_SQUASH_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @identity_squash = IDENTITY_SQUASH_UNKNOWN_ENUM_VALUE
      else
        @identity_squash = identity_squash
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        identity_squash == other.identity_squash &&
        squash_uid == other.squash_uid &&
        squash_gid == other.squash_gid &&
        client_exceptions == other.client_exceptions
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [identity_squash, squash_uid, squash_gid, client_exceptions].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
