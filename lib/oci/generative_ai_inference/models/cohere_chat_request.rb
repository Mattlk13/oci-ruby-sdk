# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231130
require 'date'
require_relative 'base_chat_request'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for the chat request for Cohere models.
  class GenerativeAiInference::Models::CohereChatRequest < GenerativeAiInference::Models::BaseChatRequest
    PROMPT_TRUNCATION_ENUM = [
      PROMPT_TRUNCATION_OFF = 'OFF'.freeze,
      PROMPT_TRUNCATION_AUTO_PRESERVE_ORDER = 'AUTO_PRESERVE_ORDER'.freeze
    ].freeze

    CITATION_QUALITY_ENUM = [
      CITATION_QUALITY_ACCURATE = 'ACCURATE'.freeze,
      CITATION_QUALITY_FAST = 'FAST'.freeze
    ].freeze

    SAFETY_MODE_ENUM = [
      SAFETY_MODE_CONTEXTUAL = 'CONTEXTUAL'.freeze,
      SAFETY_MODE_STRICT = 'STRICT'.freeze,
      SAFETY_MODE_OFF = 'OFF'.freeze
    ].freeze

    # **[Required]** The text that the user inputs for the model to respond to.
    # @return [String]
    attr_accessor :message

    # The list of previous messages between the user and the model. The chat history gives the model context for responding to the user's inputs.
    # @return [Array<OCI::GenerativeAiInference::Models::CohereMessage>]
    attr_accessor :chat_history

    # A list of relevant documents that the model can refer to for generating grounded responses to the user's requests.
    # Some example keys that you can add to the dictionary are \"text\", \"author\", and \"date\". Keep the total word count of the strings in the dictionary to 300 words or less.
    #
    # Example:
    # `[
    #   { \"title\": \"Tall penguins\", \"snippet\": \"Emperor penguins are the tallest.\" },
    #   { \"title\": \"Penguin habitats\", \"snippet\": \"Emperor penguins only live in Antarctica.\" }
    # ]`
    #
    # @return [Array<Object>]
    attr_accessor :documents

    # @return [OCI::GenerativeAiInference::Models::CohereResponseFormat]
    attr_accessor :response_format

    # When set to true, the response contains only a list of generated search queries without the search results and the model will not respond to the user's message.
    #
    # @return [BOOLEAN]
    attr_accessor :is_search_queries_only

    # If specified, the default Cohere preamble is replaced with the provided preamble. A preamble is an initial guideline message that can change the model's overall chat behavior and conversation style. Default preambles vary for different models.
    #
    # Example: `You are a travel advisor. Answer with a pirate tone.`
    #
    # @return [String]
    attr_accessor :preamble_override

    # Whether to stream the partial progress of the model's response. When set to true, as tokens become available, they are sent as data-only server-sent events.
    # @return [BOOLEAN]
    attr_accessor :is_stream

    # @return [OCI::GenerativeAiInference::Models::StreamOptions]
    attr_accessor :stream_options

    # The maximum number of output tokens that the model will generate for the response.
    # @return [Integer]
    attr_accessor :max_tokens

    # The maximum number of input tokens to send to the model. If not specified, max_input_tokens is the model's context length limit minus a small buffer.
    # @return [Integer]
    attr_accessor :max_input_tokens

    # A number that sets the randomness of the generated output. A lower temperature means less random generations.
    # Use lower numbers for tasks such as question answering or summarizing. High temperatures can generate hallucinations or factually incorrect information. Start with temperatures lower than 1.0 and increase the temperature for more creative outputs, as you regenerate the prompts to refine the outputs.
    #
    # @return [Float]
    attr_accessor :temperature

    # A sampling method in which the model chooses the next token randomly from the top k most likely tokens. A higher value for k generates more random output, which makes the output text sound more natural. The default value for k is 0 which disables this method and considers all tokens. To set a number for the likely tokens, choose an integer between 1 and 500.
    #
    # If also using top p, then the model considers only the top tokens whose probabilities add up to p percent and ignores the rest of the k tokens. For example, if k is 20 but only the probabilities of the top 10 add up to the value of p, then only the top 10 tokens are chosen.
    #
    # @return [Integer]
    attr_accessor :top_k

    # If set to a probability 0.0 < p < 1.0, it ensures that only the most likely tokens, with total probability mass of p, are considered for generation at each step.
    #
    # To eliminate tokens with low likelihood, assign p a minimum percentage for the next token's likelihood. For example, when p is set to 0.75, the model eliminates the bottom 25 percent for the next token. Set to 1.0 to consider all tokens and set to 0 to disable. If both k and p are enabled, p acts after k.
    #
    # @return [Float]
    attr_accessor :top_p

    # Defaults to OFF. Dictates how the prompt will be constructed. With `promptTruncation` set to AUTO_PRESERVE_ORDER, some elements from `chatHistory` and `documents` will be dropped to construct a prompt that fits within the model's context length limit. During this process the order of the documents and chat history will be preserved. With `prompt_truncation` set to OFF, no elements will be dropped.
    #
    # @return [String]
    attr_reader :prompt_truncation

    # To reduce repetitiveness of generated tokens, this number penalizes new tokens based on their frequency in the generated text so far. Greater numbers encourage the model to use new tokens, while lower numbers encourage the model to repeat the tokens. Set to 0 to disable.
    #
    # @return [Float]
    attr_accessor :frequency_penalty

    # To reduce repetitiveness of generated tokens, this number penalizes new tokens based on whether they've appeared in the generated text so far. Greater numbers encourage the model to use new tokens, while lower numbers encourage the model to repeat the tokens.
    #
    # Similar to frequency penalty, a penalty is applied to previously present tokens, except that this penalty is applied equally to all tokens that have already appeared, regardless of how many times they've appeared. Set to 0 to disable.
    #
    # @return [Float]
    attr_accessor :presence_penalty

    # If specified, the backend will make a best effort to sample tokens deterministically, so that repeated requests with the same seed and parameters yield the same result. However, determinism cannot be fully guaranteed.
    #
    # @return [Integer]
    attr_accessor :seed

    # Returns the full prompt that was sent to the model when True.
    # @return [BOOLEAN]
    attr_accessor :is_echo

    # A list of available tools (functions) that the model may suggest invoking before producing a text response.
    # @return [Array<OCI::GenerativeAiInference::Models::CohereTool>]
    attr_accessor :tools

    # A list of results from invoking tools recommended by the model in the previous chat turn.
    # @return [Array<OCI::GenerativeAiInference::Models::CohereToolResult>]
    attr_accessor :tool_results

    # When enabled, the model will issue (potentially multiple) tool calls in a single step, before it receives the tool responses and directly answers the user's original message.
    #
    # @return [BOOLEAN]
    attr_accessor :is_force_single_step

    # Stop the model generation when it reaches a stop sequence defined in this parameter.
    # @return [Array<String>]
    attr_accessor :stop_sequences

    # When enabled, the user\u2019s `message` will be sent to the model without any preprocessing.
    # @return [BOOLEAN]
    attr_accessor :is_raw_prompting

    # When FAST is selected, citations are generated at the same time as the text output and the request will be completed sooner. May result in less accurate citations.
    #
    # @return [String]
    attr_reader :citation_quality

    # Safety mode: Adds a safety instruction for the model to use when generating responses.
    # Contextual: (Default) Puts fewer constraints on the output. It maintains core protections by aiming to reject harmful or illegal suggestions, but it allows profanity and some toxic content, sexually explicit and violent content, and content that contains medical, financial, or legal information. Contextual mode is suited for entertainment, creative, or academic use.
    # Strict: Aims to avoid sensitive topics, such as violent or sexual acts and profanity. This mode aims to provide a safer experience by prohibiting responses or recommendations that it finds inappropriate. Strict mode is suited for corporate use, such as for corporate communications and customer service.
    # Off: No safety mode is applied.
    # Note: This parameter is only compatible with models cohere.command-r-08-2024, cohere.command-r-plus-08-2024 and Cohere models released after these models. See [release dates](https://docs.cloud.oracle.com/iaas/Content/generative-ai/deprecating.htm).
    #
    # @return [String]
    attr_reader :safety_mode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'api_format': :'apiFormat',
        'message': :'message',
        'chat_history': :'chatHistory',
        'documents': :'documents',
        'response_format': :'responseFormat',
        'is_search_queries_only': :'isSearchQueriesOnly',
        'preamble_override': :'preambleOverride',
        'is_stream': :'isStream',
        'stream_options': :'streamOptions',
        'max_tokens': :'maxTokens',
        'max_input_tokens': :'maxInputTokens',
        'temperature': :'temperature',
        'top_k': :'topK',
        'top_p': :'topP',
        'prompt_truncation': :'promptTruncation',
        'frequency_penalty': :'frequencyPenalty',
        'presence_penalty': :'presencePenalty',
        'seed': :'seed',
        'is_echo': :'isEcho',
        'tools': :'tools',
        'tool_results': :'toolResults',
        'is_force_single_step': :'isForceSingleStep',
        'stop_sequences': :'stopSequences',
        'is_raw_prompting': :'isRawPrompting',
        'citation_quality': :'citationQuality',
        'safety_mode': :'safetyMode'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'api_format': :'String',
        'message': :'String',
        'chat_history': :'Array<OCI::GenerativeAiInference::Models::CohereMessage>',
        'documents': :'Array<Object>',
        'response_format': :'OCI::GenerativeAiInference::Models::CohereResponseFormat',
        'is_search_queries_only': :'BOOLEAN',
        'preamble_override': :'String',
        'is_stream': :'BOOLEAN',
        'stream_options': :'OCI::GenerativeAiInference::Models::StreamOptions',
        'max_tokens': :'Integer',
        'max_input_tokens': :'Integer',
        'temperature': :'Float',
        'top_k': :'Integer',
        'top_p': :'Float',
        'prompt_truncation': :'String',
        'frequency_penalty': :'Float',
        'presence_penalty': :'Float',
        'seed': :'Integer',
        'is_echo': :'BOOLEAN',
        'tools': :'Array<OCI::GenerativeAiInference::Models::CohereTool>',
        'tool_results': :'Array<OCI::GenerativeAiInference::Models::CohereToolResult>',
        'is_force_single_step': :'BOOLEAN',
        'stop_sequences': :'Array<String>',
        'is_raw_prompting': :'BOOLEAN',
        'citation_quality': :'String',
        'safety_mode': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :message The value to assign to the {#message} property
    # @option attributes [Array<OCI::GenerativeAiInference::Models::CohereMessage>] :chat_history The value to assign to the {#chat_history} property
    # @option attributes [Array<Object>] :documents The value to assign to the {#documents} property
    # @option attributes [OCI::GenerativeAiInference::Models::CohereResponseFormat] :response_format The value to assign to the {#response_format} property
    # @option attributes [BOOLEAN] :is_search_queries_only The value to assign to the {#is_search_queries_only} property
    # @option attributes [String] :preamble_override The value to assign to the {#preamble_override} property
    # @option attributes [BOOLEAN] :is_stream The value to assign to the {#is_stream} property
    # @option attributes [OCI::GenerativeAiInference::Models::StreamOptions] :stream_options The value to assign to the {#stream_options} property
    # @option attributes [Integer] :max_tokens The value to assign to the {#max_tokens} property
    # @option attributes [Integer] :max_input_tokens The value to assign to the {#max_input_tokens} property
    # @option attributes [Float] :temperature The value to assign to the {#temperature} property
    # @option attributes [Integer] :top_k The value to assign to the {#top_k} property
    # @option attributes [Float] :top_p The value to assign to the {#top_p} property
    # @option attributes [String] :prompt_truncation The value to assign to the {#prompt_truncation} property
    # @option attributes [Float] :frequency_penalty The value to assign to the {#frequency_penalty} property
    # @option attributes [Float] :presence_penalty The value to assign to the {#presence_penalty} property
    # @option attributes [Integer] :seed The value to assign to the {#seed} property
    # @option attributes [BOOLEAN] :is_echo The value to assign to the {#is_echo} property
    # @option attributes [Array<OCI::GenerativeAiInference::Models::CohereTool>] :tools The value to assign to the {#tools} property
    # @option attributes [Array<OCI::GenerativeAiInference::Models::CohereToolResult>] :tool_results The value to assign to the {#tool_results} property
    # @option attributes [BOOLEAN] :is_force_single_step The value to assign to the {#is_force_single_step} property
    # @option attributes [Array<String>] :stop_sequences The value to assign to the {#stop_sequences} property
    # @option attributes [BOOLEAN] :is_raw_prompting The value to assign to the {#is_raw_prompting} property
    # @option attributes [String] :citation_quality The value to assign to the {#citation_quality} property
    # @option attributes [String] :safety_mode The value to assign to the {#safety_mode} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['apiFormat'] = 'COHERE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.message = attributes[:'message'] if attributes[:'message']

      self.chat_history = attributes[:'chatHistory'] if attributes[:'chatHistory']

      raise 'You cannot provide both :chatHistory and :chat_history' if attributes.key?(:'chatHistory') && attributes.key?(:'chat_history')

      self.chat_history = attributes[:'chat_history'] if attributes[:'chat_history']

      self.documents = attributes[:'documents'] if attributes[:'documents']

      self.response_format = attributes[:'responseFormat'] if attributes[:'responseFormat']

      raise 'You cannot provide both :responseFormat and :response_format' if attributes.key?(:'responseFormat') && attributes.key?(:'response_format')

      self.response_format = attributes[:'response_format'] if attributes[:'response_format']

      self.is_search_queries_only = attributes[:'isSearchQueriesOnly'] unless attributes[:'isSearchQueriesOnly'].nil?
      self.is_search_queries_only = false if is_search_queries_only.nil? && !attributes.key?(:'isSearchQueriesOnly') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSearchQueriesOnly and :is_search_queries_only' if attributes.key?(:'isSearchQueriesOnly') && attributes.key?(:'is_search_queries_only')

      self.is_search_queries_only = attributes[:'is_search_queries_only'] unless attributes[:'is_search_queries_only'].nil?
      self.is_search_queries_only = false if is_search_queries_only.nil? && !attributes.key?(:'isSearchQueriesOnly') && !attributes.key?(:'is_search_queries_only') # rubocop:disable Style/StringLiterals

      self.preamble_override = attributes[:'preambleOverride'] if attributes[:'preambleOverride']

      raise 'You cannot provide both :preambleOverride and :preamble_override' if attributes.key?(:'preambleOverride') && attributes.key?(:'preamble_override')

      self.preamble_override = attributes[:'preamble_override'] if attributes[:'preamble_override']

      self.is_stream = attributes[:'isStream'] unless attributes[:'isStream'].nil?
      self.is_stream = false if is_stream.nil? && !attributes.key?(:'isStream') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isStream and :is_stream' if attributes.key?(:'isStream') && attributes.key?(:'is_stream')

      self.is_stream = attributes[:'is_stream'] unless attributes[:'is_stream'].nil?
      self.is_stream = false if is_stream.nil? && !attributes.key?(:'isStream') && !attributes.key?(:'is_stream') # rubocop:disable Style/StringLiterals

      self.stream_options = attributes[:'streamOptions'] if attributes[:'streamOptions']

      raise 'You cannot provide both :streamOptions and :stream_options' if attributes.key?(:'streamOptions') && attributes.key?(:'stream_options')

      self.stream_options = attributes[:'stream_options'] if attributes[:'stream_options']

      self.max_tokens = attributes[:'maxTokens'] if attributes[:'maxTokens']

      raise 'You cannot provide both :maxTokens and :max_tokens' if attributes.key?(:'maxTokens') && attributes.key?(:'max_tokens')

      self.max_tokens = attributes[:'max_tokens'] if attributes[:'max_tokens']

      self.max_input_tokens = attributes[:'maxInputTokens'] if attributes[:'maxInputTokens']

      raise 'You cannot provide both :maxInputTokens and :max_input_tokens' if attributes.key?(:'maxInputTokens') && attributes.key?(:'max_input_tokens')

      self.max_input_tokens = attributes[:'max_input_tokens'] if attributes[:'max_input_tokens']

      self.temperature = attributes[:'temperature'] if attributes[:'temperature']
      self.temperature = 0.3 if temperature.nil? && !attributes.key?(:'temperature') # rubocop:disable Style/StringLiterals

      self.top_k = attributes[:'topK'] if attributes[:'topK']

      raise 'You cannot provide both :topK and :top_k' if attributes.key?(:'topK') && attributes.key?(:'top_k')

      self.top_k = attributes[:'top_k'] if attributes[:'top_k']

      self.top_p = attributes[:'topP'] if attributes[:'topP']
      self.top_p = 0.75 if top_p.nil? && !attributes.key?(:'topP') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :topP and :top_p' if attributes.key?(:'topP') && attributes.key?(:'top_p')

      self.top_p = attributes[:'top_p'] if attributes[:'top_p']
      self.top_p = 0.75 if top_p.nil? && !attributes.key?(:'topP') && !attributes.key?(:'top_p') # rubocop:disable Style/StringLiterals

      self.prompt_truncation = attributes[:'promptTruncation'] if attributes[:'promptTruncation']
      self.prompt_truncation = "OFF" if prompt_truncation.nil? && !attributes.key?(:'promptTruncation') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :promptTruncation and :prompt_truncation' if attributes.key?(:'promptTruncation') && attributes.key?(:'prompt_truncation')

      self.prompt_truncation = attributes[:'prompt_truncation'] if attributes[:'prompt_truncation']
      self.prompt_truncation = "OFF" if prompt_truncation.nil? && !attributes.key?(:'promptTruncation') && !attributes.key?(:'prompt_truncation') # rubocop:disable Style/StringLiterals

      self.frequency_penalty = attributes[:'frequencyPenalty'] if attributes[:'frequencyPenalty']
      self.frequency_penalty = 0.0 if frequency_penalty.nil? && !attributes.key?(:'frequencyPenalty') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :frequencyPenalty and :frequency_penalty' if attributes.key?(:'frequencyPenalty') && attributes.key?(:'frequency_penalty')

      self.frequency_penalty = attributes[:'frequency_penalty'] if attributes[:'frequency_penalty']
      self.frequency_penalty = 0.0 if frequency_penalty.nil? && !attributes.key?(:'frequencyPenalty') && !attributes.key?(:'frequency_penalty') # rubocop:disable Style/StringLiterals

      self.presence_penalty = attributes[:'presencePenalty'] if attributes[:'presencePenalty']
      self.presence_penalty = 0.0 if presence_penalty.nil? && !attributes.key?(:'presencePenalty') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :presencePenalty and :presence_penalty' if attributes.key?(:'presencePenalty') && attributes.key?(:'presence_penalty')

      self.presence_penalty = attributes[:'presence_penalty'] if attributes[:'presence_penalty']
      self.presence_penalty = 0.0 if presence_penalty.nil? && !attributes.key?(:'presencePenalty') && !attributes.key?(:'presence_penalty') # rubocop:disable Style/StringLiterals

      self.seed = attributes[:'seed'] if attributes[:'seed']

      self.is_echo = attributes[:'isEcho'] unless attributes[:'isEcho'].nil?
      self.is_echo = false if is_echo.nil? && !attributes.key?(:'isEcho') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEcho and :is_echo' if attributes.key?(:'isEcho') && attributes.key?(:'is_echo')

      self.is_echo = attributes[:'is_echo'] unless attributes[:'is_echo'].nil?
      self.is_echo = false if is_echo.nil? && !attributes.key?(:'isEcho') && !attributes.key?(:'is_echo') # rubocop:disable Style/StringLiterals

      self.tools = attributes[:'tools'] if attributes[:'tools']

      self.tool_results = attributes[:'toolResults'] if attributes[:'toolResults']

      raise 'You cannot provide both :toolResults and :tool_results' if attributes.key?(:'toolResults') && attributes.key?(:'tool_results')

      self.tool_results = attributes[:'tool_results'] if attributes[:'tool_results']

      self.is_force_single_step = attributes[:'isForceSingleStep'] unless attributes[:'isForceSingleStep'].nil?
      self.is_force_single_step = false if is_force_single_step.nil? && !attributes.key?(:'isForceSingleStep') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isForceSingleStep and :is_force_single_step' if attributes.key?(:'isForceSingleStep') && attributes.key?(:'is_force_single_step')

      self.is_force_single_step = attributes[:'is_force_single_step'] unless attributes[:'is_force_single_step'].nil?
      self.is_force_single_step = false if is_force_single_step.nil? && !attributes.key?(:'isForceSingleStep') && !attributes.key?(:'is_force_single_step') # rubocop:disable Style/StringLiterals

      self.stop_sequences = attributes[:'stopSequences'] if attributes[:'stopSequences']

      raise 'You cannot provide both :stopSequences and :stop_sequences' if attributes.key?(:'stopSequences') && attributes.key?(:'stop_sequences')

      self.stop_sequences = attributes[:'stop_sequences'] if attributes[:'stop_sequences']

      self.is_raw_prompting = attributes[:'isRawPrompting'] unless attributes[:'isRawPrompting'].nil?
      self.is_raw_prompting = false if is_raw_prompting.nil? && !attributes.key?(:'isRawPrompting') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isRawPrompting and :is_raw_prompting' if attributes.key?(:'isRawPrompting') && attributes.key?(:'is_raw_prompting')

      self.is_raw_prompting = attributes[:'is_raw_prompting'] unless attributes[:'is_raw_prompting'].nil?
      self.is_raw_prompting = false if is_raw_prompting.nil? && !attributes.key?(:'isRawPrompting') && !attributes.key?(:'is_raw_prompting') # rubocop:disable Style/StringLiterals

      self.citation_quality = attributes[:'citationQuality'] if attributes[:'citationQuality']
      self.citation_quality = "ACCURATE" if citation_quality.nil? && !attributes.key?(:'citationQuality') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :citationQuality and :citation_quality' if attributes.key?(:'citationQuality') && attributes.key?(:'citation_quality')

      self.citation_quality = attributes[:'citation_quality'] if attributes[:'citation_quality']
      self.citation_quality = "ACCURATE" if citation_quality.nil? && !attributes.key?(:'citationQuality') && !attributes.key?(:'citation_quality') # rubocop:disable Style/StringLiterals

      self.safety_mode = attributes[:'safetyMode'] if attributes[:'safetyMode']
      self.safety_mode = "CONTEXTUAL" if safety_mode.nil? && !attributes.key?(:'safetyMode') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :safetyMode and :safety_mode' if attributes.key?(:'safetyMode') && attributes.key?(:'safety_mode')

      self.safety_mode = attributes[:'safety_mode'] if attributes[:'safety_mode']
      self.safety_mode = "CONTEXTUAL" if safety_mode.nil? && !attributes.key?(:'safetyMode') && !attributes.key?(:'safety_mode') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prompt_truncation Object to be assigned
    def prompt_truncation=(prompt_truncation)
      raise "Invalid value for 'prompt_truncation': this must be one of the values in PROMPT_TRUNCATION_ENUM." if prompt_truncation && !PROMPT_TRUNCATION_ENUM.include?(prompt_truncation)

      @prompt_truncation = prompt_truncation
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] citation_quality Object to be assigned
    def citation_quality=(citation_quality)
      raise "Invalid value for 'citation_quality': this must be one of the values in CITATION_QUALITY_ENUM." if citation_quality && !CITATION_QUALITY_ENUM.include?(citation_quality)

      @citation_quality = citation_quality
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] safety_mode Object to be assigned
    def safety_mode=(safety_mode)
      raise "Invalid value for 'safety_mode': this must be one of the values in SAFETY_MODE_ENUM." if safety_mode && !SAFETY_MODE_ENUM.include?(safety_mode)

      @safety_mode = safety_mode
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        api_format == other.api_format &&
        message == other.message &&
        chat_history == other.chat_history &&
        documents == other.documents &&
        response_format == other.response_format &&
        is_search_queries_only == other.is_search_queries_only &&
        preamble_override == other.preamble_override &&
        is_stream == other.is_stream &&
        stream_options == other.stream_options &&
        max_tokens == other.max_tokens &&
        max_input_tokens == other.max_input_tokens &&
        temperature == other.temperature &&
        top_k == other.top_k &&
        top_p == other.top_p &&
        prompt_truncation == other.prompt_truncation &&
        frequency_penalty == other.frequency_penalty &&
        presence_penalty == other.presence_penalty &&
        seed == other.seed &&
        is_echo == other.is_echo &&
        tools == other.tools &&
        tool_results == other.tool_results &&
        is_force_single_step == other.is_force_single_step &&
        stop_sequences == other.stop_sequences &&
        is_raw_prompting == other.is_raw_prompting &&
        citation_quality == other.citation_quality &&
        safety_mode == other.safety_mode
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [api_format, message, chat_history, documents, response_format, is_search_queries_only, preamble_override, is_stream, stream_options, max_tokens, max_input_tokens, temperature, top_k, top_p, prompt_truncation, frequency_penalty, presence_penalty, seed, is_echo, tools, tool_results, is_force_single_step, stop_sequences, is_raw_prompting, citation_quality, safety_mode].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
