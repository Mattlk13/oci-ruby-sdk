# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231130
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for the request to embed texts.
  class GenerativeAiInference::Models::EmbedTextDetails
    TRUNCATE_ENUM = [
      TRUNCATE_NONE = 'NONE'.freeze,
      TRUNCATE_START = 'START'.freeze,
      TRUNCATE_END = 'END'.freeze
    ].freeze

    INPUT_TYPE_ENUM = [
      INPUT_TYPE_SEARCH_DOCUMENT = 'SEARCH_DOCUMENT'.freeze,
      INPUT_TYPE_SEARCH_QUERY = 'SEARCH_QUERY'.freeze,
      INPUT_TYPE_CLASSIFICATION = 'CLASSIFICATION'.freeze,
      INPUT_TYPE_CLUSTERING = 'CLUSTERING'.freeze
    ].freeze

    # **[Required]** Provide a list of strings with a maximum number of 96 entries. Each string can be words, a phrase, or a paragraph. The maximum length of each string entry in the list is 512 tokens.
    # @return [Array<String>]
    attr_accessor :inputs

    # This attribute is required.
    # @return [OCI::GenerativeAiInference::Models::ServingMode]
    attr_accessor :serving_mode

    # **[Required]** The OCID of compartment that the user is authorized to use to call into the Generative AI service.
    # @return [String]
    attr_accessor :compartment_id

    # Whether or not to include the original inputs in the response. Results are index-based.
    # @return [BOOLEAN]
    attr_accessor :is_echo

    # For an input that's longer than the maximum token length, specifies which part of the input text will be truncated.
    # @return [String]
    attr_reader :truncate

    # Specifies the input type.
    # @return [String]
    attr_reader :input_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'inputs': :'inputs',
        'serving_mode': :'servingMode',
        'compartment_id': :'compartmentId',
        'is_echo': :'isEcho',
        'truncate': :'truncate',
        'input_type': :'inputType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'inputs': :'Array<String>',
        'serving_mode': :'OCI::GenerativeAiInference::Models::ServingMode',
        'compartment_id': :'String',
        'is_echo': :'BOOLEAN',
        'truncate': :'String',
        'input_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :inputs The value to assign to the {#inputs} property
    # @option attributes [OCI::GenerativeAiInference::Models::ServingMode] :serving_mode The value to assign to the {#serving_mode} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [BOOLEAN] :is_echo The value to assign to the {#is_echo} property
    # @option attributes [String] :truncate The value to assign to the {#truncate} property
    # @option attributes [String] :input_type The value to assign to the {#input_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.inputs = attributes[:'inputs'] if attributes[:'inputs']

      self.serving_mode = attributes[:'servingMode'] if attributes[:'servingMode']

      raise 'You cannot provide both :servingMode and :serving_mode' if attributes.key?(:'servingMode') && attributes.key?(:'serving_mode')

      self.serving_mode = attributes[:'serving_mode'] if attributes[:'serving_mode']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.is_echo = attributes[:'isEcho'] unless attributes[:'isEcho'].nil?
      self.is_echo = false if is_echo.nil? && !attributes.key?(:'isEcho') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEcho and :is_echo' if attributes.key?(:'isEcho') && attributes.key?(:'is_echo')

      self.is_echo = attributes[:'is_echo'] unless attributes[:'is_echo'].nil?
      self.is_echo = false if is_echo.nil? && !attributes.key?(:'isEcho') && !attributes.key?(:'is_echo') # rubocop:disable Style/StringLiterals

      self.truncate = attributes[:'truncate'] if attributes[:'truncate']
      self.truncate = "NONE" if truncate.nil? && !attributes.key?(:'truncate') # rubocop:disable Style/StringLiterals

      self.input_type = attributes[:'inputType'] if attributes[:'inputType']

      raise 'You cannot provide both :inputType and :input_type' if attributes.key?(:'inputType') && attributes.key?(:'input_type')

      self.input_type = attributes[:'input_type'] if attributes[:'input_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] truncate Object to be assigned
    def truncate=(truncate)
      raise "Invalid value for 'truncate': this must be one of the values in TRUNCATE_ENUM." if truncate && !TRUNCATE_ENUM.include?(truncate)

      @truncate = truncate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] input_type Object to be assigned
    def input_type=(input_type)
      raise "Invalid value for 'input_type': this must be one of the values in INPUT_TYPE_ENUM." if input_type && !INPUT_TYPE_ENUM.include?(input_type)

      @input_type = input_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        inputs == other.inputs &&
        serving_mode == other.serving_mode &&
        compartment_id == other.compartment_id &&
        is_echo == other.is_echo &&
        truncate == other.truncate &&
        input_type == other.input_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [inputs, serving_mode, compartment_id, is_echo, truncate, input_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
