# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231130
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for the request to summarize text.
  class GenerativeAiInference::Models::SummarizeTextDetails
    LENGTH_ENUM = [
      LENGTH_SHORT = 'SHORT'.freeze,
      LENGTH_MEDIUM = 'MEDIUM'.freeze,
      LENGTH_LONG = 'LONG'.freeze,
      LENGTH_AUTO = 'AUTO'.freeze
    ].freeze

    FORMAT_ENUM = [
      FORMAT_PARAGRAPH = 'PARAGRAPH'.freeze,
      FORMAT_BULLETS = 'BULLETS'.freeze,
      FORMAT_AUTO = 'AUTO'.freeze
    ].freeze

    EXTRACTIVENESS_ENUM = [
      EXTRACTIVENESS_LOW = 'LOW'.freeze,
      EXTRACTIVENESS_MEDIUM = 'MEDIUM'.freeze,
      EXTRACTIVENESS_HIGH = 'HIGH'.freeze,
      EXTRACTIVENESS_AUTO = 'AUTO'.freeze
    ].freeze

    # **[Required]** The input string to be summarized.
    # @return [String]
    attr_accessor :input

    # This attribute is required.
    # @return [OCI::GenerativeAiInference::Models::ServingMode]
    attr_accessor :serving_mode

    # **[Required]** The OCID of compartment that the user is authorized to use to call into the Generative AI service.
    # @return [String]
    attr_accessor :compartment_id

    # Whether or not to include the original inputs in the response.
    # @return [BOOLEAN]
    attr_accessor :is_echo

    # A number that sets the randomness of the generated output. Lower temperatures mean less random generations.
    #
    # Use lower numbers for tasks with a correct answer such as question answering or summarizing. High temperatures can generate hallucinations or factually incorrect information. Start with temperatures lower than 1.0, and increase the temperature for more creative outputs, as you regenerate the prompts to refine the outputs.
    #
    # @return [Float]
    attr_accessor :temperature

    # A free-form instruction for modifying how the summaries get generated. Should complete the sentence \"Generate a summary _\". For example, \"focusing on the next steps\" or \"written by Yoda\".
    # @return [String]
    attr_accessor :additional_command

    # Indicates the approximate length of the summary. If \"AUTO\" is selected, the best option will be picked based on the input text.
    # @return [String]
    attr_reader :length

    # Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If \"AUTO\" is selected, the best option will be picked based on the input text.
    # @return [String]
    attr_reader :format

    # Controls how close to the original text the summary is. High extractiveness summaries will lean towards reusing sentences verbatim, while low extractiveness summaries will tend to paraphrase more.
    # @return [String]
    attr_reader :extractiveness

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'input': :'input',
        'serving_mode': :'servingMode',
        'compartment_id': :'compartmentId',
        'is_echo': :'isEcho',
        'temperature': :'temperature',
        'additional_command': :'additionalCommand',
        'length': :'length',
        'format': :'format',
        'extractiveness': :'extractiveness'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'input': :'String',
        'serving_mode': :'OCI::GenerativeAiInference::Models::ServingMode',
        'compartment_id': :'String',
        'is_echo': :'BOOLEAN',
        'temperature': :'Float',
        'additional_command': :'String',
        'length': :'String',
        'format': :'String',
        'extractiveness': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :input The value to assign to the {#input} property
    # @option attributes [OCI::GenerativeAiInference::Models::ServingMode] :serving_mode The value to assign to the {#serving_mode} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [BOOLEAN] :is_echo The value to assign to the {#is_echo} property
    # @option attributes [Float] :temperature The value to assign to the {#temperature} property
    # @option attributes [String] :additional_command The value to assign to the {#additional_command} property
    # @option attributes [String] :length The value to assign to the {#length} property
    # @option attributes [String] :format The value to assign to the {#format} property
    # @option attributes [String] :extractiveness The value to assign to the {#extractiveness} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.input = attributes[:'input'] if attributes[:'input']

      self.serving_mode = attributes[:'servingMode'] if attributes[:'servingMode']

      raise 'You cannot provide both :servingMode and :serving_mode' if attributes.key?(:'servingMode') && attributes.key?(:'serving_mode')

      self.serving_mode = attributes[:'serving_mode'] if attributes[:'serving_mode']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.is_echo = attributes[:'isEcho'] unless attributes[:'isEcho'].nil?
      self.is_echo = false if is_echo.nil? && !attributes.key?(:'isEcho') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEcho and :is_echo' if attributes.key?(:'isEcho') && attributes.key?(:'is_echo')

      self.is_echo = attributes[:'is_echo'] unless attributes[:'is_echo'].nil?
      self.is_echo = false if is_echo.nil? && !attributes.key?(:'isEcho') && !attributes.key?(:'is_echo') # rubocop:disable Style/StringLiterals

      self.temperature = attributes[:'temperature'] if attributes[:'temperature']
      self.temperature = 1.0 if temperature.nil? && !attributes.key?(:'temperature') # rubocop:disable Style/StringLiterals

      self.additional_command = attributes[:'additionalCommand'] if attributes[:'additionalCommand']

      raise 'You cannot provide both :additionalCommand and :additional_command' if attributes.key?(:'additionalCommand') && attributes.key?(:'additional_command')

      self.additional_command = attributes[:'additional_command'] if attributes[:'additional_command']

      self.length = attributes[:'length'] if attributes[:'length']
      self.length = "AUTO" if length.nil? && !attributes.key?(:'length') # rubocop:disable Style/StringLiterals

      self.format = attributes[:'format'] if attributes[:'format']
      self.format = "AUTO" if format.nil? && !attributes.key?(:'format') # rubocop:disable Style/StringLiterals

      self.extractiveness = attributes[:'extractiveness'] if attributes[:'extractiveness']
      self.extractiveness = "AUTO" if extractiveness.nil? && !attributes.key?(:'extractiveness') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] length Object to be assigned
    def length=(length)
      raise "Invalid value for 'length': this must be one of the values in LENGTH_ENUM." if length && !LENGTH_ENUM.include?(length)

      @length = length
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] format Object to be assigned
    def format=(format)
      raise "Invalid value for 'format': this must be one of the values in FORMAT_ENUM." if format && !FORMAT_ENUM.include?(format)

      @format = format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] extractiveness Object to be assigned
    def extractiveness=(extractiveness)
      raise "Invalid value for 'extractiveness': this must be one of the values in EXTRACTIVENESS_ENUM." if extractiveness && !EXTRACTIVENESS_ENUM.include?(extractiveness)

      @extractiveness = extractiveness
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        input == other.input &&
        serving_mode == other.serving_mode &&
        compartment_id == other.compartment_id &&
        is_echo == other.is_echo &&
        temperature == other.temperature &&
        additional_command == other.additional_command &&
        length == other.length &&
        format == other.format &&
        extractiveness == other.extractiveness
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [input, serving_mode, compartment_id, is_echo, temperature, additional_command, length, format, extractiveness].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
