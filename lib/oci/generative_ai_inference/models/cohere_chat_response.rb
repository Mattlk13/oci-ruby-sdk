# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231130
require 'date'
require 'logger'
require_relative 'base_chat_response'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The response to the chat conversation.
  class GenerativeAiInference::Models::CohereChatResponse < GenerativeAiInference::Models::BaseChatResponse
    FINISH_REASON_ENUM = [
      FINISH_REASON_COMPLETE = 'COMPLETE'.freeze,
      FINISH_REASON_ERROR_TOXIC = 'ERROR_TOXIC'.freeze,
      FINISH_REASON_ERROR_LIMIT = 'ERROR_LIMIT'.freeze,
      FINISH_REASON_ERROR = 'ERROR'.freeze,
      FINISH_REASON_USER_CANCEL = 'USER_CANCEL'.freeze,
      FINISH_REASON_MAX_TOKENS = 'MAX_TOKENS'.freeze,
      FINISH_REASON_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Contents of the reply generated by the model.
    # @return [String]
    attr_accessor :text

    # Inline citations for the generated reply.
    # @return [Array<OCI::GenerativeAiInference::Models::Citation>]
    attr_accessor :citations

    # Denotes that a search for documents is required.
    # @return [BOOLEAN]
    attr_accessor :is_search_required

    # **[Required]** Why the generation was completed.
    # @return [String]
    attr_reader :finish_reason

    # Generated search queries.
    # @return [Array<OCI::GenerativeAiInference::Models::SearchQuery>]
    attr_accessor :search_queries

    # Documents seen by the model when generating the reply. Each document is a JSON String
    # representing the field and values of the document.
    #
    # @return [Array<Object>]
    attr_accessor :documents

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'api_format': :'apiFormat',
        'text': :'text',
        'citations': :'citations',
        'is_search_required': :'isSearchRequired',
        'finish_reason': :'finishReason',
        'search_queries': :'searchQueries',
        'documents': :'documents'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'api_format': :'String',
        'text': :'String',
        'citations': :'Array<OCI::GenerativeAiInference::Models::Citation>',
        'is_search_required': :'BOOLEAN',
        'finish_reason': :'String',
        'search_queries': :'Array<OCI::GenerativeAiInference::Models::SearchQuery>',
        'documents': :'Array<Object>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :text The value to assign to the {#text} property
    # @option attributes [Array<OCI::GenerativeAiInference::Models::Citation>] :citations The value to assign to the {#citations} property
    # @option attributes [BOOLEAN] :is_search_required The value to assign to the {#is_search_required} property
    # @option attributes [String] :finish_reason The value to assign to the {#finish_reason} property
    # @option attributes [Array<OCI::GenerativeAiInference::Models::SearchQuery>] :search_queries The value to assign to the {#search_queries} property
    # @option attributes [Array<Object>] :documents The value to assign to the {#documents} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['apiFormat'] = 'COHERE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.text = attributes[:'text'] if attributes[:'text']

      self.citations = attributes[:'citations'] if attributes[:'citations']

      self.is_search_required = attributes[:'isSearchRequired'] unless attributes[:'isSearchRequired'].nil?
      self.is_search_required = false if is_search_required.nil? && !attributes.key?(:'isSearchRequired') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSearchRequired and :is_search_required' if attributes.key?(:'isSearchRequired') && attributes.key?(:'is_search_required')

      self.is_search_required = attributes[:'is_search_required'] unless attributes[:'is_search_required'].nil?
      self.is_search_required = false if is_search_required.nil? && !attributes.key?(:'isSearchRequired') && !attributes.key?(:'is_search_required') # rubocop:disable Style/StringLiterals

      self.finish_reason = attributes[:'finishReason'] if attributes[:'finishReason']

      raise 'You cannot provide both :finishReason and :finish_reason' if attributes.key?(:'finishReason') && attributes.key?(:'finish_reason')

      self.finish_reason = attributes[:'finish_reason'] if attributes[:'finish_reason']

      self.search_queries = attributes[:'searchQueries'] if attributes[:'searchQueries']

      raise 'You cannot provide both :searchQueries and :search_queries' if attributes.key?(:'searchQueries') && attributes.key?(:'search_queries')

      self.search_queries = attributes[:'search_queries'] if attributes[:'search_queries']

      self.documents = attributes[:'documents'] if attributes[:'documents']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] finish_reason Object to be assigned
    def finish_reason=(finish_reason)
      # rubocop:disable Style/ConditionalAssignment
      if finish_reason && !FINISH_REASON_ENUM.include?(finish_reason)
        OCI.logger.debug("Unknown value for 'finish_reason' [" + finish_reason + "]. Mapping to 'FINISH_REASON_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @finish_reason = FINISH_REASON_UNKNOWN_ENUM_VALUE
      else
        @finish_reason = finish_reason
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        api_format == other.api_format &&
        text == other.text &&
        citations == other.citations &&
        is_search_required == other.is_search_required &&
        finish_reason == other.finish_reason &&
        search_queries == other.search_queries &&
        documents == other.documents
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [api_format, text, citations, is_search_required, finish_reason, search_queries, documents].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
