# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A private endpoint makes your service accessible through a private IP in the customer's private network. A private endpoint has a name and is associated with a namespace and a single compartment.
  #
  class ObjectStorage::Models::PrivateEndpoint
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** This name associated with the endpoint. Valid characters are uppercase or lowercase letters, numbers, hyphens,
    #  underscores, and periods.
    # Example: my-new-private-endpoint1
    #
    # @return [String]
    attr_accessor :name

    # **[Required]** The Object Storage namespace associated with the private enpoint.
    # @return [String]
    attr_accessor :namespace

    # **[Required]** The compartment which is associated with the Private Endpoint.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the user who created the Private Endpoint.
    # @return [String]
    attr_accessor :created_by

    # **[Required]** The date and time the Private Endpoint was created, as described in [RFC 2616](https://tools.ietf.org/html/rfc2616#section-14.29).
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time the Private Endpoint was updated, as described in [RFC 2616](https://tools.ietf.org/html/rfc2616#section-14.29).
    # @return [DateTime]
    attr_accessor :time_modified

    # **[Required]** The OCID of the customer's subnet where the private endpoint VNIC will reside.
    #
    # @return [String]
    attr_accessor :subnet_id

    # **[Required]** The private IP address to assign to this private endpoint. If you provide a value,
    # it must be an available IP address in the customer's subnet. If it's not available, an error
    # is returned.
    #
    # If you do not provide a value, an available IP address in the subnet is automatically chosen.
    #
    # @return [String]
    attr_accessor :private_endpoint_ip

    # **[Required]** A prefix to use for the private endpoint. The customer VCN's DNS records are
    # updated with this prefix. The prefix input from the customer will be the first sub-domain in the endpointFqdn.
    # Example: If the prefix chosen is \"abc\", then the endpointFqdn will be 'abc.private.objectstorage.<region>.oraclecloud.com'
    #
    # @return [String]
    attr_accessor :prefix

    # A list of additional prefix that you can provide along with any other prefix. These resulting endpointFqdn's are added to the
    # customer VCN's DNS record.
    #
    # @return [Array<String>]
    attr_accessor :additional_prefixes

    # A list of the OCIDs of the network security groups (NSGs) to add the private endpoint's VNIC to.
    # For more information about NSGs, see
    # {NetworkSecurityGroup}.
    #
    # @return [Array<String>]
    attr_accessor :nsg_ids

    # This attribute is required.
    # @return [OCI::ObjectStorage::Models::Fqdns]
    attr_accessor :fqdns

    # **[Required]** The entity tag (ETag) for the Private Endpoint.
    # @return [String]
    attr_accessor :etag

    # The Private Endpoint's lifecycle state.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** A list of targets that can be accessed by the private endpoint. At least one or more access targets is required for a private endpoint.
    #
    # @return [Array<OCI::ObjectStorage::Models::AccessTargetDetails>]
    attr_accessor :access_targets

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the PrivateEndpoint.
    #
    # @return [String]
    attr_accessor :id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'namespace': :'namespace',
        'compartment_id': :'compartmentId',
        'created_by': :'createdBy',
        'time_created': :'timeCreated',
        'time_modified': :'timeModified',
        'subnet_id': :'subnetId',
        'private_endpoint_ip': :'privateEndpointIp',
        'prefix': :'prefix',
        'additional_prefixes': :'additionalPrefixes',
        'nsg_ids': :'nsgIds',
        'fqdns': :'fqdns',
        'etag': :'etag',
        'lifecycle_state': :'lifecycleState',
        'access_targets': :'accessTargets',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'id': :'id'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'namespace': :'String',
        'compartment_id': :'String',
        'created_by': :'String',
        'time_created': :'DateTime',
        'time_modified': :'DateTime',
        'subnet_id': :'String',
        'private_endpoint_ip': :'String',
        'prefix': :'String',
        'additional_prefixes': :'Array<String>',
        'nsg_ids': :'Array<String>',
        'fqdns': :'OCI::ObjectStorage::Models::Fqdns',
        'etag': :'String',
        'lifecycle_state': :'String',
        'access_targets': :'Array<OCI::ObjectStorage::Models::AccessTargetDetails>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :namespace The value to assign to the {#namespace} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :created_by The value to assign to the {#created_by} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_modified The value to assign to the {#time_modified} property
    # @option attributes [String] :subnet_id The value to assign to the {#subnet_id} property
    # @option attributes [String] :private_endpoint_ip The value to assign to the {#private_endpoint_ip} property
    # @option attributes [String] :prefix The value to assign to the {#prefix} property
    # @option attributes [Array<String>] :additional_prefixes The value to assign to the {#additional_prefixes} property
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {#nsg_ids} property
    # @option attributes [OCI::ObjectStorage::Models::Fqdns] :fqdns The value to assign to the {#fqdns} property
    # @option attributes [String] :etag The value to assign to the {#etag} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Array<OCI::ObjectStorage::Models::AccessTargetDetails>] :access_targets The value to assign to the {#access_targets} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [String] :id The value to assign to the {#id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.namespace = attributes[:'namespace'] if attributes[:'namespace']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.created_by = attributes[:'createdBy'] if attributes[:'createdBy']

      raise 'You cannot provide both :createdBy and :created_by' if attributes.key?(:'createdBy') && attributes.key?(:'created_by')

      self.created_by = attributes[:'created_by'] if attributes[:'created_by']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_modified = attributes[:'timeModified'] if attributes[:'timeModified']

      raise 'You cannot provide both :timeModified and :time_modified' if attributes.key?(:'timeModified') && attributes.key?(:'time_modified')

      self.time_modified = attributes[:'time_modified'] if attributes[:'time_modified']

      self.subnet_id = attributes[:'subnetId'] if attributes[:'subnetId']

      raise 'You cannot provide both :subnetId and :subnet_id' if attributes.key?(:'subnetId') && attributes.key?(:'subnet_id')

      self.subnet_id = attributes[:'subnet_id'] if attributes[:'subnet_id']

      self.private_endpoint_ip = attributes[:'privateEndpointIp'] if attributes[:'privateEndpointIp']

      raise 'You cannot provide both :privateEndpointIp and :private_endpoint_ip' if attributes.key?(:'privateEndpointIp') && attributes.key?(:'private_endpoint_ip')

      self.private_endpoint_ip = attributes[:'private_endpoint_ip'] if attributes[:'private_endpoint_ip']

      self.prefix = attributes[:'prefix'] if attributes[:'prefix']

      self.additional_prefixes = attributes[:'additionalPrefixes'] if attributes[:'additionalPrefixes']

      raise 'You cannot provide both :additionalPrefixes and :additional_prefixes' if attributes.key?(:'additionalPrefixes') && attributes.key?(:'additional_prefixes')

      self.additional_prefixes = attributes[:'additional_prefixes'] if attributes[:'additional_prefixes']

      self.nsg_ids = attributes[:'nsgIds'] if attributes[:'nsgIds']

      raise 'You cannot provide both :nsgIds and :nsg_ids' if attributes.key?(:'nsgIds') && attributes.key?(:'nsg_ids')

      self.nsg_ids = attributes[:'nsg_ids'] if attributes[:'nsg_ids']

      self.fqdns = attributes[:'fqdns'] if attributes[:'fqdns']

      self.etag = attributes[:'etag'] if attributes[:'etag']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.access_targets = attributes[:'accessTargets'] if attributes[:'accessTargets']

      raise 'You cannot provide both :accessTargets and :access_targets' if attributes.key?(:'accessTargets') && attributes.key?(:'access_targets')

      self.access_targets = attributes[:'access_targets'] if attributes[:'access_targets']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.id = attributes[:'id'] if attributes[:'id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        namespace == other.namespace &&
        compartment_id == other.compartment_id &&
        created_by == other.created_by &&
        time_created == other.time_created &&
        time_modified == other.time_modified &&
        subnet_id == other.subnet_id &&
        private_endpoint_ip == other.private_endpoint_ip &&
        prefix == other.prefix &&
        additional_prefixes == other.additional_prefixes &&
        nsg_ids == other.nsg_ids &&
        fqdns == other.fqdns &&
        etag == other.etag &&
        lifecycle_state == other.lifecycle_state &&
        access_targets == other.access_targets &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        id == other.id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, namespace, compartment_id, created_by, time_created, time_modified, subnet_id, private_endpoint_ip, prefix, additional_prefixes, nsg_ids, fqdns, etag, lifecycle_state, access_targets, freeform_tags, defined_tags, id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
