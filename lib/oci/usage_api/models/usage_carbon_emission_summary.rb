# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200107
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The usage carbon emission store result.
  class UsageApi::Models::UsageCarbonEmissionSummary
    # The tenancy OCID.
    # @return [String]
    attr_accessor :tenant_id

    # The tenancy name.
    # @return [String]
    attr_accessor :tenant_name

    # The compartment OCID.
    # @return [String]
    attr_accessor :compartment_id

    # The compartment path, starting from root.
    # @return [String]
    attr_accessor :compartment_path

    # The compartment name.
    # @return [String]
    attr_accessor :compartment_name

    # The service name that is incurring the cost.
    # @return [String]
    attr_accessor :service

    # The resource name that is incurring the cost.
    # @return [String]
    attr_accessor :resource_name

    # The resource OCID that is incurring the cost.
    # @return [String]
    attr_accessor :resource_id

    # The region of the usage.
    # @return [String]
    attr_accessor :region

    # The availability domain of the usage.
    # @return [String]
    attr_accessor :ad

    # The SKU part number.
    # @return [String]
    attr_accessor :sku_part_number

    # The SKU friendly name.
    # @return [String]
    attr_accessor :sku_name

    # Platform for the cost.
    # @return [String]
    attr_accessor :platform

    # **[Required]** The usage start time.
    # @return [DateTime]
    attr_accessor :time_usage_started

    # **[Required]** The usage end time.
    # @return [DateTime]
    attr_accessor :time_usage_ended

    # **[Required]** The carbon emission in MTCO2 unit.
    # @return [Float]
    attr_accessor :computed_carbon_emission

    # **[Required]** The method used to calculate carbon emission.
    # @return [String]
    attr_accessor :emission_calculation_method

    # The subscription ID.
    # @return [String]
    attr_accessor :subscription_id

    # For grouping, a tag definition. For filtering, a definition and key.
    # @return [Array<OCI::UsageApi::Models::Tag>]
    attr_accessor :tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'tenant_id': :'tenantId',
        'tenant_name': :'tenantName',
        'compartment_id': :'compartmentId',
        'compartment_path': :'compartmentPath',
        'compartment_name': :'compartmentName',
        'service': :'service',
        'resource_name': :'resourceName',
        'resource_id': :'resourceId',
        'region': :'region',
        'ad': :'ad',
        'sku_part_number': :'skuPartNumber',
        'sku_name': :'skuName',
        'platform': :'platform',
        'time_usage_started': :'timeUsageStarted',
        'time_usage_ended': :'timeUsageEnded',
        'computed_carbon_emission': :'computedCarbonEmission',
        'emission_calculation_method': :'emissionCalculationMethod',
        'subscription_id': :'subscriptionId',
        'tags': :'tags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'tenant_id': :'String',
        'tenant_name': :'String',
        'compartment_id': :'String',
        'compartment_path': :'String',
        'compartment_name': :'String',
        'service': :'String',
        'resource_name': :'String',
        'resource_id': :'String',
        'region': :'String',
        'ad': :'String',
        'sku_part_number': :'String',
        'sku_name': :'String',
        'platform': :'String',
        'time_usage_started': :'DateTime',
        'time_usage_ended': :'DateTime',
        'computed_carbon_emission': :'Float',
        'emission_calculation_method': :'String',
        'subscription_id': :'String',
        'tags': :'Array<OCI::UsageApi::Models::Tag>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :tenant_id The value to assign to the {#tenant_id} property
    # @option attributes [String] :tenant_name The value to assign to the {#tenant_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :compartment_path The value to assign to the {#compartment_path} property
    # @option attributes [String] :compartment_name The value to assign to the {#compartment_name} property
    # @option attributes [String] :service The value to assign to the {#service} property
    # @option attributes [String] :resource_name The value to assign to the {#resource_name} property
    # @option attributes [String] :resource_id The value to assign to the {#resource_id} property
    # @option attributes [String] :region The value to assign to the {#region} property
    # @option attributes [String] :ad The value to assign to the {#ad} property
    # @option attributes [String] :sku_part_number The value to assign to the {#sku_part_number} property
    # @option attributes [String] :sku_name The value to assign to the {#sku_name} property
    # @option attributes [String] :platform The value to assign to the {#platform} property
    # @option attributes [DateTime] :time_usage_started The value to assign to the {#time_usage_started} property
    # @option attributes [DateTime] :time_usage_ended The value to assign to the {#time_usage_ended} property
    # @option attributes [Float] :computed_carbon_emission The value to assign to the {#computed_carbon_emission} property
    # @option attributes [String] :emission_calculation_method The value to assign to the {#emission_calculation_method} property
    # @option attributes [String] :subscription_id The value to assign to the {#subscription_id} property
    # @option attributes [Array<OCI::UsageApi::Models::Tag>] :tags The value to assign to the {#tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.tenant_id = attributes[:'tenantId'] if attributes[:'tenantId']

      raise 'You cannot provide both :tenantId and :tenant_id' if attributes.key?(:'tenantId') && attributes.key?(:'tenant_id')

      self.tenant_id = attributes[:'tenant_id'] if attributes[:'tenant_id']

      self.tenant_name = attributes[:'tenantName'] if attributes[:'tenantName']

      raise 'You cannot provide both :tenantName and :tenant_name' if attributes.key?(:'tenantName') && attributes.key?(:'tenant_name')

      self.tenant_name = attributes[:'tenant_name'] if attributes[:'tenant_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.compartment_path = attributes[:'compartmentPath'] if attributes[:'compartmentPath']

      raise 'You cannot provide both :compartmentPath and :compartment_path' if attributes.key?(:'compartmentPath') && attributes.key?(:'compartment_path')

      self.compartment_path = attributes[:'compartment_path'] if attributes[:'compartment_path']

      self.compartment_name = attributes[:'compartmentName'] if attributes[:'compartmentName']

      raise 'You cannot provide both :compartmentName and :compartment_name' if attributes.key?(:'compartmentName') && attributes.key?(:'compartment_name')

      self.compartment_name = attributes[:'compartment_name'] if attributes[:'compartment_name']

      self.service = attributes[:'service'] if attributes[:'service']

      self.resource_name = attributes[:'resourceName'] if attributes[:'resourceName']

      raise 'You cannot provide both :resourceName and :resource_name' if attributes.key?(:'resourceName') && attributes.key?(:'resource_name')

      self.resource_name = attributes[:'resource_name'] if attributes[:'resource_name']

      self.resource_id = attributes[:'resourceId'] if attributes[:'resourceId']

      raise 'You cannot provide both :resourceId and :resource_id' if attributes.key?(:'resourceId') && attributes.key?(:'resource_id')

      self.resource_id = attributes[:'resource_id'] if attributes[:'resource_id']

      self.region = attributes[:'region'] if attributes[:'region']

      self.ad = attributes[:'ad'] if attributes[:'ad']

      self.sku_part_number = attributes[:'skuPartNumber'] if attributes[:'skuPartNumber']

      raise 'You cannot provide both :skuPartNumber and :sku_part_number' if attributes.key?(:'skuPartNumber') && attributes.key?(:'sku_part_number')

      self.sku_part_number = attributes[:'sku_part_number'] if attributes[:'sku_part_number']

      self.sku_name = attributes[:'skuName'] if attributes[:'skuName']

      raise 'You cannot provide both :skuName and :sku_name' if attributes.key?(:'skuName') && attributes.key?(:'sku_name')

      self.sku_name = attributes[:'sku_name'] if attributes[:'sku_name']

      self.platform = attributes[:'platform'] if attributes[:'platform']

      self.time_usage_started = attributes[:'timeUsageStarted'] if attributes[:'timeUsageStarted']

      raise 'You cannot provide both :timeUsageStarted and :time_usage_started' if attributes.key?(:'timeUsageStarted') && attributes.key?(:'time_usage_started')

      self.time_usage_started = attributes[:'time_usage_started'] if attributes[:'time_usage_started']

      self.time_usage_ended = attributes[:'timeUsageEnded'] if attributes[:'timeUsageEnded']

      raise 'You cannot provide both :timeUsageEnded and :time_usage_ended' if attributes.key?(:'timeUsageEnded') && attributes.key?(:'time_usage_ended')

      self.time_usage_ended = attributes[:'time_usage_ended'] if attributes[:'time_usage_ended']

      self.computed_carbon_emission = attributes[:'computedCarbonEmission'] if attributes[:'computedCarbonEmission']

      raise 'You cannot provide both :computedCarbonEmission and :computed_carbon_emission' if attributes.key?(:'computedCarbonEmission') && attributes.key?(:'computed_carbon_emission')

      self.computed_carbon_emission = attributes[:'computed_carbon_emission'] if attributes[:'computed_carbon_emission']

      self.emission_calculation_method = attributes[:'emissionCalculationMethod'] if attributes[:'emissionCalculationMethod']

      raise 'You cannot provide both :emissionCalculationMethod and :emission_calculation_method' if attributes.key?(:'emissionCalculationMethod') && attributes.key?(:'emission_calculation_method')

      self.emission_calculation_method = attributes[:'emission_calculation_method'] if attributes[:'emission_calculation_method']

      self.subscription_id = attributes[:'subscriptionId'] if attributes[:'subscriptionId']

      raise 'You cannot provide both :subscriptionId and :subscription_id' if attributes.key?(:'subscriptionId') && attributes.key?(:'subscription_id')

      self.subscription_id = attributes[:'subscription_id'] if attributes[:'subscription_id']

      self.tags = attributes[:'tags'] if attributes[:'tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        tenant_id == other.tenant_id &&
        tenant_name == other.tenant_name &&
        compartment_id == other.compartment_id &&
        compartment_path == other.compartment_path &&
        compartment_name == other.compartment_name &&
        service == other.service &&
        resource_name == other.resource_name &&
        resource_id == other.resource_id &&
        region == other.region &&
        ad == other.ad &&
        sku_part_number == other.sku_part_number &&
        sku_name == other.sku_name &&
        platform == other.platform &&
        time_usage_started == other.time_usage_started &&
        time_usage_ended == other.time_usage_ended &&
        computed_carbon_emission == other.computed_carbon_emission &&
        emission_calculation_method == other.emission_calculation_method &&
        subscription_id == other.subscription_id &&
        tags == other.tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [tenant_id, tenant_name, compartment_id, compartment_path, compartment_name, service, resource_name, resource_id, region, ad, sku_part_number, sku_name, platform, time_usage_started, time_usage_ended, computed_carbon_emission, emission_calculation_method, subscription_id, tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
