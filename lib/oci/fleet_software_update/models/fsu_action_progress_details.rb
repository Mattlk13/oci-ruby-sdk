# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220528
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Progress of the Action in execution. If the Exadata Fleet Update Action has not started yet, this will be omitted.
  #
  class FleetSoftwareUpdate::Models::FsuActionProgressDetails
    # Number of targets with jobs in progress.
    #
    # @return [Integer]
    attr_accessor :in_progress_targets

    # Number of targets with completed jobs.
    #
    # @return [Integer]
    attr_accessor :completed_targets

    # Number of targets with failed jobs.
    #
    # @return [Integer]
    attr_accessor :failed_targets

    # Number of targets with jobs waiting for batch to execute or for user to resume.
    #
    # @return [Integer]
    attr_accessor :waiting_targets

    # Total number of targets impacted by Exadata Fleet Update Action.
    #
    # @return [Integer]
    attr_accessor :total_targets

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'in_progress_targets': :'inProgressTargets',
        'completed_targets': :'completedTargets',
        'failed_targets': :'failedTargets',
        'waiting_targets': :'waitingTargets',
        'total_targets': :'totalTargets'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'in_progress_targets': :'Integer',
        'completed_targets': :'Integer',
        'failed_targets': :'Integer',
        'waiting_targets': :'Integer',
        'total_targets': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :in_progress_targets The value to assign to the {#in_progress_targets} property
    # @option attributes [Integer] :completed_targets The value to assign to the {#completed_targets} property
    # @option attributes [Integer] :failed_targets The value to assign to the {#failed_targets} property
    # @option attributes [Integer] :waiting_targets The value to assign to the {#waiting_targets} property
    # @option attributes [Integer] :total_targets The value to assign to the {#total_targets} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.in_progress_targets = attributes[:'inProgressTargets'] if attributes[:'inProgressTargets']

      raise 'You cannot provide both :inProgressTargets and :in_progress_targets' if attributes.key?(:'inProgressTargets') && attributes.key?(:'in_progress_targets')

      self.in_progress_targets = attributes[:'in_progress_targets'] if attributes[:'in_progress_targets']

      self.completed_targets = attributes[:'completedTargets'] if attributes[:'completedTargets']

      raise 'You cannot provide both :completedTargets and :completed_targets' if attributes.key?(:'completedTargets') && attributes.key?(:'completed_targets')

      self.completed_targets = attributes[:'completed_targets'] if attributes[:'completed_targets']

      self.failed_targets = attributes[:'failedTargets'] if attributes[:'failedTargets']

      raise 'You cannot provide both :failedTargets and :failed_targets' if attributes.key?(:'failedTargets') && attributes.key?(:'failed_targets')

      self.failed_targets = attributes[:'failed_targets'] if attributes[:'failed_targets']

      self.waiting_targets = attributes[:'waitingTargets'] if attributes[:'waitingTargets']

      raise 'You cannot provide both :waitingTargets and :waiting_targets' if attributes.key?(:'waitingTargets') && attributes.key?(:'waiting_targets')

      self.waiting_targets = attributes[:'waiting_targets'] if attributes[:'waiting_targets']

      self.total_targets = attributes[:'totalTargets'] if attributes[:'totalTargets']

      raise 'You cannot provide both :totalTargets and :total_targets' if attributes.key?(:'totalTargets') && attributes.key?(:'total_targets')

      self.total_targets = attributes[:'total_targets'] if attributes[:'total_targets']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        in_progress_targets == other.in_progress_targets &&
        completed_targets == other.completed_targets &&
        failed_targets == other.failed_targets &&
        waiting_targets == other.waiting_targets &&
        total_targets == other.total_targets
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [in_progress_targets, completed_targets, failed_targets, waiting_targets, total_targets].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
