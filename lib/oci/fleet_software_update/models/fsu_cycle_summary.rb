# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220528
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Exadata Fleet Update Cycle Summary.
  #
  class FleetSoftwareUpdate::Models::FsuCycleSummary
    TYPE_ENUM = [
      TYPE_PATCH = 'PATCH'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    COLLECTION_TYPE_ENUM = [
      COLLECTION_TYPE_DB = 'DB'.freeze,
      COLLECTION_TYPE_GI = 'GI'.freeze,
      COLLECTION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ROLLBACK_CYCLE_STATE_ENUM = [
      ROLLBACK_CYCLE_STATE_ABLE_TO_EXECUTE = 'ABLE_TO_EXECUTE'.freeze,
      ROLLBACK_CYCLE_STATE_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      ROLLBACK_CYCLE_STATE_FAILED = 'FAILED'.freeze,
      ROLLBACK_CYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      ROLLBACK_CYCLE_STATE_SUCCEEDED = 'SUCCEEDED'.freeze,
      ROLLBACK_CYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LAST_COMPLETED_ACTION_ENUM = [
      LAST_COMPLETED_ACTION_STAGE = 'STAGE'.freeze,
      LAST_COMPLETED_ACTION_PRECHECK_STAGE = 'PRECHECK_STAGE'.freeze,
      LAST_COMPLETED_ACTION_PRECHECK_APPLY = 'PRECHECK_APPLY'.freeze,
      LAST_COMPLETED_ACTION_APPLY = 'APPLY'.freeze,
      LAST_COMPLETED_ACTION_ROLLBACK_AND_REMOVE_TARGET = 'ROLLBACK_AND_REMOVE_TARGET'.freeze,
      LAST_COMPLETED_ACTION_CLEANUP = 'CLEANUP'.freeze,
      LAST_COMPLETED_ACTION_ROLLBACK_MAINTENANCE_CYCLE = 'ROLLBACK_MAINTENANCE_CYCLE'.freeze,
      LAST_COMPLETED_ACTION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_SUCCEEDED = 'SUCCEEDED'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** OCID identifier for the Exadata Fleet Update Cycle.
    #
    # @return [String]
    attr_accessor :id

    # Exadata Fleet Update Cycle display name.
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Compartment Identifier.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** Type of Exadata Fleet Update Cycle.
    #
    # @return [String]
    attr_reader :type

    # **[Required]** OCID identifier for the Collection ID the Exadata Fleet Update Cycle is assigned to.
    #
    # @return [String]
    attr_accessor :fsu_collection_id

    # **[Required]** Type of Collection this Exadata Fleet Update Cycle belongs to.
    #
    # @return [String]
    attr_reader :collection_type

    # OCID identifier for the Action that is currently in execution, if applicable.
    #
    # @return [String]
    attr_accessor :executing_fsu_action_id

    # In this array all the possible actions will be listed. The first element is the suggested Action.
    #
    # @return [Array<OCI::FleetSoftwareUpdate::Models::NextActionToExecuteDetails>]
    attr_accessor :next_action_to_execute

    # OCID identifier for the latest Action the Exadata Fleet Update Cycle.
    # No value would indicate that the Cycle has not completed any Action yet.
    #
    # @return [String]
    attr_accessor :last_completed_action_id

    # Current rollback cycle state if rollback maintenance cycle action has been attempted.
    # No value would indicate that the Cycle has not run a rollback maintenance cycle action before.
    #
    # @return [String]
    attr_reader :rollback_cycle_state

    # The latest Action type that was completed in the Exadata Fleet Update Cycle.
    # No value would indicate that the Cycle has not completed any Action yet.
    #
    # @return [String]
    attr_reader :last_completed_action

    # This attribute is required.
    # @return [OCI::FleetSoftwareUpdate::Models::FsuGoalVersionDetails]
    attr_accessor :goal_version_details

    # @return [OCI::FleetSoftwareUpdate::Models::DiagnosticsCollectionDetails]
    attr_accessor :diagnostics_collection

    # **[Required]** The date and time the Exadata Fleet Update Cycle was created, as described in
    # [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
    #
    # @return [DateTime]
    attr_accessor :time_created

    # The date and time the Exadata Fleet Update Cycle was updated,
    # as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339),
    # section 14.29.
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # The date and time the Exadata Fleet Update Cycle was finished,
    # as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
    #
    # @return [DateTime]
    attr_accessor :time_finished

    # **[Required]** The current state of the Exadata Fleet Update Cycle.
    # @return [String]
    attr_reader :lifecycle_state

    # A message describing the current state in more detail.
    # For example, can be used to provide actionable information for a resource in Failed state.
    #
    # @return [String]
    attr_accessor :lifecycle_details

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'type': :'type',
        'fsu_collection_id': :'fsuCollectionId',
        'collection_type': :'collectionType',
        'executing_fsu_action_id': :'executingFsuActionId',
        'next_action_to_execute': :'nextActionToExecute',
        'last_completed_action_id': :'lastCompletedActionId',
        'rollback_cycle_state': :'rollbackCycleState',
        'last_completed_action': :'lastCompletedAction',
        'goal_version_details': :'goalVersionDetails',
        'diagnostics_collection': :'diagnosticsCollection',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'time_finished': :'timeFinished',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'compartment_id': :'String',
        'type': :'String',
        'fsu_collection_id': :'String',
        'collection_type': :'String',
        'executing_fsu_action_id': :'String',
        'next_action_to_execute': :'Array<OCI::FleetSoftwareUpdate::Models::NextActionToExecuteDetails>',
        'last_completed_action_id': :'String',
        'rollback_cycle_state': :'String',
        'last_completed_action': :'String',
        'goal_version_details': :'OCI::FleetSoftwareUpdate::Models::FsuGoalVersionDetails',
        'diagnostics_collection': :'OCI::FleetSoftwareUpdate::Models::DiagnosticsCollectionDetails',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'time_finished': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :fsu_collection_id The value to assign to the {#fsu_collection_id} property
    # @option attributes [String] :collection_type The value to assign to the {#collection_type} property
    # @option attributes [String] :executing_fsu_action_id The value to assign to the {#executing_fsu_action_id} property
    # @option attributes [Array<OCI::FleetSoftwareUpdate::Models::NextActionToExecuteDetails>] :next_action_to_execute The value to assign to the {#next_action_to_execute} property
    # @option attributes [String] :last_completed_action_id The value to assign to the {#last_completed_action_id} property
    # @option attributes [String] :rollback_cycle_state The value to assign to the {#rollback_cycle_state} property
    # @option attributes [String] :last_completed_action The value to assign to the {#last_completed_action} property
    # @option attributes [OCI::FleetSoftwareUpdate::Models::FsuGoalVersionDetails] :goal_version_details The value to assign to the {#goal_version_details} property
    # @option attributes [OCI::FleetSoftwareUpdate::Models::DiagnosticsCollectionDetails] :diagnostics_collection The value to assign to the {#diagnostics_collection} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [DateTime] :time_finished The value to assign to the {#time_finished} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.type = attributes[:'type'] if attributes[:'type']

      self.fsu_collection_id = attributes[:'fsuCollectionId'] if attributes[:'fsuCollectionId']

      raise 'You cannot provide both :fsuCollectionId and :fsu_collection_id' if attributes.key?(:'fsuCollectionId') && attributes.key?(:'fsu_collection_id')

      self.fsu_collection_id = attributes[:'fsu_collection_id'] if attributes[:'fsu_collection_id']

      self.collection_type = attributes[:'collectionType'] if attributes[:'collectionType']

      raise 'You cannot provide both :collectionType and :collection_type' if attributes.key?(:'collectionType') && attributes.key?(:'collection_type')

      self.collection_type = attributes[:'collection_type'] if attributes[:'collection_type']

      self.executing_fsu_action_id = attributes[:'executingFsuActionId'] if attributes[:'executingFsuActionId']

      raise 'You cannot provide both :executingFsuActionId and :executing_fsu_action_id' if attributes.key?(:'executingFsuActionId') && attributes.key?(:'executing_fsu_action_id')

      self.executing_fsu_action_id = attributes[:'executing_fsu_action_id'] if attributes[:'executing_fsu_action_id']

      self.next_action_to_execute = attributes[:'nextActionToExecute'] if attributes[:'nextActionToExecute']

      raise 'You cannot provide both :nextActionToExecute and :next_action_to_execute' if attributes.key?(:'nextActionToExecute') && attributes.key?(:'next_action_to_execute')

      self.next_action_to_execute = attributes[:'next_action_to_execute'] if attributes[:'next_action_to_execute']

      self.last_completed_action_id = attributes[:'lastCompletedActionId'] if attributes[:'lastCompletedActionId']

      raise 'You cannot provide both :lastCompletedActionId and :last_completed_action_id' if attributes.key?(:'lastCompletedActionId') && attributes.key?(:'last_completed_action_id')

      self.last_completed_action_id = attributes[:'last_completed_action_id'] if attributes[:'last_completed_action_id']

      self.rollback_cycle_state = attributes[:'rollbackCycleState'] if attributes[:'rollbackCycleState']

      raise 'You cannot provide both :rollbackCycleState and :rollback_cycle_state' if attributes.key?(:'rollbackCycleState') && attributes.key?(:'rollback_cycle_state')

      self.rollback_cycle_state = attributes[:'rollback_cycle_state'] if attributes[:'rollback_cycle_state']

      self.last_completed_action = attributes[:'lastCompletedAction'] if attributes[:'lastCompletedAction']

      raise 'You cannot provide both :lastCompletedAction and :last_completed_action' if attributes.key?(:'lastCompletedAction') && attributes.key?(:'last_completed_action')

      self.last_completed_action = attributes[:'last_completed_action'] if attributes[:'last_completed_action']

      self.goal_version_details = attributes[:'goalVersionDetails'] if attributes[:'goalVersionDetails']

      raise 'You cannot provide both :goalVersionDetails and :goal_version_details' if attributes.key?(:'goalVersionDetails') && attributes.key?(:'goal_version_details')

      self.goal_version_details = attributes[:'goal_version_details'] if attributes[:'goal_version_details']

      self.diagnostics_collection = attributes[:'diagnosticsCollection'] if attributes[:'diagnosticsCollection']

      raise 'You cannot provide both :diagnosticsCollection and :diagnostics_collection' if attributes.key?(:'diagnosticsCollection') && attributes.key?(:'diagnostics_collection')

      self.diagnostics_collection = attributes[:'diagnostics_collection'] if attributes[:'diagnostics_collection']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.time_finished = attributes[:'timeFinished'] if attributes[:'timeFinished']

      raise 'You cannot provide both :timeFinished and :time_finished' if attributes.key?(:'timeFinished') && attributes.key?(:'time_finished')

      self.time_finished = attributes[:'time_finished'] if attributes[:'time_finished']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] collection_type Object to be assigned
    def collection_type=(collection_type)
      # rubocop:disable Style/ConditionalAssignment
      if collection_type && !COLLECTION_TYPE_ENUM.include?(collection_type)
        OCI.logger.debug("Unknown value for 'collection_type' [" + collection_type + "]. Mapping to 'COLLECTION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @collection_type = COLLECTION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @collection_type = collection_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rollback_cycle_state Object to be assigned
    def rollback_cycle_state=(rollback_cycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if rollback_cycle_state && !ROLLBACK_CYCLE_STATE_ENUM.include?(rollback_cycle_state)
        OCI.logger.debug("Unknown value for 'rollback_cycle_state' [" + rollback_cycle_state + "]. Mapping to 'ROLLBACK_CYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @rollback_cycle_state = ROLLBACK_CYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @rollback_cycle_state = rollback_cycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] last_completed_action Object to be assigned
    def last_completed_action=(last_completed_action)
      # rubocop:disable Style/ConditionalAssignment
      if last_completed_action && !LAST_COMPLETED_ACTION_ENUM.include?(last_completed_action)
        OCI.logger.debug("Unknown value for 'last_completed_action' [" + last_completed_action + "]. Mapping to 'LAST_COMPLETED_ACTION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @last_completed_action = LAST_COMPLETED_ACTION_UNKNOWN_ENUM_VALUE
      else
        @last_completed_action = last_completed_action
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        type == other.type &&
        fsu_collection_id == other.fsu_collection_id &&
        collection_type == other.collection_type &&
        executing_fsu_action_id == other.executing_fsu_action_id &&
        next_action_to_execute == other.next_action_to_execute &&
        last_completed_action_id == other.last_completed_action_id &&
        rollback_cycle_state == other.rollback_cycle_state &&
        last_completed_action == other.last_completed_action &&
        goal_version_details == other.goal_version_details &&
        diagnostics_collection == other.diagnostics_collection &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        time_finished == other.time_finished &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, compartment_id, type, fsu_collection_id, collection_type, executing_fsu_action_id, next_action_to_execute, last_completed_action_id, rollback_cycle_state, last_completed_action, goal_version_details, diagnostics_collection, time_created, time_updated, time_finished, lifecycle_state, lifecycle_details, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
