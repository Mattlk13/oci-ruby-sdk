# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220528
require 'date'
require_relative 'target_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of a Database target member of a Exadata Fleet Update Collection.
  # Stored references of the resource documented in
  #   https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/Database/
  #
  class FleetSoftwareUpdate::Models::DatabaseTargetSummary < FleetSoftwareUpdate::Models::TargetDetails
    # OCID of the database home.
    #
    # @return [String]
    attr_accessor :db_home_id

    # OCID of the related VM Cluster or Cloud VM Cluster.
    #
    # @return [String]
    attr_accessor :vm_cluster_id

    # OCID of the related Exadata Infrastructure or Cloud Exadata Infrastructure resource.
    #
    # @return [String]
    attr_accessor :infrastructure_id

    # OCID of the Database sofware image.
    #
    # @return [String]
    attr_accessor :software_image_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'entity_type': :'entityType',
        'id': :'id',
        'compartment_id': :'compartmentId',
        'db_home_id': :'dbHomeId',
        'vm_cluster_id': :'vmClusterId',
        'infrastructure_id': :'infrastructureId',
        'software_image_id': :'softwareImageId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'entity_type': :'String',
        'id': :'String',
        'compartment_id': :'String',
        'db_home_id': :'String',
        'vm_cluster_id': :'String',
        'infrastructure_id': :'String',
        'software_image_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {OCI::FleetSoftwareUpdate::Models::TargetDetails#id #id} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::FleetSoftwareUpdate::Models::TargetDetails#compartment_id #compartment_id} proprety
    # @option attributes [String] :db_home_id The value to assign to the {#db_home_id} property
    # @option attributes [String] :vm_cluster_id The value to assign to the {#vm_cluster_id} property
    # @option attributes [String] :infrastructure_id The value to assign to the {#infrastructure_id} property
    # @option attributes [String] :software_image_id The value to assign to the {#software_image_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['entityType'] = 'DATABASE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.db_home_id = attributes[:'dbHomeId'] if attributes[:'dbHomeId']

      raise 'You cannot provide both :dbHomeId and :db_home_id' if attributes.key?(:'dbHomeId') && attributes.key?(:'db_home_id')

      self.db_home_id = attributes[:'db_home_id'] if attributes[:'db_home_id']

      self.vm_cluster_id = attributes[:'vmClusterId'] if attributes[:'vmClusterId']

      raise 'You cannot provide both :vmClusterId and :vm_cluster_id' if attributes.key?(:'vmClusterId') && attributes.key?(:'vm_cluster_id')

      self.vm_cluster_id = attributes[:'vm_cluster_id'] if attributes[:'vm_cluster_id']

      self.infrastructure_id = attributes[:'infrastructureId'] if attributes[:'infrastructureId']

      raise 'You cannot provide both :infrastructureId and :infrastructure_id' if attributes.key?(:'infrastructureId') && attributes.key?(:'infrastructure_id')

      self.infrastructure_id = attributes[:'infrastructure_id'] if attributes[:'infrastructure_id']

      self.software_image_id = attributes[:'softwareImageId'] if attributes[:'softwareImageId']

      raise 'You cannot provide both :softwareImageId and :software_image_id' if attributes.key?(:'softwareImageId') && attributes.key?(:'software_image_id')

      self.software_image_id = attributes[:'software_image_id'] if attributes[:'software_image_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        entity_type == other.entity_type &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        db_home_id == other.db_home_id &&
        vm_cluster_id == other.vm_cluster_id &&
        infrastructure_id == other.infrastructure_id &&
        software_image_id == other.software_image_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [entity_type, id, compartment_id, db_home_id, vm_cluster_id, infrastructure_id, software_image_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
