# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220528
require 'date'
require 'logger'
require_relative 'fsu_collection'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # 'DB' type Exadata Fleet Update Collection details.
  #
  class FleetSoftwareUpdate::Models::DbCollection < FleetSoftwareUpdate::Models::FsuCollection
    SOURCE_MAJOR_VERSION_ENUM = [
      SOURCE_MAJOR_VERSION_DB_11204 = 'DB_11204'.freeze,
      SOURCE_MAJOR_VERSION_DB_121 = 'DB_121'.freeze,
      SOURCE_MAJOR_VERSION_DB_122 = 'DB_122'.freeze,
      SOURCE_MAJOR_VERSION_DB_18 = 'DB_18'.freeze,
      SOURCE_MAJOR_VERSION_DB_19 = 'DB_19'.freeze,
      SOURCE_MAJOR_VERSION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Database Major Version of targets to be included in the Exadata Fleet Update Collection.
    # https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/DbVersionSummary/ListDbVersions
    # Only Database targets that match the version specified in this value would be added to the Exadata Fleet Update Collection.
    #
    # @return [String]
    attr_reader :source_major_version

    # This attribute is required.
    # @return [OCI::FleetSoftwareUpdate::Models::DbFleetDiscoveryDetails]
    attr_accessor :fleet_discovery

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'type': :'type',
        'service_type': :'serviceType',
        'compartment_id': :'compartmentId',
        'active_fsu_cycle': :'activeFsuCycle',
        'target_count': :'targetCount',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'source_major_version': :'sourceMajorVersion',
        'fleet_discovery': :'fleetDiscovery'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'type': :'String',
        'service_type': :'String',
        'compartment_id': :'String',
        'active_fsu_cycle': :'OCI::FleetSoftwareUpdate::Models::ActiveCycleDetails',
        'target_count': :'Integer',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'source_major_version': :'String',
        'fleet_discovery': :'OCI::FleetSoftwareUpdate::Models::DbFleetDiscoveryDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#id #id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#display_name #display_name} proprety
    # @option attributes [String] :service_type The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#service_type #service_type} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#compartment_id #compartment_id} proprety
    # @option attributes [OCI::FleetSoftwareUpdate::Models::ActiveCycleDetails] :active_fsu_cycle The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#active_fsu_cycle #active_fsu_cycle} proprety
    # @option attributes [Integer] :target_count The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#target_count #target_count} proprety
    # @option attributes [DateTime] :time_created The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#time_created #time_created} proprety
    # @option attributes [DateTime] :time_updated The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#time_updated #time_updated} proprety
    # @option attributes [String] :lifecycle_state The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#lifecycle_state #lifecycle_state} proprety
    # @option attributes [String] :lifecycle_details The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#lifecycle_details #lifecycle_details} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#defined_tags #defined_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {OCI::FleetSoftwareUpdate::Models::FsuCollection#system_tags #system_tags} proprety
    # @option attributes [String] :source_major_version The value to assign to the {#source_major_version} property
    # @option attributes [OCI::FleetSoftwareUpdate::Models::DbFleetDiscoveryDetails] :fleet_discovery The value to assign to the {#fleet_discovery} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['type'] = 'DB'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.source_major_version = attributes[:'sourceMajorVersion'] if attributes[:'sourceMajorVersion']

      raise 'You cannot provide both :sourceMajorVersion and :source_major_version' if attributes.key?(:'sourceMajorVersion') && attributes.key?(:'source_major_version')

      self.source_major_version = attributes[:'source_major_version'] if attributes[:'source_major_version']

      self.fleet_discovery = attributes[:'fleetDiscovery'] if attributes[:'fleetDiscovery']

      raise 'You cannot provide both :fleetDiscovery and :fleet_discovery' if attributes.key?(:'fleetDiscovery') && attributes.key?(:'fleet_discovery')

      self.fleet_discovery = attributes[:'fleet_discovery'] if attributes[:'fleet_discovery']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_major_version Object to be assigned
    def source_major_version=(source_major_version)
      # rubocop:disable Style/ConditionalAssignment
      if source_major_version && !SOURCE_MAJOR_VERSION_ENUM.include?(source_major_version)
        OCI.logger.debug("Unknown value for 'source_major_version' [" + source_major_version + "]. Mapping to 'SOURCE_MAJOR_VERSION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @source_major_version = SOURCE_MAJOR_VERSION_UNKNOWN_ENUM_VALUE
      else
        @source_major_version = source_major_version
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        type == other.type &&
        service_type == other.service_type &&
        compartment_id == other.compartment_id &&
        active_fsu_cycle == other.active_fsu_cycle &&
        target_count == other.target_count &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        source_major_version == other.source_major_version &&
        fleet_discovery == other.fleet_discovery
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, type, service_type, compartment_id, active_fsu_cycle, target_count, time_created, time_updated, lifecycle_state, lifecycle_details, freeform_tags, defined_tags, system_tags, source_major_version, fleet_discovery].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
