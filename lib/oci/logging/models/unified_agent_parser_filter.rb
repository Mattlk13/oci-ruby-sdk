# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200531
require 'date'
require_relative 'unified_agent_logging_filter'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Logging parser filter object.
  # Ref: https://docs.fluentd.org/filter/parser
  #
  class Logging::Models::UnifiedAgentParserFilter < Logging::Models::UnifiedAgentLoggingFilter
    # This attribute is required.
    # @return [OCI::Logging::Models::UnifiedAgentParser]
    attr_accessor :parser

    # **[Required]** The field name in the record to parse.
    # @return [String]
    attr_accessor :key_name

    # If true, keep the original event time in the parsed result.
    # @return [BOOLEAN]
    attr_accessor :reserve_time

    # If true, keep the original key-value pair in the parsed result.
    # @return [BOOLEAN]
    attr_accessor :reserve_data

    # If true, remove the keyName field when parsing is succeeded.
    # @return [BOOLEAN]
    attr_accessor :remove_key_name_field

    # If true, the invalid string is replaced with safe characters and is re-parsed.
    # @return [BOOLEAN]
    attr_accessor :replace_invalid_sequence

    # Store the parsed values with the specified key name prefix.
    # @return [String]
    attr_accessor :inject_key_prefix

    # Store the parsed values as a hash value in a field.
    # @return [String]
    attr_accessor :hash_value_field

    # If true, emit invalid record to @ERROR label. Invalid cases are: 1) key does not exist; 2) the format
    # does not match; or 3) an unexpected error. You can rescue unexpected format logs in the @ERROR lable.
    # If you want to ignore these errors, set this to false.
    #
    # @return [BOOLEAN]
    attr_accessor :emit_invalid_record_to_error

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'filter_type': :'filterType',
        'parser': :'parser',
        'key_name': :'keyName',
        'reserve_time': :'reserveTime',
        'reserve_data': :'reserveData',
        'remove_key_name_field': :'removeKeyNameField',
        'replace_invalid_sequence': :'replaceInvalidSequence',
        'inject_key_prefix': :'injectKeyPrefix',
        'hash_value_field': :'hashValueField',
        'emit_invalid_record_to_error': :'emitInvalidRecordToError'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'filter_type': :'String',
        'parser': :'OCI::Logging::Models::UnifiedAgentParser',
        'key_name': :'String',
        'reserve_time': :'BOOLEAN',
        'reserve_data': :'BOOLEAN',
        'remove_key_name_field': :'BOOLEAN',
        'replace_invalid_sequence': :'BOOLEAN',
        'inject_key_prefix': :'String',
        'hash_value_field': :'String',
        'emit_invalid_record_to_error': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {OCI::Logging::Models::UnifiedAgentLoggingFilter#name #name} proprety
    # @option attributes [OCI::Logging::Models::UnifiedAgentParser] :parser The value to assign to the {#parser} property
    # @option attributes [String] :key_name The value to assign to the {#key_name} property
    # @option attributes [BOOLEAN] :reserve_time The value to assign to the {#reserve_time} property
    # @option attributes [BOOLEAN] :reserve_data The value to assign to the {#reserve_data} property
    # @option attributes [BOOLEAN] :remove_key_name_field The value to assign to the {#remove_key_name_field} property
    # @option attributes [BOOLEAN] :replace_invalid_sequence The value to assign to the {#replace_invalid_sequence} property
    # @option attributes [String] :inject_key_prefix The value to assign to the {#inject_key_prefix} property
    # @option attributes [String] :hash_value_field The value to assign to the {#hash_value_field} property
    # @option attributes [BOOLEAN] :emit_invalid_record_to_error The value to assign to the {#emit_invalid_record_to_error} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['filterType'] = 'PARSER_FILTER'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.parser = attributes[:'parser'] if attributes[:'parser']

      self.key_name = attributes[:'keyName'] if attributes[:'keyName']

      raise 'You cannot provide both :keyName and :key_name' if attributes.key?(:'keyName') && attributes.key?(:'key_name')

      self.key_name = attributes[:'key_name'] if attributes[:'key_name']

      self.reserve_time = attributes[:'reserveTime'] unless attributes[:'reserveTime'].nil?
      self.reserve_time = false if reserve_time.nil? && !attributes.key?(:'reserveTime') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :reserveTime and :reserve_time' if attributes.key?(:'reserveTime') && attributes.key?(:'reserve_time')

      self.reserve_time = attributes[:'reserve_time'] unless attributes[:'reserve_time'].nil?
      self.reserve_time = false if reserve_time.nil? && !attributes.key?(:'reserveTime') && !attributes.key?(:'reserve_time') # rubocop:disable Style/StringLiterals

      self.reserve_data = attributes[:'reserveData'] unless attributes[:'reserveData'].nil?
      self.reserve_data = false if reserve_data.nil? && !attributes.key?(:'reserveData') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :reserveData and :reserve_data' if attributes.key?(:'reserveData') && attributes.key?(:'reserve_data')

      self.reserve_data = attributes[:'reserve_data'] unless attributes[:'reserve_data'].nil?
      self.reserve_data = false if reserve_data.nil? && !attributes.key?(:'reserveData') && !attributes.key?(:'reserve_data') # rubocop:disable Style/StringLiterals

      self.remove_key_name_field = attributes[:'removeKeyNameField'] unless attributes[:'removeKeyNameField'].nil?
      self.remove_key_name_field = false if remove_key_name_field.nil? && !attributes.key?(:'removeKeyNameField') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :removeKeyNameField and :remove_key_name_field' if attributes.key?(:'removeKeyNameField') && attributes.key?(:'remove_key_name_field')

      self.remove_key_name_field = attributes[:'remove_key_name_field'] unless attributes[:'remove_key_name_field'].nil?
      self.remove_key_name_field = false if remove_key_name_field.nil? && !attributes.key?(:'removeKeyNameField') && !attributes.key?(:'remove_key_name_field') # rubocop:disable Style/StringLiterals

      self.replace_invalid_sequence = attributes[:'replaceInvalidSequence'] unless attributes[:'replaceInvalidSequence'].nil?
      self.replace_invalid_sequence = false if replace_invalid_sequence.nil? && !attributes.key?(:'replaceInvalidSequence') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :replaceInvalidSequence and :replace_invalid_sequence' if attributes.key?(:'replaceInvalidSequence') && attributes.key?(:'replace_invalid_sequence')

      self.replace_invalid_sequence = attributes[:'replace_invalid_sequence'] unless attributes[:'replace_invalid_sequence'].nil?
      self.replace_invalid_sequence = false if replace_invalid_sequence.nil? && !attributes.key?(:'replaceInvalidSequence') && !attributes.key?(:'replace_invalid_sequence') # rubocop:disable Style/StringLiterals

      self.inject_key_prefix = attributes[:'injectKeyPrefix'] if attributes[:'injectKeyPrefix']

      raise 'You cannot provide both :injectKeyPrefix and :inject_key_prefix' if attributes.key?(:'injectKeyPrefix') && attributes.key?(:'inject_key_prefix')

      self.inject_key_prefix = attributes[:'inject_key_prefix'] if attributes[:'inject_key_prefix']

      self.hash_value_field = attributes[:'hashValueField'] if attributes[:'hashValueField']

      raise 'You cannot provide both :hashValueField and :hash_value_field' if attributes.key?(:'hashValueField') && attributes.key?(:'hash_value_field')

      self.hash_value_field = attributes[:'hash_value_field'] if attributes[:'hash_value_field']

      self.emit_invalid_record_to_error = attributes[:'emitInvalidRecordToError'] unless attributes[:'emitInvalidRecordToError'].nil?
      self.emit_invalid_record_to_error = true if emit_invalid_record_to_error.nil? && !attributes.key?(:'emitInvalidRecordToError') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :emitInvalidRecordToError and :emit_invalid_record_to_error' if attributes.key?(:'emitInvalidRecordToError') && attributes.key?(:'emit_invalid_record_to_error')

      self.emit_invalid_record_to_error = attributes[:'emit_invalid_record_to_error'] unless attributes[:'emit_invalid_record_to_error'].nil?
      self.emit_invalid_record_to_error = true if emit_invalid_record_to_error.nil? && !attributes.key?(:'emitInvalidRecordToError') && !attributes.key?(:'emit_invalid_record_to_error') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        filter_type == other.filter_type &&
        parser == other.parser &&
        key_name == other.key_name &&
        reserve_time == other.reserve_time &&
        reserve_data == other.reserve_data &&
        remove_key_name_field == other.remove_key_name_field &&
        replace_invalid_sequence == other.replace_invalid_sequence &&
        inject_key_prefix == other.inject_key_prefix &&
        hash_value_field == other.hash_value_field &&
        emit_invalid_record_to_error == other.emit_invalid_record_to_error
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, filter_type, parser, key_name, reserve_time, reserve_data, remove_key_name_field, replace_invalid_sequence, inject_key_prefix, hash_value_field, emit_invalid_record_to_error].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
