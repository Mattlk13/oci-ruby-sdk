# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Schema for single configuration property
  class DataScience::Models::ConfigurationPropertySchema
    VALUE_TYPE_ENUM = [
      VALUE_TYPE_STRING = 'STRING'.freeze,
      VALUE_TYPE_SECRET = 'SECRET'.freeze,
      VALUE_TYPE_VAULT_SECRET_ID = 'VAULT_SECRET_ID'.freeze,
      VALUE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Name of key (parameter name)
    # @return [String]
    attr_accessor :key_name

    # **[Required]** Type of value
    # @return [String]
    attr_reader :value_type

    # **[Required]** Description of this configuration property
    # @return [String]
    attr_accessor :description

    # If the value is true this configuration property is mandatory and visa versa. If not specified configuration property is optional.
    # @return [BOOLEAN]
    attr_accessor :is_mandatory

    # The default value for the optional configuration property (it must not be specified for mandatory configuration properties)
    # @return [String]
    attr_accessor :default_value

    # A regular expression will be used for the validation of property value.
    # @return [String]
    attr_accessor :validation_regexp

    # **[Required]** Sample property value (it must match validationRegexp if it is specified)
    # @return [String]
    attr_accessor :sample_value

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'key_name': :'keyName',
        'value_type': :'valueType',
        'description': :'description',
        'is_mandatory': :'isMandatory',
        'default_value': :'defaultValue',
        'validation_regexp': :'validationRegexp',
        'sample_value': :'sampleValue'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'key_name': :'String',
        'value_type': :'String',
        'description': :'String',
        'is_mandatory': :'BOOLEAN',
        'default_value': :'String',
        'validation_regexp': :'String',
        'sample_value': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key_name The value to assign to the {#key_name} property
    # @option attributes [String] :value_type The value to assign to the {#value_type} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [BOOLEAN] :is_mandatory The value to assign to the {#is_mandatory} property
    # @option attributes [String] :default_value The value to assign to the {#default_value} property
    # @option attributes [String] :validation_regexp The value to assign to the {#validation_regexp} property
    # @option attributes [String] :sample_value The value to assign to the {#sample_value} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.key_name = attributes[:'keyName'] if attributes[:'keyName']

      raise 'You cannot provide both :keyName and :key_name' if attributes.key?(:'keyName') && attributes.key?(:'key_name')

      self.key_name = attributes[:'key_name'] if attributes[:'key_name']

      self.value_type = attributes[:'valueType'] if attributes[:'valueType']

      raise 'You cannot provide both :valueType and :value_type' if attributes.key?(:'valueType') && attributes.key?(:'value_type')

      self.value_type = attributes[:'value_type'] if attributes[:'value_type']

      self.description = attributes[:'description'] if attributes[:'description']

      self.is_mandatory = attributes[:'isMandatory'] unless attributes[:'isMandatory'].nil?

      raise 'You cannot provide both :isMandatory and :is_mandatory' if attributes.key?(:'isMandatory') && attributes.key?(:'is_mandatory')

      self.is_mandatory = attributes[:'is_mandatory'] unless attributes[:'is_mandatory'].nil?

      self.default_value = attributes[:'defaultValue'] if attributes[:'defaultValue']

      raise 'You cannot provide both :defaultValue and :default_value' if attributes.key?(:'defaultValue') && attributes.key?(:'default_value')

      self.default_value = attributes[:'default_value'] if attributes[:'default_value']

      self.validation_regexp = attributes[:'validationRegexp'] if attributes[:'validationRegexp']

      raise 'You cannot provide both :validationRegexp and :validation_regexp' if attributes.key?(:'validationRegexp') && attributes.key?(:'validation_regexp')

      self.validation_regexp = attributes[:'validation_regexp'] if attributes[:'validation_regexp']

      self.sample_value = attributes[:'sampleValue'] if attributes[:'sampleValue']

      raise 'You cannot provide both :sampleValue and :sample_value' if attributes.key?(:'sampleValue') && attributes.key?(:'sample_value')

      self.sample_value = attributes[:'sample_value'] if attributes[:'sample_value']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value_type Object to be assigned
    def value_type=(value_type)
      # rubocop:disable Style/ConditionalAssignment
      if value_type && !VALUE_TYPE_ENUM.include?(value_type)
        OCI.logger.debug("Unknown value for 'value_type' [" + value_type + "]. Mapping to 'VALUE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @value_type = VALUE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @value_type = value_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        key_name == other.key_name &&
        value_type == other.value_type &&
        description == other.description &&
        is_mandatory == other.is_mandatory &&
        default_value == other.default_value &&
        validation_regexp == other.validation_regexp &&
        sample_value == other.sample_value
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [key_name, value_type, description, is_mandatory, default_value, validation_regexp, sample_value].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
