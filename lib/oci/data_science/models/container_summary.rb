# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary representation of a container
  class DataScience::Models::ContainerSummary
    TARGET_WORKLOADS_ENUM = [
      TARGET_WORKLOADS_MODEL_DEPLOYMENT = 'MODEL_DEPLOYMENT'.freeze,
      TARGET_WORKLOADS_JOB_RUN = 'JOB_RUN'.freeze,
      TARGET_WORKLOADS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    USAGES_ENUM = [
      USAGES_INFERENCE = 'INFERENCE'.freeze,
      USAGES_FINE_TUNE = 'FINE_TUNE'.freeze,
      USAGES_EVALUATION = 'EVALUATION'.freeze,
      USAGES_BATCH_INFERENCE = 'BATCH_INFERENCE'.freeze,
      USAGES_OTHER = 'OTHER'.freeze,
      USAGES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The name of the container. This can be same for different tags
    # @return [String]
    attr_accessor :container_name

    # The display name of the container.
    # @return [String]
    attr_accessor :display_name

    # The family name of the container.
    # @return [String]
    attr_accessor :family_name

    # Description of the container.
    # @return [String]
    attr_accessor :description

    # **[Required]** The latest tag of the container.
    # @return [BOOLEAN]
    attr_accessor :is_latest

    # The list of target workload. This Container can be used with given data science resources.
    # @return [Array<String>]
    attr_reader :target_workloads

    # The list of usages of this container. This Container can be used for given use-cases.
    # @return [Array<String>]
    attr_reader :usages

    # **[Required]** Container Tag.
    # @return [String]
    attr_accessor :tag

    # **[Required]** Container Version LifecycleState.
    # @return [String]
    attr_reader :lifecycle_state

    # workload configuration of the container.
    # @return [Array<OCI::DataScience::Models::WorkloadConfigurationDetails>]
    attr_accessor :workload_configuration_details_list

    # An array of defined metadata details for the model.
    # @return [Array<OCI::DataScience::Models::TagConfiguration>]
    attr_accessor :tag_configuration_list

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'container_name': :'containerName',
        'display_name': :'displayName',
        'family_name': :'familyName',
        'description': :'description',
        'is_latest': :'isLatest',
        'target_workloads': :'targetWorkloads',
        'usages': :'usages',
        'tag': :'tag',
        'lifecycle_state': :'lifecycleState',
        'workload_configuration_details_list': :'workloadConfigurationDetailsList',
        'tag_configuration_list': :'tagConfigurationList',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'container_name': :'String',
        'display_name': :'String',
        'family_name': :'String',
        'description': :'String',
        'is_latest': :'BOOLEAN',
        'target_workloads': :'Array<String>',
        'usages': :'Array<String>',
        'tag': :'String',
        'lifecycle_state': :'String',
        'workload_configuration_details_list': :'Array<OCI::DataScience::Models::WorkloadConfigurationDetails>',
        'tag_configuration_list': :'Array<OCI::DataScience::Models::TagConfiguration>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :container_name The value to assign to the {#container_name} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :family_name The value to assign to the {#family_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [BOOLEAN] :is_latest The value to assign to the {#is_latest} property
    # @option attributes [Array<String>] :target_workloads The value to assign to the {#target_workloads} property
    # @option attributes [Array<String>] :usages The value to assign to the {#usages} property
    # @option attributes [String] :tag The value to assign to the {#tag} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Array<OCI::DataScience::Models::WorkloadConfigurationDetails>] :workload_configuration_details_list The value to assign to the {#workload_configuration_details_list} property
    # @option attributes [Array<OCI::DataScience::Models::TagConfiguration>] :tag_configuration_list The value to assign to the {#tag_configuration_list} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.container_name = attributes[:'containerName'] if attributes[:'containerName']

      raise 'You cannot provide both :containerName and :container_name' if attributes.key?(:'containerName') && attributes.key?(:'container_name')

      self.container_name = attributes[:'container_name'] if attributes[:'container_name']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.family_name = attributes[:'familyName'] if attributes[:'familyName']

      raise 'You cannot provide both :familyName and :family_name' if attributes.key?(:'familyName') && attributes.key?(:'family_name')

      self.family_name = attributes[:'family_name'] if attributes[:'family_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.is_latest = attributes[:'isLatest'] unless attributes[:'isLatest'].nil?
      self.is_latest = false if is_latest.nil? && !attributes.key?(:'isLatest') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isLatest and :is_latest' if attributes.key?(:'isLatest') && attributes.key?(:'is_latest')

      self.is_latest = attributes[:'is_latest'] unless attributes[:'is_latest'].nil?
      self.is_latest = false if is_latest.nil? && !attributes.key?(:'isLatest') && !attributes.key?(:'is_latest') # rubocop:disable Style/StringLiterals

      self.target_workloads = attributes[:'targetWorkloads'] if attributes[:'targetWorkloads']

      raise 'You cannot provide both :targetWorkloads and :target_workloads' if attributes.key?(:'targetWorkloads') && attributes.key?(:'target_workloads')

      self.target_workloads = attributes[:'target_workloads'] if attributes[:'target_workloads']

      self.usages = attributes[:'usages'] if attributes[:'usages']

      self.tag = attributes[:'tag'] if attributes[:'tag']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.workload_configuration_details_list = attributes[:'workloadConfigurationDetailsList'] if attributes[:'workloadConfigurationDetailsList']

      raise 'You cannot provide both :workloadConfigurationDetailsList and :workload_configuration_details_list' if attributes.key?(:'workloadConfigurationDetailsList') && attributes.key?(:'workload_configuration_details_list')

      self.workload_configuration_details_list = attributes[:'workload_configuration_details_list'] if attributes[:'workload_configuration_details_list']

      self.tag_configuration_list = attributes[:'tagConfigurationList'] if attributes[:'tagConfigurationList']

      raise 'You cannot provide both :tagConfigurationList and :tag_configuration_list' if attributes.key?(:'tagConfigurationList') && attributes.key?(:'tag_configuration_list')

      self.tag_configuration_list = attributes[:'tag_configuration_list'] if attributes[:'tag_configuration_list']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_workloads Object to be assigned
    def target_workloads=(target_workloads)
      # rubocop:disable Style/ConditionalAssignment
      if target_workloads.nil?
        @target_workloads = nil
      else
        @target_workloads =
          target_workloads.collect do |item|
            if TARGET_WORKLOADS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'target_workloads' [#{item}]. Mapping to 'TARGET_WORKLOADS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              TARGET_WORKLOADS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] usages Object to be assigned
    def usages=(usages)
      # rubocop:disable Style/ConditionalAssignment
      if usages.nil?
        @usages = nil
      else
        @usages =
          usages.collect do |item|
            if USAGES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'usages' [#{item}]. Mapping to 'USAGES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              USAGES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        container_name == other.container_name &&
        display_name == other.display_name &&
        family_name == other.family_name &&
        description == other.description &&
        is_latest == other.is_latest &&
        target_workloads == other.target_workloads &&
        usages == other.usages &&
        tag == other.tag &&
        lifecycle_state == other.lifecycle_state &&
        workload_configuration_details_list == other.workload_configuration_details_list &&
        tag_configuration_list == other.tag_configuration_list &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [container_name, display_name, family_name, description, is_latest, target_workloads, usages, tag, lifecycle_state, workload_configuration_details_list, tag_configuration_list, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
