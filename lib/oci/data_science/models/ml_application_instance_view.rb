# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Representation of ML Application Instance which providers use for instance observability.
  class DataScience::Models::MlApplicationInstanceView
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_SUBSTATE_ENUM = [
      LIFECYCLE_SUBSTATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_SUBSTATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_SUBSTATE_UPGRADING = 'UPGRADING'.freeze,
      LIFECYCLE_SUBSTATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_SUBSTATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_SUBSTATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_SUBSTATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_SUBSTATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_SUBSTATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_SUBSTATE_NON_RECOVERABLE_PROVIDER_ISSUE = 'NON_RECOVERABLE_PROVIDER_ISSUE'.freeze,
      LIFECYCLE_SUBSTATE_RECOVERABLE_PROVIDER_ISSUE = 'RECOVERABLE_PROVIDER_ISSUE'.freeze,
      LIFECYCLE_SUBSTATE_NON_RECOVERABLE_SERVICE_ISSUE = 'NON_RECOVERABLE_SERVICE_ISSUE'.freeze,
      LIFECYCLE_SUBSTATE_RECOVERABLE_SERVICE_ISSUE = 'RECOVERABLE_SERVICE_ISSUE'.freeze,
      LIFECYCLE_SUBSTATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the MlApplicationInstanceView. Unique identifier that is immutable after creation
    # @return [String]
    attr_accessor :id

    # **[Required]** The name of the MlApplicationInstance (created by the consumer) which this MlApplicationInstanceView is mirroring.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The OCID of the MlApplicationInstance (created by the consumer) which this MlApplicationInstanceView is mirroring.
    # @return [String]
    attr_accessor :ml_application_instance_id

    # **[Required]** This field is a copy from MlApplicationInstance created by the consumer. The OCID of ML Application. This resource is an instance of ML Application referenced by this OCID.
    # @return [String]
    attr_accessor :ml_application_id

    # **[Required]** The name of ML Application (based on mlApplicationId).
    # @return [String]
    attr_accessor :ml_application_name

    # **[Required]** This field is a copy from MlApplicationInstance created by the consumer. The OCID of ML Application Implementation selected as a certain solution for a given ML problem (ML Application)
    # @return [String]
    attr_accessor :ml_application_implementation_id

    # **[Required]** This field is a copy from MlApplicationInstance created by the consumer. The name of Ml Application Implemenation (based on mlApplicationImplementationId)
    # @return [String]
    attr_accessor :ml_application_implementation_name

    # **[Required]** Version of MlApplication package which is currently used by this MlApplicationInstance.
    # @return [String]
    attr_accessor :package_version

    # **[Required]** The OCID of the MlApplicationImplementationVersion
    # @return [String]
    attr_accessor :ml_application_implementation_version_id

    # @return [OCI::DataScience::Models::AuthConfiguration]
    attr_accessor :auth_configuration

    # This field is a copy from MlApplicationInstance created by the consumer. Data that are used for provisioning of the given MlApplicationInstance. These are validated against configurationSchema defined in referenced MlApplication.
    # @return [Array<OCI::DataScience::Models::ConfigurationProperty>]
    attr_accessor :configuration

    # **[Required]** This field is a copy from MlApplicationInstance created by the consumer. States whether the MlApplicationInstance is supposed to be in ACTIVE lifecycle state.
    # @return [BOOLEAN]
    attr_accessor :is_enabled

    # References (Identifiers) for components dedicated to this instance.
    # @return [Array<OCI::DataScience::Models::InstanceComponent>]
    attr_accessor :instance_components

    # **[Required]** The OCID of the compartment where the MlApplicationInstanceView is created.
    # @return [String]
    attr_accessor :compartment_id

    # @return [OCI::DataScience::Models::PredictionEndpointDetails]
    attr_accessor :prediction_endpoint_details

    # **[Required]** The time the the MlApplicationInstanceView was created. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The current state of the MlApplicationInstance(View).
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The current substate of the MlApplicationInstance(View). The substate has MlApplicationInstance(View) specific values in comparison with lifecycleState which has standard values common for all OCI resources.
    # The NEEDS_ATTENTION and FAILED substates are deprecated in favor of (NON_)?RECOVERABLE_(PROVIDER|SERVICE)_ISSUE and will be removed in next release.
    #
    # @return [String]
    attr_reader :lifecycle_substate

    # **[Required]** A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'ml_application_instance_id': :'mlApplicationInstanceId',
        'ml_application_id': :'mlApplicationId',
        'ml_application_name': :'mlApplicationName',
        'ml_application_implementation_id': :'mlApplicationImplementationId',
        'ml_application_implementation_name': :'mlApplicationImplementationName',
        'package_version': :'packageVersion',
        'ml_application_implementation_version_id': :'mlApplicationImplementationVersionId',
        'auth_configuration': :'authConfiguration',
        'configuration': :'configuration',
        'is_enabled': :'isEnabled',
        'instance_components': :'instanceComponents',
        'compartment_id': :'compartmentId',
        'prediction_endpoint_details': :'predictionEndpointDetails',
        'time_created': :'timeCreated',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_substate': :'lifecycleSubstate',
        'lifecycle_details': :'lifecycleDetails',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'ml_application_instance_id': :'String',
        'ml_application_id': :'String',
        'ml_application_name': :'String',
        'ml_application_implementation_id': :'String',
        'ml_application_implementation_name': :'String',
        'package_version': :'String',
        'ml_application_implementation_version_id': :'String',
        'auth_configuration': :'OCI::DataScience::Models::AuthConfiguration',
        'configuration': :'Array<OCI::DataScience::Models::ConfigurationProperty>',
        'is_enabled': :'BOOLEAN',
        'instance_components': :'Array<OCI::DataScience::Models::InstanceComponent>',
        'compartment_id': :'String',
        'prediction_endpoint_details': :'OCI::DataScience::Models::PredictionEndpointDetails',
        'time_created': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_substate': :'String',
        'lifecycle_details': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :ml_application_instance_id The value to assign to the {#ml_application_instance_id} property
    # @option attributes [String] :ml_application_id The value to assign to the {#ml_application_id} property
    # @option attributes [String] :ml_application_name The value to assign to the {#ml_application_name} property
    # @option attributes [String] :ml_application_implementation_id The value to assign to the {#ml_application_implementation_id} property
    # @option attributes [String] :ml_application_implementation_name The value to assign to the {#ml_application_implementation_name} property
    # @option attributes [String] :package_version The value to assign to the {#package_version} property
    # @option attributes [String] :ml_application_implementation_version_id The value to assign to the {#ml_application_implementation_version_id} property
    # @option attributes [OCI::DataScience::Models::AuthConfiguration] :auth_configuration The value to assign to the {#auth_configuration} property
    # @option attributes [Array<OCI::DataScience::Models::ConfigurationProperty>] :configuration The value to assign to the {#configuration} property
    # @option attributes [BOOLEAN] :is_enabled The value to assign to the {#is_enabled} property
    # @option attributes [Array<OCI::DataScience::Models::InstanceComponent>] :instance_components The value to assign to the {#instance_components} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [OCI::DataScience::Models::PredictionEndpointDetails] :prediction_endpoint_details The value to assign to the {#prediction_endpoint_details} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_substate The value to assign to the {#lifecycle_substate} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.ml_application_instance_id = attributes[:'mlApplicationInstanceId'] if attributes[:'mlApplicationInstanceId']

      raise 'You cannot provide both :mlApplicationInstanceId and :ml_application_instance_id' if attributes.key?(:'mlApplicationInstanceId') && attributes.key?(:'ml_application_instance_id')

      self.ml_application_instance_id = attributes[:'ml_application_instance_id'] if attributes[:'ml_application_instance_id']

      self.ml_application_id = attributes[:'mlApplicationId'] if attributes[:'mlApplicationId']

      raise 'You cannot provide both :mlApplicationId and :ml_application_id' if attributes.key?(:'mlApplicationId') && attributes.key?(:'ml_application_id')

      self.ml_application_id = attributes[:'ml_application_id'] if attributes[:'ml_application_id']

      self.ml_application_name = attributes[:'mlApplicationName'] if attributes[:'mlApplicationName']

      raise 'You cannot provide both :mlApplicationName and :ml_application_name' if attributes.key?(:'mlApplicationName') && attributes.key?(:'ml_application_name')

      self.ml_application_name = attributes[:'ml_application_name'] if attributes[:'ml_application_name']

      self.ml_application_implementation_id = attributes[:'mlApplicationImplementationId'] if attributes[:'mlApplicationImplementationId']

      raise 'You cannot provide both :mlApplicationImplementationId and :ml_application_implementation_id' if attributes.key?(:'mlApplicationImplementationId') && attributes.key?(:'ml_application_implementation_id')

      self.ml_application_implementation_id = attributes[:'ml_application_implementation_id'] if attributes[:'ml_application_implementation_id']

      self.ml_application_implementation_name = attributes[:'mlApplicationImplementationName'] if attributes[:'mlApplicationImplementationName']

      raise 'You cannot provide both :mlApplicationImplementationName and :ml_application_implementation_name' if attributes.key?(:'mlApplicationImplementationName') && attributes.key?(:'ml_application_implementation_name')

      self.ml_application_implementation_name = attributes[:'ml_application_implementation_name'] if attributes[:'ml_application_implementation_name']

      self.package_version = attributes[:'packageVersion'] if attributes[:'packageVersion']

      raise 'You cannot provide both :packageVersion and :package_version' if attributes.key?(:'packageVersion') && attributes.key?(:'package_version')

      self.package_version = attributes[:'package_version'] if attributes[:'package_version']

      self.ml_application_implementation_version_id = attributes[:'mlApplicationImplementationVersionId'] if attributes[:'mlApplicationImplementationVersionId']

      raise 'You cannot provide both :mlApplicationImplementationVersionId and :ml_application_implementation_version_id' if attributes.key?(:'mlApplicationImplementationVersionId') && attributes.key?(:'ml_application_implementation_version_id')

      self.ml_application_implementation_version_id = attributes[:'ml_application_implementation_version_id'] if attributes[:'ml_application_implementation_version_id']

      self.auth_configuration = attributes[:'authConfiguration'] if attributes[:'authConfiguration']

      raise 'You cannot provide both :authConfiguration and :auth_configuration' if attributes.key?(:'authConfiguration') && attributes.key?(:'auth_configuration')

      self.auth_configuration = attributes[:'auth_configuration'] if attributes[:'auth_configuration']

      self.configuration = attributes[:'configuration'] if attributes[:'configuration']

      self.is_enabled = attributes[:'isEnabled'] unless attributes[:'isEnabled'].nil?

      raise 'You cannot provide both :isEnabled and :is_enabled' if attributes.key?(:'isEnabled') && attributes.key?(:'is_enabled')

      self.is_enabled = attributes[:'is_enabled'] unless attributes[:'is_enabled'].nil?

      self.instance_components = attributes[:'instanceComponents'] if attributes[:'instanceComponents']

      raise 'You cannot provide both :instanceComponents and :instance_components' if attributes.key?(:'instanceComponents') && attributes.key?(:'instance_components')

      self.instance_components = attributes[:'instance_components'] if attributes[:'instance_components']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.prediction_endpoint_details = attributes[:'predictionEndpointDetails'] if attributes[:'predictionEndpointDetails']

      raise 'You cannot provide both :predictionEndpointDetails and :prediction_endpoint_details' if attributes.key?(:'predictionEndpointDetails') && attributes.key?(:'prediction_endpoint_details')

      self.prediction_endpoint_details = attributes[:'prediction_endpoint_details'] if attributes[:'prediction_endpoint_details']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_substate = attributes[:'lifecycleSubstate'] if attributes[:'lifecycleSubstate']

      raise 'You cannot provide both :lifecycleSubstate and :lifecycle_substate' if attributes.key?(:'lifecycleSubstate') && attributes.key?(:'lifecycle_substate')

      self.lifecycle_substate = attributes[:'lifecycle_substate'] if attributes[:'lifecycle_substate']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_substate Object to be assigned
    def lifecycle_substate=(lifecycle_substate)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_substate && !LIFECYCLE_SUBSTATE_ENUM.include?(lifecycle_substate)
        OCI.logger.debug("Unknown value for 'lifecycle_substate' [" + lifecycle_substate + "]. Mapping to 'LIFECYCLE_SUBSTATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_substate = LIFECYCLE_SUBSTATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_substate = lifecycle_substate
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        ml_application_instance_id == other.ml_application_instance_id &&
        ml_application_id == other.ml_application_id &&
        ml_application_name == other.ml_application_name &&
        ml_application_implementation_id == other.ml_application_implementation_id &&
        ml_application_implementation_name == other.ml_application_implementation_name &&
        package_version == other.package_version &&
        ml_application_implementation_version_id == other.ml_application_implementation_version_id &&
        auth_configuration == other.auth_configuration &&
        configuration == other.configuration &&
        is_enabled == other.is_enabled &&
        instance_components == other.instance_components &&
        compartment_id == other.compartment_id &&
        prediction_endpoint_details == other.prediction_endpoint_details &&
        time_created == other.time_created &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_substate == other.lifecycle_substate &&
        lifecycle_details == other.lifecycle_details &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, ml_application_instance_id, ml_application_id, ml_application_name, ml_application_implementation_id, ml_application_implementation_name, package_version, ml_application_implementation_version_id, auth_configuration, configuration, is_enabled, instance_components, compartment_id, prediction_endpoint_details, time_created, lifecycle_state, lifecycle_substate, lifecycle_details, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
