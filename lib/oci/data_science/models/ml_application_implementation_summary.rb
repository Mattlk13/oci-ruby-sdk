# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of the MlApplicationImplementation.
  class DataScience::Models::MlApplicationImplementationSummary
    # **[Required]** The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
    # @return [String]
    attr_accessor :id

    # **[Required]** ML Application Implementation name which is unique for given ML Application.
    # @return [String]
    attr_accessor :name

    # Description of ML Application Implementation defined in ML Application package descriptor
    # @return [String]
    attr_accessor :description

    # **[Required]** The OCID of the ML Application implemented by this ML Application Implementation.
    # @return [String]
    attr_accessor :ml_application_id

    # **[Required]** The name of ML Application (based on mlApplicationId).
    # @return [String]
    attr_accessor :ml_application_name

    # The version of ML Application Package (e.g. \"1.2\" or \"2.0.4\") defined in ML Application package descriptor. Value is not mandatory only for CREATING state otherwise it must be always presented.
    # @return [String]
    attr_accessor :package_version

    # Schema of configuration which needs to be provided for each ML Application Instance. It is defined in the ML Application package descriptor.
    # @return [Array<OCI::DataScience::Models::ConfigurationPropertySchema>]
    attr_accessor :configuration_schema

    # List of ML Application Implementation OCIDs for which migration from this implementation is allowed. Migration means that if consumers change implementation for their instances to implementation with OCID from this list, instance components will be updated in place otherwise new instance components are created based on the new implementation and old instance components are removed.
    # @return [Array<String>]
    attr_accessor :allowed_migration_destinations

    # **[Required]** The OCID of the compartment where the MlApplicationImplementation is created.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The time the MlApplicationImplementation was created. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The current state of the ML Application Implementation.
    # @return [String]
    attr_accessor :lifecycle_state

    # **[Required]** Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'name': :'name',
        'description': :'description',
        'ml_application_id': :'mlApplicationId',
        'ml_application_name': :'mlApplicationName',
        'package_version': :'packageVersion',
        'configuration_schema': :'configurationSchema',
        'allowed_migration_destinations': :'allowedMigrationDestinations',
        'compartment_id': :'compartmentId',
        'time_created': :'timeCreated',
        'lifecycle_state': :'lifecycleState',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'name': :'String',
        'description': :'String',
        'ml_application_id': :'String',
        'ml_application_name': :'String',
        'package_version': :'String',
        'configuration_schema': :'Array<OCI::DataScience::Models::ConfigurationPropertySchema>',
        'allowed_migration_destinations': :'Array<String>',
        'compartment_id': :'String',
        'time_created': :'DateTime',
        'lifecycle_state': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :ml_application_id The value to assign to the {#ml_application_id} property
    # @option attributes [String] :ml_application_name The value to assign to the {#ml_application_name} property
    # @option attributes [String] :package_version The value to assign to the {#package_version} property
    # @option attributes [Array<OCI::DataScience::Models::ConfigurationPropertySchema>] :configuration_schema The value to assign to the {#configuration_schema} property
    # @option attributes [Array<String>] :allowed_migration_destinations The value to assign to the {#allowed_migration_destinations} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.ml_application_id = attributes[:'mlApplicationId'] if attributes[:'mlApplicationId']

      raise 'You cannot provide both :mlApplicationId and :ml_application_id' if attributes.key?(:'mlApplicationId') && attributes.key?(:'ml_application_id')

      self.ml_application_id = attributes[:'ml_application_id'] if attributes[:'ml_application_id']

      self.ml_application_name = attributes[:'mlApplicationName'] if attributes[:'mlApplicationName']

      raise 'You cannot provide both :mlApplicationName and :ml_application_name' if attributes.key?(:'mlApplicationName') && attributes.key?(:'ml_application_name')

      self.ml_application_name = attributes[:'ml_application_name'] if attributes[:'ml_application_name']

      self.package_version = attributes[:'packageVersion'] if attributes[:'packageVersion']

      raise 'You cannot provide both :packageVersion and :package_version' if attributes.key?(:'packageVersion') && attributes.key?(:'package_version')

      self.package_version = attributes[:'package_version'] if attributes[:'package_version']

      self.configuration_schema = attributes[:'configurationSchema'] if attributes[:'configurationSchema']

      raise 'You cannot provide both :configurationSchema and :configuration_schema' if attributes.key?(:'configurationSchema') && attributes.key?(:'configuration_schema')

      self.configuration_schema = attributes[:'configuration_schema'] if attributes[:'configuration_schema']

      self.allowed_migration_destinations = attributes[:'allowedMigrationDestinations'] if attributes[:'allowedMigrationDestinations']

      raise 'You cannot provide both :allowedMigrationDestinations and :allowed_migration_destinations' if attributes.key?(:'allowedMigrationDestinations') && attributes.key?(:'allowed_migration_destinations')

      self.allowed_migration_destinations = attributes[:'allowed_migration_destinations'] if attributes[:'allowed_migration_destinations']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        description == other.description &&
        ml_application_id == other.ml_application_id &&
        ml_application_name == other.ml_application_name &&
        package_version == other.package_version &&
        configuration_schema == other.configuration_schema &&
        allowed_migration_destinations == other.allowed_migration_destinations &&
        compartment_id == other.compartment_id &&
        time_created == other.time_created &&
        lifecycle_state == other.lifecycle_state &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, description, ml_application_id, ml_application_name, package_version, configuration_schema, allowed_migration_destinations, compartment_id, time_created, lifecycle_state, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
