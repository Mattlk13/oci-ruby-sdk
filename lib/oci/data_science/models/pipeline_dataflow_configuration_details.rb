# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The configuration details of a Dataflow step.
  class DataScience::Models::PipelineDataflowConfigurationDetails
    # The Spark configuration passed to the running process.
    # @return [Object]
    attr_accessor :configuration

    # The VM shape for the driver.
    # @return [String]
    attr_accessor :driver_shape

    # @return [OCI::DataScience::Models::PipelineShapeConfigDetails]
    attr_accessor :driver_shape_config_details

    # The VM shape for the executors.
    # @return [String]
    attr_accessor :executor_shape

    # @return [OCI::DataScience::Models::PipelineShapeConfigDetails]
    attr_accessor :executor_shape_config_details

    # The number of executor VMs requested.
    # @return [Integer]
    attr_accessor :num_executors

    # An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
    # @return [String]
    attr_accessor :warehouse_bucket_uri

    # An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
    # @return [String]
    attr_accessor :logs_bucket_uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'configuration': :'configuration',
        'driver_shape': :'driverShape',
        'driver_shape_config_details': :'driverShapeConfigDetails',
        'executor_shape': :'executorShape',
        'executor_shape_config_details': :'executorShapeConfigDetails',
        'num_executors': :'numExecutors',
        'warehouse_bucket_uri': :'warehouseBucketUri',
        'logs_bucket_uri': :'logsBucketUri'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'configuration': :'Object',
        'driver_shape': :'String',
        'driver_shape_config_details': :'OCI::DataScience::Models::PipelineShapeConfigDetails',
        'executor_shape': :'String',
        'executor_shape_config_details': :'OCI::DataScience::Models::PipelineShapeConfigDetails',
        'num_executors': :'Integer',
        'warehouse_bucket_uri': :'String',
        'logs_bucket_uri': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Object] :configuration The value to assign to the {#configuration} property
    # @option attributes [String] :driver_shape The value to assign to the {#driver_shape} property
    # @option attributes [OCI::DataScience::Models::PipelineShapeConfigDetails] :driver_shape_config_details The value to assign to the {#driver_shape_config_details} property
    # @option attributes [String] :executor_shape The value to assign to the {#executor_shape} property
    # @option attributes [OCI::DataScience::Models::PipelineShapeConfigDetails] :executor_shape_config_details The value to assign to the {#executor_shape_config_details} property
    # @option attributes [Integer] :num_executors The value to assign to the {#num_executors} property
    # @option attributes [String] :warehouse_bucket_uri The value to assign to the {#warehouse_bucket_uri} property
    # @option attributes [String] :logs_bucket_uri The value to assign to the {#logs_bucket_uri} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.configuration = attributes[:'configuration'] if attributes[:'configuration']

      self.driver_shape = attributes[:'driverShape'] if attributes[:'driverShape']

      raise 'You cannot provide both :driverShape and :driver_shape' if attributes.key?(:'driverShape') && attributes.key?(:'driver_shape')

      self.driver_shape = attributes[:'driver_shape'] if attributes[:'driver_shape']

      self.driver_shape_config_details = attributes[:'driverShapeConfigDetails'] if attributes[:'driverShapeConfigDetails']

      raise 'You cannot provide both :driverShapeConfigDetails and :driver_shape_config_details' if attributes.key?(:'driverShapeConfigDetails') && attributes.key?(:'driver_shape_config_details')

      self.driver_shape_config_details = attributes[:'driver_shape_config_details'] if attributes[:'driver_shape_config_details']

      self.executor_shape = attributes[:'executorShape'] if attributes[:'executorShape']

      raise 'You cannot provide both :executorShape and :executor_shape' if attributes.key?(:'executorShape') && attributes.key?(:'executor_shape')

      self.executor_shape = attributes[:'executor_shape'] if attributes[:'executor_shape']

      self.executor_shape_config_details = attributes[:'executorShapeConfigDetails'] if attributes[:'executorShapeConfigDetails']

      raise 'You cannot provide both :executorShapeConfigDetails and :executor_shape_config_details' if attributes.key?(:'executorShapeConfigDetails') && attributes.key?(:'executor_shape_config_details')

      self.executor_shape_config_details = attributes[:'executor_shape_config_details'] if attributes[:'executor_shape_config_details']

      self.num_executors = attributes[:'numExecutors'] if attributes[:'numExecutors']

      raise 'You cannot provide both :numExecutors and :num_executors' if attributes.key?(:'numExecutors') && attributes.key?(:'num_executors')

      self.num_executors = attributes[:'num_executors'] if attributes[:'num_executors']

      self.warehouse_bucket_uri = attributes[:'warehouseBucketUri'] if attributes[:'warehouseBucketUri']

      raise 'You cannot provide both :warehouseBucketUri and :warehouse_bucket_uri' if attributes.key?(:'warehouseBucketUri') && attributes.key?(:'warehouse_bucket_uri')

      self.warehouse_bucket_uri = attributes[:'warehouse_bucket_uri'] if attributes[:'warehouse_bucket_uri']

      self.logs_bucket_uri = attributes[:'logsBucketUri'] if attributes[:'logsBucketUri']

      raise 'You cannot provide both :logsBucketUri and :logs_bucket_uri' if attributes.key?(:'logsBucketUri') && attributes.key?(:'logs_bucket_uri')

      self.logs_bucket_uri = attributes[:'logs_bucket_uri'] if attributes[:'logs_bucket_uri']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        configuration == other.configuration &&
        driver_shape == other.driver_shape &&
        driver_shape_config_details == other.driver_shape_config_details &&
        executor_shape == other.executor_shape &&
        executor_shape_config_details == other.executor_shape_config_details &&
        num_executors == other.num_executors &&
        warehouse_bucket_uri == other.warehouse_bucket_uri &&
        logs_bucket_uri == other.logs_bucket_uri
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [configuration, driver_shape, driver_shape_config_details, executor_shape, executor_shape_config_details, num_executors, warehouse_bucket_uri, logs_bucket_uri].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
