# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180115
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A key signing key (KSK) version. The version information contains timing and configuration data corresponding to the KSK that is used to
  # apply DNSSEC on the zone.
  #
  class Dns::Models::KskDnssecKeyVersion
    ALGORITHM_ENUM = [
      ALGORITHM_RSASHA256 = 'RSASHA256'.freeze,
      ALGORITHM_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The UUID of the `DnssecKeyVersion`.
    #
    # @return [String]
    attr_accessor :uuid

    # The signing algorithm used for the key.
    #
    # @return [String]
    attr_reader :algorithm

    # The length of the corresponding private key in bytes, expressed as an integer.
    #
    # @return [Integer]
    attr_accessor :length_in_bytes

    # The date and time the key version was created, expressed in RFC 3339 timestamp format.
    #
    # **Example:** `2016-07-22T17:23:59:00Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # The date and time the key version was, or will be, published, expressed in RFC 3339 timestamp format. This is
    # when the zone contents will include a DNSKEY record corresponding to the key material.
    #
    # **Example:** `2016-07-22T17:23:59:00Z`
    #
    # @return [DateTime]
    attr_accessor :time_published

    # The date and time the key version went, or will go, active, expressed in RFC 3339 timestamp format. This is
    # when the key material will be used to generate RRSIGs.
    #
    # **Example:** `2016-07-22T17:23:59:00Z`
    #
    # @return [DateTime]
    attr_accessor :time_activated

    # The date and time the key version went, or will go, inactive, expressed in RFC 3339 timestamp format. This
    # is when the key material will no longer be used to generate RRSIGs. For a key signing key (KSK) `DnssecKeyVersion`, this is
    # populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
    #
    # **Example:** `2016-07-22T17:23:59:00Z`
    #
    # @return [DateTime]
    attr_accessor :time_inactivated

    # The date and time the key version was, or will be, unpublished, expressed in RFC 3339 timestamp format. This
    # is when the corresponding DNSKEY will be removed from zone contents. For a key signing key (KSK) `DnssecKeyVersion`, this is
    # populated after `PromoteZoneDnssecKeyVersion` has been called on its successor `DnssecKeyVersion`.
    #
    # **Example:** `2016-07-22T17:23:59:00Z`
    #
    # @return [DateTime]
    attr_accessor :time_unpublished

    # The date and time at which the recommended key version publication/activation lifetime ends, expressed in RFC
    # 3339 timestamp format. This is when the corresponding DNSKEY should no longer exist in zone contents and no
    # longer be used to generate RRSIGs. For a key sigining key (KSK), if `PromoteZoneDnssecKeyVersion` has not been called on this
    # `DnssecKeyVersion`'s successor then it will remain active for arbitrarily long past its recommended lifetime.
    # This prevents service disruption at the potential increased risk of key compromise.
    #
    # **Example:** `2016-07-22T17:23:59:00Z`
    #
    # @return [DateTime]
    attr_accessor :time_expired

    # The date and time the key version was promoted expressed in RFC 3339 timestamp format.
    #
    # **Example:** `2016-07-22T17:23:59:00Z`
    #
    # @return [DateTime]
    attr_accessor :time_promoted

    # When populated, this is the UUID of the `DnssecKeyVersion` that this `DnssecKeyVersion` will replace or has
    # replaced.
    #
    # @return [String]
    attr_accessor :predecessor_dnssec_key_version_uuid

    # When populated, this is the UUID of the `DnssecKeyVersion` that will replace, or has replaced, this
    # `DnssecKeyVersion`.
    #
    # @return [String]
    attr_accessor :successor_dnssec_key_version_uuid

    # The key tag associated with the `DnssecKeyVersion`. This key tag will be present in the RRSIG and DS records
    # associated with the key material for this `DnssecKeyVersion`. For more information about key tags, see
    # [RFC 4034](https://tools.ietf.org/html/rfc4034).
    #
    # @return [Integer]
    attr_accessor :key_tag

    # An array of data for DS records corresponding with this key version. An entry will exist for each
    # supported DS digest algorithm.
    #
    # @return [Array<OCI::Dns::Models::DnssecKeyVersionDsData>]
    attr_accessor :ds_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'uuid': :'uuid',
        'algorithm': :'algorithm',
        'length_in_bytes': :'lengthInBytes',
        'time_created': :'timeCreated',
        'time_published': :'timePublished',
        'time_activated': :'timeActivated',
        'time_inactivated': :'timeInactivated',
        'time_unpublished': :'timeUnpublished',
        'time_expired': :'timeExpired',
        'time_promoted': :'timePromoted',
        'predecessor_dnssec_key_version_uuid': :'predecessorDnssecKeyVersionUuid',
        'successor_dnssec_key_version_uuid': :'successorDnssecKeyVersionUuid',
        'key_tag': :'keyTag',
        'ds_data': :'dsData'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'uuid': :'String',
        'algorithm': :'String',
        'length_in_bytes': :'Integer',
        'time_created': :'DateTime',
        'time_published': :'DateTime',
        'time_activated': :'DateTime',
        'time_inactivated': :'DateTime',
        'time_unpublished': :'DateTime',
        'time_expired': :'DateTime',
        'time_promoted': :'DateTime',
        'predecessor_dnssec_key_version_uuid': :'String',
        'successor_dnssec_key_version_uuid': :'String',
        'key_tag': :'Integer',
        'ds_data': :'Array<OCI::Dns::Models::DnssecKeyVersionDsData>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :uuid The value to assign to the {#uuid} property
    # @option attributes [String] :algorithm The value to assign to the {#algorithm} property
    # @option attributes [Integer] :length_in_bytes The value to assign to the {#length_in_bytes} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_published The value to assign to the {#time_published} property
    # @option attributes [DateTime] :time_activated The value to assign to the {#time_activated} property
    # @option attributes [DateTime] :time_inactivated The value to assign to the {#time_inactivated} property
    # @option attributes [DateTime] :time_unpublished The value to assign to the {#time_unpublished} property
    # @option attributes [DateTime] :time_expired The value to assign to the {#time_expired} property
    # @option attributes [DateTime] :time_promoted The value to assign to the {#time_promoted} property
    # @option attributes [String] :predecessor_dnssec_key_version_uuid The value to assign to the {#predecessor_dnssec_key_version_uuid} property
    # @option attributes [String] :successor_dnssec_key_version_uuid The value to assign to the {#successor_dnssec_key_version_uuid} property
    # @option attributes [Integer] :key_tag The value to assign to the {#key_tag} property
    # @option attributes [Array<OCI::Dns::Models::DnssecKeyVersionDsData>] :ds_data The value to assign to the {#ds_data} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.uuid = attributes[:'uuid'] if attributes[:'uuid']

      self.algorithm = attributes[:'algorithm'] if attributes[:'algorithm']

      self.length_in_bytes = attributes[:'lengthInBytes'] if attributes[:'lengthInBytes']

      raise 'You cannot provide both :lengthInBytes and :length_in_bytes' if attributes.key?(:'lengthInBytes') && attributes.key?(:'length_in_bytes')

      self.length_in_bytes = attributes[:'length_in_bytes'] if attributes[:'length_in_bytes']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_published = attributes[:'timePublished'] if attributes[:'timePublished']

      raise 'You cannot provide both :timePublished and :time_published' if attributes.key?(:'timePublished') && attributes.key?(:'time_published')

      self.time_published = attributes[:'time_published'] if attributes[:'time_published']

      self.time_activated = attributes[:'timeActivated'] if attributes[:'timeActivated']

      raise 'You cannot provide both :timeActivated and :time_activated' if attributes.key?(:'timeActivated') && attributes.key?(:'time_activated')

      self.time_activated = attributes[:'time_activated'] if attributes[:'time_activated']

      self.time_inactivated = attributes[:'timeInactivated'] if attributes[:'timeInactivated']

      raise 'You cannot provide both :timeInactivated and :time_inactivated' if attributes.key?(:'timeInactivated') && attributes.key?(:'time_inactivated')

      self.time_inactivated = attributes[:'time_inactivated'] if attributes[:'time_inactivated']

      self.time_unpublished = attributes[:'timeUnpublished'] if attributes[:'timeUnpublished']

      raise 'You cannot provide both :timeUnpublished and :time_unpublished' if attributes.key?(:'timeUnpublished') && attributes.key?(:'time_unpublished')

      self.time_unpublished = attributes[:'time_unpublished'] if attributes[:'time_unpublished']

      self.time_expired = attributes[:'timeExpired'] if attributes[:'timeExpired']

      raise 'You cannot provide both :timeExpired and :time_expired' if attributes.key?(:'timeExpired') && attributes.key?(:'time_expired')

      self.time_expired = attributes[:'time_expired'] if attributes[:'time_expired']

      self.time_promoted = attributes[:'timePromoted'] if attributes[:'timePromoted']

      raise 'You cannot provide both :timePromoted and :time_promoted' if attributes.key?(:'timePromoted') && attributes.key?(:'time_promoted')

      self.time_promoted = attributes[:'time_promoted'] if attributes[:'time_promoted']

      self.predecessor_dnssec_key_version_uuid = attributes[:'predecessorDnssecKeyVersionUuid'] if attributes[:'predecessorDnssecKeyVersionUuid']

      raise 'You cannot provide both :predecessorDnssecKeyVersionUuid and :predecessor_dnssec_key_version_uuid' if attributes.key?(:'predecessorDnssecKeyVersionUuid') && attributes.key?(:'predecessor_dnssec_key_version_uuid')

      self.predecessor_dnssec_key_version_uuid = attributes[:'predecessor_dnssec_key_version_uuid'] if attributes[:'predecessor_dnssec_key_version_uuid']

      self.successor_dnssec_key_version_uuid = attributes[:'successorDnssecKeyVersionUuid'] if attributes[:'successorDnssecKeyVersionUuid']

      raise 'You cannot provide both :successorDnssecKeyVersionUuid and :successor_dnssec_key_version_uuid' if attributes.key?(:'successorDnssecKeyVersionUuid') && attributes.key?(:'successor_dnssec_key_version_uuid')

      self.successor_dnssec_key_version_uuid = attributes[:'successor_dnssec_key_version_uuid'] if attributes[:'successor_dnssec_key_version_uuid']

      self.key_tag = attributes[:'keyTag'] if attributes[:'keyTag']

      raise 'You cannot provide both :keyTag and :key_tag' if attributes.key?(:'keyTag') && attributes.key?(:'key_tag')

      self.key_tag = attributes[:'key_tag'] if attributes[:'key_tag']

      self.ds_data = attributes[:'dsData'] if attributes[:'dsData']

      raise 'You cannot provide both :dsData and :ds_data' if attributes.key?(:'dsData') && attributes.key?(:'ds_data')

      self.ds_data = attributes[:'ds_data'] if attributes[:'ds_data']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] algorithm Object to be assigned
    def algorithm=(algorithm)
      # rubocop:disable Style/ConditionalAssignment
      if algorithm && !ALGORITHM_ENUM.include?(algorithm)
        OCI.logger.debug("Unknown value for 'algorithm' [" + algorithm + "]. Mapping to 'ALGORITHM_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @algorithm = ALGORITHM_UNKNOWN_ENUM_VALUE
      else
        @algorithm = algorithm
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        uuid == other.uuid &&
        algorithm == other.algorithm &&
        length_in_bytes == other.length_in_bytes &&
        time_created == other.time_created &&
        time_published == other.time_published &&
        time_activated == other.time_activated &&
        time_inactivated == other.time_inactivated &&
        time_unpublished == other.time_unpublished &&
        time_expired == other.time_expired &&
        time_promoted == other.time_promoted &&
        predecessor_dnssec_key_version_uuid == other.predecessor_dnssec_key_version_uuid &&
        successor_dnssec_key_version_uuid == other.successor_dnssec_key_version_uuid &&
        key_tag == other.key_tag &&
        ds_data == other.ds_data
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [uuid, algorithm, length_in_bytes, time_created, time_published, time_activated, time_inactivated, time_unpublished, time_expired, time_promoted, predecessor_dnssec_key_version_uuid, successor_dnssec_key_version_uuid, key_tag, ds_data].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
