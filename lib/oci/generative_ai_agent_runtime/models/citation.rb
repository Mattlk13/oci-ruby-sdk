# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240531
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The source of information for the agent's response.
  #
  class GenerativeAiAgentRuntime::Models::Citation
    # The text that's the source for the agent's response.
    # @return [String]
    attr_accessor :source_text

    # @return [OCI::GenerativeAiAgentRuntime::Models::SourceLocation]
    attr_accessor :source_location

    # The title of the source text, if available.
    # @return [String]
    attr_accessor :title

    # The id of the retrieved document, if available.
    # @return [String]
    attr_accessor :doc_id

    # The page numbers on the retrieved document, if available.
    # @return [Array<Integer>]
    attr_accessor :page_numbers

    # The metadata of the retrieved document, if available.
    # @return [Hash<String, Object>]
    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'source_text': :'sourceText',
        'source_location': :'sourceLocation',
        'title': :'title',
        'doc_id': :'docId',
        'page_numbers': :'pageNumbers',
        'metadata': :'metadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'source_text': :'String',
        'source_location': :'OCI::GenerativeAiAgentRuntime::Models::SourceLocation',
        'title': :'String',
        'doc_id': :'String',
        'page_numbers': :'Array<Integer>',
        'metadata': :'Hash<String, Object>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :source_text The value to assign to the {#source_text} property
    # @option attributes [OCI::GenerativeAiAgentRuntime::Models::SourceLocation] :source_location The value to assign to the {#source_location} property
    # @option attributes [String] :title The value to assign to the {#title} property
    # @option attributes [String] :doc_id The value to assign to the {#doc_id} property
    # @option attributes [Array<Integer>] :page_numbers The value to assign to the {#page_numbers} property
    # @option attributes [Hash<String, Object>] :metadata The value to assign to the {#metadata} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.source_text = attributes[:'sourceText'] if attributes[:'sourceText']

      raise 'You cannot provide both :sourceText and :source_text' if attributes.key?(:'sourceText') && attributes.key?(:'source_text')

      self.source_text = attributes[:'source_text'] if attributes[:'source_text']

      self.source_location = attributes[:'sourceLocation'] if attributes[:'sourceLocation']

      raise 'You cannot provide both :sourceLocation and :source_location' if attributes.key?(:'sourceLocation') && attributes.key?(:'source_location')

      self.source_location = attributes[:'source_location'] if attributes[:'source_location']

      self.title = attributes[:'title'] if attributes[:'title']

      self.doc_id = attributes[:'docId'] if attributes[:'docId']

      raise 'You cannot provide both :docId and :doc_id' if attributes.key?(:'docId') && attributes.key?(:'doc_id')

      self.doc_id = attributes[:'doc_id'] if attributes[:'doc_id']

      self.page_numbers = attributes[:'pageNumbers'] if attributes[:'pageNumbers']

      raise 'You cannot provide both :pageNumbers and :page_numbers' if attributes.key?(:'pageNumbers') && attributes.key?(:'page_numbers')

      self.page_numbers = attributes[:'page_numbers'] if attributes[:'page_numbers']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        source_text == other.source_text &&
        source_location == other.source_location &&
        title == other.title &&
        doc_id == other.doc_id &&
        page_numbers == other.page_numbers &&
        metadata == other.metadata
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [source_text, source_location, title, doc_id, page_numbers, metadata].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
