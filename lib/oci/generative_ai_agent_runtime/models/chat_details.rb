# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240531
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Chat details for managing user interactions and tool executions.
  #
  class GenerativeAiAgentRuntime::Models::ChatDetails
    # The input user message content for the chat.
    # @return [String]
    attr_accessor :user_message

    # Whether to stream the response.
    # @return [BOOLEAN]
    attr_accessor :should_stream

    # Optional sessionId. If not provided, will chat without any prior context.
    # @return [String]
    attr_accessor :session_id

    # A map where each key is a toolId and the value contains tool type and additional dynamic parameters.
    # @return [Hash<String, String>]
    attr_accessor :tool_parameters

    # A list of actions that have been performed based on prior required actions.
    # @return [Array<OCI::GenerativeAiAgentRuntime::Models::PerformedAction>]
    attr_accessor :performed_actions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'user_message': :'userMessage',
        'should_stream': :'shouldStream',
        'session_id': :'sessionId',
        'tool_parameters': :'toolParameters',
        'performed_actions': :'performedActions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'user_message': :'String',
        'should_stream': :'BOOLEAN',
        'session_id': :'String',
        'tool_parameters': :'Hash<String, String>',
        'performed_actions': :'Array<OCI::GenerativeAiAgentRuntime::Models::PerformedAction>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :user_message The value to assign to the {#user_message} property
    # @option attributes [BOOLEAN] :should_stream The value to assign to the {#should_stream} property
    # @option attributes [String] :session_id The value to assign to the {#session_id} property
    # @option attributes [Hash<String, String>] :tool_parameters The value to assign to the {#tool_parameters} property
    # @option attributes [Array<OCI::GenerativeAiAgentRuntime::Models::PerformedAction>] :performed_actions The value to assign to the {#performed_actions} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.user_message = attributes[:'userMessage'] if attributes[:'userMessage']

      raise 'You cannot provide both :userMessage and :user_message' if attributes.key?(:'userMessage') && attributes.key?(:'user_message')

      self.user_message = attributes[:'user_message'] if attributes[:'user_message']

      self.should_stream = attributes[:'shouldStream'] unless attributes[:'shouldStream'].nil?
      self.should_stream = false if should_stream.nil? && !attributes.key?(:'shouldStream') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldStream and :should_stream' if attributes.key?(:'shouldStream') && attributes.key?(:'should_stream')

      self.should_stream = attributes[:'should_stream'] unless attributes[:'should_stream'].nil?
      self.should_stream = false if should_stream.nil? && !attributes.key?(:'shouldStream') && !attributes.key?(:'should_stream') # rubocop:disable Style/StringLiterals

      self.session_id = attributes[:'sessionId'] if attributes[:'sessionId']

      raise 'You cannot provide both :sessionId and :session_id' if attributes.key?(:'sessionId') && attributes.key?(:'session_id')

      self.session_id = attributes[:'session_id'] if attributes[:'session_id']

      self.tool_parameters = attributes[:'toolParameters'] if attributes[:'toolParameters']

      raise 'You cannot provide both :toolParameters and :tool_parameters' if attributes.key?(:'toolParameters') && attributes.key?(:'tool_parameters')

      self.tool_parameters = attributes[:'tool_parameters'] if attributes[:'tool_parameters']

      self.performed_actions = attributes[:'performedActions'] if attributes[:'performedActions']

      raise 'You cannot provide both :performedActions and :performed_actions' if attributes.key?(:'performedActions') && attributes.key?(:'performed_actions')

      self.performed_actions = attributes[:'performed_actions'] if attributes[:'performed_actions']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        user_message == other.user_message &&
        should_stream == other.should_stream &&
        session_id == other.session_id &&
        tool_parameters == other.tool_parameters &&
        performed_actions == other.performed_actions
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [user_message, should_stream, session_id, tool_parameters, performed_actions].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
