# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190415
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details required to create a Read Endpoint.
  #
  class Mysql::Models::CreateReadEndpointDetails
    # Specifies if the DB System read endpoint is enabled or not.
    #
    # @return [BOOLEAN]
    attr_accessor :is_enabled

    # The IP address the DB System read endpoint is configured to listen on.
    # A private IP address of your choice to assign to the read endpoint of the DB System.
    # Must be an available IP address within the subnet's CIDR. If you don't specify a value,
    # Oracle automatically assigns a private IP address from the subnet. This should be a
    # \"dotted-quad\" style IPv4 address.
    #
    # @return [String]
    attr_accessor :read_endpoint_ip_address

    # The hostname for the read endpoint of the DB System. Used for DNS.
    #
    # The value is the hostname portion of the primary private IP's fully qualified domain name (FQDN)
    # (for example, \"dbsystem-1\" in FQDN \"dbsystem-1.subnet123.vcn1.oraclevcn.com\").
    #
    # Must be unique across all VNICs in the subnet and comply with RFC 952 and RFC 1123.
    #
    # @return [String]
    attr_accessor :read_endpoint_hostname_label

    # A list of IP addresses of read replicas that are excluded from serving read requests.
    #
    # @return [Array<String>]
    attr_accessor :exclude_ips

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'is_enabled': :'isEnabled',
        'read_endpoint_ip_address': :'readEndpointIpAddress',
        'read_endpoint_hostname_label': :'readEndpointHostnameLabel',
        'exclude_ips': :'excludeIps'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'is_enabled': :'BOOLEAN',
        'read_endpoint_ip_address': :'String',
        'read_endpoint_hostname_label': :'String',
        'exclude_ips': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_enabled The value to assign to the {#is_enabled} property
    # @option attributes [String] :read_endpoint_ip_address The value to assign to the {#read_endpoint_ip_address} property
    # @option attributes [String] :read_endpoint_hostname_label The value to assign to the {#read_endpoint_hostname_label} property
    # @option attributes [Array<String>] :exclude_ips The value to assign to the {#exclude_ips} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      self.is_enabled = attributes[:'isEnabled'] unless attributes[:'isEnabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEnabled and :is_enabled' if attributes.key?(:'isEnabled') && attributes.key?(:'is_enabled')

      self.is_enabled = attributes[:'is_enabled'] unless attributes[:'is_enabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') && !attributes.key?(:'is_enabled') # rubocop:disable Style/StringLiterals

      self.read_endpoint_ip_address = attributes[:'readEndpointIpAddress'] if attributes[:'readEndpointIpAddress']

      raise 'You cannot provide both :readEndpointIpAddress and :read_endpoint_ip_address' if attributes.key?(:'readEndpointIpAddress') && attributes.key?(:'read_endpoint_ip_address')

      self.read_endpoint_ip_address = attributes[:'read_endpoint_ip_address'] if attributes[:'read_endpoint_ip_address']

      self.read_endpoint_hostname_label = attributes[:'readEndpointHostnameLabel'] if attributes[:'readEndpointHostnameLabel']

      raise 'You cannot provide both :readEndpointHostnameLabel and :read_endpoint_hostname_label' if attributes.key?(:'readEndpointHostnameLabel') && attributes.key?(:'read_endpoint_hostname_label')

      self.read_endpoint_hostname_label = attributes[:'read_endpoint_hostname_label'] if attributes[:'read_endpoint_hostname_label']

      self.exclude_ips = attributes[:'excludeIps'] if attributes[:'excludeIps']

      raise 'You cannot provide both :excludeIps and :exclude_ips' if attributes.key?(:'excludeIps') && attributes.key?(:'exclude_ips')

      self.exclude_ips = attributes[:'exclude_ips'] if attributes[:'exclude_ips']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        is_enabled == other.is_enabled &&
        read_endpoint_ip_address == other.read_endpoint_ip_address &&
        read_endpoint_hostname_label == other.read_endpoint_hostname_label &&
        exclude_ips == other.exclude_ips
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_enabled, read_endpoint_ip_address, read_endpoint_hostname_label, exclude_ips].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
