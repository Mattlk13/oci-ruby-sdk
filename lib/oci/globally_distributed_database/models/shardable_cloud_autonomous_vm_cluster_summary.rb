# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230301
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Shardable cloud autonomous vm cluster summary.
  class GloballyDistributedDatabase::Models::ShardableCloudAutonomousVmClusterSummary
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UNAVAILABLE = 'UNAVAILABLE'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Cloud autonomous vmcluster identifier
    # @return [String]
    attr_accessor :id

    # **[Required]** Cloud autonomous vmcluster compartment id
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** Lifecycle states for shardable Cloud autonomous vm cluster.
    # @return [String]
    attr_reader :lifecycle_state

    # Detailed message for the lifecycle state.
    # @return [String]
    attr_accessor :lifecycle_state_details

    # **[Required]** Cloud autonomous vmcluster displayName
    # @return [String]
    attr_accessor :display_name

    # The compute model of the Cloud Autonomous VM Cluster.
    # @return [String]
    attr_accessor :compute_model

    # The number of Autonomous Container Databases that can be created with the currently available local storage.
    # @return [Integer]
    attr_accessor :available_container_databases

    # CPU cores available for allocation to Autonomous Databases.
    # @return [Float]
    attr_accessor :available_cpus

    # The name of the availability domain that the cloud Autonomous VM cluster is located in.
    # The format of the availability domain is the same as returned by Cloud Autonomous VM Cluster API.
    #
    # @return [String]
    attr_accessor :availability_domain

    # The data disk group size allocated for Autonomous Databases, in TBs.
    # @return [Float]
    attr_accessor :autonomous_data_storage_size_in_tbs

    # The data disk group size available for Autonomous Databases, in TBs.
    # @return [Float]
    attr_accessor :available_autonomous_data_storage_size_in_tbs

    # Cloud Exadata Infrastructure Identifier.
    # @return [String]
    attr_accessor :cloud_exadata_infrastructure_id

    # The time zone of the Cloud Autonomous VM Cluster.
    # @return [String]
    attr_accessor :cluster_time_zone

    # The total number of Autonomous Container Databases that can be created with the allocated local storage.
    # @return [Integer]
    attr_accessor :total_container_databases

    # Cloud autonomous vmcluster subnet id
    # @return [String]
    attr_accessor :subnet_id

    # Cloud autonomous vmcluster shape
    # @return [String]
    attr_accessor :shape

    # Cloud autonomous vmcluster node count
    # @return [Integer]
    attr_accessor :node_count

    # The Oracle license model that applies to the Oracle Autonomous Database.
    # @return [String]
    attr_accessor :license_model

    # The memory allocated in GBs.
    # @return [Integer]
    attr_accessor :memory_size_in_gbs

    # The amount of memory (in GBs) enabled per OCPU or ECPU.
    # @return [Integer]
    attr_accessor :memory_per_oracle_compute_unit_in_gbs

    # The number of CPU cores on the cloud Autonomous VM cluster.
    # @return [Integer]
    attr_accessor :cpu_core_count

    # The number of CPU cores enabled per VM cluster node.
    # @return [Integer]
    attr_accessor :cpu_core_count_per_node

    # The number of CPU cores on the cloud Autonomous VM cluster.
    # @return [Float]
    attr_accessor :ocpu_count

    # The CPUs that continue to be included in the count of CPUs available to the Autonomous Container Database even after one of its Autonomous Database is terminated or scaled down. You can release them to the available CPUs at its parent Autonomous VM Cluster level by restarting the Autonomous Container Database.
    # @return [Float]
    attr_accessor :reclaimable_cpus

    # Number of Autonomous Container Databases that can be created in the Autonomous VM Cluster
    # @return [Integer]
    attr_accessor :provisionable_autonomous_container_databases

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_state_details': :'lifecycleStateDetails',
        'display_name': :'displayName',
        'compute_model': :'computeModel',
        'available_container_databases': :'availableContainerDatabases',
        'available_cpus': :'availableCpus',
        'availability_domain': :'availabilityDomain',
        'autonomous_data_storage_size_in_tbs': :'autonomousDataStorageSizeInTBs',
        'available_autonomous_data_storage_size_in_tbs': :'availableAutonomousDataStorageSizeInTBs',
        'cloud_exadata_infrastructure_id': :'cloudExadataInfrastructureId',
        'cluster_time_zone': :'clusterTimeZone',
        'total_container_databases': :'totalContainerDatabases',
        'subnet_id': :'subnetId',
        'shape': :'shape',
        'node_count': :'nodeCount',
        'license_model': :'licenseModel',
        'memory_size_in_gbs': :'memorySizeInGBs',
        'memory_per_oracle_compute_unit_in_gbs': :'memoryPerOracleComputeUnitInGBs',
        'cpu_core_count': :'cpuCoreCount',
        'cpu_core_count_per_node': :'cpuCoreCountPerNode',
        'ocpu_count': :'ocpuCount',
        'reclaimable_cpus': :'reclaimableCpus',
        'provisionable_autonomous_container_databases': :'provisionableAutonomousContainerDatabases',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'lifecycle_state': :'String',
        'lifecycle_state_details': :'String',
        'display_name': :'String',
        'compute_model': :'String',
        'available_container_databases': :'Integer',
        'available_cpus': :'Float',
        'availability_domain': :'String',
        'autonomous_data_storage_size_in_tbs': :'Float',
        'available_autonomous_data_storage_size_in_tbs': :'Float',
        'cloud_exadata_infrastructure_id': :'String',
        'cluster_time_zone': :'String',
        'total_container_databases': :'Integer',
        'subnet_id': :'String',
        'shape': :'String',
        'node_count': :'Integer',
        'license_model': :'String',
        'memory_size_in_gbs': :'Integer',
        'memory_per_oracle_compute_unit_in_gbs': :'Integer',
        'cpu_core_count': :'Integer',
        'cpu_core_count_per_node': :'Integer',
        'ocpu_count': :'Float',
        'reclaimable_cpus': :'Float',
        'provisionable_autonomous_container_databases': :'Integer',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_state_details The value to assign to the {#lifecycle_state_details} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compute_model The value to assign to the {#compute_model} property
    # @option attributes [Integer] :available_container_databases The value to assign to the {#available_container_databases} property
    # @option attributes [Float] :available_cpus The value to assign to the {#available_cpus} property
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [Float] :autonomous_data_storage_size_in_tbs The value to assign to the {#autonomous_data_storage_size_in_tbs} property
    # @option attributes [Float] :available_autonomous_data_storage_size_in_tbs The value to assign to the {#available_autonomous_data_storage_size_in_tbs} property
    # @option attributes [String] :cloud_exadata_infrastructure_id The value to assign to the {#cloud_exadata_infrastructure_id} property
    # @option attributes [String] :cluster_time_zone The value to assign to the {#cluster_time_zone} property
    # @option attributes [Integer] :total_container_databases The value to assign to the {#total_container_databases} property
    # @option attributes [String] :subnet_id The value to assign to the {#subnet_id} property
    # @option attributes [String] :shape The value to assign to the {#shape} property
    # @option attributes [Integer] :node_count The value to assign to the {#node_count} property
    # @option attributes [String] :license_model The value to assign to the {#license_model} property
    # @option attributes [Integer] :memory_size_in_gbs The value to assign to the {#memory_size_in_gbs} property
    # @option attributes [Integer] :memory_per_oracle_compute_unit_in_gbs The value to assign to the {#memory_per_oracle_compute_unit_in_gbs} property
    # @option attributes [Integer] :cpu_core_count The value to assign to the {#cpu_core_count} property
    # @option attributes [Integer] :cpu_core_count_per_node The value to assign to the {#cpu_core_count_per_node} property
    # @option attributes [Float] :ocpu_count The value to assign to the {#ocpu_count} property
    # @option attributes [Float] :reclaimable_cpus The value to assign to the {#reclaimable_cpus} property
    # @option attributes [Integer] :provisionable_autonomous_container_databases The value to assign to the {#provisionable_autonomous_container_databases} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_state_details = attributes[:'lifecycleStateDetails'] if attributes[:'lifecycleStateDetails']

      raise 'You cannot provide both :lifecycleStateDetails and :lifecycle_state_details' if attributes.key?(:'lifecycleStateDetails') && attributes.key?(:'lifecycle_state_details')

      self.lifecycle_state_details = attributes[:'lifecycle_state_details'] if attributes[:'lifecycle_state_details']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compute_model = attributes[:'computeModel'] if attributes[:'computeModel']

      raise 'You cannot provide both :computeModel and :compute_model' if attributes.key?(:'computeModel') && attributes.key?(:'compute_model')

      self.compute_model = attributes[:'compute_model'] if attributes[:'compute_model']

      self.available_container_databases = attributes[:'availableContainerDatabases'] if attributes[:'availableContainerDatabases']

      raise 'You cannot provide both :availableContainerDatabases and :available_container_databases' if attributes.key?(:'availableContainerDatabases') && attributes.key?(:'available_container_databases')

      self.available_container_databases = attributes[:'available_container_databases'] if attributes[:'available_container_databases']

      self.available_cpus = attributes[:'availableCpus'] if attributes[:'availableCpus']

      raise 'You cannot provide both :availableCpus and :available_cpus' if attributes.key?(:'availableCpus') && attributes.key?(:'available_cpus')

      self.available_cpus = attributes[:'available_cpus'] if attributes[:'available_cpus']

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.autonomous_data_storage_size_in_tbs = attributes[:'autonomousDataStorageSizeInTBs'] if attributes[:'autonomousDataStorageSizeInTBs']

      raise 'You cannot provide both :autonomousDataStorageSizeInTBs and :autonomous_data_storage_size_in_tbs' if attributes.key?(:'autonomousDataStorageSizeInTBs') && attributes.key?(:'autonomous_data_storage_size_in_tbs')

      self.autonomous_data_storage_size_in_tbs = attributes[:'autonomous_data_storage_size_in_tbs'] if attributes[:'autonomous_data_storage_size_in_tbs']

      self.available_autonomous_data_storage_size_in_tbs = attributes[:'availableAutonomousDataStorageSizeInTBs'] if attributes[:'availableAutonomousDataStorageSizeInTBs']

      raise 'You cannot provide both :availableAutonomousDataStorageSizeInTBs and :available_autonomous_data_storage_size_in_tbs' if attributes.key?(:'availableAutonomousDataStorageSizeInTBs') && attributes.key?(:'available_autonomous_data_storage_size_in_tbs')

      self.available_autonomous_data_storage_size_in_tbs = attributes[:'available_autonomous_data_storage_size_in_tbs'] if attributes[:'available_autonomous_data_storage_size_in_tbs']

      self.cloud_exadata_infrastructure_id = attributes[:'cloudExadataInfrastructureId'] if attributes[:'cloudExadataInfrastructureId']

      raise 'You cannot provide both :cloudExadataInfrastructureId and :cloud_exadata_infrastructure_id' if attributes.key?(:'cloudExadataInfrastructureId') && attributes.key?(:'cloud_exadata_infrastructure_id')

      self.cloud_exadata_infrastructure_id = attributes[:'cloud_exadata_infrastructure_id'] if attributes[:'cloud_exadata_infrastructure_id']

      self.cluster_time_zone = attributes[:'clusterTimeZone'] if attributes[:'clusterTimeZone']

      raise 'You cannot provide both :clusterTimeZone and :cluster_time_zone' if attributes.key?(:'clusterTimeZone') && attributes.key?(:'cluster_time_zone')

      self.cluster_time_zone = attributes[:'cluster_time_zone'] if attributes[:'cluster_time_zone']

      self.total_container_databases = attributes[:'totalContainerDatabases'] if attributes[:'totalContainerDatabases']

      raise 'You cannot provide both :totalContainerDatabases and :total_container_databases' if attributes.key?(:'totalContainerDatabases') && attributes.key?(:'total_container_databases')

      self.total_container_databases = attributes[:'total_container_databases'] if attributes[:'total_container_databases']

      self.subnet_id = attributes[:'subnetId'] if attributes[:'subnetId']

      raise 'You cannot provide both :subnetId and :subnet_id' if attributes.key?(:'subnetId') && attributes.key?(:'subnet_id')

      self.subnet_id = attributes[:'subnet_id'] if attributes[:'subnet_id']

      self.shape = attributes[:'shape'] if attributes[:'shape']

      self.node_count = attributes[:'nodeCount'] if attributes[:'nodeCount']

      raise 'You cannot provide both :nodeCount and :node_count' if attributes.key?(:'nodeCount') && attributes.key?(:'node_count')

      self.node_count = attributes[:'node_count'] if attributes[:'node_count']

      self.license_model = attributes[:'licenseModel'] if attributes[:'licenseModel']

      raise 'You cannot provide both :licenseModel and :license_model' if attributes.key?(:'licenseModel') && attributes.key?(:'license_model')

      self.license_model = attributes[:'license_model'] if attributes[:'license_model']

      self.memory_size_in_gbs = attributes[:'memorySizeInGBs'] if attributes[:'memorySizeInGBs']

      raise 'You cannot provide both :memorySizeInGBs and :memory_size_in_gbs' if attributes.key?(:'memorySizeInGBs') && attributes.key?(:'memory_size_in_gbs')

      self.memory_size_in_gbs = attributes[:'memory_size_in_gbs'] if attributes[:'memory_size_in_gbs']

      self.memory_per_oracle_compute_unit_in_gbs = attributes[:'memoryPerOracleComputeUnitInGBs'] if attributes[:'memoryPerOracleComputeUnitInGBs']

      raise 'You cannot provide both :memoryPerOracleComputeUnitInGBs and :memory_per_oracle_compute_unit_in_gbs' if attributes.key?(:'memoryPerOracleComputeUnitInGBs') && attributes.key?(:'memory_per_oracle_compute_unit_in_gbs')

      self.memory_per_oracle_compute_unit_in_gbs = attributes[:'memory_per_oracle_compute_unit_in_gbs'] if attributes[:'memory_per_oracle_compute_unit_in_gbs']

      self.cpu_core_count = attributes[:'cpuCoreCount'] if attributes[:'cpuCoreCount']

      raise 'You cannot provide both :cpuCoreCount and :cpu_core_count' if attributes.key?(:'cpuCoreCount') && attributes.key?(:'cpu_core_count')

      self.cpu_core_count = attributes[:'cpu_core_count'] if attributes[:'cpu_core_count']

      self.cpu_core_count_per_node = attributes[:'cpuCoreCountPerNode'] if attributes[:'cpuCoreCountPerNode']

      raise 'You cannot provide both :cpuCoreCountPerNode and :cpu_core_count_per_node' if attributes.key?(:'cpuCoreCountPerNode') && attributes.key?(:'cpu_core_count_per_node')

      self.cpu_core_count_per_node = attributes[:'cpu_core_count_per_node'] if attributes[:'cpu_core_count_per_node']

      self.ocpu_count = attributes[:'ocpuCount'] if attributes[:'ocpuCount']

      raise 'You cannot provide both :ocpuCount and :ocpu_count' if attributes.key?(:'ocpuCount') && attributes.key?(:'ocpu_count')

      self.ocpu_count = attributes[:'ocpu_count'] if attributes[:'ocpu_count']

      self.reclaimable_cpus = attributes[:'reclaimableCpus'] if attributes[:'reclaimableCpus']

      raise 'You cannot provide both :reclaimableCpus and :reclaimable_cpus' if attributes.key?(:'reclaimableCpus') && attributes.key?(:'reclaimable_cpus')

      self.reclaimable_cpus = attributes[:'reclaimable_cpus'] if attributes[:'reclaimable_cpus']

      self.provisionable_autonomous_container_databases = attributes[:'provisionableAutonomousContainerDatabases'] if attributes[:'provisionableAutonomousContainerDatabases']

      raise 'You cannot provide both :provisionableAutonomousContainerDatabases and :provisionable_autonomous_container_databases' if attributes.key?(:'provisionableAutonomousContainerDatabases') && attributes.key?(:'provisionable_autonomous_container_databases')

      self.provisionable_autonomous_container_databases = attributes[:'provisionable_autonomous_container_databases'] if attributes[:'provisionable_autonomous_container_databases']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_state_details == other.lifecycle_state_details &&
        display_name == other.display_name &&
        compute_model == other.compute_model &&
        available_container_databases == other.available_container_databases &&
        available_cpus == other.available_cpus &&
        availability_domain == other.availability_domain &&
        autonomous_data_storage_size_in_tbs == other.autonomous_data_storage_size_in_tbs &&
        available_autonomous_data_storage_size_in_tbs == other.available_autonomous_data_storage_size_in_tbs &&
        cloud_exadata_infrastructure_id == other.cloud_exadata_infrastructure_id &&
        cluster_time_zone == other.cluster_time_zone &&
        total_container_databases == other.total_container_databases &&
        subnet_id == other.subnet_id &&
        shape == other.shape &&
        node_count == other.node_count &&
        license_model == other.license_model &&
        memory_size_in_gbs == other.memory_size_in_gbs &&
        memory_per_oracle_compute_unit_in_gbs == other.memory_per_oracle_compute_unit_in_gbs &&
        cpu_core_count == other.cpu_core_count &&
        cpu_core_count_per_node == other.cpu_core_count_per_node &&
        ocpu_count == other.ocpu_count &&
        reclaimable_cpus == other.reclaimable_cpus &&
        provisionable_autonomous_container_databases == other.provisionable_autonomous_container_databases &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, lifecycle_state, lifecycle_state_details, display_name, compute_model, available_container_databases, available_cpus, availability_domain, autonomous_data_storage_size_in_tbs, available_autonomous_data_storage_size_in_tbs, cloud_exadata_infrastructure_id, cluster_time_zone, total_container_databases, subnet_id, shape, node_count, license_model, memory_size_in_gbs, memory_per_oracle_compute_unit_in_gbs, cpu_core_count, cpu_core_count_per_node, ocpu_count, reclaimable_cpus, provisionable_autonomous_container_databases, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
