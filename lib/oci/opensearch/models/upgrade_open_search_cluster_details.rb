# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180828
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Minor or major version upgrade of a cluster.
  class Opensearch::Models::UpgradeOpenSearchClusterDetails
    UPGRADE_TYPE_ENUM = [
      UPGRADE_TYPE_MINOR = 'MINOR'.freeze,
      UPGRADE_TYPE_MAJOR = 'MAJOR'.freeze
    ].freeze

    # **[Required]** The display name of the original cluster.
    # This is required to validate that the cluster ID has the same display name.
    #
    # @return [String]
    attr_accessor :original_cluster_display_name

    # **[Required]** The software version the cluster is desired.
    # @return [String]
    attr_accessor :desired_software_version

    # **[Required]** The upgrade type of cluster (major or minor).
    # @return [String]
    attr_reader :upgrade_type

    # The cluster would be cloned for true and updated for false with the provided version.
    # @return [BOOLEAN]
    attr_accessor :is_clone

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'original_cluster_display_name': :'originalClusterDisplayName',
        'desired_software_version': :'desiredSoftwareVersion',
        'upgrade_type': :'upgradeType',
        'is_clone': :'isClone',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'original_cluster_display_name': :'String',
        'desired_software_version': :'String',
        'upgrade_type': :'String',
        'is_clone': :'BOOLEAN',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :original_cluster_display_name The value to assign to the {#original_cluster_display_name} property
    # @option attributes [String] :desired_software_version The value to assign to the {#desired_software_version} property
    # @option attributes [String] :upgrade_type The value to assign to the {#upgrade_type} property
    # @option attributes [BOOLEAN] :is_clone The value to assign to the {#is_clone} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.original_cluster_display_name = attributes[:'originalClusterDisplayName'] if attributes[:'originalClusterDisplayName']

      raise 'You cannot provide both :originalClusterDisplayName and :original_cluster_display_name' if attributes.key?(:'originalClusterDisplayName') && attributes.key?(:'original_cluster_display_name')

      self.original_cluster_display_name = attributes[:'original_cluster_display_name'] if attributes[:'original_cluster_display_name']

      self.desired_software_version = attributes[:'desiredSoftwareVersion'] if attributes[:'desiredSoftwareVersion']

      raise 'You cannot provide both :desiredSoftwareVersion and :desired_software_version' if attributes.key?(:'desiredSoftwareVersion') && attributes.key?(:'desired_software_version')

      self.desired_software_version = attributes[:'desired_software_version'] if attributes[:'desired_software_version']

      self.upgrade_type = attributes[:'upgradeType'] if attributes[:'upgradeType']

      raise 'You cannot provide both :upgradeType and :upgrade_type' if attributes.key?(:'upgradeType') && attributes.key?(:'upgrade_type')

      self.upgrade_type = attributes[:'upgrade_type'] if attributes[:'upgrade_type']

      self.is_clone = attributes[:'isClone'] unless attributes[:'isClone'].nil?
      self.is_clone = true if is_clone.nil? && !attributes.key?(:'isClone') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isClone and :is_clone' if attributes.key?(:'isClone') && attributes.key?(:'is_clone')

      self.is_clone = attributes[:'is_clone'] unless attributes[:'is_clone'].nil?
      self.is_clone = true if is_clone.nil? && !attributes.key?(:'isClone') && !attributes.key?(:'is_clone') # rubocop:disable Style/StringLiterals

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] upgrade_type Object to be assigned
    def upgrade_type=(upgrade_type)
      raise "Invalid value for 'upgrade_type': this must be one of the values in UPGRADE_TYPE_ENUM." if upgrade_type && !UPGRADE_TYPE_ENUM.include?(upgrade_type)

      @upgrade_type = upgrade_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        original_cluster_display_name == other.original_cluster_display_name &&
        desired_software_version == other.desired_software_version &&
        upgrade_type == other.upgrade_type &&
        is_clone == other.is_clone &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [original_cluster_display_name, desired_software_version, upgrade_type, is_clone, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
