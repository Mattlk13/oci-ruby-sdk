# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180828
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # An OpenSearch cluster resource. An OpenSearch cluster is set of instances that provide OpenSearch functionality in OCI Search Service with OpenSearch.
  # For more information, see [About Search Service with OpenSearch](https://docs.cloud.oracle.com/iaas/Content/search-opensearch/Concepts/ociopensearch.htm).
  #
  class Opensearch::Models::OpensearchCluster
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MASTER_NODE_HOST_TYPE_ENUM = [
      MASTER_NODE_HOST_TYPE_FLEX = 'FLEX'.freeze,
      MASTER_NODE_HOST_TYPE_BM = 'BM'.freeze,
      MASTER_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DATA_NODE_HOST_TYPE_ENUM = [
      DATA_NODE_HOST_TYPE_FLEX = 'FLEX'.freeze,
      DATA_NODE_HOST_TYPE_BM = 'BM'.freeze,
      DATA_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SEARCH_NODE_HOST_TYPE_ENUM = [
      SEARCH_NODE_HOST_TYPE_FLEX = 'FLEX'.freeze,
      SEARCH_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SECURITY_MODE_ENUM = [
      SECURITY_MODE_DISABLED = 'DISABLED'.freeze,
      SECURITY_MODE_PERMISSIVE = 'PERMISSIVE'.freeze,
      SECURITY_MODE_ENFORCING = 'ENFORCING'.freeze,
      SECURITY_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the cluster.
    # @return [String]
    attr_accessor :id

    # **[Required]** The name of the cluster. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The OCID of the compartment where the cluster is located.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The current state of the cluster.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The amount of time in milliseconds since the cluster was created.
    # @return [DateTime]
    attr_accessor :time_created

    # The amount of time in milliseconds since the cluster was updated.
    # @return [DateTime]
    attr_accessor :time_updated

    # The amount of time in milliseconds since the cluster was updated.
    # @return [DateTime]
    attr_accessor :time_deleted

    # Additional information about the current lifecycle state of the cluster.
    # @return [String]
    attr_accessor :lifecycle_details

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # **[Required]** The software version the cluster is running.
    # @return [String]
    attr_accessor :software_version

    # **[Required]** The size in GB of the cluster's total storage.
    # @return [Integer]
    attr_accessor :total_storage_gb

    # **[Required]** The fully qualified domain name (FQDN) for the cluster's API endpoint.
    # @return [String]
    attr_accessor :opensearch_fqdn

    # **[Required]** The cluster's private IP address.
    # @return [String]
    attr_accessor :opensearch_private_ip

    # **[Required]** The fully qualified domain name (FQDN) for the cluster's OpenSearch Dashboard API endpoint.
    # @return [String]
    attr_accessor :opendashboard_fqdn

    # **[Required]** The private IP address for the cluster's OpenSearch Dashboard.
    # @return [String]
    attr_accessor :opendashboard_private_ip

    # **[Required]** The number of master nodes configured for the cluster.
    # @return [Integer]
    attr_accessor :master_node_count

    # **[Required]** The instance type for the cluster's master nodes.
    # @return [String]
    attr_reader :master_node_host_type

    # The bare metal shape for the cluster's master nodes.
    # @return [String]
    attr_accessor :master_node_host_bare_metal_shape

    # The node shape for the cluster's master nodes.
    # @return [String]
    attr_accessor :master_node_host_shape

    # **[Required]** The number of OCPUs configured for cluster's master nodes.
    # @return [Integer]
    attr_accessor :master_node_host_ocpu_count

    # **[Required]** The amount of memory in GB, for the cluster's master nodes.
    # @return [Integer]
    attr_accessor :master_node_host_memory_gb

    # **[Required]** The number of data nodes configured for the cluster.
    # @return [Integer]
    attr_accessor :data_node_count

    # **[Required]** The instance type for the cluster's data nodes.
    # @return [String]
    attr_reader :data_node_host_type

    # The bare metal shape for the cluster's data nodes.
    # @return [String]
    attr_accessor :data_node_host_bare_metal_shape

    # The node shape for the cluster's data nodes.
    # @return [String]
    attr_accessor :data_node_host_shape

    # **[Required]** The number of OCPUs configured for the cluster's data nodes.
    # @return [Integer]
    attr_accessor :data_node_host_ocpu_count

    # **[Required]** The amount of memory in GB, for the cluster's data nodes.
    # @return [Integer]
    attr_accessor :data_node_host_memory_gb

    # **[Required]** The amount of storage in GB, to configure per node for the cluster's data nodes.
    # @return [Integer]
    attr_accessor :data_node_storage_gb

    # The number of search nodes configured for the cluster.
    # @return [Integer]
    attr_accessor :search_node_count

    # The instance type for the cluster's search nodes.
    # @return [String]
    attr_reader :search_node_host_type

    # The node shape for the cluster's search nodes.
    # @return [String]
    attr_accessor :search_node_host_shape

    # The number of OCPUs configured for the cluster's search nodes.
    # @return [Integer]
    attr_accessor :search_node_host_ocpu_count

    # The amount of memory in GB, for the cluster's search nodes.
    # @return [Integer]
    attr_accessor :search_node_host_memory_gb

    # The amount of storage in GB, to configure per node for the cluster's search nodes.
    # @return [Integer]
    attr_accessor :search_node_storage_gb

    # The node shape for the cluster's OpenSearch Dashboard nodes.
    # @return [String]
    attr_accessor :opendashboard_node_host_shape

    # **[Required]** The number of OpenSearch Dashboard nodes configured for the cluster.
    # @return [Integer]
    attr_accessor :opendashboard_node_count

    # **[Required]** The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
    # @return [Integer]
    attr_accessor :opendashboard_node_host_ocpu_count

    # **[Required]** The amount of memory in GB, for the cluster's OpenSearch Dashboard nodes.
    # @return [Integer]
    attr_accessor :opendashboard_node_host_memory_gb

    # **[Required]** The OCID of the cluster's VCN.
    # @return [String]
    attr_accessor :vcn_id

    # **[Required]** The OCID of the cluster's subnet.
    # @return [String]
    attr_accessor :subnet_id

    # **[Required]** The OCID for the compartment where the cluster's VCN is located.
    # @return [String]
    attr_accessor :vcn_compartment_id

    # **[Required]** The OCID for the compartment where the cluster's subnet is located.
    # @return [String]
    attr_accessor :subnet_compartment_id

    # The fully qualified domain name (FQDN) for the cluster's API endpoint.
    # @return [String]
    attr_accessor :fqdn

    # **[Required]** The availability domains to distribute the cluser nodes across.
    # @return [Array<String>]
    attr_accessor :availability_domains

    # The security mode of the cluster.
    # @return [String]
    attr_reader :security_mode

    # The name of the master user that are used to manage security config
    # @return [String]
    attr_accessor :security_master_user_name

    # The password hash of the master user that are used to manage security config
    # @return [String]
    attr_accessor :security_master_user_password_hash

    # @return [OCI::Opensearch::Models::SecuritySamlConfig]
    attr_accessor :security_saml_config

    # @return [OCI::Opensearch::Models::BackupPolicy]
    attr_accessor :backup_policy

    # The customer IP addresses of the endpoint in customer VCN
    # @return [Array<String>]
    attr_accessor :reverse_connection_endpoint_customer_ips

    # The list of reverse connection endpoints.
    # @return [Array<OCI::Opensearch::Models::ReverseConnectionEndpoint>]
    attr_accessor :reverse_connection_endpoints

    # @return [OCI::Opensearch::Models::OutboundClusterConfig]
    attr_accessor :outbound_cluster_config

    # List of inbound clusters for which this cluster is an outbound cluster
    # @return [Array<String>]
    attr_accessor :inbound_cluster_ids

    # @return [OCI::Opensearch::Models::MaintenanceDetails]
    attr_accessor :maintenance_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'lifecycle_state': :'lifecycleState',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'time_deleted': :'timeDeleted',
        'lifecycle_details': :'lifecycleDetails',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'software_version': :'softwareVersion',
        'total_storage_gb': :'totalStorageGB',
        'opensearch_fqdn': :'opensearchFqdn',
        'opensearch_private_ip': :'opensearchPrivateIp',
        'opendashboard_fqdn': :'opendashboardFqdn',
        'opendashboard_private_ip': :'opendashboardPrivateIp',
        'master_node_count': :'masterNodeCount',
        'master_node_host_type': :'masterNodeHostType',
        'master_node_host_bare_metal_shape': :'masterNodeHostBareMetalShape',
        'master_node_host_shape': :'masterNodeHostShape',
        'master_node_host_ocpu_count': :'masterNodeHostOcpuCount',
        'master_node_host_memory_gb': :'masterNodeHostMemoryGB',
        'data_node_count': :'dataNodeCount',
        'data_node_host_type': :'dataNodeHostType',
        'data_node_host_bare_metal_shape': :'dataNodeHostBareMetalShape',
        'data_node_host_shape': :'dataNodeHostShape',
        'data_node_host_ocpu_count': :'dataNodeHostOcpuCount',
        'data_node_host_memory_gb': :'dataNodeHostMemoryGB',
        'data_node_storage_gb': :'dataNodeStorageGB',
        'search_node_count': :'searchNodeCount',
        'search_node_host_type': :'searchNodeHostType',
        'search_node_host_shape': :'searchNodeHostShape',
        'search_node_host_ocpu_count': :'searchNodeHostOcpuCount',
        'search_node_host_memory_gb': :'searchNodeHostMemoryGB',
        'search_node_storage_gb': :'searchNodeStorageGB',
        'opendashboard_node_host_shape': :'opendashboardNodeHostShape',
        'opendashboard_node_count': :'opendashboardNodeCount',
        'opendashboard_node_host_ocpu_count': :'opendashboardNodeHostOcpuCount',
        'opendashboard_node_host_memory_gb': :'opendashboardNodeHostMemoryGB',
        'vcn_id': :'vcnId',
        'subnet_id': :'subnetId',
        'vcn_compartment_id': :'vcnCompartmentId',
        'subnet_compartment_id': :'subnetCompartmentId',
        'fqdn': :'fqdn',
        'availability_domains': :'availabilityDomains',
        'security_mode': :'securityMode',
        'security_master_user_name': :'securityMasterUserName',
        'security_master_user_password_hash': :'securityMasterUserPasswordHash',
        'security_saml_config': :'securitySamlConfig',
        'backup_policy': :'backupPolicy',
        'reverse_connection_endpoint_customer_ips': :'reverseConnectionEndpointCustomerIps',
        'reverse_connection_endpoints': :'reverseConnectionEndpoints',
        'outbound_cluster_config': :'outboundClusterConfig',
        'inbound_cluster_ids': :'inboundClusterIds',
        'maintenance_details': :'maintenanceDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'compartment_id': :'String',
        'lifecycle_state': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'time_deleted': :'DateTime',
        'lifecycle_details': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'software_version': :'String',
        'total_storage_gb': :'Integer',
        'opensearch_fqdn': :'String',
        'opensearch_private_ip': :'String',
        'opendashboard_fqdn': :'String',
        'opendashboard_private_ip': :'String',
        'master_node_count': :'Integer',
        'master_node_host_type': :'String',
        'master_node_host_bare_metal_shape': :'String',
        'master_node_host_shape': :'String',
        'master_node_host_ocpu_count': :'Integer',
        'master_node_host_memory_gb': :'Integer',
        'data_node_count': :'Integer',
        'data_node_host_type': :'String',
        'data_node_host_bare_metal_shape': :'String',
        'data_node_host_shape': :'String',
        'data_node_host_ocpu_count': :'Integer',
        'data_node_host_memory_gb': :'Integer',
        'data_node_storage_gb': :'Integer',
        'search_node_count': :'Integer',
        'search_node_host_type': :'String',
        'search_node_host_shape': :'String',
        'search_node_host_ocpu_count': :'Integer',
        'search_node_host_memory_gb': :'Integer',
        'search_node_storage_gb': :'Integer',
        'opendashboard_node_host_shape': :'String',
        'opendashboard_node_count': :'Integer',
        'opendashboard_node_host_ocpu_count': :'Integer',
        'opendashboard_node_host_memory_gb': :'Integer',
        'vcn_id': :'String',
        'subnet_id': :'String',
        'vcn_compartment_id': :'String',
        'subnet_compartment_id': :'String',
        'fqdn': :'String',
        'availability_domains': :'Array<String>',
        'security_mode': :'String',
        'security_master_user_name': :'String',
        'security_master_user_password_hash': :'String',
        'security_saml_config': :'OCI::Opensearch::Models::SecuritySamlConfig',
        'backup_policy': :'OCI::Opensearch::Models::BackupPolicy',
        'reverse_connection_endpoint_customer_ips': :'Array<String>',
        'reverse_connection_endpoints': :'Array<OCI::Opensearch::Models::ReverseConnectionEndpoint>',
        'outbound_cluster_config': :'OCI::Opensearch::Models::OutboundClusterConfig',
        'inbound_cluster_ids': :'Array<String>',
        'maintenance_details': :'OCI::Opensearch::Models::MaintenanceDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [DateTime] :time_deleted The value to assign to the {#time_deleted} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    # @option attributes [String] :software_version The value to assign to the {#software_version} property
    # @option attributes [Integer] :total_storage_gb The value to assign to the {#total_storage_gb} property
    # @option attributes [String] :opensearch_fqdn The value to assign to the {#opensearch_fqdn} property
    # @option attributes [String] :opensearch_private_ip The value to assign to the {#opensearch_private_ip} property
    # @option attributes [String] :opendashboard_fqdn The value to assign to the {#opendashboard_fqdn} property
    # @option attributes [String] :opendashboard_private_ip The value to assign to the {#opendashboard_private_ip} property
    # @option attributes [Integer] :master_node_count The value to assign to the {#master_node_count} property
    # @option attributes [String] :master_node_host_type The value to assign to the {#master_node_host_type} property
    # @option attributes [String] :master_node_host_bare_metal_shape The value to assign to the {#master_node_host_bare_metal_shape} property
    # @option attributes [String] :master_node_host_shape The value to assign to the {#master_node_host_shape} property
    # @option attributes [Integer] :master_node_host_ocpu_count The value to assign to the {#master_node_host_ocpu_count} property
    # @option attributes [Integer] :master_node_host_memory_gb The value to assign to the {#master_node_host_memory_gb} property
    # @option attributes [Integer] :data_node_count The value to assign to the {#data_node_count} property
    # @option attributes [String] :data_node_host_type The value to assign to the {#data_node_host_type} property
    # @option attributes [String] :data_node_host_bare_metal_shape The value to assign to the {#data_node_host_bare_metal_shape} property
    # @option attributes [String] :data_node_host_shape The value to assign to the {#data_node_host_shape} property
    # @option attributes [Integer] :data_node_host_ocpu_count The value to assign to the {#data_node_host_ocpu_count} property
    # @option attributes [Integer] :data_node_host_memory_gb The value to assign to the {#data_node_host_memory_gb} property
    # @option attributes [Integer] :data_node_storage_gb The value to assign to the {#data_node_storage_gb} property
    # @option attributes [Integer] :search_node_count The value to assign to the {#search_node_count} property
    # @option attributes [String] :search_node_host_type The value to assign to the {#search_node_host_type} property
    # @option attributes [String] :search_node_host_shape The value to assign to the {#search_node_host_shape} property
    # @option attributes [Integer] :search_node_host_ocpu_count The value to assign to the {#search_node_host_ocpu_count} property
    # @option attributes [Integer] :search_node_host_memory_gb The value to assign to the {#search_node_host_memory_gb} property
    # @option attributes [Integer] :search_node_storage_gb The value to assign to the {#search_node_storage_gb} property
    # @option attributes [String] :opendashboard_node_host_shape The value to assign to the {#opendashboard_node_host_shape} property
    # @option attributes [Integer] :opendashboard_node_count The value to assign to the {#opendashboard_node_count} property
    # @option attributes [Integer] :opendashboard_node_host_ocpu_count The value to assign to the {#opendashboard_node_host_ocpu_count} property
    # @option attributes [Integer] :opendashboard_node_host_memory_gb The value to assign to the {#opendashboard_node_host_memory_gb} property
    # @option attributes [String] :vcn_id The value to assign to the {#vcn_id} property
    # @option attributes [String] :subnet_id The value to assign to the {#subnet_id} property
    # @option attributes [String] :vcn_compartment_id The value to assign to the {#vcn_compartment_id} property
    # @option attributes [String] :subnet_compartment_id The value to assign to the {#subnet_compartment_id} property
    # @option attributes [String] :fqdn The value to assign to the {#fqdn} property
    # @option attributes [Array<String>] :availability_domains The value to assign to the {#availability_domains} property
    # @option attributes [String] :security_mode The value to assign to the {#security_mode} property
    # @option attributes [String] :security_master_user_name The value to assign to the {#security_master_user_name} property
    # @option attributes [String] :security_master_user_password_hash The value to assign to the {#security_master_user_password_hash} property
    # @option attributes [OCI::Opensearch::Models::SecuritySamlConfig] :security_saml_config The value to assign to the {#security_saml_config} property
    # @option attributes [OCI::Opensearch::Models::BackupPolicy] :backup_policy The value to assign to the {#backup_policy} property
    # @option attributes [Array<String>] :reverse_connection_endpoint_customer_ips The value to assign to the {#reverse_connection_endpoint_customer_ips} property
    # @option attributes [Array<OCI::Opensearch::Models::ReverseConnectionEndpoint>] :reverse_connection_endpoints The value to assign to the {#reverse_connection_endpoints} property
    # @option attributes [OCI::Opensearch::Models::OutboundClusterConfig] :outbound_cluster_config The value to assign to the {#outbound_cluster_config} property
    # @option attributes [Array<String>] :inbound_cluster_ids The value to assign to the {#inbound_cluster_ids} property
    # @option attributes [OCI::Opensearch::Models::MaintenanceDetails] :maintenance_details The value to assign to the {#maintenance_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.time_deleted = attributes[:'timeDeleted'] if attributes[:'timeDeleted']

      raise 'You cannot provide both :timeDeleted and :time_deleted' if attributes.key?(:'timeDeleted') && attributes.key?(:'time_deleted')

      self.time_deleted = attributes[:'time_deleted'] if attributes[:'time_deleted']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']

      self.software_version = attributes[:'softwareVersion'] if attributes[:'softwareVersion']

      raise 'You cannot provide both :softwareVersion and :software_version' if attributes.key?(:'softwareVersion') && attributes.key?(:'software_version')

      self.software_version = attributes[:'software_version'] if attributes[:'software_version']

      self.total_storage_gb = attributes[:'totalStorageGB'] if attributes[:'totalStorageGB']

      raise 'You cannot provide both :totalStorageGB and :total_storage_gb' if attributes.key?(:'totalStorageGB') && attributes.key?(:'total_storage_gb')

      self.total_storage_gb = attributes[:'total_storage_gb'] if attributes[:'total_storage_gb']

      self.opensearch_fqdn = attributes[:'opensearchFqdn'] if attributes[:'opensearchFqdn']

      raise 'You cannot provide both :opensearchFqdn and :opensearch_fqdn' if attributes.key?(:'opensearchFqdn') && attributes.key?(:'opensearch_fqdn')

      self.opensearch_fqdn = attributes[:'opensearch_fqdn'] if attributes[:'opensearch_fqdn']

      self.opensearch_private_ip = attributes[:'opensearchPrivateIp'] if attributes[:'opensearchPrivateIp']

      raise 'You cannot provide both :opensearchPrivateIp and :opensearch_private_ip' if attributes.key?(:'opensearchPrivateIp') && attributes.key?(:'opensearch_private_ip')

      self.opensearch_private_ip = attributes[:'opensearch_private_ip'] if attributes[:'opensearch_private_ip']

      self.opendashboard_fqdn = attributes[:'opendashboardFqdn'] if attributes[:'opendashboardFqdn']

      raise 'You cannot provide both :opendashboardFqdn and :opendashboard_fqdn' if attributes.key?(:'opendashboardFqdn') && attributes.key?(:'opendashboard_fqdn')

      self.opendashboard_fqdn = attributes[:'opendashboard_fqdn'] if attributes[:'opendashboard_fqdn']

      self.opendashboard_private_ip = attributes[:'opendashboardPrivateIp'] if attributes[:'opendashboardPrivateIp']

      raise 'You cannot provide both :opendashboardPrivateIp and :opendashboard_private_ip' if attributes.key?(:'opendashboardPrivateIp') && attributes.key?(:'opendashboard_private_ip')

      self.opendashboard_private_ip = attributes[:'opendashboard_private_ip'] if attributes[:'opendashboard_private_ip']

      self.master_node_count = attributes[:'masterNodeCount'] if attributes[:'masterNodeCount']

      raise 'You cannot provide both :masterNodeCount and :master_node_count' if attributes.key?(:'masterNodeCount') && attributes.key?(:'master_node_count')

      self.master_node_count = attributes[:'master_node_count'] if attributes[:'master_node_count']

      self.master_node_host_type = attributes[:'masterNodeHostType'] if attributes[:'masterNodeHostType']

      raise 'You cannot provide both :masterNodeHostType and :master_node_host_type' if attributes.key?(:'masterNodeHostType') && attributes.key?(:'master_node_host_type')

      self.master_node_host_type = attributes[:'master_node_host_type'] if attributes[:'master_node_host_type']

      self.master_node_host_bare_metal_shape = attributes[:'masterNodeHostBareMetalShape'] if attributes[:'masterNodeHostBareMetalShape']

      raise 'You cannot provide both :masterNodeHostBareMetalShape and :master_node_host_bare_metal_shape' if attributes.key?(:'masterNodeHostBareMetalShape') && attributes.key?(:'master_node_host_bare_metal_shape')

      self.master_node_host_bare_metal_shape = attributes[:'master_node_host_bare_metal_shape'] if attributes[:'master_node_host_bare_metal_shape']

      self.master_node_host_shape = attributes[:'masterNodeHostShape'] if attributes[:'masterNodeHostShape']

      raise 'You cannot provide both :masterNodeHostShape and :master_node_host_shape' if attributes.key?(:'masterNodeHostShape') && attributes.key?(:'master_node_host_shape')

      self.master_node_host_shape = attributes[:'master_node_host_shape'] if attributes[:'master_node_host_shape']

      self.master_node_host_ocpu_count = attributes[:'masterNodeHostOcpuCount'] if attributes[:'masterNodeHostOcpuCount']

      raise 'You cannot provide both :masterNodeHostOcpuCount and :master_node_host_ocpu_count' if attributes.key?(:'masterNodeHostOcpuCount') && attributes.key?(:'master_node_host_ocpu_count')

      self.master_node_host_ocpu_count = attributes[:'master_node_host_ocpu_count'] if attributes[:'master_node_host_ocpu_count']

      self.master_node_host_memory_gb = attributes[:'masterNodeHostMemoryGB'] if attributes[:'masterNodeHostMemoryGB']

      raise 'You cannot provide both :masterNodeHostMemoryGB and :master_node_host_memory_gb' if attributes.key?(:'masterNodeHostMemoryGB') && attributes.key?(:'master_node_host_memory_gb')

      self.master_node_host_memory_gb = attributes[:'master_node_host_memory_gb'] if attributes[:'master_node_host_memory_gb']

      self.data_node_count = attributes[:'dataNodeCount'] if attributes[:'dataNodeCount']

      raise 'You cannot provide both :dataNodeCount and :data_node_count' if attributes.key?(:'dataNodeCount') && attributes.key?(:'data_node_count')

      self.data_node_count = attributes[:'data_node_count'] if attributes[:'data_node_count']

      self.data_node_host_type = attributes[:'dataNodeHostType'] if attributes[:'dataNodeHostType']

      raise 'You cannot provide both :dataNodeHostType and :data_node_host_type' if attributes.key?(:'dataNodeHostType') && attributes.key?(:'data_node_host_type')

      self.data_node_host_type = attributes[:'data_node_host_type'] if attributes[:'data_node_host_type']

      self.data_node_host_bare_metal_shape = attributes[:'dataNodeHostBareMetalShape'] if attributes[:'dataNodeHostBareMetalShape']

      raise 'You cannot provide both :dataNodeHostBareMetalShape and :data_node_host_bare_metal_shape' if attributes.key?(:'dataNodeHostBareMetalShape') && attributes.key?(:'data_node_host_bare_metal_shape')

      self.data_node_host_bare_metal_shape = attributes[:'data_node_host_bare_metal_shape'] if attributes[:'data_node_host_bare_metal_shape']

      self.data_node_host_shape = attributes[:'dataNodeHostShape'] if attributes[:'dataNodeHostShape']

      raise 'You cannot provide both :dataNodeHostShape and :data_node_host_shape' if attributes.key?(:'dataNodeHostShape') && attributes.key?(:'data_node_host_shape')

      self.data_node_host_shape = attributes[:'data_node_host_shape'] if attributes[:'data_node_host_shape']

      self.data_node_host_ocpu_count = attributes[:'dataNodeHostOcpuCount'] if attributes[:'dataNodeHostOcpuCount']

      raise 'You cannot provide both :dataNodeHostOcpuCount and :data_node_host_ocpu_count' if attributes.key?(:'dataNodeHostOcpuCount') && attributes.key?(:'data_node_host_ocpu_count')

      self.data_node_host_ocpu_count = attributes[:'data_node_host_ocpu_count'] if attributes[:'data_node_host_ocpu_count']

      self.data_node_host_memory_gb = attributes[:'dataNodeHostMemoryGB'] if attributes[:'dataNodeHostMemoryGB']

      raise 'You cannot provide both :dataNodeHostMemoryGB and :data_node_host_memory_gb' if attributes.key?(:'dataNodeHostMemoryGB') && attributes.key?(:'data_node_host_memory_gb')

      self.data_node_host_memory_gb = attributes[:'data_node_host_memory_gb'] if attributes[:'data_node_host_memory_gb']

      self.data_node_storage_gb = attributes[:'dataNodeStorageGB'] if attributes[:'dataNodeStorageGB']

      raise 'You cannot provide both :dataNodeStorageGB and :data_node_storage_gb' if attributes.key?(:'dataNodeStorageGB') && attributes.key?(:'data_node_storage_gb')

      self.data_node_storage_gb = attributes[:'data_node_storage_gb'] if attributes[:'data_node_storage_gb']

      self.search_node_count = attributes[:'searchNodeCount'] if attributes[:'searchNodeCount']

      raise 'You cannot provide both :searchNodeCount and :search_node_count' if attributes.key?(:'searchNodeCount') && attributes.key?(:'search_node_count')

      self.search_node_count = attributes[:'search_node_count'] if attributes[:'search_node_count']

      self.search_node_host_type = attributes[:'searchNodeHostType'] if attributes[:'searchNodeHostType']

      raise 'You cannot provide both :searchNodeHostType and :search_node_host_type' if attributes.key?(:'searchNodeHostType') && attributes.key?(:'search_node_host_type')

      self.search_node_host_type = attributes[:'search_node_host_type'] if attributes[:'search_node_host_type']

      self.search_node_host_shape = attributes[:'searchNodeHostShape'] if attributes[:'searchNodeHostShape']

      raise 'You cannot provide both :searchNodeHostShape and :search_node_host_shape' if attributes.key?(:'searchNodeHostShape') && attributes.key?(:'search_node_host_shape')

      self.search_node_host_shape = attributes[:'search_node_host_shape'] if attributes[:'search_node_host_shape']

      self.search_node_host_ocpu_count = attributes[:'searchNodeHostOcpuCount'] if attributes[:'searchNodeHostOcpuCount']

      raise 'You cannot provide both :searchNodeHostOcpuCount and :search_node_host_ocpu_count' if attributes.key?(:'searchNodeHostOcpuCount') && attributes.key?(:'search_node_host_ocpu_count')

      self.search_node_host_ocpu_count = attributes[:'search_node_host_ocpu_count'] if attributes[:'search_node_host_ocpu_count']

      self.search_node_host_memory_gb = attributes[:'searchNodeHostMemoryGB'] if attributes[:'searchNodeHostMemoryGB']

      raise 'You cannot provide both :searchNodeHostMemoryGB and :search_node_host_memory_gb' if attributes.key?(:'searchNodeHostMemoryGB') && attributes.key?(:'search_node_host_memory_gb')

      self.search_node_host_memory_gb = attributes[:'search_node_host_memory_gb'] if attributes[:'search_node_host_memory_gb']

      self.search_node_storage_gb = attributes[:'searchNodeStorageGB'] if attributes[:'searchNodeStorageGB']

      raise 'You cannot provide both :searchNodeStorageGB and :search_node_storage_gb' if attributes.key?(:'searchNodeStorageGB') && attributes.key?(:'search_node_storage_gb')

      self.search_node_storage_gb = attributes[:'search_node_storage_gb'] if attributes[:'search_node_storage_gb']

      self.opendashboard_node_host_shape = attributes[:'opendashboardNodeHostShape'] if attributes[:'opendashboardNodeHostShape']

      raise 'You cannot provide both :opendashboardNodeHostShape and :opendashboard_node_host_shape' if attributes.key?(:'opendashboardNodeHostShape') && attributes.key?(:'opendashboard_node_host_shape')

      self.opendashboard_node_host_shape = attributes[:'opendashboard_node_host_shape'] if attributes[:'opendashboard_node_host_shape']

      self.opendashboard_node_count = attributes[:'opendashboardNodeCount'] if attributes[:'opendashboardNodeCount']

      raise 'You cannot provide both :opendashboardNodeCount and :opendashboard_node_count' if attributes.key?(:'opendashboardNodeCount') && attributes.key?(:'opendashboard_node_count')

      self.opendashboard_node_count = attributes[:'opendashboard_node_count'] if attributes[:'opendashboard_node_count']

      self.opendashboard_node_host_ocpu_count = attributes[:'opendashboardNodeHostOcpuCount'] if attributes[:'opendashboardNodeHostOcpuCount']

      raise 'You cannot provide both :opendashboardNodeHostOcpuCount and :opendashboard_node_host_ocpu_count' if attributes.key?(:'opendashboardNodeHostOcpuCount') && attributes.key?(:'opendashboard_node_host_ocpu_count')

      self.opendashboard_node_host_ocpu_count = attributes[:'opendashboard_node_host_ocpu_count'] if attributes[:'opendashboard_node_host_ocpu_count']

      self.opendashboard_node_host_memory_gb = attributes[:'opendashboardNodeHostMemoryGB'] if attributes[:'opendashboardNodeHostMemoryGB']

      raise 'You cannot provide both :opendashboardNodeHostMemoryGB and :opendashboard_node_host_memory_gb' if attributes.key?(:'opendashboardNodeHostMemoryGB') && attributes.key?(:'opendashboard_node_host_memory_gb')

      self.opendashboard_node_host_memory_gb = attributes[:'opendashboard_node_host_memory_gb'] if attributes[:'opendashboard_node_host_memory_gb']

      self.vcn_id = attributes[:'vcnId'] if attributes[:'vcnId']

      raise 'You cannot provide both :vcnId and :vcn_id' if attributes.key?(:'vcnId') && attributes.key?(:'vcn_id')

      self.vcn_id = attributes[:'vcn_id'] if attributes[:'vcn_id']

      self.subnet_id = attributes[:'subnetId'] if attributes[:'subnetId']

      raise 'You cannot provide both :subnetId and :subnet_id' if attributes.key?(:'subnetId') && attributes.key?(:'subnet_id')

      self.subnet_id = attributes[:'subnet_id'] if attributes[:'subnet_id']

      self.vcn_compartment_id = attributes[:'vcnCompartmentId'] if attributes[:'vcnCompartmentId']

      raise 'You cannot provide both :vcnCompartmentId and :vcn_compartment_id' if attributes.key?(:'vcnCompartmentId') && attributes.key?(:'vcn_compartment_id')

      self.vcn_compartment_id = attributes[:'vcn_compartment_id'] if attributes[:'vcn_compartment_id']

      self.subnet_compartment_id = attributes[:'subnetCompartmentId'] if attributes[:'subnetCompartmentId']

      raise 'You cannot provide both :subnetCompartmentId and :subnet_compartment_id' if attributes.key?(:'subnetCompartmentId') && attributes.key?(:'subnet_compartment_id')

      self.subnet_compartment_id = attributes[:'subnet_compartment_id'] if attributes[:'subnet_compartment_id']

      self.fqdn = attributes[:'fqdn'] if attributes[:'fqdn']

      self.availability_domains = attributes[:'availabilityDomains'] if attributes[:'availabilityDomains']

      raise 'You cannot provide both :availabilityDomains and :availability_domains' if attributes.key?(:'availabilityDomains') && attributes.key?(:'availability_domains')

      self.availability_domains = attributes[:'availability_domains'] if attributes[:'availability_domains']

      self.security_mode = attributes[:'securityMode'] if attributes[:'securityMode']

      raise 'You cannot provide both :securityMode and :security_mode' if attributes.key?(:'securityMode') && attributes.key?(:'security_mode')

      self.security_mode = attributes[:'security_mode'] if attributes[:'security_mode']

      self.security_master_user_name = attributes[:'securityMasterUserName'] if attributes[:'securityMasterUserName']

      raise 'You cannot provide both :securityMasterUserName and :security_master_user_name' if attributes.key?(:'securityMasterUserName') && attributes.key?(:'security_master_user_name')

      self.security_master_user_name = attributes[:'security_master_user_name'] if attributes[:'security_master_user_name']

      self.security_master_user_password_hash = attributes[:'securityMasterUserPasswordHash'] if attributes[:'securityMasterUserPasswordHash']

      raise 'You cannot provide both :securityMasterUserPasswordHash and :security_master_user_password_hash' if attributes.key?(:'securityMasterUserPasswordHash') && attributes.key?(:'security_master_user_password_hash')

      self.security_master_user_password_hash = attributes[:'security_master_user_password_hash'] if attributes[:'security_master_user_password_hash']

      self.security_saml_config = attributes[:'securitySamlConfig'] if attributes[:'securitySamlConfig']

      raise 'You cannot provide both :securitySamlConfig and :security_saml_config' if attributes.key?(:'securitySamlConfig') && attributes.key?(:'security_saml_config')

      self.security_saml_config = attributes[:'security_saml_config'] if attributes[:'security_saml_config']

      self.backup_policy = attributes[:'backupPolicy'] if attributes[:'backupPolicy']

      raise 'You cannot provide both :backupPolicy and :backup_policy' if attributes.key?(:'backupPolicy') && attributes.key?(:'backup_policy')

      self.backup_policy = attributes[:'backup_policy'] if attributes[:'backup_policy']

      self.reverse_connection_endpoint_customer_ips = attributes[:'reverseConnectionEndpointCustomerIps'] if attributes[:'reverseConnectionEndpointCustomerIps']

      raise 'You cannot provide both :reverseConnectionEndpointCustomerIps and :reverse_connection_endpoint_customer_ips' if attributes.key?(:'reverseConnectionEndpointCustomerIps') && attributes.key?(:'reverse_connection_endpoint_customer_ips')

      self.reverse_connection_endpoint_customer_ips = attributes[:'reverse_connection_endpoint_customer_ips'] if attributes[:'reverse_connection_endpoint_customer_ips']

      self.reverse_connection_endpoints = attributes[:'reverseConnectionEndpoints'] if attributes[:'reverseConnectionEndpoints']

      raise 'You cannot provide both :reverseConnectionEndpoints and :reverse_connection_endpoints' if attributes.key?(:'reverseConnectionEndpoints') && attributes.key?(:'reverse_connection_endpoints')

      self.reverse_connection_endpoints = attributes[:'reverse_connection_endpoints'] if attributes[:'reverse_connection_endpoints']

      self.outbound_cluster_config = attributes[:'outboundClusterConfig'] if attributes[:'outboundClusterConfig']

      raise 'You cannot provide both :outboundClusterConfig and :outbound_cluster_config' if attributes.key?(:'outboundClusterConfig') && attributes.key?(:'outbound_cluster_config')

      self.outbound_cluster_config = attributes[:'outbound_cluster_config'] if attributes[:'outbound_cluster_config']

      self.inbound_cluster_ids = attributes[:'inboundClusterIds'] if attributes[:'inboundClusterIds']

      raise 'You cannot provide both :inboundClusterIds and :inbound_cluster_ids' if attributes.key?(:'inboundClusterIds') && attributes.key?(:'inbound_cluster_ids')

      self.inbound_cluster_ids = attributes[:'inbound_cluster_ids'] if attributes[:'inbound_cluster_ids']

      self.maintenance_details = attributes[:'maintenanceDetails'] if attributes[:'maintenanceDetails']

      raise 'You cannot provide both :maintenanceDetails and :maintenance_details' if attributes.key?(:'maintenanceDetails') && attributes.key?(:'maintenance_details')

      self.maintenance_details = attributes[:'maintenance_details'] if attributes[:'maintenance_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] master_node_host_type Object to be assigned
    def master_node_host_type=(master_node_host_type)
      # rubocop:disable Style/ConditionalAssignment
      if master_node_host_type && !MASTER_NODE_HOST_TYPE_ENUM.include?(master_node_host_type)
        OCI.logger.debug("Unknown value for 'master_node_host_type' [" + master_node_host_type + "]. Mapping to 'MASTER_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @master_node_host_type = MASTER_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE
      else
        @master_node_host_type = master_node_host_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_node_host_type Object to be assigned
    def data_node_host_type=(data_node_host_type)
      # rubocop:disable Style/ConditionalAssignment
      if data_node_host_type && !DATA_NODE_HOST_TYPE_ENUM.include?(data_node_host_type)
        OCI.logger.debug("Unknown value for 'data_node_host_type' [" + data_node_host_type + "]. Mapping to 'DATA_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @data_node_host_type = DATA_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE
      else
        @data_node_host_type = data_node_host_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] search_node_host_type Object to be assigned
    def search_node_host_type=(search_node_host_type)
      # rubocop:disable Style/ConditionalAssignment
      if search_node_host_type && !SEARCH_NODE_HOST_TYPE_ENUM.include?(search_node_host_type)
        OCI.logger.debug("Unknown value for 'search_node_host_type' [" + search_node_host_type + "]. Mapping to 'SEARCH_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @search_node_host_type = SEARCH_NODE_HOST_TYPE_UNKNOWN_ENUM_VALUE
      else
        @search_node_host_type = search_node_host_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_mode Object to be assigned
    def security_mode=(security_mode)
      # rubocop:disable Style/ConditionalAssignment
      if security_mode && !SECURITY_MODE_ENUM.include?(security_mode)
        OCI.logger.debug("Unknown value for 'security_mode' [" + security_mode + "]. Mapping to 'SECURITY_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @security_mode = SECURITY_MODE_UNKNOWN_ENUM_VALUE
      else
        @security_mode = security_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        lifecycle_state == other.lifecycle_state &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        time_deleted == other.time_deleted &&
        lifecycle_details == other.lifecycle_details &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        software_version == other.software_version &&
        total_storage_gb == other.total_storage_gb &&
        opensearch_fqdn == other.opensearch_fqdn &&
        opensearch_private_ip == other.opensearch_private_ip &&
        opendashboard_fqdn == other.opendashboard_fqdn &&
        opendashboard_private_ip == other.opendashboard_private_ip &&
        master_node_count == other.master_node_count &&
        master_node_host_type == other.master_node_host_type &&
        master_node_host_bare_metal_shape == other.master_node_host_bare_metal_shape &&
        master_node_host_shape == other.master_node_host_shape &&
        master_node_host_ocpu_count == other.master_node_host_ocpu_count &&
        master_node_host_memory_gb == other.master_node_host_memory_gb &&
        data_node_count == other.data_node_count &&
        data_node_host_type == other.data_node_host_type &&
        data_node_host_bare_metal_shape == other.data_node_host_bare_metal_shape &&
        data_node_host_shape == other.data_node_host_shape &&
        data_node_host_ocpu_count == other.data_node_host_ocpu_count &&
        data_node_host_memory_gb == other.data_node_host_memory_gb &&
        data_node_storage_gb == other.data_node_storage_gb &&
        search_node_count == other.search_node_count &&
        search_node_host_type == other.search_node_host_type &&
        search_node_host_shape == other.search_node_host_shape &&
        search_node_host_ocpu_count == other.search_node_host_ocpu_count &&
        search_node_host_memory_gb == other.search_node_host_memory_gb &&
        search_node_storage_gb == other.search_node_storage_gb &&
        opendashboard_node_host_shape == other.opendashboard_node_host_shape &&
        opendashboard_node_count == other.opendashboard_node_count &&
        opendashboard_node_host_ocpu_count == other.opendashboard_node_host_ocpu_count &&
        opendashboard_node_host_memory_gb == other.opendashboard_node_host_memory_gb &&
        vcn_id == other.vcn_id &&
        subnet_id == other.subnet_id &&
        vcn_compartment_id == other.vcn_compartment_id &&
        subnet_compartment_id == other.subnet_compartment_id &&
        fqdn == other.fqdn &&
        availability_domains == other.availability_domains &&
        security_mode == other.security_mode &&
        security_master_user_name == other.security_master_user_name &&
        security_master_user_password_hash == other.security_master_user_password_hash &&
        security_saml_config == other.security_saml_config &&
        backup_policy == other.backup_policy &&
        reverse_connection_endpoint_customer_ips == other.reverse_connection_endpoint_customer_ips &&
        reverse_connection_endpoints == other.reverse_connection_endpoints &&
        outbound_cluster_config == other.outbound_cluster_config &&
        inbound_cluster_ids == other.inbound_cluster_ids &&
        maintenance_details == other.maintenance_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, compartment_id, lifecycle_state, time_created, time_updated, time_deleted, lifecycle_details, freeform_tags, defined_tags, system_tags, software_version, total_storage_gb, opensearch_fqdn, opensearch_private_ip, opendashboard_fqdn, opendashboard_private_ip, master_node_count, master_node_host_type, master_node_host_bare_metal_shape, master_node_host_shape, master_node_host_ocpu_count, master_node_host_memory_gb, data_node_count, data_node_host_type, data_node_host_bare_metal_shape, data_node_host_shape, data_node_host_ocpu_count, data_node_host_memory_gb, data_node_storage_gb, search_node_count, search_node_host_type, search_node_host_shape, search_node_host_ocpu_count, search_node_host_memory_gb, search_node_storage_gb, opendashboard_node_host_shape, opendashboard_node_count, opendashboard_node_host_ocpu_count, opendashboard_node_host_memory_gb, vcn_id, subnet_id, vcn_compartment_id, subnet_compartment_id, fqdn, availability_domains, security_mode, security_master_user_name, security_master_user_password_hash, security_saml_config, backup_policy, reverse_connection_endpoint_customer_ips, reverse_connection_endpoints, outbound_cluster_config, inbound_cluster_ids, maintenance_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
