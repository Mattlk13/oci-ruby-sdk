# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180828
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Notification details for the maintenance activity.
  class Opensearch::Models::MaintenanceNotificationDetails
    MAINTENANCE_NOTIFICATION_TYPE_ENUM = [
      MAINTENANCE_NOTIFICATION_TYPE_SCHEDULED_MAINTENANCE_WITH_RELEASE_NOTES = 'SCHEDULED_MAINTENANCE_WITH_RELEASE_NOTES'.freeze,
      MAINTENANCE_NOTIFICATION_TYPE_SCHEDULED_MAINTENANCE_WITHOUT_RELEASE_NOTES = 'SCHEDULED_MAINTENANCE_WITHOUT_RELEASE_NOTES'.freeze,
      MAINTENANCE_NOTIFICATION_TYPE_RESCHEDULED_MAINTENANCE = 'RESCHEDULED_MAINTENANCE'.freeze,
      MAINTENANCE_NOTIFICATION_TYPE_SCHEDULED_MAINTENANCE_REMINDER = 'SCHEDULED_MAINTENANCE_REMINDER'.freeze,
      MAINTENANCE_NOTIFICATION_TYPE_SCHEDULED_MAINTENANCE_COMPLETED = 'SCHEDULED_MAINTENANCE_COMPLETED'.freeze
    ].freeze

    # **[Required]** Jira tickets for on-call engineer to send customer notification
    # @return [String]
    attr_accessor :jira_ticket

    # **[Required]** Maintenance Notification type
    # @return [String]
    attr_reader :maintenance_notification_type

    # List of tenantIds where we need to send the maintenance notifications
    # @return [Array<String>]
    attr_accessor :tenant_ids

    # List of OpenSearch clusterIds where we need to send the maintenance notifications
    # @return [Array<String>]
    attr_accessor :cluster_ids

    # Start time for the notification activity in UTC like \"2023-20-04 04:00:00.000Z\"
    # @return [String]
    attr_accessor :start_time

    # Start time for the notification activity in UTC like \"2023-20-04 04:00:00.000Z\"
    # @return [String]
    attr_accessor :end_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'jira_ticket': :'jiraTicket',
        'maintenance_notification_type': :'maintenanceNotificationType',
        'tenant_ids': :'tenantIds',
        'cluster_ids': :'clusterIds',
        'start_time': :'startTime',
        'end_time': :'endTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'jira_ticket': :'String',
        'maintenance_notification_type': :'String',
        'tenant_ids': :'Array<String>',
        'cluster_ids': :'Array<String>',
        'start_time': :'String',
        'end_time': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :jira_ticket The value to assign to the {#jira_ticket} property
    # @option attributes [String] :maintenance_notification_type The value to assign to the {#maintenance_notification_type} property
    # @option attributes [Array<String>] :tenant_ids The value to assign to the {#tenant_ids} property
    # @option attributes [Array<String>] :cluster_ids The value to assign to the {#cluster_ids} property
    # @option attributes [String] :start_time The value to assign to the {#start_time} property
    # @option attributes [String] :end_time The value to assign to the {#end_time} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.jira_ticket = attributes[:'jiraTicket'] if attributes[:'jiraTicket']

      raise 'You cannot provide both :jiraTicket and :jira_ticket' if attributes.key?(:'jiraTicket') && attributes.key?(:'jira_ticket')

      self.jira_ticket = attributes[:'jira_ticket'] if attributes[:'jira_ticket']

      self.maintenance_notification_type = attributes[:'maintenanceNotificationType'] if attributes[:'maintenanceNotificationType']

      raise 'You cannot provide both :maintenanceNotificationType and :maintenance_notification_type' if attributes.key?(:'maintenanceNotificationType') && attributes.key?(:'maintenance_notification_type')

      self.maintenance_notification_type = attributes[:'maintenance_notification_type'] if attributes[:'maintenance_notification_type']

      self.tenant_ids = attributes[:'tenantIds'] if attributes[:'tenantIds']

      raise 'You cannot provide both :tenantIds and :tenant_ids' if attributes.key?(:'tenantIds') && attributes.key?(:'tenant_ids')

      self.tenant_ids = attributes[:'tenant_ids'] if attributes[:'tenant_ids']

      self.cluster_ids = attributes[:'clusterIds'] if attributes[:'clusterIds']

      raise 'You cannot provide both :clusterIds and :cluster_ids' if attributes.key?(:'clusterIds') && attributes.key?(:'cluster_ids')

      self.cluster_ids = attributes[:'cluster_ids'] if attributes[:'cluster_ids']

      self.start_time = attributes[:'startTime'] if attributes[:'startTime']

      raise 'You cannot provide both :startTime and :start_time' if attributes.key?(:'startTime') && attributes.key?(:'start_time')

      self.start_time = attributes[:'start_time'] if attributes[:'start_time']

      self.end_time = attributes[:'endTime'] if attributes[:'endTime']

      raise 'You cannot provide both :endTime and :end_time' if attributes.key?(:'endTime') && attributes.key?(:'end_time')

      self.end_time = attributes[:'end_time'] if attributes[:'end_time']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_notification_type Object to be assigned
    def maintenance_notification_type=(maintenance_notification_type)
      raise "Invalid value for 'maintenance_notification_type': this must be one of the values in MAINTENANCE_NOTIFICATION_TYPE_ENUM." if maintenance_notification_type && !MAINTENANCE_NOTIFICATION_TYPE_ENUM.include?(maintenance_notification_type)

      @maintenance_notification_type = maintenance_notification_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        jira_ticket == other.jira_ticket &&
        maintenance_notification_type == other.maintenance_notification_type &&
        tenant_ids == other.tenant_ids &&
        cluster_ids == other.cluster_ids &&
        start_time == other.start_time &&
        end_time == other.end_time
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [jira_ticket, maintenance_notification_type, tenant_ids, cluster_ids, start_time, end_time].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
