# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180828
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Benchmark test configuration detail.
  class Opensearch::Models::BenchmarkDetails
    PERF_TEST_LENGTH_ENUM = [
      PERF_TEST_LENGTH_STANDARD = 'STANDARD'.freeze,
      PERF_TEST_LENGTH_LONG = 'LONG'.freeze
    ].freeze

    # **[Required]** Execution Length of Perf Test (default set to STANDARD)
    # @return [String]
    attr_reader :perf_test_length

    # **[Required]** Control Cluster Id Information
    # @return [String]
    attr_accessor :control_cluster_id

    # Required Test Cluster Id needed to run perf test
    # @return [String]
    attr_accessor :test1_cluster_id

    # Optional Test Cluster Id needed to run perf test
    # @return [String]
    attr_accessor :test2_cluster_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'perf_test_length': :'perfTestLength',
        'control_cluster_id': :'controlClusterId',
        'test1_cluster_id': :'test1ClusterId',
        'test2_cluster_id': :'test2ClusterId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'perf_test_length': :'String',
        'control_cluster_id': :'String',
        'test1_cluster_id': :'String',
        'test2_cluster_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :perf_test_length The value to assign to the {#perf_test_length} property
    # @option attributes [String] :control_cluster_id The value to assign to the {#control_cluster_id} property
    # @option attributes [String] :test1_cluster_id The value to assign to the {#test1_cluster_id} property
    # @option attributes [String] :test2_cluster_id The value to assign to the {#test2_cluster_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.perf_test_length = attributes[:'perfTestLength'] if attributes[:'perfTestLength']
      self.perf_test_length = "STANDARD" if perf_test_length.nil? && !attributes.key?(:'perfTestLength') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :perfTestLength and :perf_test_length' if attributes.key?(:'perfTestLength') && attributes.key?(:'perf_test_length')

      self.perf_test_length = attributes[:'perf_test_length'] if attributes[:'perf_test_length']
      self.perf_test_length = "STANDARD" if perf_test_length.nil? && !attributes.key?(:'perfTestLength') && !attributes.key?(:'perf_test_length') # rubocop:disable Style/StringLiterals

      self.control_cluster_id = attributes[:'controlClusterId'] if attributes[:'controlClusterId']

      raise 'You cannot provide both :controlClusterId and :control_cluster_id' if attributes.key?(:'controlClusterId') && attributes.key?(:'control_cluster_id')

      self.control_cluster_id = attributes[:'control_cluster_id'] if attributes[:'control_cluster_id']

      self.test1_cluster_id = attributes[:'test1ClusterId'] if attributes[:'test1ClusterId']

      raise 'You cannot provide both :test1ClusterId and :test1_cluster_id' if attributes.key?(:'test1ClusterId') && attributes.key?(:'test1_cluster_id')

      self.test1_cluster_id = attributes[:'test1_cluster_id'] if attributes[:'test1_cluster_id']

      self.test2_cluster_id = attributes[:'test2ClusterId'] if attributes[:'test2ClusterId']

      raise 'You cannot provide both :test2ClusterId and :test2_cluster_id' if attributes.key?(:'test2ClusterId') && attributes.key?(:'test2_cluster_id')

      self.test2_cluster_id = attributes[:'test2_cluster_id'] if attributes[:'test2_cluster_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] perf_test_length Object to be assigned
    def perf_test_length=(perf_test_length)
      raise "Invalid value for 'perf_test_length': this must be one of the values in PERF_TEST_LENGTH_ENUM." if perf_test_length && !PERF_TEST_LENGTH_ENUM.include?(perf_test_length)

      @perf_test_length = perf_test_length
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        perf_test_length == other.perf_test_length &&
        control_cluster_id == other.control_cluster_id &&
        test1_cluster_id == other.test1_cluster_id &&
        test2_cluster_id == other.test2_cluster_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [perf_test_length, control_cluster_id, test1_cluster_id, test2_cluster_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
