# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180828
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # SAML policy is optionally used for Opensearch cluster to config SAML authentication
  #
  class Opensearch::Models::SecuritySamlConfig
    # **[Required]** A flag determine whether SAML is enabled
    # @return [BOOLEAN]
    attr_accessor :is_enabled

    # **[Required]** The content of identity provider metadata
    # @return [String]
    attr_accessor :idp_metadata_content

    # **[Required]** The unique name for a identity provider entity
    # @return [String]
    attr_accessor :idp_entity_id

    # The endpoint of opendashboard
    # @return [String]
    attr_accessor :opendashboard_url

    # The backend role of admins who have all permissions like local master user
    # @return [String]
    attr_accessor :admin_backend_role

    # The subject key is used to get username from SAML assertion. By default, it is NameID
    # @return [String]
    attr_accessor :subject_key

    # The roles key is sued to get backend roles from SAML assertion
    # @return [String]
    attr_accessor :roles_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'is_enabled': :'isEnabled',
        'idp_metadata_content': :'idpMetadataContent',
        'idp_entity_id': :'idpEntityId',
        'opendashboard_url': :'opendashboardUrl',
        'admin_backend_role': :'adminBackendRole',
        'subject_key': :'subjectKey',
        'roles_key': :'rolesKey'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'is_enabled': :'BOOLEAN',
        'idp_metadata_content': :'String',
        'idp_entity_id': :'String',
        'opendashboard_url': :'String',
        'admin_backend_role': :'String',
        'subject_key': :'String',
        'roles_key': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_enabled The value to assign to the {#is_enabled} property
    # @option attributes [String] :idp_metadata_content The value to assign to the {#idp_metadata_content} property
    # @option attributes [String] :idp_entity_id The value to assign to the {#idp_entity_id} property
    # @option attributes [String] :opendashboard_url The value to assign to the {#opendashboard_url} property
    # @option attributes [String] :admin_backend_role The value to assign to the {#admin_backend_role} property
    # @option attributes [String] :subject_key The value to assign to the {#subject_key} property
    # @option attributes [String] :roles_key The value to assign to the {#roles_key} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.is_enabled = attributes[:'isEnabled'] unless attributes[:'isEnabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEnabled and :is_enabled' if attributes.key?(:'isEnabled') && attributes.key?(:'is_enabled')

      self.is_enabled = attributes[:'is_enabled'] unless attributes[:'is_enabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') && !attributes.key?(:'is_enabled') # rubocop:disable Style/StringLiterals

      self.idp_metadata_content = attributes[:'idpMetadataContent'] if attributes[:'idpMetadataContent']

      raise 'You cannot provide both :idpMetadataContent and :idp_metadata_content' if attributes.key?(:'idpMetadataContent') && attributes.key?(:'idp_metadata_content')

      self.idp_metadata_content = attributes[:'idp_metadata_content'] if attributes[:'idp_metadata_content']

      self.idp_entity_id = attributes[:'idpEntityId'] if attributes[:'idpEntityId']

      raise 'You cannot provide both :idpEntityId and :idp_entity_id' if attributes.key?(:'idpEntityId') && attributes.key?(:'idp_entity_id')

      self.idp_entity_id = attributes[:'idp_entity_id'] if attributes[:'idp_entity_id']

      self.opendashboard_url = attributes[:'opendashboardUrl'] if attributes[:'opendashboardUrl']
      self.opendashboard_url = "https://localhost:5601" if opendashboard_url.nil? && !attributes.key?(:'opendashboardUrl') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :opendashboardUrl and :opendashboard_url' if attributes.key?(:'opendashboardUrl') && attributes.key?(:'opendashboard_url')

      self.opendashboard_url = attributes[:'opendashboard_url'] if attributes[:'opendashboard_url']
      self.opendashboard_url = "https://localhost:5601" if opendashboard_url.nil? && !attributes.key?(:'opendashboardUrl') && !attributes.key?(:'opendashboard_url') # rubocop:disable Style/StringLiterals

      self.admin_backend_role = attributes[:'adminBackendRole'] if attributes[:'adminBackendRole']

      raise 'You cannot provide both :adminBackendRole and :admin_backend_role' if attributes.key?(:'adminBackendRole') && attributes.key?(:'admin_backend_role')

      self.admin_backend_role = attributes[:'admin_backend_role'] if attributes[:'admin_backend_role']

      self.subject_key = attributes[:'subjectKey'] if attributes[:'subjectKey']

      raise 'You cannot provide both :subjectKey and :subject_key' if attributes.key?(:'subjectKey') && attributes.key?(:'subject_key')

      self.subject_key = attributes[:'subject_key'] if attributes[:'subject_key']

      self.roles_key = attributes[:'rolesKey'] if attributes[:'rolesKey']

      raise 'You cannot provide both :rolesKey and :roles_key' if attributes.key?(:'rolesKey') && attributes.key?(:'roles_key')

      self.roles_key = attributes[:'roles_key'] if attributes[:'roles_key']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        is_enabled == other.is_enabled &&
        idp_metadata_content == other.idp_metadata_content &&
        idp_entity_id == other.idp_entity_id &&
        opendashboard_url == other.opendashboard_url &&
        admin_backend_role == other.admin_backend_role &&
        subject_key == other.subject_key &&
        roles_key == other.roles_key
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_enabled, idp_metadata_content, idp_entity_id, opendashboard_url, admin_backend_role, subject_key, roles_key].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
