# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180828
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # update cluster specs in Kiev.
  class Opensearch::Models::UpdateClusterSpecsDetails
    # **[Required]** OCID of the Opensearch Cluster.
    # @return [String]
    attr_accessor :cluster_id

    # Updated value of OCPU's configured for master nodes of the cluster.
    # @return [Integer]
    attr_accessor :master_node_host_ocpu_count

    # Updated value of memory for master nodes in the cluster (in GB).
    # @return [Integer]
    attr_accessor :master_node_host_memory_gb

    # The node shape for the cluster's master nodes.
    # @return [String]
    attr_accessor :master_node_host_shape

    # Updated value of OCPU's configured for data nodes of the cluster.
    # @return [Integer]
    attr_accessor :data_node_host_ocpu_count

    # Updated value of memory for data nodes in the cluster (in GB).
    # @return [Integer]
    attr_accessor :data_node_host_memory_gb

    # The node shape for the cluster's data nodes.
    # @return [String]
    attr_accessor :data_node_host_shape

    # The node shape for the cluster's search nodes.
    # @return [String]
    attr_accessor :search_node_host_shape

    # The number of OCPUs configured for the cluster's search nodes.
    # @return [Integer]
    attr_accessor :search_node_host_ocpu_count

    # The amount of memory in GB, for the cluster's search nodes.
    # @return [Integer]
    attr_accessor :search_node_host_memory_gb

    # Updated version of the software the cluster is currently running.
    # @return [String]
    attr_accessor :software_version

    # Updated version of the dashboard software the cluster is currently running.
    # @return [String]
    attr_accessor :dashboard_software_version

    # The shape node for the cluster's OpenSearch Dashboard nodes.
    # @return [String]
    attr_accessor :opendashboard_node_host_shape

    # Updated Private endpoint of cluster.
    # @return [String]
    attr_accessor :cluster_private_endpoint

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'cluster_id': :'clusterId',
        'master_node_host_ocpu_count': :'masterNodeHostOcpuCount',
        'master_node_host_memory_gb': :'masterNodeHostMemoryGB',
        'master_node_host_shape': :'masterNodeHostShape',
        'data_node_host_ocpu_count': :'dataNodeHostOcpuCount',
        'data_node_host_memory_gb': :'dataNodeHostMemoryGB',
        'data_node_host_shape': :'dataNodeHostShape',
        'search_node_host_shape': :'searchNodeHostShape',
        'search_node_host_ocpu_count': :'searchNodeHostOcpuCount',
        'search_node_host_memory_gb': :'searchNodeHostMemoryGB',
        'software_version': :'softwareVersion',
        'dashboard_software_version': :'dashboardSoftwareVersion',
        'opendashboard_node_host_shape': :'opendashboardNodeHostShape',
        'cluster_private_endpoint': :'clusterPrivateEndpoint'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'cluster_id': :'String',
        'master_node_host_ocpu_count': :'Integer',
        'master_node_host_memory_gb': :'Integer',
        'master_node_host_shape': :'String',
        'data_node_host_ocpu_count': :'Integer',
        'data_node_host_memory_gb': :'Integer',
        'data_node_host_shape': :'String',
        'search_node_host_shape': :'String',
        'search_node_host_ocpu_count': :'Integer',
        'search_node_host_memory_gb': :'Integer',
        'software_version': :'String',
        'dashboard_software_version': :'String',
        'opendashboard_node_host_shape': :'String',
        'cluster_private_endpoint': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :cluster_id The value to assign to the {#cluster_id} property
    # @option attributes [Integer] :master_node_host_ocpu_count The value to assign to the {#master_node_host_ocpu_count} property
    # @option attributes [Integer] :master_node_host_memory_gb The value to assign to the {#master_node_host_memory_gb} property
    # @option attributes [String] :master_node_host_shape The value to assign to the {#master_node_host_shape} property
    # @option attributes [Integer] :data_node_host_ocpu_count The value to assign to the {#data_node_host_ocpu_count} property
    # @option attributes [Integer] :data_node_host_memory_gb The value to assign to the {#data_node_host_memory_gb} property
    # @option attributes [String] :data_node_host_shape The value to assign to the {#data_node_host_shape} property
    # @option attributes [String] :search_node_host_shape The value to assign to the {#search_node_host_shape} property
    # @option attributes [Integer] :search_node_host_ocpu_count The value to assign to the {#search_node_host_ocpu_count} property
    # @option attributes [Integer] :search_node_host_memory_gb The value to assign to the {#search_node_host_memory_gb} property
    # @option attributes [String] :software_version The value to assign to the {#software_version} property
    # @option attributes [String] :dashboard_software_version The value to assign to the {#dashboard_software_version} property
    # @option attributes [String] :opendashboard_node_host_shape The value to assign to the {#opendashboard_node_host_shape} property
    # @option attributes [String] :cluster_private_endpoint The value to assign to the {#cluster_private_endpoint} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.cluster_id = attributes[:'clusterId'] if attributes[:'clusterId']

      raise 'You cannot provide both :clusterId and :cluster_id' if attributes.key?(:'clusterId') && attributes.key?(:'cluster_id')

      self.cluster_id = attributes[:'cluster_id'] if attributes[:'cluster_id']

      self.master_node_host_ocpu_count = attributes[:'masterNodeHostOcpuCount'] if attributes[:'masterNodeHostOcpuCount']

      raise 'You cannot provide both :masterNodeHostOcpuCount and :master_node_host_ocpu_count' if attributes.key?(:'masterNodeHostOcpuCount') && attributes.key?(:'master_node_host_ocpu_count')

      self.master_node_host_ocpu_count = attributes[:'master_node_host_ocpu_count'] if attributes[:'master_node_host_ocpu_count']

      self.master_node_host_memory_gb = attributes[:'masterNodeHostMemoryGB'] if attributes[:'masterNodeHostMemoryGB']

      raise 'You cannot provide both :masterNodeHostMemoryGB and :master_node_host_memory_gb' if attributes.key?(:'masterNodeHostMemoryGB') && attributes.key?(:'master_node_host_memory_gb')

      self.master_node_host_memory_gb = attributes[:'master_node_host_memory_gb'] if attributes[:'master_node_host_memory_gb']

      self.master_node_host_shape = attributes[:'masterNodeHostShape'] if attributes[:'masterNodeHostShape']

      raise 'You cannot provide both :masterNodeHostShape and :master_node_host_shape' if attributes.key?(:'masterNodeHostShape') && attributes.key?(:'master_node_host_shape')

      self.master_node_host_shape = attributes[:'master_node_host_shape'] if attributes[:'master_node_host_shape']

      self.data_node_host_ocpu_count = attributes[:'dataNodeHostOcpuCount'] if attributes[:'dataNodeHostOcpuCount']

      raise 'You cannot provide both :dataNodeHostOcpuCount and :data_node_host_ocpu_count' if attributes.key?(:'dataNodeHostOcpuCount') && attributes.key?(:'data_node_host_ocpu_count')

      self.data_node_host_ocpu_count = attributes[:'data_node_host_ocpu_count'] if attributes[:'data_node_host_ocpu_count']

      self.data_node_host_memory_gb = attributes[:'dataNodeHostMemoryGB'] if attributes[:'dataNodeHostMemoryGB']

      raise 'You cannot provide both :dataNodeHostMemoryGB and :data_node_host_memory_gb' if attributes.key?(:'dataNodeHostMemoryGB') && attributes.key?(:'data_node_host_memory_gb')

      self.data_node_host_memory_gb = attributes[:'data_node_host_memory_gb'] if attributes[:'data_node_host_memory_gb']

      self.data_node_host_shape = attributes[:'dataNodeHostShape'] if attributes[:'dataNodeHostShape']

      raise 'You cannot provide both :dataNodeHostShape and :data_node_host_shape' if attributes.key?(:'dataNodeHostShape') && attributes.key?(:'data_node_host_shape')

      self.data_node_host_shape = attributes[:'data_node_host_shape'] if attributes[:'data_node_host_shape']

      self.search_node_host_shape = attributes[:'searchNodeHostShape'] if attributes[:'searchNodeHostShape']

      raise 'You cannot provide both :searchNodeHostShape and :search_node_host_shape' if attributes.key?(:'searchNodeHostShape') && attributes.key?(:'search_node_host_shape')

      self.search_node_host_shape = attributes[:'search_node_host_shape'] if attributes[:'search_node_host_shape']

      self.search_node_host_ocpu_count = attributes[:'searchNodeHostOcpuCount'] if attributes[:'searchNodeHostOcpuCount']

      raise 'You cannot provide both :searchNodeHostOcpuCount and :search_node_host_ocpu_count' if attributes.key?(:'searchNodeHostOcpuCount') && attributes.key?(:'search_node_host_ocpu_count')

      self.search_node_host_ocpu_count = attributes[:'search_node_host_ocpu_count'] if attributes[:'search_node_host_ocpu_count']

      self.search_node_host_memory_gb = attributes[:'searchNodeHostMemoryGB'] if attributes[:'searchNodeHostMemoryGB']

      raise 'You cannot provide both :searchNodeHostMemoryGB and :search_node_host_memory_gb' if attributes.key?(:'searchNodeHostMemoryGB') && attributes.key?(:'search_node_host_memory_gb')

      self.search_node_host_memory_gb = attributes[:'search_node_host_memory_gb'] if attributes[:'search_node_host_memory_gb']

      self.software_version = attributes[:'softwareVersion'] if attributes[:'softwareVersion']

      raise 'You cannot provide both :softwareVersion and :software_version' if attributes.key?(:'softwareVersion') && attributes.key?(:'software_version')

      self.software_version = attributes[:'software_version'] if attributes[:'software_version']

      self.dashboard_software_version = attributes[:'dashboardSoftwareVersion'] if attributes[:'dashboardSoftwareVersion']

      raise 'You cannot provide both :dashboardSoftwareVersion and :dashboard_software_version' if attributes.key?(:'dashboardSoftwareVersion') && attributes.key?(:'dashboard_software_version')

      self.dashboard_software_version = attributes[:'dashboard_software_version'] if attributes[:'dashboard_software_version']

      self.opendashboard_node_host_shape = attributes[:'opendashboardNodeHostShape'] if attributes[:'opendashboardNodeHostShape']

      raise 'You cannot provide both :opendashboardNodeHostShape and :opendashboard_node_host_shape' if attributes.key?(:'opendashboardNodeHostShape') && attributes.key?(:'opendashboard_node_host_shape')

      self.opendashboard_node_host_shape = attributes[:'opendashboard_node_host_shape'] if attributes[:'opendashboard_node_host_shape']

      self.cluster_private_endpoint = attributes[:'clusterPrivateEndpoint'] if attributes[:'clusterPrivateEndpoint']

      raise 'You cannot provide both :clusterPrivateEndpoint and :cluster_private_endpoint' if attributes.key?(:'clusterPrivateEndpoint') && attributes.key?(:'cluster_private_endpoint')

      self.cluster_private_endpoint = attributes[:'cluster_private_endpoint'] if attributes[:'cluster_private_endpoint']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        cluster_id == other.cluster_id &&
        master_node_host_ocpu_count == other.master_node_host_ocpu_count &&
        master_node_host_memory_gb == other.master_node_host_memory_gb &&
        master_node_host_shape == other.master_node_host_shape &&
        data_node_host_ocpu_count == other.data_node_host_ocpu_count &&
        data_node_host_memory_gb == other.data_node_host_memory_gb &&
        data_node_host_shape == other.data_node_host_shape &&
        search_node_host_shape == other.search_node_host_shape &&
        search_node_host_ocpu_count == other.search_node_host_ocpu_count &&
        search_node_host_memory_gb == other.search_node_host_memory_gb &&
        software_version == other.software_version &&
        dashboard_software_version == other.dashboard_software_version &&
        opendashboard_node_host_shape == other.opendashboard_node_host_shape &&
        cluster_private_endpoint == other.cluster_private_endpoint
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cluster_id, master_node_host_ocpu_count, master_node_host_memory_gb, master_node_host_shape, data_node_host_ocpu_count, data_node_host_memory_gb, data_node_host_shape, search_node_host_shape, search_node_host_ocpu_count, search_node_host_memory_gb, software_version, dashboard_software_version, opendashboard_node_host_shape, cluster_private_endpoint].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
