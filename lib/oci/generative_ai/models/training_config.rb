# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231130
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The fine-tuning method and hyperparameters used for fine-tuning a custom model.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class GenerativeAi::Models::TrainingConfig
    TRAINING_CONFIG_TYPE_ENUM = [
      TRAINING_CONFIG_TYPE_TFEW_TRAINING_CONFIG = 'TFEW_TRAINING_CONFIG'.freeze,
      TRAINING_CONFIG_TYPE_VANILLA_TRAINING_CONFIG = 'VANILLA_TRAINING_CONFIG'.freeze,
      TRAINING_CONFIG_TYPE_LORA_TRAINING_CONFIG = 'LORA_TRAINING_CONFIG'.freeze,
      TRAINING_CONFIG_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The fine-tuning method for training a custom model.
    # @return [String]
    attr_reader :training_config_type

    # The maximum number of training epochs to run for.
    # @return [Integer]
    attr_accessor :total_training_epochs

    # The initial learning rate to be used during training
    # @return [Float]
    attr_accessor :learning_rate

    # The batch size used during training.
    # @return [Integer]
    attr_accessor :training_batch_size

    # Stop training if the loss metric does not improve beyond 'early_stopping_threshold' for this many times of evaluation.
    #
    # @return [Integer]
    attr_accessor :early_stopping_patience

    # How much the loss must improve to prevent early stopping.
    # @return [Float]
    attr_accessor :early_stopping_threshold

    # Determines how frequently to log model metrics.
    #
    # Every step is logged for the first 20 steps and then follows this parameter for log frequency. Set to 0 to disable logging the model metrics.
    #
    # @return [Integer]
    attr_accessor :log_model_metrics_interval_in_steps

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'training_config_type': :'trainingConfigType',
        'total_training_epochs': :'totalTrainingEpochs',
        'learning_rate': :'learningRate',
        'training_batch_size': :'trainingBatchSize',
        'early_stopping_patience': :'earlyStoppingPatience',
        'early_stopping_threshold': :'earlyStoppingThreshold',
        'log_model_metrics_interval_in_steps': :'logModelMetricsIntervalInSteps'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'training_config_type': :'String',
        'total_training_epochs': :'Integer',
        'learning_rate': :'Float',
        'training_batch_size': :'Integer',
        'early_stopping_patience': :'Integer',
        'early_stopping_threshold': :'Float',
        'log_model_metrics_interval_in_steps': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'trainingConfigType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::GenerativeAi::Models::LoraTrainingConfig' if type == 'LORA_TRAINING_CONFIG'
      return 'OCI::GenerativeAi::Models::VanillaTrainingConfig' if type == 'VANILLA_TRAINING_CONFIG'
      return 'OCI::GenerativeAi::Models::TFewTrainingConfig' if type == 'TFEW_TRAINING_CONFIG'

      # TODO: Log a warning when the subtype is not found.
      'OCI::GenerativeAi::Models::TrainingConfig'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :training_config_type The value to assign to the {#training_config_type} property
    # @option attributes [Integer] :total_training_epochs The value to assign to the {#total_training_epochs} property
    # @option attributes [Float] :learning_rate The value to assign to the {#learning_rate} property
    # @option attributes [Integer] :training_batch_size The value to assign to the {#training_batch_size} property
    # @option attributes [Integer] :early_stopping_patience The value to assign to the {#early_stopping_patience} property
    # @option attributes [Float] :early_stopping_threshold The value to assign to the {#early_stopping_threshold} property
    # @option attributes [Integer] :log_model_metrics_interval_in_steps The value to assign to the {#log_model_metrics_interval_in_steps} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.training_config_type = attributes[:'trainingConfigType'] if attributes[:'trainingConfigType']
      self.training_config_type = "TFEW_TRAINING_CONFIG" if training_config_type.nil? && !attributes.key?(:'trainingConfigType') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :trainingConfigType and :training_config_type' if attributes.key?(:'trainingConfigType') && attributes.key?(:'training_config_type')

      self.training_config_type = attributes[:'training_config_type'] if attributes[:'training_config_type']
      self.training_config_type = "TFEW_TRAINING_CONFIG" if training_config_type.nil? && !attributes.key?(:'trainingConfigType') && !attributes.key?(:'training_config_type') # rubocop:disable Style/StringLiterals

      self.total_training_epochs = attributes[:'totalTrainingEpochs'] if attributes[:'totalTrainingEpochs']

      raise 'You cannot provide both :totalTrainingEpochs and :total_training_epochs' if attributes.key?(:'totalTrainingEpochs') && attributes.key?(:'total_training_epochs')

      self.total_training_epochs = attributes[:'total_training_epochs'] if attributes[:'total_training_epochs']

      self.learning_rate = attributes[:'learningRate'] if attributes[:'learningRate']

      raise 'You cannot provide both :learningRate and :learning_rate' if attributes.key?(:'learningRate') && attributes.key?(:'learning_rate')

      self.learning_rate = attributes[:'learning_rate'] if attributes[:'learning_rate']

      self.training_batch_size = attributes[:'trainingBatchSize'] if attributes[:'trainingBatchSize']

      raise 'You cannot provide both :trainingBatchSize and :training_batch_size' if attributes.key?(:'trainingBatchSize') && attributes.key?(:'training_batch_size')

      self.training_batch_size = attributes[:'training_batch_size'] if attributes[:'training_batch_size']

      self.early_stopping_patience = attributes[:'earlyStoppingPatience'] if attributes[:'earlyStoppingPatience']

      raise 'You cannot provide both :earlyStoppingPatience and :early_stopping_patience' if attributes.key?(:'earlyStoppingPatience') && attributes.key?(:'early_stopping_patience')

      self.early_stopping_patience = attributes[:'early_stopping_patience'] if attributes[:'early_stopping_patience']

      self.early_stopping_threshold = attributes[:'earlyStoppingThreshold'] if attributes[:'earlyStoppingThreshold']

      raise 'You cannot provide both :earlyStoppingThreshold and :early_stopping_threshold' if attributes.key?(:'earlyStoppingThreshold') && attributes.key?(:'early_stopping_threshold')

      self.early_stopping_threshold = attributes[:'early_stopping_threshold'] if attributes[:'early_stopping_threshold']

      self.log_model_metrics_interval_in_steps = attributes[:'logModelMetricsIntervalInSteps'] if attributes[:'logModelMetricsIntervalInSteps']

      raise 'You cannot provide both :logModelMetricsIntervalInSteps and :log_model_metrics_interval_in_steps' if attributes.key?(:'logModelMetricsIntervalInSteps') && attributes.key?(:'log_model_metrics_interval_in_steps')

      self.log_model_metrics_interval_in_steps = attributes[:'log_model_metrics_interval_in_steps'] if attributes[:'log_model_metrics_interval_in_steps']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] training_config_type Object to be assigned
    def training_config_type=(training_config_type)
      # rubocop:disable Style/ConditionalAssignment
      if training_config_type && !TRAINING_CONFIG_TYPE_ENUM.include?(training_config_type)
        OCI.logger.debug("Unknown value for 'training_config_type' [" + training_config_type + "]. Mapping to 'TRAINING_CONFIG_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @training_config_type = TRAINING_CONFIG_TYPE_UNKNOWN_ENUM_VALUE
      else
        @training_config_type = training_config_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        training_config_type == other.training_config_type &&
        total_training_epochs == other.total_training_epochs &&
        learning_rate == other.learning_rate &&
        training_batch_size == other.training_batch_size &&
        early_stopping_patience == other.early_stopping_patience &&
        early_stopping_threshold == other.early_stopping_threshold &&
        log_model_metrics_interval_in_steps == other.log_model_metrics_interval_in_steps
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [training_config_type, total_training_epochs, learning_rate, training_batch_size, early_stopping_patience, early_stopping_threshold, log_model_metrics_interval_in_steps].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
