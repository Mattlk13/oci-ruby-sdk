# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200501
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # DNS healthcheck configurations.
  class NetworkLoadBalancer::Models::DnsHealthCheckerDetails
    TRANSPORT_PROTOCOL_ENUM = [
      TRANSPORT_PROTOCOL_UDP = 'UDP'.freeze,
      TRANSPORT_PROTOCOL_TCP = 'TCP'.freeze,
      TRANSPORT_PROTOCOL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    QUERY_CLASS_ENUM = [
      QUERY_CLASS_IN = 'IN'.freeze,
      QUERY_CLASS_CH = 'CH'.freeze,
      QUERY_CLASS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    QUERY_TYPE_ENUM = [
      QUERY_TYPE_A = 'A'.freeze,
      QUERY_TYPE_TXT = 'TXT'.freeze,
      QUERY_TYPE_AAAA = 'AAAA'.freeze,
      QUERY_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # DNS transport protocol; either UDP or TCP.
    #
    # Example: `UDP`
    #
    # @return [String]
    attr_reader :transport_protocol

    # **[Required]** The absolute fully-qualified domain name to perform periodic DNS queries.
    # If not provided, an extra dot will be added at the end of a domain name during the query.
    #
    # @return [String]
    attr_accessor :domain_name

    # The class the dns health check query to use; either IN or CH.
    #
    # Example: `IN`
    #
    # @return [String]
    attr_reader :query_class

    # The type the dns health check query to use; A, AAAA, TXT.
    #
    # Example: `A`
    #
    # @return [String]
    attr_reader :query_type

    # An array that represents accepetable RCODE values for DNS query response.
    # Example: [\"NOERROR\", \"NXDOMAIN\"]
    #
    # @return [Array<OCI::NetworkLoadBalancer::Models::DnsHealthCheckRCodes>]
    attr_accessor :rcodes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'transport_protocol': :'transportProtocol',
        'domain_name': :'domainName',
        'query_class': :'queryClass',
        'query_type': :'queryType',
        'rcodes': :'rcodes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'transport_protocol': :'String',
        'domain_name': :'String',
        'query_class': :'String',
        'query_type': :'String',
        'rcodes': :'Array<OCI::NetworkLoadBalancer::Models::DnsHealthCheckRCodes>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :transport_protocol The value to assign to the {#transport_protocol} property
    # @option attributes [String] :domain_name The value to assign to the {#domain_name} property
    # @option attributes [String] :query_class The value to assign to the {#query_class} property
    # @option attributes [String] :query_type The value to assign to the {#query_type} property
    # @option attributes [Array<OCI::NetworkLoadBalancer::Models::DnsHealthCheckRCodes>] :rcodes The value to assign to the {#rcodes} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.transport_protocol = attributes[:'transportProtocol'] if attributes[:'transportProtocol']

      raise 'You cannot provide both :transportProtocol and :transport_protocol' if attributes.key?(:'transportProtocol') && attributes.key?(:'transport_protocol')

      self.transport_protocol = attributes[:'transport_protocol'] if attributes[:'transport_protocol']

      self.domain_name = attributes[:'domainName'] if attributes[:'domainName']

      raise 'You cannot provide both :domainName and :domain_name' if attributes.key?(:'domainName') && attributes.key?(:'domain_name')

      self.domain_name = attributes[:'domain_name'] if attributes[:'domain_name']

      self.query_class = attributes[:'queryClass'] if attributes[:'queryClass']

      raise 'You cannot provide both :queryClass and :query_class' if attributes.key?(:'queryClass') && attributes.key?(:'query_class')

      self.query_class = attributes[:'query_class'] if attributes[:'query_class']

      self.query_type = attributes[:'queryType'] if attributes[:'queryType']

      raise 'You cannot provide both :queryType and :query_type' if attributes.key?(:'queryType') && attributes.key?(:'query_type')

      self.query_type = attributes[:'query_type'] if attributes[:'query_type']

      self.rcodes = attributes[:'rcodes'] if attributes[:'rcodes']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transport_protocol Object to be assigned
    def transport_protocol=(transport_protocol)
      # rubocop:disable Style/ConditionalAssignment
      if transport_protocol && !TRANSPORT_PROTOCOL_ENUM.include?(transport_protocol)
        OCI.logger.debug("Unknown value for 'transport_protocol' [" + transport_protocol + "]. Mapping to 'TRANSPORT_PROTOCOL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @transport_protocol = TRANSPORT_PROTOCOL_UNKNOWN_ENUM_VALUE
      else
        @transport_protocol = transport_protocol
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] query_class Object to be assigned
    def query_class=(query_class)
      # rubocop:disable Style/ConditionalAssignment
      if query_class && !QUERY_CLASS_ENUM.include?(query_class)
        OCI.logger.debug("Unknown value for 'query_class' [" + query_class + "]. Mapping to 'QUERY_CLASS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @query_class = QUERY_CLASS_UNKNOWN_ENUM_VALUE
      else
        @query_class = query_class
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] query_type Object to be assigned
    def query_type=(query_type)
      # rubocop:disable Style/ConditionalAssignment
      if query_type && !QUERY_TYPE_ENUM.include?(query_type)
        OCI.logger.debug("Unknown value for 'query_type' [" + query_type + "]. Mapping to 'QUERY_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @query_type = QUERY_TYPE_UNKNOWN_ENUM_VALUE
      else
        @query_type = query_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        transport_protocol == other.transport_protocol &&
        domain_name == other.domain_name &&
        query_class == other.query_class &&
        query_type == other.query_type &&
        rcodes == other.rcodes
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [transport_protocol, domain_name, query_class, query_type, rcodes].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
