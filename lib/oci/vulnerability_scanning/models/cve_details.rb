# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210215
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details on a CVE.
  class VulnerabilityScanning::Models::CveDetails
    # **[Required]** CVE ID.
    # @return [String]
    attr_accessor :cve_reference

    # **[Required]** Vulnerability title.
    # @return [String]
    attr_accessor :title

    # CVE description.
    # @return [String]
    attr_accessor :description

    # ID of related CVE, if applicable.
    # @return [String]
    attr_accessor :related_cve_reference

    # **[Required]** CVSS 3 Score.
    # @return [String]
    attr_accessor :cvss3

    # **[Required]** Date/time the CVE was published.
    # @return [DateTime]
    attr_accessor :time_published

    # **[Required]** Date/time the CVE was last modified.
    # @return [DateTime]
    attr_accessor :time_updated

    # Threat this item poses to resource.
    # @return [String]
    attr_accessor :threat

    # Impact on resource if this vulnerability is exploited.
    # @return [String]
    attr_accessor :impact

    # Recommended solution to fix this vulnerability.
    # @return [String]
    attr_accessor :solution

    # Can this vulnerability be patched.
    # @return [String]
    attr_accessor :patchable

    # Can this vulnerability be exploited.
    # @return [String]
    attr_accessor :exploitable

    # Reference link to know more about this vulnerability.
    # @return [String]
    attr_accessor :reference_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'cve_reference': :'cveReference',
        'title': :'title',
        'description': :'description',
        'related_cve_reference': :'relatedCveReference',
        'cvss3': :'cvss3',
        'time_published': :'timePublished',
        'time_updated': :'timeUpdated',
        'threat': :'threat',
        'impact': :'impact',
        'solution': :'solution',
        'patchable': :'patchable',
        'exploitable': :'exploitable',
        'reference_url': :'referenceUrl'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'cve_reference': :'String',
        'title': :'String',
        'description': :'String',
        'related_cve_reference': :'String',
        'cvss3': :'String',
        'time_published': :'DateTime',
        'time_updated': :'DateTime',
        'threat': :'String',
        'impact': :'String',
        'solution': :'String',
        'patchable': :'String',
        'exploitable': :'String',
        'reference_url': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :cve_reference The value to assign to the {#cve_reference} property
    # @option attributes [String] :title The value to assign to the {#title} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :related_cve_reference The value to assign to the {#related_cve_reference} property
    # @option attributes [String] :cvss3 The value to assign to the {#cvss3} property
    # @option attributes [DateTime] :time_published The value to assign to the {#time_published} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :threat The value to assign to the {#threat} property
    # @option attributes [String] :impact The value to assign to the {#impact} property
    # @option attributes [String] :solution The value to assign to the {#solution} property
    # @option attributes [String] :patchable The value to assign to the {#patchable} property
    # @option attributes [String] :exploitable The value to assign to the {#exploitable} property
    # @option attributes [String] :reference_url The value to assign to the {#reference_url} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.cve_reference = attributes[:'cveReference'] if attributes[:'cveReference']

      raise 'You cannot provide both :cveReference and :cve_reference' if attributes.key?(:'cveReference') && attributes.key?(:'cve_reference')

      self.cve_reference = attributes[:'cve_reference'] if attributes[:'cve_reference']

      self.title = attributes[:'title'] if attributes[:'title']

      self.description = attributes[:'description'] if attributes[:'description']

      self.related_cve_reference = attributes[:'relatedCveReference'] if attributes[:'relatedCveReference']

      raise 'You cannot provide both :relatedCveReference and :related_cve_reference' if attributes.key?(:'relatedCveReference') && attributes.key?(:'related_cve_reference')

      self.related_cve_reference = attributes[:'related_cve_reference'] if attributes[:'related_cve_reference']

      self.cvss3 = attributes[:'cvss3'] if attributes[:'cvss3']

      self.time_published = attributes[:'timePublished'] if attributes[:'timePublished']

      raise 'You cannot provide both :timePublished and :time_published' if attributes.key?(:'timePublished') && attributes.key?(:'time_published')

      self.time_published = attributes[:'time_published'] if attributes[:'time_published']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.threat = attributes[:'threat'] if attributes[:'threat']

      self.impact = attributes[:'impact'] if attributes[:'impact']

      self.solution = attributes[:'solution'] if attributes[:'solution']

      self.patchable = attributes[:'patchable'] if attributes[:'patchable']

      self.exploitable = attributes[:'exploitable'] if attributes[:'exploitable']

      self.reference_url = attributes[:'referenceUrl'] if attributes[:'referenceUrl']

      raise 'You cannot provide both :referenceUrl and :reference_url' if attributes.key?(:'referenceUrl') && attributes.key?(:'reference_url')

      self.reference_url = attributes[:'reference_url'] if attributes[:'reference_url']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        cve_reference == other.cve_reference &&
        title == other.title &&
        description == other.description &&
        related_cve_reference == other.related_cve_reference &&
        cvss3 == other.cvss3 &&
        time_published == other.time_published &&
        time_updated == other.time_updated &&
        threat == other.threat &&
        impact == other.impact &&
        solution == other.solution &&
        patchable == other.patchable &&
        exploitable == other.exploitable &&
        reference_url == other.reference_url
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cve_reference, title, description, related_cve_reference, cvss3, time_published, time_updated, threat, impact, solution, patchable, exploitable, reference_url].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
