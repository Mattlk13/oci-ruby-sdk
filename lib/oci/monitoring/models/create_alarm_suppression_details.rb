# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180401
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The configuration details for creating an alarm suppression.
  #
  class Monitoring::Models::CreateAlarmSuppressionDetails
    # This attribute is required.
    # @return [OCI::Monitoring::Models::AlarmSuppressionTarget]
    attr_accessor :alarm_suppression_target

    # The level of this alarm suppression.
    # `ALARM` indicates a suppression of the entire alarm, regardless of dimension.
    # `DIMENSION` indicates a suppression configured for specified dimensions.
    #
    # Defaut: `DIMENSION`
    #
    # @return [String]
    attr_accessor :level

    # **[Required]** A user-friendly name for the alarm suppression. It does not have to be unique, and it's changeable. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # Human-readable reason for this alarm suppression.
    # It does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # Oracle recommends including tracking information for the event or associated work,
    # such as a ticket number.
    #
    # Example: `Planned outage due to change IT-1234.`
    #
    # @return [String]
    attr_accessor :description

    # A filter to suppress only alarm state entries that include the set of specified dimension key-value pairs.
    # If you specify {\"availabilityDomain\": \"phx-ad-1\"}
    # and the alarm state entry corresponds to the set {\"availabilityDomain\": \"phx-ad-1\" and \"resourceId\": \"ocid1.instance.region1.phx.exampleuniqueID\"},
    # then this alarm will be included for suppression.
    #
    # This is required only when the value of level is `DIMENSION`. If required, the value cannot be an empty object.
    # Only a single value is allowed per key. No grouping of multiple values is allowed under the same key.
    # Maximum characters (after serialization): 4000. This maximum satisfies typical use cases.
    # The response for an exceeded maximum is `HTTP 400` with an \"dimensions values are too long\" message.
    #
    # @return [Hash<String, String>]
    attr_accessor :dimensions

    # **[Required]** The start date and time for the suppression to take place, inclusive. Format defined by RFC3339.
    #
    # Example: `2023-02-01T01:02:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_suppress_from

    # **[Required]** The end date and time for the suppression to take place, inclusive. Format defined by RFC3339.
    #
    # Example: `2023-02-01T02:02:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_suppress_until

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Usage of predefined tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Array of all preconditions for alarm suppression.
    # Example: `[{
    #   conditionType: \"RECURRENCE\",
    #   suppressionRecurrence: \"FRQ=DAILY;BYHOUR=10\",
    #   suppressionDuration: \"PT1H\"
    # }]`
    #
    # @return [Array<OCI::Monitoring::Models::SuppressionCondition>]
    attr_accessor :suppression_conditions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'alarm_suppression_target': :'alarmSuppressionTarget',
        'level': :'level',
        'display_name': :'displayName',
        'description': :'description',
        'dimensions': :'dimensions',
        'time_suppress_from': :'timeSuppressFrom',
        'time_suppress_until': :'timeSuppressUntil',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'suppression_conditions': :'suppressionConditions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'alarm_suppression_target': :'OCI::Monitoring::Models::AlarmSuppressionTarget',
        'level': :'String',
        'display_name': :'String',
        'description': :'String',
        'dimensions': :'Hash<String, String>',
        'time_suppress_from': :'DateTime',
        'time_suppress_until': :'DateTime',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'suppression_conditions': :'Array<OCI::Monitoring::Models::SuppressionCondition>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::Monitoring::Models::AlarmSuppressionTarget] :alarm_suppression_target The value to assign to the {#alarm_suppression_target} property
    # @option attributes [String] :level The value to assign to the {#level} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Hash<String, String>] :dimensions The value to assign to the {#dimensions} property
    # @option attributes [DateTime] :time_suppress_from The value to assign to the {#time_suppress_from} property
    # @option attributes [DateTime] :time_suppress_until The value to assign to the {#time_suppress_until} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Array<OCI::Monitoring::Models::SuppressionCondition>] :suppression_conditions The value to assign to the {#suppression_conditions} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.alarm_suppression_target = attributes[:'alarmSuppressionTarget'] if attributes[:'alarmSuppressionTarget']

      raise 'You cannot provide both :alarmSuppressionTarget and :alarm_suppression_target' if attributes.key?(:'alarmSuppressionTarget') && attributes.key?(:'alarm_suppression_target')

      self.alarm_suppression_target = attributes[:'alarm_suppression_target'] if attributes[:'alarm_suppression_target']

      self.level = attributes[:'level'] if attributes[:'level']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.dimensions = attributes[:'dimensions'] if attributes[:'dimensions']

      self.time_suppress_from = attributes[:'timeSuppressFrom'] if attributes[:'timeSuppressFrom']

      raise 'You cannot provide both :timeSuppressFrom and :time_suppress_from' if attributes.key?(:'timeSuppressFrom') && attributes.key?(:'time_suppress_from')

      self.time_suppress_from = attributes[:'time_suppress_from'] if attributes[:'time_suppress_from']

      self.time_suppress_until = attributes[:'timeSuppressUntil'] if attributes[:'timeSuppressUntil']

      raise 'You cannot provide both :timeSuppressUntil and :time_suppress_until' if attributes.key?(:'timeSuppressUntil') && attributes.key?(:'time_suppress_until')

      self.time_suppress_until = attributes[:'time_suppress_until'] if attributes[:'time_suppress_until']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.suppression_conditions = attributes[:'suppressionConditions'] if attributes[:'suppressionConditions']

      raise 'You cannot provide both :suppressionConditions and :suppression_conditions' if attributes.key?(:'suppressionConditions') && attributes.key?(:'suppression_conditions')

      self.suppression_conditions = attributes[:'suppression_conditions'] if attributes[:'suppression_conditions']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        alarm_suppression_target == other.alarm_suppression_target &&
        level == other.level &&
        display_name == other.display_name &&
        description == other.description &&
        dimensions == other.dimensions &&
        time_suppress_from == other.time_suppress_from &&
        time_suppress_until == other.time_suppress_until &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        suppression_conditions == other.suppression_conditions
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [alarm_suppression_target, level, display_name, description, dimensions, time_suppress_from, time_suppress_until, freeform_tags, defined_tags, suppression_conditions].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
