# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230501
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Tunnel Inspection Rule used in the firewall policy rules.
  # Tunnel Inspection Rule determines whether tunnel inspection is applied on the traffic based on attributes
  # such as  Tunnel Inspect protocol, the source and destination IP addresses.
  #
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class NetworkFirewall::Models::TunnelInspectionRule
    PROTOCOL_ENUM = [
      PROTOCOL_VXLAN = 'VXLAN'.freeze,
      PROTOCOL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ACTION_ENUM = [
      ACTION_INSPECT = 'INSPECT'.freeze,
      ACTION_INSPECT_AND_CAPTURE_LOG = 'INSPECT_AND_CAPTURE_LOG'.freeze,
      ACTION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Name for the Tunnel Inspection Rule, must be unique within the policy.
    # @return [String]
    attr_accessor :name

    # **[Required]** Types of Tunnel Inspection Protocol to be applied on the traffic.
    #
    #   * VXLAN - VXLAN Tunnel Inspection Protocol will be applied on the traffic.
    #
    # @return [String]
    attr_reader :protocol

    # Types of Inspect Action on the Traffic flow.
    #
    #   * INSPECT - Inspect the traffic.
    #   * INSPECT_AND_CAPTURE_LOG - Inspect and capture logs for the traffic.
    #
    # @return [String]
    attr_reader :action

    # The priority order in which this rule should be evaluated
    # @return [Integer]
    attr_accessor :priority_order

    # @return [OCI::NetworkFirewall::Models::RulePosition]
    attr_accessor :position

    # **[Required]** OCID of the Network Firewall Policy this Tunnel Inspection Rule belongs to.
    # @return [String]
    attr_accessor :parent_resource_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'protocol': :'protocol',
        'action': :'action',
        'priority_order': :'priorityOrder',
        'position': :'position',
        'parent_resource_id': :'parentResourceId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'protocol': :'String',
        'action': :'String',
        'priority_order': :'Integer',
        'position': :'OCI::NetworkFirewall::Models::RulePosition',
        'parent_resource_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'protocol'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::NetworkFirewall::Models::VxlanInspectionRule' if type == 'VXLAN'

      # TODO: Log a warning when the subtype is not found.
      'OCI::NetworkFirewall::Models::TunnelInspectionRule'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :protocol The value to assign to the {#protocol} property
    # @option attributes [String] :action The value to assign to the {#action} property
    # @option attributes [Integer] :priority_order The value to assign to the {#priority_order} property
    # @option attributes [OCI::NetworkFirewall::Models::RulePosition] :position The value to assign to the {#position} property
    # @option attributes [String] :parent_resource_id The value to assign to the {#parent_resource_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.protocol = attributes[:'protocol'] if attributes[:'protocol']

      self.action = attributes[:'action'] if attributes[:'action']
      self.action = "INSPECT_AND_CAPTURE_LOG" if action.nil? && !attributes.key?(:'action') # rubocop:disable Style/StringLiterals

      self.priority_order = attributes[:'priorityOrder'] if attributes[:'priorityOrder']

      raise 'You cannot provide both :priorityOrder and :priority_order' if attributes.key?(:'priorityOrder') && attributes.key?(:'priority_order')

      self.priority_order = attributes[:'priority_order'] if attributes[:'priority_order']

      self.position = attributes[:'position'] if attributes[:'position']

      self.parent_resource_id = attributes[:'parentResourceId'] if attributes[:'parentResourceId']

      raise 'You cannot provide both :parentResourceId and :parent_resource_id' if attributes.key?(:'parentResourceId') && attributes.key?(:'parent_resource_id')

      self.parent_resource_id = attributes[:'parent_resource_id'] if attributes[:'parent_resource_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protocol Object to be assigned
    def protocol=(protocol)
      # rubocop:disable Style/ConditionalAssignment
      if protocol && !PROTOCOL_ENUM.include?(protocol)
        OCI.logger.debug("Unknown value for 'protocol' [" + protocol + "]. Mapping to 'PROTOCOL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @protocol = PROTOCOL_UNKNOWN_ENUM_VALUE
      else
        @protocol = protocol
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      # rubocop:disable Style/ConditionalAssignment
      if action && !ACTION_ENUM.include?(action)
        OCI.logger.debug("Unknown value for 'action' [" + action + "]. Mapping to 'ACTION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @action = ACTION_UNKNOWN_ENUM_VALUE
      else
        @action = action
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        protocol == other.protocol &&
        action == other.action &&
        priority_order == other.priority_order &&
        position == other.position &&
        parent_resource_id == other.parent_resource_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, protocol, action, priority_order, position, parent_resource_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
