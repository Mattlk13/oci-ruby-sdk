# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230501

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the Network Firewall API to create network firewalls and configure policies that regulates network traffic in and across VCNs.
  class NetworkFirewall::NetworkFirewallClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new NetworkFirewallClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20230501'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "NetworkFirewallClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://network-firewall.{region}.ocs.{secondLevelDomain}') + '/20230501'
      logger.info "NetworkFirewallClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Applies the candidate version of the NetworkFirewallPolicy resource. When provided, If-Match is checked against ETag values of the resource.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::ApplyNetworkFirewallPolicyDetails] apply_network_firewall_policy_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewallPolicy NetworkFirewallPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/apply_network_firewall_policy.rb.html) to see an example of how to use apply_network_firewall_policy API.
    def apply_network_firewall_policy(network_firewall_policy_id, apply_network_firewall_policy_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#apply_network_firewall_policy.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling apply_network_firewall_policy." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'apply_network_firewall_policy_details' when calling apply_network_firewall_policy." if apply_network_firewall_policy_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/actions/applyPolicy'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(apply_network_firewall_policy_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#apply_network_firewall_policy') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewallPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Address Lists at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_address_lists_details Request Details to create the Address Lists for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_address_lists.rb.html) to see an example of how to use bulk_upload_address_lists API.
    def bulk_upload_address_lists(network_firewall_policy_id, bulk_upload_address_lists_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_address_lists.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_address_lists." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_address_lists_details' when calling bulk_upload_address_lists." if bulk_upload_address_lists_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_address_lists_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_address_lists') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Application Group at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_application_groups_details Request Details to create the Application Group for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_application_groups.rb.html) to see an example of how to use bulk_upload_application_groups API.
    def bulk_upload_application_groups(network_firewall_policy_id, bulk_upload_application_groups_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_application_groups.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_application_groups." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_application_groups_details' when calling bulk_upload_application_groups." if bulk_upload_application_groups_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_application_groups_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_application_groups') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates new Applications at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_applications_details Request Details to create the Applications for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_applications.rb.html) to see an example of how to use bulk_upload_applications API.
    def bulk_upload_applications(network_firewall_policy_id, bulk_upload_applications_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_applications.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_applications." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_applications_details' when calling bulk_upload_applications." if bulk_upload_applications_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applications/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_applications_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_applications') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates new Decryption Profiles at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_decryption_profiles_details Request Details to create the Decryption Profile for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_decryption_profiles.rb.html) to see an example of how to use bulk_upload_decryption_profiles API.
    def bulk_upload_decryption_profiles(network_firewall_policy_id, bulk_upload_decryption_profiles_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_decryption_profiles.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_decryption_profiles." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_decryption_profiles_details' when calling bulk_upload_decryption_profiles." if bulk_upload_decryption_profiles_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_decryption_profiles_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_decryption_profiles') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates Decryption Rules at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_decryption_rules_details Request Details to create the Decryption Rule for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_decryption_rules.rb.html) to see an example of how to use bulk_upload_decryption_rules API.
    def bulk_upload_decryption_rules(network_firewall_policy_id, bulk_upload_decryption_rules_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_decryption_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_decryption_rules." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_decryption_rules_details' when calling bulk_upload_decryption_rules." if bulk_upload_decryption_rules_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_decryption_rules_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_decryption_rules') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates new Mapped Secrets at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_mapped_secrets_details Request Details to create the Mapped Secret for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_mapped_secrets.rb.html) to see an example of how to use bulk_upload_mapped_secrets API.
    def bulk_upload_mapped_secrets(network_firewall_policy_id, bulk_upload_mapped_secrets_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_mapped_secrets.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_mapped_secrets." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_mapped_secrets_details' when calling bulk_upload_mapped_secrets." if bulk_upload_mapped_secrets_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_mapped_secrets_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_mapped_secrets') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new NAT Rule at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_nat_rules_details Request Details to create the NAT Rule for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_nat_rules.rb.html) to see an example of how to use bulk_upload_nat_rules API.
    def bulk_upload_nat_rules(network_firewall_policy_id, bulk_upload_nat_rules_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_nat_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_nat_rules." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_nat_rules_details' when calling bulk_upload_nat_rules." if bulk_upload_nat_rules_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/natRules/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_nat_rules_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_nat_rules') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Security Rule at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_security_rules_details Request Details to create the Security Rule for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_security_rules.rb.html) to see an example of how to use bulk_upload_security_rules API.
    def bulk_upload_security_rules(network_firewall_policy_id, bulk_upload_security_rules_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_security_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_security_rules." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_security_rules_details' when calling bulk_upload_security_rules." if bulk_upload_security_rules_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_security_rules_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_security_rules') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Service List at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_service_lists_details Request Details to create the Service List for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_service_lists.rb.html) to see an example of how to use bulk_upload_service_lists API.
    def bulk_upload_service_lists(network_firewall_policy_id, bulk_upload_service_lists_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_service_lists.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_service_lists." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_service_lists_details' when calling bulk_upload_service_lists." if bulk_upload_service_lists_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_service_lists_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_service_lists') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates new Services at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_services_details Request Details to create the Services for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_services.rb.html) to see an example of how to use bulk_upload_services API.
    def bulk_upload_services(network_firewall_policy_id, bulk_upload_services_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_services.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_services." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_services_details' when calling bulk_upload_services." if bulk_upload_services_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/services/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_services_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_services') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Tunnel Inspection Rule at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_tunnel_inspection_rules_details Request details to create the tunnel inspection rule for the network firewall policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_tunnel_inspection_rules.rb.html) to see an example of how to use bulk_upload_tunnel_inspection_rules API.
    def bulk_upload_tunnel_inspection_rules(network_firewall_policy_id, bulk_upload_tunnel_inspection_rules_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_tunnel_inspection_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_tunnel_inspection_rules." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_tunnel_inspection_rules_details' when calling bulk_upload_tunnel_inspection_rules." if bulk_upload_tunnel_inspection_rules_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_tunnel_inspection_rules_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_tunnel_inspection_rules') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Url Lists at bulk for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String, IO] bulk_upload_url_lists_details Request Details to create the Url Lists for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/bulk_upload_url_lists.rb.html) to see an example of how to use bulk_upload_url_lists API.
    def bulk_upload_url_lists(network_firewall_policy_id, bulk_upload_url_lists_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#bulk_upload_url_lists.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling bulk_upload_url_lists." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'bulk_upload_url_lists_details' when calling bulk_upload_url_lists." if bulk_upload_url_lists_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/actions/bulkUpload'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'content-type'] ||= 'application/octet-stream'
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_upload_url_lists_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#bulk_upload_url_lists') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Cancel work request with the given ID.
    # @param [String] work_request_id The ID of the asynchronous request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/cancel_work_request.rb.html) to see an example of how to use cancel_work_request API.
    def cancel_work_request(work_request_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#cancel_work_request.' if logger

      raise "Missing the required parameter 'work_request_id' when calling cancel_work_request." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#cancel_work_request') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a NetworkFirewall resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
    # @param [String] network_firewall_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Network Firewall resource.
    # @param [OCI::NetworkFirewall::Models::ChangeNetworkFirewallCompartmentDetails] change_network_firewall_compartment_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/change_network_firewall_compartment.rb.html) to see an example of how to use change_network_firewall_compartment API.
    def change_network_firewall_compartment(network_firewall_id, change_network_firewall_compartment_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#change_network_firewall_compartment.' if logger

      raise "Missing the required parameter 'network_firewall_id' when calling change_network_firewall_compartment." if network_firewall_id.nil?
      raise "Missing the required parameter 'change_network_firewall_compartment_details' when calling change_network_firewall_compartment." if change_network_firewall_compartment_details.nil?
      raise "Parameter value for 'network_firewall_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_id)

      path = '/networkFirewalls/{networkFirewallId}/actions/changeCompartment'.sub('{networkFirewallId}', network_firewall_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_network_firewall_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#change_network_firewall_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a NetworkFirewallPolicy resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::ChangeNetworkFirewallPolicyCompartmentDetails] change_network_firewall_policy_compartment_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/change_network_firewall_policy_compartment.rb.html) to see an example of how to use change_network_firewall_policy_compartment API.
    def change_network_firewall_policy_compartment(network_firewall_policy_id, change_network_firewall_policy_compartment_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#change_network_firewall_policy_compartment.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling change_network_firewall_policy_compartment." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'change_network_firewall_policy_compartment_details' when calling change_network_firewall_policy_compartment." if change_network_firewall_policy_compartment_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/actions/changeCompartment'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_network_firewall_policy_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#change_network_firewall_policy_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Clones a NetworkFirewallPolicy resource from an existing Network Firewall Policy. When provided, If-Match is checked against ETag values of the resource.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CloneNetworkFirewallPolicyDetails] clone_network_firewall_policy_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewallPolicy NetworkFirewallPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/clone_network_firewall_policy.rb.html) to see an example of how to use clone_network_firewall_policy API.
    def clone_network_firewall_policy(network_firewall_policy_id, clone_network_firewall_policy_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#clone_network_firewall_policy.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling clone_network_firewall_policy." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'clone_network_firewall_policy_details' when calling clone_network_firewall_policy." if clone_network_firewall_policy_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/actions/clonePolicy'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(clone_network_firewall_policy_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#clone_network_firewall_policy') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewallPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Address List for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateAddressListDetails] create_address_list_details Request Details to create the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::AddressList AddressList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_address_list.rb.html) to see an example of how to use create_address_list API.
    def create_address_list(network_firewall_policy_id, create_address_list_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_address_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_address_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_address_list_details' when calling create_address_list." if create_address_list_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_address_list_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_address_list') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::AddressList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Application for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateApplicationDetails] create_application_details Request Details to create the Application for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::Application Application}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_application.rb.html) to see an example of how to use create_application API.
    def create_application(network_firewall_policy_id, create_application_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_application.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_application." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_application_details' when calling create_application." if create_application_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applications'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_application_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_application') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::Application'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new ApplicationGroup for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateApplicationGroupDetails] create_application_group_details Request Details to create the ApplicationGroup for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ApplicationGroup ApplicationGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_application_group.rb.html) to see an example of how to use create_application_group API.
    def create_application_group(network_firewall_policy_id, create_application_group_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_application_group.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_application_group." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_application_group_details' when calling create_application_group." if create_application_group_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_application_group_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_application_group') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ApplicationGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Decryption Profile for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateDecryptionProfileDetails] create_decryption_profile_details Request Details to create the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionProfile DecryptionProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_decryption_profile.rb.html) to see an example of how to use create_decryption_profile API.
    def create_decryption_profile(network_firewall_policy_id, create_decryption_profile_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_decryption_profile.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_decryption_profile." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_decryption_profile_details' when calling create_decryption_profile." if create_decryption_profile_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_decryption_profile_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_decryption_profile') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Decryption Rule for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateDecryptionRuleDetails] create_decryption_rule_details Request Details to create the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionRule DecryptionRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_decryption_rule.rb.html) to see an example of how to use create_decryption_rule API.
    def create_decryption_rule(network_firewall_policy_id, create_decryption_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_decryption_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_decryption_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_decryption_rule_details' when calling create_decryption_rule." if create_decryption_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_decryption_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_decryption_rule') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Mapped Secret for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateMappedSecretDetails] create_mapped_secret_details Request Details to create the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::MappedSecret MappedSecret}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_mapped_secret.rb.html) to see an example of how to use create_mapped_secret API.
    def create_mapped_secret(network_firewall_policy_id, create_mapped_secret_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_mapped_secret.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_mapped_secret." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_mapped_secret_details' when calling create_mapped_secret." if create_mapped_secret_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_mapped_secret_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_mapped_secret') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::MappedSecret'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new NAT Rule for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateNatRuleDetails] create_nat_rule_details Request Details to create NAT rule under a Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NatRule NatRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_nat_rule.rb.html) to see an example of how to use create_nat_rule API.
    def create_nat_rule(network_firewall_policy_id, create_nat_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_nat_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_nat_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_nat_rule_details' when calling create_nat_rule." if create_nat_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/natRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_nat_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_nat_rule') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NatRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new NetworkFirewall.
    #
    # @param [OCI::NetworkFirewall::Models::CreateNetworkFirewallDetails] create_network_firewall_details Details for the new NetworkFirewall.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewall NetworkFirewall}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_network_firewall.rb.html) to see an example of how to use create_network_firewall API.
    def create_network_firewall(create_network_firewall_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_network_firewall.' if logger

      raise "Missing the required parameter 'create_network_firewall_details' when calling create_network_firewall." if create_network_firewall_details.nil?

      path = '/networkFirewalls'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_network_firewall_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_network_firewall') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewall'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Network Firewall Policy.
    #
    # @param [OCI::NetworkFirewall::Models::CreateNetworkFirewallPolicyDetails] create_network_firewall_policy_details Request Details to create the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewallPolicy NetworkFirewallPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_network_firewall_policy.rb.html) to see an example of how to use create_network_firewall_policy API.
    def create_network_firewall_policy(create_network_firewall_policy_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_network_firewall_policy.' if logger

      raise "Missing the required parameter 'create_network_firewall_policy_details' when calling create_network_firewall_policy." if create_network_firewall_policy_details.nil?

      path = '/networkFirewallPolicies'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_network_firewall_policy_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_network_firewall_policy') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewallPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Security Rule for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateSecurityRuleDetails] create_security_rule_details Request Details to create the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::SecurityRule SecurityRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_security_rule.rb.html) to see an example of how to use create_security_rule API.
    def create_security_rule(network_firewall_policy_id, create_security_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_security_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_security_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_security_rule_details' when calling create_security_rule." if create_security_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_security_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_security_rule') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::SecurityRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Service for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateServiceDetails] create_service_details Request Details to create the Service for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::Service Service}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_service.rb.html) to see an example of how to use create_service API.
    def create_service(network_firewall_policy_id, create_service_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_service.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_service." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_service_details' when calling create_service." if create_service_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/services'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_service_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_service') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::Service'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new ServiceList for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateServiceListDetails] create_service_list_details Request Details to create the ServiceList for the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ServiceList ServiceList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_service_list.rb.html) to see an example of how to use create_service_list API.
    def create_service_list(network_firewall_policy_id, create_service_list_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_service_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_service_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_service_list_details' when calling create_service_list." if create_service_list_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_service_list_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_service_list') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ServiceList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new tunnel inspection rule for the network firewall policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateTunnelInspectionRuleDetails] create_tunnel_inspection_rule_details Request Details to create the network firewall policy resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::TunnelInspectionRule TunnelInspectionRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_tunnel_inspection_rule.rb.html) to see an example of how to use create_tunnel_inspection_rule API.
    def create_tunnel_inspection_rule(network_firewall_policy_id, create_tunnel_inspection_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_tunnel_inspection_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_tunnel_inspection_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_tunnel_inspection_rule_details' when calling create_tunnel_inspection_rule." if create_tunnel_inspection_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_tunnel_inspection_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_tunnel_inspection_rule') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::TunnelInspectionRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Url List for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::CreateUrlListDetails] create_url_list_details Request Details to create the Network Firewall Policy Resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::UrlList UrlList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/create_url_list.rb.html) to see an example of how to use create_url_list API.
    def create_url_list(network_firewall_policy_id, create_url_list_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#create_url_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling create_url_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'create_url_list_details' when calling create_url_list." if create_url_list_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_url_list_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#create_url_list') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::UrlList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Address List resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] address_list_name Unique identifier for address lists.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_address_list.rb.html) to see an example of how to use delete_address_list API.
    def delete_address_list(network_firewall_policy_id, address_list_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_address_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_address_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'address_list_name' when calling delete_address_list." if address_list_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'address_list_name' must not be blank" if OCI::Internal::Util.blank_string?(address_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/{addressListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{addressListName}', address_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_address_list') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Application resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] application_name Unique identifier for Applications.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_application.rb.html) to see an example of how to use delete_application API.
    def delete_application(network_firewall_policy_id, application_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_application.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_application." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'application_name' when calling delete_application." if application_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'application_name' must not be blank" if OCI::Internal::Util.blank_string?(application_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applications/{applicationName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{applicationName}', application_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_application') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a ApplicationGroup resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] application_group_name Unique name identifier for Application Lists in the scope of Network Firewall Policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_application_group.rb.html) to see an example of how to use delete_application_group API.
    def delete_application_group(network_firewall_policy_id, application_group_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_application_group.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_application_group." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'application_group_name' when calling delete_application_group." if application_group_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'application_group_name' must not be blank" if OCI::Internal::Util.blank_string?(application_group_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/{applicationGroupName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{applicationGroupName}', application_group_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_application_group') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Decryption Profile resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] decryption_profile_name Unique identifier for Decryption Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_decryption_profile.rb.html) to see an example of how to use delete_decryption_profile API.
    def delete_decryption_profile(network_firewall_policy_id, decryption_profile_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_decryption_profile.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_decryption_profile." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'decryption_profile_name' when calling delete_decryption_profile." if decryption_profile_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'decryption_profile_name' must not be blank" if OCI::Internal::Util.blank_string?(decryption_profile_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/{decryptionProfileName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{decryptionProfileName}', decryption_profile_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_decryption_profile') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Decryption Rule resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] decryption_rule_name Unique identifier for Decryption Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_decryption_rule.rb.html) to see an example of how to use delete_decryption_rule API.
    def delete_decryption_rule(network_firewall_policy_id, decryption_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_decryption_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_decryption_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'decryption_rule_name' when calling delete_decryption_rule." if decryption_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'decryption_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(decryption_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{decryptionRuleName}', decryption_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_decryption_rule') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Mapped Secret resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] mapped_secret_name Unique identifier for Mapped Secrets.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_mapped_secret.rb.html) to see an example of how to use delete_mapped_secret API.
    def delete_mapped_secret(network_firewall_policy_id, mapped_secret_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_mapped_secret.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_mapped_secret." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'mapped_secret_name' when calling delete_mapped_secret." if mapped_secret_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'mapped_secret_name' must not be blank" if OCI::Internal::Util.blank_string?(mapped_secret_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/{mappedSecretName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{mappedSecretName}', mapped_secret_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_mapped_secret') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a NAT Rule resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] nat_rule_name Unique identifier for NAT Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_nat_rule.rb.html) to see an example of how to use delete_nat_rule API.
    def delete_nat_rule(network_firewall_policy_id, nat_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_nat_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_nat_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'nat_rule_name' when calling delete_nat_rule." if nat_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'nat_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(nat_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/natRules/{natRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{natRuleName}', nat_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_nat_rule') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a NetworkFirewall resource by identifier
    # @param [String] network_firewall_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Network Firewall resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_network_firewall.rb.html) to see an example of how to use delete_network_firewall API.
    def delete_network_firewall(network_firewall_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_network_firewall.' if logger

      raise "Missing the required parameter 'network_firewall_id' when calling delete_network_firewall." if network_firewall_id.nil?
      raise "Parameter value for 'network_firewall_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_id)

      path = '/networkFirewalls/{networkFirewallId}'.sub('{networkFirewallId}', network_firewall_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_network_firewall') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a NetworkFirewallPolicy resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_network_firewall_policy.rb.html) to see an example of how to use delete_network_firewall_policy API.
    def delete_network_firewall_policy(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_network_firewall_policy.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_network_firewall_policy." if network_firewall_policy_id.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_network_firewall_policy') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Security Rule resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] security_rule_name Unique identifier for Security Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_security_rule.rb.html) to see an example of how to use delete_security_rule API.
    def delete_security_rule(network_firewall_policy_id, security_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_security_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_security_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'security_rule_name' when calling delete_security_rule." if security_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'security_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(security_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/{securityRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{securityRuleName}', security_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_security_rule') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Service resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] service_name Unique identifier for Services.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_service.rb.html) to see an example of how to use delete_service API.
    def delete_service(network_firewall_policy_id, service_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_service.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_service." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'service_name' when calling delete_service." if service_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'service_name' must not be blank" if OCI::Internal::Util.blank_string?(service_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/services/{serviceName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{serviceName}', service_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_service') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a ServiceList resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] service_list_name Unique name identifier for Service Lists in the scope of Network Firewall Policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_service_list.rb.html) to see an example of how to use delete_service_list API.
    def delete_service_list(network_firewall_policy_id, service_list_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_service_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_service_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'service_list_name' when calling delete_service_list." if service_list_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'service_list_name' must not be blank" if OCI::Internal::Util.blank_string?(service_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/{serviceListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{serviceListName}', service_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_service_list') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a tunnel inspection rule resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] tunnel_inspection_rule_name Unique identifier for Tunnel Inspection Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_tunnel_inspection_rule.rb.html) to see an example of how to use delete_tunnel_inspection_rule API.
    def delete_tunnel_inspection_rule(network_firewall_policy_id, tunnel_inspection_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_tunnel_inspection_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_tunnel_inspection_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'tunnel_inspection_rule_name' when calling delete_tunnel_inspection_rule." if tunnel_inspection_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'tunnel_inspection_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(tunnel_inspection_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{tunnelInspectionRuleName}', tunnel_inspection_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_tunnel_inspection_rule') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Url List resource with the given identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] url_list_name Unique name identifier for url lists in the scope of Network Firewall Policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/delete_url_list.rb.html) to see an example of how to use delete_url_list API.
    def delete_url_list(network_firewall_policy_id, url_list_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#delete_url_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling delete_url_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'url_list_name' when calling delete_url_list." if url_list_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'url_list_name' must not be blank" if OCI::Internal::Util.blank_string?(url_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/{urlListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{urlListName}', url_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#delete_url_list') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Address List by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] address_list_name Unique identifier for address lists.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::AddressList AddressList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_address_list.rb.html) to see an example of how to use get_address_list API.
    def get_address_list(network_firewall_policy_id, address_list_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_address_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_address_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'address_list_name' when calling get_address_list." if address_list_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'address_list_name' must not be blank" if OCI::Internal::Util.blank_string?(address_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/{addressListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{addressListName}', address_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_address_list') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::AddressList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Application by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] application_name Unique identifier for Applications.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::Application Application}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_application.rb.html) to see an example of how to use get_application API.
    def get_application(network_firewall_policy_id, application_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_application.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_application." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'application_name' when calling get_application." if application_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'application_name' must not be blank" if OCI::Internal::Util.blank_string?(application_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applications/{applicationName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{applicationName}', application_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_application') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::Application'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get ApplicationGroup by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] application_group_name Unique name identifier for Application Lists in the scope of Network Firewall Policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ApplicationGroup ApplicationGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_application_group.rb.html) to see an example of how to use get_application_group API.
    def get_application_group(network_firewall_policy_id, application_group_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_application_group.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_application_group." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'application_group_name' when calling get_application_group." if application_group_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'application_group_name' must not be blank" if OCI::Internal::Util.blank_string?(application_group_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/{applicationGroupName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{applicationGroupName}', application_group_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_application_group') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ApplicationGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Decryption Profile by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] decryption_profile_name Unique identifier for Decryption Profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionProfile DecryptionProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_decryption_profile.rb.html) to see an example of how to use get_decryption_profile API.
    def get_decryption_profile(network_firewall_policy_id, decryption_profile_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_decryption_profile.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_decryption_profile." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'decryption_profile_name' when calling get_decryption_profile." if decryption_profile_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'decryption_profile_name' must not be blank" if OCI::Internal::Util.blank_string?(decryption_profile_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/{decryptionProfileName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{decryptionProfileName}', decryption_profile_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_decryption_profile') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Decryption Rule by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] decryption_rule_name Unique identifier for Decryption Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionRule DecryptionRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_decryption_rule.rb.html) to see an example of how to use get_decryption_rule API.
    def get_decryption_rule(network_firewall_policy_id, decryption_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_decryption_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_decryption_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'decryption_rule_name' when calling get_decryption_rule." if decryption_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'decryption_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(decryption_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{decryptionRuleName}', decryption_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_decryption_rule') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Mapped Secret by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] mapped_secret_name Unique identifier for Mapped Secrets.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::MappedSecret MappedSecret}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_mapped_secret.rb.html) to see an example of how to use get_mapped_secret API.
    def get_mapped_secret(network_firewall_policy_id, mapped_secret_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_mapped_secret.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_mapped_secret." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'mapped_secret_name' when calling get_mapped_secret." if mapped_secret_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'mapped_secret_name' must not be blank" if OCI::Internal::Util.blank_string?(mapped_secret_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/{mappedSecretName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{mappedSecretName}', mapped_secret_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_mapped_secret') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::MappedSecret'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get NAT Rule by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] nat_rule_name Unique identifier for NAT Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NatRule NatRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_nat_rule.rb.html) to see an example of how to use get_nat_rule API.
    def get_nat_rule(network_firewall_policy_id, nat_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_nat_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_nat_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'nat_rule_name' when calling get_nat_rule." if nat_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'nat_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(nat_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/natRules/{natRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{natRuleName}', nat_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_nat_rule') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NatRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a NetworkFirewall by identifier
    # @param [String] network_firewall_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Network Firewall resource.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewall NetworkFirewall}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_network_firewall.rb.html) to see an example of how to use get_network_firewall API.
    def get_network_firewall(network_firewall_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_network_firewall.' if logger

      raise "Missing the required parameter 'network_firewall_id' when calling get_network_firewall." if network_firewall_id.nil?
      raise "Parameter value for 'network_firewall_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_id)

      path = '/networkFirewalls/{networkFirewallId}'.sub('{networkFirewallId}', network_firewall_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_network_firewall') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewall'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a NetworkFirewallPolicy given the network firewall policy identifier.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewallPolicy NetworkFirewallPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_network_firewall_policy.rb.html) to see an example of how to use get_network_firewall_policy API.
    def get_network_firewall_policy(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_network_firewall_policy.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_network_firewall_policy." if network_firewall_policy_id.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_network_firewall_policy') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewallPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Security Rule by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] security_rule_name Unique identifier for Security Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::SecurityRule SecurityRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_security_rule.rb.html) to see an example of how to use get_security_rule API.
    def get_security_rule(network_firewall_policy_id, security_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_security_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_security_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'security_rule_name' when calling get_security_rule." if security_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'security_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(security_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/{securityRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{securityRuleName}', security_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_security_rule') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::SecurityRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Service by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] service_name Unique identifier for Services.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::Service Service}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_service.rb.html) to see an example of how to use get_service API.
    def get_service(network_firewall_policy_id, service_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_service.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_service." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'service_name' when calling get_service." if service_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'service_name' must not be blank" if OCI::Internal::Util.blank_string?(service_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/services/{serviceName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{serviceName}', service_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_service') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::Service'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get ServiceList by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] service_list_name Unique name identifier for Service Lists in the scope of Network Firewall Policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ServiceList ServiceList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_service_list.rb.html) to see an example of how to use get_service_list API.
    def get_service_list(network_firewall_policy_id, service_list_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_service_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_service_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'service_list_name' when calling get_service_list." if service_list_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'service_list_name' must not be blank" if OCI::Internal::Util.blank_string?(service_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/{serviceListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{serviceListName}', service_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_service_list') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ServiceList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get tunnel inspection rule by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] tunnel_inspection_rule_name Unique identifier for Tunnel Inspection Rules in the network firewall policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::TunnelInspectionRule TunnelInspectionRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_tunnel_inspection_rule.rb.html) to see an example of how to use get_tunnel_inspection_rule API.
    def get_tunnel_inspection_rule(network_firewall_policy_id, tunnel_inspection_rule_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_tunnel_inspection_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_tunnel_inspection_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'tunnel_inspection_rule_name' when calling get_tunnel_inspection_rule." if tunnel_inspection_rule_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'tunnel_inspection_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(tunnel_inspection_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{tunnelInspectionRuleName}', tunnel_inspection_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_tunnel_inspection_rule') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::TunnelInspectionRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Url List by the given name in the context of network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] url_list_name Unique name identifier for url lists in the scope of Network Firewall Policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::UrlList UrlList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_url_list.rb.html) to see an example of how to use get_url_list API.
    def get_url_list(network_firewall_policy_id, url_list_name, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_url_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling get_url_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'url_list_name' when calling get_url_list." if url_list_name.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'url_list_name' must not be blank" if OCI::Internal::Util.blank_string?(url_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/{urlListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{urlListName}', url_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_url_list') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::UrlList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the status of the work request with the given ID.
    # @param [String] work_request_id The ID of the asynchronous request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::WorkRequest WorkRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/get_work_request.rb.html) to see an example of how to use get_work_request API.
    def get_work_request(work_request_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#get_work_request.' if logger

      raise "Missing the required parameter 'work_request_id' when calling get_work_request." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#get_work_request') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::WorkRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Network Firewall Policies.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::AddressListSummaryCollection AddressListSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_address_lists.rb.html) to see an example of how to use list_address_lists API.
    def list_address_lists(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_address_lists.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_address_lists." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_address_lists') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::AddressListSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of ApplicationGroups for the policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ApplicationGroupSummaryCollection ApplicationGroupSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_application_groups.rb.html) to see an example of how to use list_application_groups API.
    def list_application_groups(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_application_groups.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_application_groups." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_application_groups') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ApplicationGroupSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Applications for the policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ApplicationSummaryCollection ApplicationSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_applications.rb.html) to see an example of how to use list_applications API.
    def list_applications(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_applications.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_applications." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applications'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_applications') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ApplicationSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Decryption Profile for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionProfileSummaryCollection DecryptionProfileSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_decryption_profiles.rb.html) to see an example of how to use list_decryption_profiles API.
    def list_decryption_profiles(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_decryption_profiles.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_decryption_profiles." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_decryption_profiles') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionProfileSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Decryption Rule for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [Integer] :decryption_rule_priority_order Unique priority order for Decryption Rules in the network firewall policy.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionRuleSummaryCollection DecryptionRuleSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_decryption_rules.rb.html) to see an example of how to use list_decryption_rules API.
    def list_decryption_rules(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_decryption_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_decryption_rules." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:decryptionRulePriorityOrder] = opts[:decryption_rule_priority_order] if opts[:decryption_rule_priority_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_decryption_rules') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionRuleSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Mapped Secret for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::MappedSecretSummaryCollection MappedSecretSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_mapped_secrets.rb.html) to see an example of how to use list_mapped_secrets API.
    def list_mapped_secrets(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_mapped_secrets.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_mapped_secrets." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_mapped_secrets') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::MappedSecretSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of NAT Rules for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [Integer] :nat_rule_priority_order Unique priority order for NAT Rules in the network firewall policy.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NatRuleCollection NatRuleCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_nat_rules.rb.html) to see an example of how to use list_nat_rules API.
    def list_nat_rules(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_nat_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_nat_rules." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/natRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:natRulePriorityOrder] = opts[:nat_rule_priority_order] if opts[:nat_rule_priority_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_nat_rules') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NatRuleCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Network Firewall Policies.
    #
    # @param [String] compartment_id The ID of the compartment in which to list resources.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [String] :id Unique Network Firewall Policy identifier
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :lifecycle_state A filter to return only resources with a lifecycleState matching the given value.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewallPolicySummaryCollection NetworkFirewallPolicySummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_network_firewall_policies.rb.html) to see an example of how to use list_network_firewall_policies API.
    def list_network_firewall_policies(compartment_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_network_firewall_policies.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_network_firewall_policies." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::NetworkFirewall::Models::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::NetworkFirewall::Models::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/networkFirewallPolicies'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_network_firewall_policies') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewallPolicySummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of NetworkFirewalls.
    #
    # @param [String] compartment_id The ID of the compartment in which to list resources.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [String] :network_firewall_policy_id A filter to return only resources that match the entire networkFirewallPolicyId given.
    # @option opts [String] :id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Network Firewall resource.
    # @option opts [String] :availability_domain A filter to return only resources that are present within the specified availability domain.
    #   To get a list of availability domains for a tenancy, use {#list_availability_domains list_availability_domains} operation.
    #   Example: `kIdk:PHX-AD-1`
    #
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :lifecycle_state A filter to return only resources with a lifecycleState matching the given value.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NetworkFirewallCollection NetworkFirewallCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_network_firewalls.rb.html) to see an example of how to use list_network_firewalls API.
    def list_network_firewalls(compartment_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_network_firewalls.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_network_firewalls." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::NetworkFirewall::Models::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::NetworkFirewall::Models::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/networkFirewalls'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:networkFirewallPolicyId] = opts[:network_firewall_policy_id] if opts[:network_firewall_policy_id]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:availabilityDomain] = opts[:availability_domain] if opts[:availability_domain]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_network_firewalls') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NetworkFirewallCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Security Rule for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [Integer] :security_rule_priority_order Unique priority order for Security Rules in the network firewall policy.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::SecurityRuleSummaryCollection SecurityRuleSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_security_rules.rb.html) to see an example of how to use list_security_rules API.
    def list_security_rules(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_security_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_security_rules." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:securityRulePriorityOrder] = opts[:security_rule_priority_order] if opts[:security_rule_priority_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_security_rules') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::SecurityRuleSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of ServiceLists for the policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ServiceListSummaryCollection ServiceListSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_service_lists.rb.html) to see an example of how to use list_service_lists API.
    def list_service_lists(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_service_lists.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_service_lists." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_service_lists') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ServiceListSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of Services for the policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ServiceSummaryCollection ServiceSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_services.rb.html) to see an example of how to use list_services API.
    def list_services(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_services.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_services." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/services'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_services') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ServiceSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of tunnel inspection rules for the network firewall policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @option opts [Integer] :tunnel_inspection_rule_priority_order Unique priority order for Tunnel Inspection rules in the network firewall policy.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::TunnelInspectionRuleSummaryCollection TunnelInspectionRuleSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_tunnel_inspection_rules.rb.html) to see an example of how to use list_tunnel_inspection_rules API.
    def list_tunnel_inspection_rules(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_tunnel_inspection_rules.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_tunnel_inspection_rules." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:tunnelInspectionRulePriorityOrder] = opts[:tunnel_inspection_rule_priority_order] if opts[:tunnel_inspection_rule_priority_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_tunnel_inspection_rules') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::TunnelInspectionRuleSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of URL lists for the Network Firewall Policy.
    #
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :display_name A filter to return only resources that match the entire display name given.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::UrlListSummaryCollection UrlListSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_url_lists.rb.html) to see an example of how to use list_url_lists API.
    def list_url_lists(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_url_lists.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling list_url_lists." if network_firewall_policy_id.nil?

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_url_lists') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::UrlListSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Return a (paginated) list of errors for a given work request.
    #
    # @param [String] work_request_id The ID of the asynchronous request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeAccepted is descending.
    #    (default to timeAccepted)
    #   Allowed values are: timeAccepted
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::WorkRequestErrorCollection WorkRequestErrorCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_work_request_errors.rb.html) to see an example of how to use list_work_request_errors API.
    def list_work_request_errors(work_request_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_work_request_errors.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_work_request_errors." if work_request_id.nil?

      if opts[:sort_by] && !%w[timeAccepted].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeAccepted.'
      end

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}/errors'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_work_request_errors') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::WorkRequestErrorCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Return a (paginated) list of logs for a given work request.
    #
    # @param [String] work_request_id The ID of the asynchronous request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeAccepted is descending.
    #    (default to timeAccepted)
    #   Allowed values are: timeAccepted
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::WorkRequestLogEntryCollection WorkRequestLogEntryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_work_request_logs.rb.html) to see an example of how to use list_work_request_logs API.
    def list_work_request_logs(work_request_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_work_request_logs.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_work_request_logs." if work_request_id.nil?

      if opts[:sort_by] && !%w[timeAccepted].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeAccepted.'
      end

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}/logs'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_work_request_logs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::WorkRequestLogEntryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the work requests in a compartment.
    #
    # @param [String] compartment_id The ID of the compartment in which to list resources.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :work_request_id The ID of the asynchronous work request.
    # @option opts [String] :status A filter to return only resources their lifecycleState matches the given OperationStatus.
    # @option opts [String] :resource_id The ID of the resource affected by the work request.
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the `opc-next-page` or `opc-prev-page` header field of a previous response.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeAccepted is descending.
    #    (default to timeAccepted)
    #   Allowed values are: timeAccepted
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::WorkRequestSummaryCollection WorkRequestSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/list_work_requests.rb.html) to see an example of how to use list_work_requests API.
    def list_work_requests(compartment_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#list_work_requests.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_work_requests." if compartment_id.nil?

      if opts[:status] && !OCI::NetworkFirewall::Models::OPERATION_STATUS_ENUM.include?(opts[:status])
        raise 'Invalid value for "status", must be one of the values in OCI::NetworkFirewall::Models::OPERATION_STATUS_ENUM.'
      end

      if opts[:sort_order] && !OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::NetworkFirewall::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeAccepted].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeAccepted.'
      end

      path = '/workRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:workRequestId] = opts[:work_request_id] if opts[:work_request_id]
      query_params[:status] = opts[:status] if opts[:status]
      query_params[:resourceId] = opts[:resource_id] if opts[:resource_id]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#list_work_requests') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::WorkRequestSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a NetworkFirewallPolicy resource from one version to latest version. When provided, If-Match is checked against ETag values of the resource.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/migrate_network_firewall_policy.rb.html) to see an example of how to use migrate_network_firewall_policy API.
    def migrate_network_firewall_policy(network_firewall_policy_id, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#migrate_network_firewall_policy.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling migrate_network_firewall_policy." if network_firewall_policy_id.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/actions/migrate'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#migrate_network_firewall_policy') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Address list with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] address_list_name Unique identifier for address lists.
    # @param [OCI::NetworkFirewall::Models::UpdateAddressListDetails] update_address_list_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::AddressList AddressList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_address_list.rb.html) to see an example of how to use update_address_list API.
    def update_address_list(network_firewall_policy_id, address_list_name, update_address_list_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_address_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_address_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'address_list_name' when calling update_address_list." if address_list_name.nil?
      raise "Missing the required parameter 'update_address_list_details' when calling update_address_list." if update_address_list_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'address_list_name' must not be blank" if OCI::Internal::Util.blank_string?(address_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/addressLists/{addressListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{addressListName}', address_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_address_list_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_address_list') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::AddressList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Application with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] application_name Unique identifier for Applications.
    # @param [OCI::NetworkFirewall::Models::UpdateApplicationDetails] update_application_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::Application Application}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_application.rb.html) to see an example of how to use update_application API.
    def update_application(network_firewall_policy_id, application_name, update_application_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_application.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_application." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'application_name' when calling update_application." if application_name.nil?
      raise "Missing the required parameter 'update_application_details' when calling update_application." if update_application_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'application_name' must not be blank" if OCI::Internal::Util.blank_string?(application_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applications/{applicationName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{applicationName}', application_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_application_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_application') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::Application'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the ApplicationGroup with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] application_group_name Unique name identifier for Application Lists in the scope of Network Firewall Policy.
    # @param [OCI::NetworkFirewall::Models::UpdateApplicationGroupDetails] update_application_group_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ApplicationGroup ApplicationGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_application_group.rb.html) to see an example of how to use update_application_group API.
    def update_application_group(network_firewall_policy_id, application_group_name, update_application_group_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_application_group.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_application_group." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'application_group_name' when calling update_application_group." if application_group_name.nil?
      raise "Missing the required parameter 'update_application_group_details' when calling update_application_group." if update_application_group_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'application_group_name' must not be blank" if OCI::Internal::Util.blank_string?(application_group_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/applicationGroups/{applicationGroupName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{applicationGroupName}', application_group_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_application_group_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_application_group') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ApplicationGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Decryption Profile with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] decryption_profile_name Unique identifier for Decryption Profiles.
    # @param [OCI::NetworkFirewall::Models::UpdateDecryptionProfileDetails] update_decryption_profile_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionProfile DecryptionProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_decryption_profile.rb.html) to see an example of how to use update_decryption_profile API.
    def update_decryption_profile(network_firewall_policy_id, decryption_profile_name, update_decryption_profile_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_decryption_profile.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_decryption_profile." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'decryption_profile_name' when calling update_decryption_profile." if decryption_profile_name.nil?
      raise "Missing the required parameter 'update_decryption_profile_details' when calling update_decryption_profile." if update_decryption_profile_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'decryption_profile_name' must not be blank" if OCI::Internal::Util.blank_string?(decryption_profile_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionProfiles/{decryptionProfileName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{decryptionProfileName}', decryption_profile_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_decryption_profile_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_decryption_profile') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Decryption Rule with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] decryption_rule_name Unique identifier for Decryption Rules in the network firewall policy.
    # @param [OCI::NetworkFirewall::Models::UpdateDecryptionRuleDetails] update_decryption_rule_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::DecryptionRule DecryptionRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_decryption_rule.rb.html) to see an example of how to use update_decryption_rule API.
    def update_decryption_rule(network_firewall_policy_id, decryption_rule_name, update_decryption_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_decryption_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_decryption_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'decryption_rule_name' when calling update_decryption_rule." if decryption_rule_name.nil?
      raise "Missing the required parameter 'update_decryption_rule_details' when calling update_decryption_rule." if update_decryption_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'decryption_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(decryption_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/decryptionRules/{decryptionRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{decryptionRuleName}', decryption_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_decryption_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_decryption_rule') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::DecryptionRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Mapped Secret with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] mapped_secret_name Unique identifier for Mapped Secrets.
    # @param [OCI::NetworkFirewall::Models::UpdateMappedSecretDetails] update_mapped_secret_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::MappedSecret MappedSecret}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_mapped_secret.rb.html) to see an example of how to use update_mapped_secret API.
    def update_mapped_secret(network_firewall_policy_id, mapped_secret_name, update_mapped_secret_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_mapped_secret.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_mapped_secret." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'mapped_secret_name' when calling update_mapped_secret." if mapped_secret_name.nil?
      raise "Missing the required parameter 'update_mapped_secret_details' when calling update_mapped_secret." if update_mapped_secret_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'mapped_secret_name' must not be blank" if OCI::Internal::Util.blank_string?(mapped_secret_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/mappedSecrets/{mappedSecretName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{mappedSecretName}', mapped_secret_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_mapped_secret_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_mapped_secret') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::MappedSecret'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the NAT Rule with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] nat_rule_name Unique identifier for NAT Rules in the network firewall policy.
    # @param [OCI::NetworkFirewall::Models::UpdateNatRuleDetails] update_nat_rule_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::NatRule NatRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_nat_rule.rb.html) to see an example of how to use update_nat_rule API.
    def update_nat_rule(network_firewall_policy_id, nat_rule_name, update_nat_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_nat_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_nat_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'nat_rule_name' when calling update_nat_rule." if nat_rule_name.nil?
      raise "Missing the required parameter 'update_nat_rule_details' when calling update_nat_rule." if update_nat_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'nat_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(nat_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/natRules/{natRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{natRuleName}', nat_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_nat_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_nat_rule') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::NatRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the NetworkFirewall
    # @param [String] network_firewall_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Network Firewall resource.
    # @param [OCI::NetworkFirewall::Models::UpdateNetworkFirewallDetails] update_network_firewall_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_network_firewall.rb.html) to see an example of how to use update_network_firewall API.
    def update_network_firewall(network_firewall_id, update_network_firewall_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_network_firewall.' if logger

      raise "Missing the required parameter 'network_firewall_id' when calling update_network_firewall." if network_firewall_id.nil?
      raise "Missing the required parameter 'update_network_firewall_details' when calling update_network_firewall." if update_network_firewall_details.nil?
      raise "Parameter value for 'network_firewall_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_id)

      path = '/networkFirewalls/{networkFirewallId}'.sub('{networkFirewallId}', network_firewall_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_network_firewall_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_network_firewall') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the NetworkFirewallPolicy
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [OCI::NetworkFirewall::Models::UpdateNetworkFirewallPolicyDetails] update_network_firewall_policy_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_network_firewall_policy.rb.html) to see an example of how to use update_network_firewall_policy API.
    def update_network_firewall_policy(network_firewall_policy_id, update_network_firewall_policy_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_network_firewall_policy.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_network_firewall_policy." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'update_network_firewall_policy_details' when calling update_network_firewall_policy." if update_network_firewall_policy_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_network_firewall_policy_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_network_firewall_policy') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Security Rule with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] security_rule_name Unique identifier for Security Rules in the network firewall policy.
    # @param [OCI::NetworkFirewall::Models::UpdateSecurityRuleDetails] update_security_rule_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::SecurityRule SecurityRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_security_rule.rb.html) to see an example of how to use update_security_rule API.
    def update_security_rule(network_firewall_policy_id, security_rule_name, update_security_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_security_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_security_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'security_rule_name' when calling update_security_rule." if security_rule_name.nil?
      raise "Missing the required parameter 'update_security_rule_details' when calling update_security_rule." if update_security_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'security_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(security_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/securityRules/{securityRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{securityRuleName}', security_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_security_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_security_rule') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::SecurityRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Service with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] service_name Unique identifier for Services.
    # @param [OCI::NetworkFirewall::Models::UpdateServiceDetails] update_service_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::Service Service}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_service.rb.html) to see an example of how to use update_service API.
    def update_service(network_firewall_policy_id, service_name, update_service_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_service.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_service." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'service_name' when calling update_service." if service_name.nil?
      raise "Missing the required parameter 'update_service_details' when calling update_service." if update_service_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'service_name' must not be blank" if OCI::Internal::Util.blank_string?(service_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/services/{serviceName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{serviceName}', service_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_service_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_service') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::Service'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the ServiceList with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] service_list_name Unique name identifier for Service Lists in the scope of Network Firewall Policy.
    # @param [OCI::NetworkFirewall::Models::UpdateServiceListDetails] update_service_list_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::ServiceList ServiceList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_service_list.rb.html) to see an example of how to use update_service_list API.
    def update_service_list(network_firewall_policy_id, service_list_name, update_service_list_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_service_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_service_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'service_list_name' when calling update_service_list." if service_list_name.nil?
      raise "Missing the required parameter 'update_service_list_details' when calling update_service_list." if update_service_list_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'service_list_name' must not be blank" if OCI::Internal::Util.blank_string?(service_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/serviceLists/{serviceListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{serviceListName}', service_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_service_list_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_service_list') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::ServiceList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the tunnel inspection rule with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] tunnel_inspection_rule_name Unique identifier for Tunnel Inspection Rules in the network firewall policy.
    # @param [OCI::NetworkFirewall::Models::UpdateTunnelInspectionRuleDetails] update_tunnel_inspection_rule_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::TunnelInspectionRule TunnelInspectionRule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_tunnel_inspection_rule.rb.html) to see an example of how to use update_tunnel_inspection_rule API.
    def update_tunnel_inspection_rule(network_firewall_policy_id, tunnel_inspection_rule_name, update_tunnel_inspection_rule_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_tunnel_inspection_rule.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_tunnel_inspection_rule." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'tunnel_inspection_rule_name' when calling update_tunnel_inspection_rule." if tunnel_inspection_rule_name.nil?
      raise "Missing the required parameter 'update_tunnel_inspection_rule_details' when calling update_tunnel_inspection_rule." if update_tunnel_inspection_rule_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'tunnel_inspection_rule_name' must not be blank" if OCI::Internal::Util.blank_string?(tunnel_inspection_rule_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/tunnelInspectionRules/{tunnelInspectionRuleName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{tunnelInspectionRuleName}', tunnel_inspection_rule_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_tunnel_inspection_rule_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_tunnel_inspection_rule') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::TunnelInspectionRule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Url list with the given name in the network firewall policy.
    # @param [String] network_firewall_policy_id Unique Network Firewall Policy identifier
    # @param [String] url_list_name Unique name identifier for url lists in the scope of Network Firewall Policy.
    # @param [OCI::NetworkFirewall::Models::UpdateUrlListDetails] update_url_list_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::NetworkFirewall::Models::UrlList UrlList}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/networkfirewall/update_url_list.rb.html) to see an example of how to use update_url_list API.
    def update_url_list(network_firewall_policy_id, url_list_name, update_url_list_details, opts = {})
      logger.debug 'Calling operation NetworkFirewallClient#update_url_list.' if logger

      raise "Missing the required parameter 'network_firewall_policy_id' when calling update_url_list." if network_firewall_policy_id.nil?
      raise "Missing the required parameter 'url_list_name' when calling update_url_list." if url_list_name.nil?
      raise "Missing the required parameter 'update_url_list_details' when calling update_url_list." if update_url_list_details.nil?
      raise "Parameter value for 'network_firewall_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(network_firewall_policy_id)
      raise "Parameter value for 'url_list_name' must not be blank" if OCI::Internal::Util.blank_string?(url_list_name)

      path = '/networkFirewallPolicies/{networkFirewallPolicyId}/urlLists/{urlListName}'.sub('{networkFirewallPolicyId}', network_firewall_policy_id.to_s).sub('{urlListName}', url_list_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_url_list_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'NetworkFirewallClient#update_url_list') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::NetworkFirewall::Models::UrlList'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
