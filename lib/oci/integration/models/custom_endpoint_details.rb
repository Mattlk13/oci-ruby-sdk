# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190131
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for a custom endpoint for the integration instance.
  class Integration::Models::CustomEndpointDetails
    MANAGED_TYPE_ENUM = [
      MANAGED_TYPE_ORACLE_MANAGED = 'ORACLE_MANAGED'.freeze,
      MANAGED_TYPE_CUSTOMER_MANAGED = 'CUSTOMER_MANAGED'.freeze,
      MANAGED_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DNS_TYPE_ENUM = [
      DNS_TYPE_OCI = 'OCI'.freeze,
      DNS_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** A custom hostname to be used for the integration instance URL, in FQDN format.
    # @return [String]
    attr_accessor :hostname

    # Indicates if custom endpoint is managed by oracle or customer.
    # @return [String]
    attr_reader :managed_type

    # DNS Zone name
    # @return [String]
    attr_accessor :dns_zone_name

    # Type of DNS.
    # @return [String]
    attr_reader :dns_type

    # Optional OCID of a vault/secret containing a private SSL certificate bundle to be used for the custom hostname.
    #
    # @return [String]
    attr_accessor :certificate_secret_id

    # The secret version used for the certificate-secret-id (if certificate-secret-id is specified).
    #
    # @return [Integer]
    attr_accessor :certificate_secret_version

    # When creating the DNS CNAME record for the custom hostname, this value must be specified in the rdata.
    #
    # @return [String]
    attr_accessor :_alias

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'hostname': :'hostname',
        'managed_type': :'managedType',
        'dns_zone_name': :'dnsZoneName',
        'dns_type': :'dnsType',
        'certificate_secret_id': :'certificateSecretId',
        'certificate_secret_version': :'certificateSecretVersion',
        '_alias': :'alias'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'hostname': :'String',
        'managed_type': :'String',
        'dns_zone_name': :'String',
        'dns_type': :'String',
        'certificate_secret_id': :'String',
        'certificate_secret_version': :'Integer',
        '_alias': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :hostname The value to assign to the {#hostname} property
    # @option attributes [String] :managed_type The value to assign to the {#managed_type} property
    # @option attributes [String] :dns_zone_name The value to assign to the {#dns_zone_name} property
    # @option attributes [String] :dns_type The value to assign to the {#dns_type} property
    # @option attributes [String] :certificate_secret_id The value to assign to the {#certificate_secret_id} property
    # @option attributes [Integer] :certificate_secret_version The value to assign to the {#certificate_secret_version} property
    # @option attributes [String] :_alias The value to assign to the {#_alias} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.hostname = attributes[:'hostname'] if attributes[:'hostname']

      self.managed_type = attributes[:'managedType'] if attributes[:'managedType']

      raise 'You cannot provide both :managedType and :managed_type' if attributes.key?(:'managedType') && attributes.key?(:'managed_type')

      self.managed_type = attributes[:'managed_type'] if attributes[:'managed_type']

      self.dns_zone_name = attributes[:'dnsZoneName'] if attributes[:'dnsZoneName']

      raise 'You cannot provide both :dnsZoneName and :dns_zone_name' if attributes.key?(:'dnsZoneName') && attributes.key?(:'dns_zone_name')

      self.dns_zone_name = attributes[:'dns_zone_name'] if attributes[:'dns_zone_name']

      self.dns_type = attributes[:'dnsType'] if attributes[:'dnsType']

      raise 'You cannot provide both :dnsType and :dns_type' if attributes.key?(:'dnsType') && attributes.key?(:'dns_type')

      self.dns_type = attributes[:'dns_type'] if attributes[:'dns_type']

      self.certificate_secret_id = attributes[:'certificateSecretId'] if attributes[:'certificateSecretId']

      raise 'You cannot provide both :certificateSecretId and :certificate_secret_id' if attributes.key?(:'certificateSecretId') && attributes.key?(:'certificate_secret_id')

      self.certificate_secret_id = attributes[:'certificate_secret_id'] if attributes[:'certificate_secret_id']

      self.certificate_secret_version = attributes[:'certificateSecretVersion'] if attributes[:'certificateSecretVersion']

      raise 'You cannot provide both :certificateSecretVersion and :certificate_secret_version' if attributes.key?(:'certificateSecretVersion') && attributes.key?(:'certificate_secret_version')

      self.certificate_secret_version = attributes[:'certificate_secret_version'] if attributes[:'certificate_secret_version']

      self._alias = attributes[:'alias'] if attributes[:'alias']

      raise 'You cannot provide both :alias and :_alias' if attributes.key?(:'alias') && attributes.key?(:'_alias')

      self._alias = attributes[:'_alias'] if attributes[:'_alias']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] managed_type Object to be assigned
    def managed_type=(managed_type)
      # rubocop:disable Style/ConditionalAssignment
      if managed_type && !MANAGED_TYPE_ENUM.include?(managed_type)
        OCI.logger.debug("Unknown value for 'managed_type' [" + managed_type + "]. Mapping to 'MANAGED_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @managed_type = MANAGED_TYPE_UNKNOWN_ENUM_VALUE
      else
        @managed_type = managed_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dns_type Object to be assigned
    def dns_type=(dns_type)
      # rubocop:disable Style/ConditionalAssignment
      if dns_type && !DNS_TYPE_ENUM.include?(dns_type)
        OCI.logger.debug("Unknown value for 'dns_type' [" + dns_type + "]. Mapping to 'DNS_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @dns_type = DNS_TYPE_UNKNOWN_ENUM_VALUE
      else
        @dns_type = dns_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        hostname == other.hostname &&
        managed_type == other.managed_type &&
        dns_zone_name == other.dns_zone_name &&
        dns_type == other.dns_type &&
        certificate_secret_id == other.certificate_secret_id &&
        certificate_secret_version == other.certificate_secret_version &&
        _alias == other._alias
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [hostname, managed_type, dns_zone_name, dns_type, certificate_secret_id, certificate_secret_version, _alias].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
