# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220618
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
  #
  class Desktops::Models::DesktopDevicePolicy
    CLIPBOARD_MODE_ENUM = [
      CLIPBOARD_MODE_NONE = 'NONE'.freeze,
      CLIPBOARD_MODE_TODESKTOP = 'TODESKTOP'.freeze,
      CLIPBOARD_MODE_FROMDESKTOP = 'FROMDESKTOP'.freeze,
      CLIPBOARD_MODE_FULL = 'FULL'.freeze,
      CLIPBOARD_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUDIO_MODE_ENUM = [
      AUDIO_MODE_NONE = 'NONE'.freeze,
      AUDIO_MODE_TODESKTOP = 'TODESKTOP'.freeze,
      AUDIO_MODE_FROMDESKTOP = 'FROMDESKTOP'.freeze,
      AUDIO_MODE_FULL = 'FULL'.freeze,
      AUDIO_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CDM_MODE_ENUM = [
      CDM_MODE_NONE = 'NONE'.freeze,
      CDM_MODE_READONLY = 'READONLY'.freeze,
      CDM_MODE_FULL = 'FULL'.freeze,
      CDM_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The clipboard mode.
    # NONE: No access to the local clipboard is permitted.
    # TODESKTOP: The clipboard can be used to transfer data to the desktop only.
    # FROMDESKTOP: The clipboard can be used to transfer data from the desktop only.
    # FULL: The clipboard can be used to transfer data to and from the desktop.
    #
    # @return [String]
    attr_reader :clipboard_mode

    # **[Required]** The audio mode.
    # NONE: No access to the local audio devices is permitted.
    # TODESKTOP: The user may record audio on their desktop.
    # FROMDESKTOP: The user may play audio on their desktop.
    # FULL: The user may play and record audio on their desktop.
    #
    # @return [String]
    attr_reader :audio_mode

    # **[Required]** The client local drive access mode.
    # NONE: No access to local drives permitted.
    # READONLY: The user may read from local drives on their desktop.
    # FULL: The user may read from and write to their local drives on their desktop.
    #
    # @return [String]
    attr_reader :cdm_mode

    # **[Required]** Indicates whether printing is enabled.
    # @return [BOOLEAN]
    attr_accessor :is_printing_enabled

    # **[Required]** Indicates whether the pointer is enabled.
    # @return [BOOLEAN]
    attr_accessor :is_pointer_enabled

    # **[Required]** Indicates whether the keyboard is enabled.
    # @return [BOOLEAN]
    attr_accessor :is_keyboard_enabled

    # **[Required]** Indicates whether the display is enabled.
    # @return [BOOLEAN]
    attr_accessor :is_display_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'clipboard_mode': :'clipboardMode',
        'audio_mode': :'audioMode',
        'cdm_mode': :'cdmMode',
        'is_printing_enabled': :'isPrintingEnabled',
        'is_pointer_enabled': :'isPointerEnabled',
        'is_keyboard_enabled': :'isKeyboardEnabled',
        'is_display_enabled': :'isDisplayEnabled'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'clipboard_mode': :'String',
        'audio_mode': :'String',
        'cdm_mode': :'String',
        'is_printing_enabled': :'BOOLEAN',
        'is_pointer_enabled': :'BOOLEAN',
        'is_keyboard_enabled': :'BOOLEAN',
        'is_display_enabled': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :clipboard_mode The value to assign to the {#clipboard_mode} property
    # @option attributes [String] :audio_mode The value to assign to the {#audio_mode} property
    # @option attributes [String] :cdm_mode The value to assign to the {#cdm_mode} property
    # @option attributes [BOOLEAN] :is_printing_enabled The value to assign to the {#is_printing_enabled} property
    # @option attributes [BOOLEAN] :is_pointer_enabled The value to assign to the {#is_pointer_enabled} property
    # @option attributes [BOOLEAN] :is_keyboard_enabled The value to assign to the {#is_keyboard_enabled} property
    # @option attributes [BOOLEAN] :is_display_enabled The value to assign to the {#is_display_enabled} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.clipboard_mode = attributes[:'clipboardMode'] if attributes[:'clipboardMode']

      raise 'You cannot provide both :clipboardMode and :clipboard_mode' if attributes.key?(:'clipboardMode') && attributes.key?(:'clipboard_mode')

      self.clipboard_mode = attributes[:'clipboard_mode'] if attributes[:'clipboard_mode']

      self.audio_mode = attributes[:'audioMode'] if attributes[:'audioMode']

      raise 'You cannot provide both :audioMode and :audio_mode' if attributes.key?(:'audioMode') && attributes.key?(:'audio_mode')

      self.audio_mode = attributes[:'audio_mode'] if attributes[:'audio_mode']

      self.cdm_mode = attributes[:'cdmMode'] if attributes[:'cdmMode']

      raise 'You cannot provide both :cdmMode and :cdm_mode' if attributes.key?(:'cdmMode') && attributes.key?(:'cdm_mode')

      self.cdm_mode = attributes[:'cdm_mode'] if attributes[:'cdm_mode']

      self.is_printing_enabled = attributes[:'isPrintingEnabled'] unless attributes[:'isPrintingEnabled'].nil?

      raise 'You cannot provide both :isPrintingEnabled and :is_printing_enabled' if attributes.key?(:'isPrintingEnabled') && attributes.key?(:'is_printing_enabled')

      self.is_printing_enabled = attributes[:'is_printing_enabled'] unless attributes[:'is_printing_enabled'].nil?

      self.is_pointer_enabled = attributes[:'isPointerEnabled'] unless attributes[:'isPointerEnabled'].nil?

      raise 'You cannot provide both :isPointerEnabled and :is_pointer_enabled' if attributes.key?(:'isPointerEnabled') && attributes.key?(:'is_pointer_enabled')

      self.is_pointer_enabled = attributes[:'is_pointer_enabled'] unless attributes[:'is_pointer_enabled'].nil?

      self.is_keyboard_enabled = attributes[:'isKeyboardEnabled'] unless attributes[:'isKeyboardEnabled'].nil?

      raise 'You cannot provide both :isKeyboardEnabled and :is_keyboard_enabled' if attributes.key?(:'isKeyboardEnabled') && attributes.key?(:'is_keyboard_enabled')

      self.is_keyboard_enabled = attributes[:'is_keyboard_enabled'] unless attributes[:'is_keyboard_enabled'].nil?

      self.is_display_enabled = attributes[:'isDisplayEnabled'] unless attributes[:'isDisplayEnabled'].nil?

      raise 'You cannot provide both :isDisplayEnabled and :is_display_enabled' if attributes.key?(:'isDisplayEnabled') && attributes.key?(:'is_display_enabled')

      self.is_display_enabled = attributes[:'is_display_enabled'] unless attributes[:'is_display_enabled'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] clipboard_mode Object to be assigned
    def clipboard_mode=(clipboard_mode)
      # rubocop:disable Style/ConditionalAssignment
      if clipboard_mode && !CLIPBOARD_MODE_ENUM.include?(clipboard_mode)
        OCI.logger.debug("Unknown value for 'clipboard_mode' [" + clipboard_mode + "]. Mapping to 'CLIPBOARD_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @clipboard_mode = CLIPBOARD_MODE_UNKNOWN_ENUM_VALUE
      else
        @clipboard_mode = clipboard_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] audio_mode Object to be assigned
    def audio_mode=(audio_mode)
      # rubocop:disable Style/ConditionalAssignment
      if audio_mode && !AUDIO_MODE_ENUM.include?(audio_mode)
        OCI.logger.debug("Unknown value for 'audio_mode' [" + audio_mode + "]. Mapping to 'AUDIO_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @audio_mode = AUDIO_MODE_UNKNOWN_ENUM_VALUE
      else
        @audio_mode = audio_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cdm_mode Object to be assigned
    def cdm_mode=(cdm_mode)
      # rubocop:disable Style/ConditionalAssignment
      if cdm_mode && !CDM_MODE_ENUM.include?(cdm_mode)
        OCI.logger.debug("Unknown value for 'cdm_mode' [" + cdm_mode + "]. Mapping to 'CDM_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @cdm_mode = CDM_MODE_UNKNOWN_ENUM_VALUE
      else
        @cdm_mode = cdm_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        clipboard_mode == other.clipboard_mode &&
        audio_mode == other.audio_mode &&
        cdm_mode == other.cdm_mode &&
        is_printing_enabled == other.is_printing_enabled &&
        is_pointer_enabled == other.is_pointer_enabled &&
        is_keyboard_enabled == other.is_keyboard_enabled &&
        is_display_enabled == other.is_display_enabled
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [clipboard_mode, audio_mode, cdm_mode, is_printing_enabled, is_pointer_enabled, is_keyboard_enabled, is_display_enabled].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
