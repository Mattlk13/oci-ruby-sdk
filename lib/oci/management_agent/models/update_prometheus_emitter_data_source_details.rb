# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200202
require 'date'
require_relative 'update_data_source_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A Prometheus data source.
  #
  class ManagementAgent::Models::UpdatePrometheusEmitterDataSourceDetails < ManagementAgent::Models::UpdateDataSourceDetails
    # **[Required]** The url through which the Prometheus Exporter publishes its metrics. (http only)
    # @return [String]
    attr_accessor :url

    # Comma separated metric name list. The complete set of desired scraped metrics. Use this property to limit the set of metrics uploaded if required.
    # @return [String]
    attr_accessor :allow_metrics

    # The url of the network proxy that provides access to the Prometheus Exporter's endpoint (url required property).
    # @return [String]
    attr_accessor :proxy_url

    # Number in milliseconds. The timeout for connecting to the Prometheus Exporter's endpoint.
    # @return [Integer]
    attr_accessor :connection_timeout

    # Number in milliseconds. The timeout for reading the response from the Prometheus Exporter's endpoint.
    # @return [Integer]
    attr_accessor :read_timeout

    # Number in kilobytes. The limit on the data being sent, not to exceed the agent's fixed limit of 400 (KB).
    # @return [Integer]
    attr_accessor :read_data_limit_in_kilobytes

    # Number in minutes. The scraping occurs at the specified interval.
    # @return [Integer]
    attr_accessor :schedule_mins

    # OCI monitoring resource group to assign the metric to.
    # @return [String]
    attr_accessor :resource_group

    # The names of other user-supplied properties expressed as fixed values to be used as dimensions for every uploaded datapoint.
    # @return [Array<OCI::ManagementAgent::Models::MetricDimension>]
    attr_accessor :metric_dimensions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'type',
        'url': :'url',
        'allow_metrics': :'allowMetrics',
        'proxy_url': :'proxyUrl',
        'connection_timeout': :'connectionTimeout',
        'read_timeout': :'readTimeout',
        'read_data_limit_in_kilobytes': :'readDataLimitInKilobytes',
        'schedule_mins': :'scheduleMins',
        'resource_group': :'resourceGroup',
        'metric_dimensions': :'metricDimensions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'String',
        'url': :'String',
        'allow_metrics': :'String',
        'proxy_url': :'String',
        'connection_timeout': :'Integer',
        'read_timeout': :'Integer',
        'read_data_limit_in_kilobytes': :'Integer',
        'schedule_mins': :'Integer',
        'resource_group': :'String',
        'metric_dimensions': :'Array<OCI::ManagementAgent::Models::MetricDimension>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :url The value to assign to the {#url} property
    # @option attributes [String] :allow_metrics The value to assign to the {#allow_metrics} property
    # @option attributes [String] :proxy_url The value to assign to the {#proxy_url} property
    # @option attributes [Integer] :connection_timeout The value to assign to the {#connection_timeout} property
    # @option attributes [Integer] :read_timeout The value to assign to the {#read_timeout} property
    # @option attributes [Integer] :read_data_limit_in_kilobytes The value to assign to the {#read_data_limit_in_kilobytes} property
    # @option attributes [Integer] :schedule_mins The value to assign to the {#schedule_mins} property
    # @option attributes [String] :resource_group The value to assign to the {#resource_group} property
    # @option attributes [Array<OCI::ManagementAgent::Models::MetricDimension>] :metric_dimensions The value to assign to the {#metric_dimensions} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['type'] = 'PROMETHEUS_EMITTER'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.url = attributes[:'url'] if attributes[:'url']

      self.allow_metrics = attributes[:'allowMetrics'] if attributes[:'allowMetrics']
      self.allow_metrics = "*" if allow_metrics.nil? && !attributes.key?(:'allowMetrics') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :allowMetrics and :allow_metrics' if attributes.key?(:'allowMetrics') && attributes.key?(:'allow_metrics')

      self.allow_metrics = attributes[:'allow_metrics'] if attributes[:'allow_metrics']
      self.allow_metrics = "*" if allow_metrics.nil? && !attributes.key?(:'allowMetrics') && !attributes.key?(:'allow_metrics') # rubocop:disable Style/StringLiterals

      self.proxy_url = attributes[:'proxyUrl'] if attributes[:'proxyUrl']

      raise 'You cannot provide both :proxyUrl and :proxy_url' if attributes.key?(:'proxyUrl') && attributes.key?(:'proxy_url')

      self.proxy_url = attributes[:'proxy_url'] if attributes[:'proxy_url']

      self.connection_timeout = attributes[:'connectionTimeout'] if attributes[:'connectionTimeout']

      raise 'You cannot provide both :connectionTimeout and :connection_timeout' if attributes.key?(:'connectionTimeout') && attributes.key?(:'connection_timeout')

      self.connection_timeout = attributes[:'connection_timeout'] if attributes[:'connection_timeout']

      self.read_timeout = attributes[:'readTimeout'] if attributes[:'readTimeout']

      raise 'You cannot provide both :readTimeout and :read_timeout' if attributes.key?(:'readTimeout') && attributes.key?(:'read_timeout')

      self.read_timeout = attributes[:'read_timeout'] if attributes[:'read_timeout']

      self.read_data_limit_in_kilobytes = attributes[:'readDataLimitInKilobytes'] if attributes[:'readDataLimitInKilobytes']

      raise 'You cannot provide both :readDataLimitInKilobytes and :read_data_limit_in_kilobytes' if attributes.key?(:'readDataLimitInKilobytes') && attributes.key?(:'read_data_limit_in_kilobytes')

      self.read_data_limit_in_kilobytes = attributes[:'read_data_limit_in_kilobytes'] if attributes[:'read_data_limit_in_kilobytes']

      self.schedule_mins = attributes[:'scheduleMins'] if attributes[:'scheduleMins']

      raise 'You cannot provide both :scheduleMins and :schedule_mins' if attributes.key?(:'scheduleMins') && attributes.key?(:'schedule_mins')

      self.schedule_mins = attributes[:'schedule_mins'] if attributes[:'schedule_mins']

      self.resource_group = attributes[:'resourceGroup'] if attributes[:'resourceGroup']

      raise 'You cannot provide both :resourceGroup and :resource_group' if attributes.key?(:'resourceGroup') && attributes.key?(:'resource_group')

      self.resource_group = attributes[:'resource_group'] if attributes[:'resource_group']

      self.metric_dimensions = attributes[:'metricDimensions'] if attributes[:'metricDimensions']

      raise 'You cannot provide both :metricDimensions and :metric_dimensions' if attributes.key?(:'metricDimensions') && attributes.key?(:'metric_dimensions')

      self.metric_dimensions = attributes[:'metric_dimensions'] if attributes[:'metric_dimensions']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        url == other.url &&
        allow_metrics == other.allow_metrics &&
        proxy_url == other.proxy_url &&
        connection_timeout == other.connection_timeout &&
        read_timeout == other.read_timeout &&
        read_data_limit_in_kilobytes == other.read_data_limit_in_kilobytes &&
        schedule_mins == other.schedule_mins &&
        resource_group == other.resource_group &&
        metric_dimensions == other.metric_dimensions
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, url, allow_metrics, proxy_url, connection_timeout, read_timeout, read_data_limit_in_kilobytes, schedule_mins, resource_group, metric_dimensions].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
