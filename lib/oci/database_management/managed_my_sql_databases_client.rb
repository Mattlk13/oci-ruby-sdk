# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the Database Management API to monitor and manage resources such as
  # Oracle Databases, MySQL Databases, and External Database Systems.
  # For more information, see [Database Management](/iaas/database-management/home.htm).
  class DatabaseManagement::ManagedMySqlDatabasesClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new ManagedMySqlDatabasesClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20201101'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "ManagedMySqlDatabasesClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://dbmgmt.{region}.oci.{secondLevelDomain}') + '/20201101'
      logger.info "ManagedMySqlDatabasesClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the health metrics for a fleet of HeatWave clusters in a compartment.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [String] start_time The start time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [String] end_time The end time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :filter_by_metric_names The filter used to retrieve a specific set of metrics by passing the desired metric names with a comma separator. Note that, by default, the service returns all supported metrics.
    # @option opts [String] :filter_by_heat_wave_status The parameter to filter by HeatWave cluster status.
    # @option opts [String] :filter_by_heat_wave_shape The parameter to filter by HeatWave node shape.
    # @option opts [BOOLEAN] :is_heat_wave_lakehouse_enabled The parameter to filter based on whether HeatWave Lakehouse is enabled for the cluster.
    # @return [Response] A Response object with data of type {OCI::DatabaseManagement::Models::HeatWaveFleetMetrics HeatWaveFleetMetrics}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/databasemanagement/get_heat_wave_fleet_metric.rb.html) to see an example of how to use get_heat_wave_fleet_metric API.
    def get_heat_wave_fleet_metric(compartment_id, start_time, end_time, opts = {})
      logger.debug 'Calling operation ManagedMySqlDatabasesClient#get_heat_wave_fleet_metric.' if logger

      raise "Missing the required parameter 'compartment_id' when calling get_heat_wave_fleet_metric." if compartment_id.nil?
      raise "Missing the required parameter 'start_time' when calling get_heat_wave_fleet_metric." if start_time.nil?
      raise "Missing the required parameter 'end_time' when calling get_heat_wave_fleet_metric." if end_time.nil?

      if opts[:filter_by_heat_wave_status] && !OCI::DatabaseManagement::Models::HEAT_WAVE_CLUSTER_STATUS_ENUM.include?(opts[:filter_by_heat_wave_status])
        raise 'Invalid value for "filter_by_heat_wave_status", must be one of the values in OCI::DatabaseManagement::Models::HEAT_WAVE_CLUSTER_STATUS_ENUM.'
      end

      path = '/heatWaveFleetMetrics'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:startTime] = start_time
      query_params[:endTime] = end_time
      query_params[:filterByMetricNames] = opts[:filter_by_metric_names] if opts[:filter_by_metric_names]
      query_params[:filterByHeatWaveStatus] = opts[:filter_by_heat_wave_status] if opts[:filter_by_heat_wave_status]
      query_params[:filterByHeatWaveShape] = opts[:filter_by_heat_wave_shape] if opts[:filter_by_heat_wave_shape]
      query_params[:isHeatWaveLakehouseEnabled] = opts[:is_heat_wave_lakehouse_enabled] if !opts[:is_heat_wave_lakehouse_enabled].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'ManagedMySqlDatabasesClient#get_heat_wave_fleet_metric') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DatabaseManagement::Models::HeatWaveFleetMetrics'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves the general information for a specific MySQL Database.
    #
    # @param [String] managed_my_sql_database_id The OCID of the Managed MySQL Database.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DatabaseManagement::Models::ManagedMySqlDatabase ManagedMySqlDatabase}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/databasemanagement/get_managed_my_sql_database.rb.html) to see an example of how to use get_managed_my_sql_database API.
    def get_managed_my_sql_database(managed_my_sql_database_id, opts = {})
      logger.debug 'Calling operation ManagedMySqlDatabasesClient#get_managed_my_sql_database.' if logger

      raise "Missing the required parameter 'managed_my_sql_database_id' when calling get_managed_my_sql_database." if managed_my_sql_database_id.nil?
      raise "Parameter value for 'managed_my_sql_database_id' must not be blank" if OCI::Internal::Util.blank_string?(managed_my_sql_database_id)

      path = '/managedMySqlDatabases/{managedMySqlDatabaseId}'.sub('{managedMySqlDatabaseId}', managed_my_sql_database_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'ManagedMySqlDatabasesClient#get_managed_my_sql_database') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DatabaseManagement::Models::ManagedMySqlDatabase'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the health metrics for a fleet of MySQL Databases in a compartment.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [String] start_time The start time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [String] end_time The end time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :filter_by_metric_names The filter used to retrieve a specific set of metrics by passing the desired metric names with a comma separator. Note that, by default, the service returns all supported metrics.
    # @option opts [String] :filter_by_my_sql_deployment_type_param The parameter to filter by MySQL deployment type.
    # @option opts [String] :filter_by_mds_deployment_type The parameter to filter by MySQL Database System type.
    # @option opts [String] :filter_by_my_sql_database_type_param The parameter to filter by MySQL database type. Allowed values are EXTERNAL or MDS.
    # @option opts [String] :filter_by_my_sql_status The parameter to filter by MySQL Database status.
    # @option opts [String] :filter_by_my_sql_database_version The parameter to filter by MySQL database version.
    # @option opts [BOOLEAN] :is_heat_wave_enabled The parameter to filter based on whether HeatWave is enabled for the database.
    # @return [Response] A Response object with data of type {OCI::DatabaseManagement::Models::MySqlFleetMetrics MySqlFleetMetrics}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/databasemanagement/get_my_sql_fleet_metric.rb.html) to see an example of how to use get_my_sql_fleet_metric API.
    def get_my_sql_fleet_metric(compartment_id, start_time, end_time, opts = {})
      logger.debug 'Calling operation ManagedMySqlDatabasesClient#get_my_sql_fleet_metric.' if logger

      raise "Missing the required parameter 'compartment_id' when calling get_my_sql_fleet_metric." if compartment_id.nil?
      raise "Missing the required parameter 'start_time' when calling get_my_sql_fleet_metric." if start_time.nil?
      raise "Missing the required parameter 'end_time' when calling get_my_sql_fleet_metric." if end_time.nil?

      if opts[:filter_by_my_sql_deployment_type_param] && !OCI::DatabaseManagement::Models::MY_SQL_DEPLOYMENT_TYPE_ENUM.include?(opts[:filter_by_my_sql_deployment_type_param])
        raise 'Invalid value for "filter_by_my_sql_deployment_type_param", must be one of the values in OCI::DatabaseManagement::Models::MY_SQL_DEPLOYMENT_TYPE_ENUM.'
      end

      if opts[:filter_by_mds_deployment_type] && !OCI::DatabaseManagement::Models::MDS_TYPE_ENUM.include?(opts[:filter_by_mds_deployment_type])
        raise 'Invalid value for "filter_by_mds_deployment_type", must be one of the values in OCI::DatabaseManagement::Models::MDS_TYPE_ENUM.'
      end

      if opts[:filter_by_my_sql_database_type_param] && !OCI::DatabaseManagement::Models::MY_SQL_TYPE_ENUM.include?(opts[:filter_by_my_sql_database_type_param])
        raise 'Invalid value for "filter_by_my_sql_database_type_param", must be one of the values in OCI::DatabaseManagement::Models::MY_SQL_TYPE_ENUM.'
      end

      if opts[:filter_by_my_sql_status] && !OCI::DatabaseManagement::Models::DATABASE_STATUS_ENUM.include?(opts[:filter_by_my_sql_status])
        raise 'Invalid value for "filter_by_my_sql_status", must be one of the values in OCI::DatabaseManagement::Models::DATABASE_STATUS_ENUM.'
      end

      path = '/mysqlFleetMetrics'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:startTime] = start_time
      query_params[:endTime] = end_time
      query_params[:filterByMetricNames] = opts[:filter_by_metric_names] if opts[:filter_by_metric_names]
      query_params[:filterByMySqlDeploymentTypeParam] = opts[:filter_by_my_sql_deployment_type_param] if opts[:filter_by_my_sql_deployment_type_param]
      query_params[:filterByMdsDeploymentType] = opts[:filter_by_mds_deployment_type] if opts[:filter_by_mds_deployment_type]
      query_params[:filterByMySqlDatabaseTypeParam] = opts[:filter_by_my_sql_database_type_param] if opts[:filter_by_my_sql_database_type_param]
      query_params[:filterByMySqlStatus] = opts[:filter_by_my_sql_status] if opts[:filter_by_my_sql_status]
      query_params[:filterByMySqlDatabaseVersion] = opts[:filter_by_my_sql_database_version] if opts[:filter_by_my_sql_database_version]
      query_params[:isHeatWaveEnabled] = opts[:is_heat_wave_enabled] if !opts[:is_heat_wave_enabled].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'ManagedMySqlDatabasesClient#get_my_sql_fleet_metric') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DatabaseManagement::Models::MySqlFleetMetrics'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves configuration data for a specific MySQL database.
    #
    # @param [String] managed_my_sql_database_id The OCID of the Managed MySQL Database.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :limit The maximum number of records returned in the paginated response. (default to 10)
    # @option opts [String] :page The page token representing the page from where the next set of paginated results
    #   are retrieved. This is usually retrieved from a previous list call.
    #
    # @option opts [String] :sort_order The option to sort information in ascending (\u2018ASC\u2019) or descending (\u2018DESC\u2019) order. Descending order is the default order. (default to DESC)
    # @option opts [String] :sort_by The field to sort information by. Only one sortOrder can be used. The default sort order
    #   for \u2018TIMECREATED\u2019 is descending and the default sort order for \u2018NAME\u2019 is ascending.
    #   The \u2018NAME\u2019 sort order is case-sensitive.
    #    (default to TIMECREATED)
    #   Allowed values are: TIMECREATED, NAME
    # @return [Response] A Response object with data of type {OCI::DatabaseManagement::Models::MySqlConfigurationDataCollection MySqlConfigurationDataCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/databasemanagement/list_managed_my_sql_database_configuration_data.rb.html) to see an example of how to use list_managed_my_sql_database_configuration_data API.
    def list_managed_my_sql_database_configuration_data(managed_my_sql_database_id, opts = {})
      logger.debug 'Calling operation ManagedMySqlDatabasesClient#list_managed_my_sql_database_configuration_data.' if logger

      raise "Missing the required parameter 'managed_my_sql_database_id' when calling list_managed_my_sql_database_configuration_data." if managed_my_sql_database_id.nil?

      if opts[:sort_order] && !OCI::DatabaseManagement::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DatabaseManagement::Models::SORT_ORDERS_ENUM.'
      end

      if opts[:sort_by] && !%w[TIMECREATED NAME].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of TIMECREATED, NAME.'
      end
      raise "Parameter value for 'managed_my_sql_database_id' must not be blank" if OCI::Internal::Util.blank_string?(managed_my_sql_database_id)

      path = '/managedMySqlDatabases/{managedMySqlDatabaseId}/configurationData'.sub('{managedMySqlDatabaseId}', managed_my_sql_database_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'ManagedMySqlDatabasesClient#list_managed_my_sql_database_configuration_data') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DatabaseManagement::Models::MySqlConfigurationDataCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves the SQL performance data for a specific MySQL database.
    #
    # @param [String] managed_my_sql_database_id The OCID of the Managed MySQL Database.
    # @param [String] start_time The start time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [String] end_time The end time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter_column The parameter to filter results by key criteria which include :
    #   - AVG_TIMER_WAIT
    #   - SUM_TIMER_WAIT
    #   - COUNT_STAR
    #   - SUM_ERRORS
    #   - SUM_ROWS_AFFECTED
    #   - SUM_ROWS_SENT
    #   - SUM_ROWS_EXAMINED
    #   - SUM_CREATED_TMP_TABLES
    #   - SUM_NO_INDEX_USED
    #   - SUM_NO_GOOD_INDEX_USED
    #   - FIRST_SEEN
    #   - LAST_SEEN
    #   - HEATWAVE_OFFLOADED
    #   - HEATWAVE_OUT_OF_MEMORY
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :limit The maximum number of records returned in the paginated response. (default to 10)
    # @option opts [String] :page The page token representing the page from where the next set of paginated results
    #   are retrieved. This is usually retrieved from a previous list call.
    #
    # @option opts [String] :sort_by The field to sort information by. Only one sortOrder can be used. The default sort order
    #   for \u2018TIMECREATED\u2019 is descending and the default sort order for \u2018NAME\u2019 is ascending.
    #   The \u2018NAME\u2019 sort order is case-sensitive.
    #    (default to TIMECREATED)
    #   Allowed values are: TIMECREATED, NAME
    # @option opts [String] :sort_order The option to sort information in ascending (\u2018ASC\u2019) or descending (\u2018DESC\u2019) order. Ascending order is the default order. (default to ASC)
    # @return [Response] A Response object with data of type {OCI::DatabaseManagement::Models::MySqlDataCollection MySqlDataCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/databasemanagement/list_managed_my_sql_database_sql_data.rb.html) to see an example of how to use list_managed_my_sql_database_sql_data API.
    def list_managed_my_sql_database_sql_data(managed_my_sql_database_id, start_time, end_time, opts = {})
      logger.debug 'Calling operation ManagedMySqlDatabasesClient#list_managed_my_sql_database_sql_data.' if logger

      raise "Missing the required parameter 'managed_my_sql_database_id' when calling list_managed_my_sql_database_sql_data." if managed_my_sql_database_id.nil?
      raise "Missing the required parameter 'start_time' when calling list_managed_my_sql_database_sql_data." if start_time.nil?
      raise "Missing the required parameter 'end_time' when calling list_managed_my_sql_database_sql_data." if end_time.nil?

      if opts[:sort_by] && !%w[TIMECREATED NAME].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of TIMECREATED, NAME.'
      end

      if opts[:sort_order] && !OCI::DatabaseManagement::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DatabaseManagement::Models::SORT_ORDERS_ENUM.'
      end
      raise "Parameter value for 'managed_my_sql_database_id' must not be blank" if OCI::Internal::Util.blank_string?(managed_my_sql_database_id)

      path = '/managedMySqlDatabases/{managedMySqlDatabaseId}/sqlData'.sub('{managedMySqlDatabaseId}', managed_my_sql_database_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:startTime] = start_time
      query_params[:endTime] = end_time
      query_params[:filterColumn] = opts[:filter_column] if opts[:filter_column]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'ManagedMySqlDatabasesClient#list_managed_my_sql_database_sql_data') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DatabaseManagement::Models::MySqlDataCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the list of Managed MySQL Databases in a specific compartment.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page The page token representing the page from where the next set of paginated results
    #   are retrieved. This is usually retrieved from a previous list call.
    #
    # @option opts [Integer] :limit The maximum number of records returned in the paginated response. (default to 10)
    # @option opts [String] :filter_by_my_sql_database_type_param The parameter to filter by MySQL database type. Allowed values are EXTERNAL or MDS.
    # @option opts [String] :sort_by The field to sort information by. Only one sortOrder can be used. The default sort order
    #   for \u2018TIMECREATED\u2019 is descending and the default sort order for \u2018NAME\u2019 is ascending.
    #   The \u2018NAME\u2019 sort order is case-sensitive.
    #    (default to TIMECREATED)
    #   Allowed values are: TIMECREATED, NAME
    # @option opts [String] :sort_order The option to sort information in ascending (\u2018ASC\u2019) or descending (\u2018DESC\u2019) order. Ascending order is the default order. (default to ASC)
    # @return [Response] A Response object with data of type {OCI::DatabaseManagement::Models::ManagedMySqlDatabaseCollection ManagedMySqlDatabaseCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/databasemanagement/list_managed_my_sql_databases.rb.html) to see an example of how to use list_managed_my_sql_databases API.
    def list_managed_my_sql_databases(compartment_id, opts = {})
      logger.debug 'Calling operation ManagedMySqlDatabasesClient#list_managed_my_sql_databases.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_managed_my_sql_databases." if compartment_id.nil?

      if opts[:filter_by_my_sql_database_type_param] && !OCI::DatabaseManagement::Models::MY_SQL_TYPE_ENUM.include?(opts[:filter_by_my_sql_database_type_param])
        raise 'Invalid value for "filter_by_my_sql_database_type_param", must be one of the values in OCI::DatabaseManagement::Models::MY_SQL_TYPE_ENUM.'
      end

      if opts[:sort_by] && !%w[TIMECREATED NAME].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of TIMECREATED, NAME.'
      end

      if opts[:sort_order] && !OCI::DatabaseManagement::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DatabaseManagement::Models::SORT_ORDERS_ENUM.'
      end

      path = '/managedMySqlDatabases'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:filterByMySqlDatabaseTypeParam] = opts[:filter_by_my_sql_database_type_param] if opts[:filter_by_my_sql_database_type_param]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'ManagedMySqlDatabasesClient#list_managed_my_sql_databases') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DatabaseManagement::Models::ManagedMySqlDatabaseCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the availability metrics for the MySQL Database specified by managedMySqlDatabaseId.
    #
    # @param [String] managed_my_sql_database_id The OCID of the Managed MySQL Database.
    # @param [String] start_time The start time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [String] end_time The end time of the time range to retrieve the health metrics of a Managed Database
    #   in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :page The page token representing the page from where the next set of paginated results
    #   are retrieved. This is usually retrieved from a previous list call.
    #
    # @option opts [Integer] :limit The maximum number of records returned in the paginated response. (default to 10)
    # @return [Response] A Response object with data of type {OCI::DatabaseManagement::Models::MetricsAggregationRangeCollection MetricsAggregationRangeCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/databasemanagement/summarize_managed_my_sql_database_availability_metrics.rb.html) to see an example of how to use summarize_managed_my_sql_database_availability_metrics API.
    def summarize_managed_my_sql_database_availability_metrics(managed_my_sql_database_id, start_time, end_time, opts = {})
      logger.debug 'Calling operation ManagedMySqlDatabasesClient#summarize_managed_my_sql_database_availability_metrics.' if logger

      raise "Missing the required parameter 'managed_my_sql_database_id' when calling summarize_managed_my_sql_database_availability_metrics." if managed_my_sql_database_id.nil?
      raise "Missing the required parameter 'start_time' when calling summarize_managed_my_sql_database_availability_metrics." if start_time.nil?
      raise "Missing the required parameter 'end_time' when calling summarize_managed_my_sql_database_availability_metrics." if end_time.nil?
      raise "Parameter value for 'managed_my_sql_database_id' must not be blank" if OCI::Internal::Util.blank_string?(managed_my_sql_database_id)

      path = '/managedMySqlDatabases/{managedMySqlDatabaseId}/availabilityMetrics'.sub('{managedMySqlDatabaseId}', managed_my_sql_database_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:startTime] = start_time
      query_params[:endTime] = end_time
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'ManagedMySqlDatabasesClient#summarize_managed_my_sql_database_availability_metrics') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DatabaseManagement::Models::MetricsAggregationRangeCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
