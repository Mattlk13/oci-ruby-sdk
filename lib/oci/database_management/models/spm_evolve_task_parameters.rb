# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The set of parameters used in an SPM evolve task.
  class DatabaseManagement::Models::SpmEvolveTaskParameters
    ALTERNATE_PLAN_SOURCES_ENUM = [
      ALTERNATE_PLAN_SOURCES_AUTO = 'AUTO'.freeze,
      ALTERNATE_PLAN_SOURCES_AUTOMATIC_WORKLOAD_REPOSITORY = 'AUTOMATIC_WORKLOAD_REPOSITORY'.freeze,
      ALTERNATE_PLAN_SOURCES_CURSOR_CACHE = 'CURSOR_CACHE'.freeze,
      ALTERNATE_PLAN_SOURCES_SQL_TUNING_SET = 'SQL_TUNING_SET'.freeze,
      ALTERNATE_PLAN_SOURCES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ALTERNATE_PLAN_BASELINES_ENUM = [
      ALTERNATE_PLAN_BASELINES_AUTO = 'AUTO'.freeze,
      ALTERNATE_PLAN_BASELINES_EXISTING = 'EXISTING'.freeze,
      ALTERNATE_PLAN_BASELINES_NEW = 'NEW'.freeze,
      ALTERNATE_PLAN_BASELINES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Determines which sources to search for additional plans.
    # @return [Array<String>]
    attr_reader :alternate_plan_sources

    # Determines which alternative plans should be loaded.
    # @return [Array<String>]
    attr_reader :alternate_plan_baselines

    # Specifies the maximum number of plans to load in total (that is, not
    # the limit for each SQL statement). A value of zero indicates `UNLIMITED`
    # number of plans.
    #
    # @return [Integer]
    attr_accessor :alternate_plan_limit

    # Specifies whether to accept recommended plans automatically.
    # @return [BOOLEAN]
    attr_accessor :are_plans_auto_accepted

    # The global time limit in seconds. This is the total time allowed for the task.
    # @return [Integer]
    attr_accessor :allowed_time_limit

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'alternate_plan_sources': :'alternatePlanSources',
        'alternate_plan_baselines': :'alternatePlanBaselines',
        'alternate_plan_limit': :'alternatePlanLimit',
        'are_plans_auto_accepted': :'arePlansAutoAccepted',
        'allowed_time_limit': :'allowedTimeLimit'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'alternate_plan_sources': :'Array<String>',
        'alternate_plan_baselines': :'Array<String>',
        'alternate_plan_limit': :'Integer',
        'are_plans_auto_accepted': :'BOOLEAN',
        'allowed_time_limit': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :alternate_plan_sources The value to assign to the {#alternate_plan_sources} property
    # @option attributes [Array<String>] :alternate_plan_baselines The value to assign to the {#alternate_plan_baselines} property
    # @option attributes [Integer] :alternate_plan_limit The value to assign to the {#alternate_plan_limit} property
    # @option attributes [BOOLEAN] :are_plans_auto_accepted The value to assign to the {#are_plans_auto_accepted} property
    # @option attributes [Integer] :allowed_time_limit The value to assign to the {#allowed_time_limit} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.alternate_plan_sources = attributes[:'alternatePlanSources'] if attributes[:'alternatePlanSources']

      raise 'You cannot provide both :alternatePlanSources and :alternate_plan_sources' if attributes.key?(:'alternatePlanSources') && attributes.key?(:'alternate_plan_sources')

      self.alternate_plan_sources = attributes[:'alternate_plan_sources'] if attributes[:'alternate_plan_sources']

      self.alternate_plan_baselines = attributes[:'alternatePlanBaselines'] if attributes[:'alternatePlanBaselines']

      raise 'You cannot provide both :alternatePlanBaselines and :alternate_plan_baselines' if attributes.key?(:'alternatePlanBaselines') && attributes.key?(:'alternate_plan_baselines')

      self.alternate_plan_baselines = attributes[:'alternate_plan_baselines'] if attributes[:'alternate_plan_baselines']

      self.alternate_plan_limit = attributes[:'alternatePlanLimit'] if attributes[:'alternatePlanLimit']

      raise 'You cannot provide both :alternatePlanLimit and :alternate_plan_limit' if attributes.key?(:'alternatePlanLimit') && attributes.key?(:'alternate_plan_limit')

      self.alternate_plan_limit = attributes[:'alternate_plan_limit'] if attributes[:'alternate_plan_limit']

      self.are_plans_auto_accepted = attributes[:'arePlansAutoAccepted'] unless attributes[:'arePlansAutoAccepted'].nil?

      raise 'You cannot provide both :arePlansAutoAccepted and :are_plans_auto_accepted' if attributes.key?(:'arePlansAutoAccepted') && attributes.key?(:'are_plans_auto_accepted')

      self.are_plans_auto_accepted = attributes[:'are_plans_auto_accepted'] unless attributes[:'are_plans_auto_accepted'].nil?

      self.allowed_time_limit = attributes[:'allowedTimeLimit'] if attributes[:'allowedTimeLimit']

      raise 'You cannot provide both :allowedTimeLimit and :allowed_time_limit' if attributes.key?(:'allowedTimeLimit') && attributes.key?(:'allowed_time_limit')

      self.allowed_time_limit = attributes[:'allowed_time_limit'] if attributes[:'allowed_time_limit']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alternate_plan_sources Object to be assigned
    def alternate_plan_sources=(alternate_plan_sources)
      # rubocop:disable Style/ConditionalAssignment
      if alternate_plan_sources.nil?
        @alternate_plan_sources = nil
      else
        @alternate_plan_sources =
          alternate_plan_sources.collect do |item|
            if ALTERNATE_PLAN_SOURCES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'alternate_plan_sources' [#{item}]. Mapping to 'ALTERNATE_PLAN_SOURCES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              ALTERNATE_PLAN_SOURCES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alternate_plan_baselines Object to be assigned
    def alternate_plan_baselines=(alternate_plan_baselines)
      # rubocop:disable Style/ConditionalAssignment
      if alternate_plan_baselines.nil?
        @alternate_plan_baselines = nil
      else
        @alternate_plan_baselines =
          alternate_plan_baselines.collect do |item|
            if ALTERNATE_PLAN_BASELINES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'alternate_plan_baselines' [#{item}]. Mapping to 'ALTERNATE_PLAN_BASELINES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              ALTERNATE_PLAN_BASELINES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        alternate_plan_sources == other.alternate_plan_sources &&
        alternate_plan_baselines == other.alternate_plan_baselines &&
        alternate_plan_limit == other.alternate_plan_limit &&
        are_plans_auto_accepted == other.are_plans_auto_accepted &&
        allowed_time_limit == other.allowed_time_limit
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [alternate_plan_sources, alternate_plan_baselines, alternate_plan_limit, are_plans_auto_accepted, allowed_time_limit].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
