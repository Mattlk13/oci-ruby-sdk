# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Metrics of the Sql in the Sql tuning set.
  class DatabaseManagement::Models::SqlMetrics
    # Total CPU time consumed by the Sql.
    # @return [Integer]
    attr_accessor :cpu_time

    # Elapsed time of the Sql.
    # @return [Integer]
    attr_accessor :elapsed_time

    # Sum total number of buffer gets.
    # @return [Integer]
    attr_accessor :buffer_gets

    # Sum total number of disk reads.
    # @return [Integer]
    attr_accessor :disk_reads

    # Sum total number of direct path writes.
    # @return [Integer]
    attr_accessor :direct_writes

    # Total executions of this SQL statement.
    # @return [Integer]
    attr_accessor :executions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'cpu_time': :'cpuTime',
        'elapsed_time': :'elapsedTime',
        'buffer_gets': :'bufferGets',
        'disk_reads': :'diskReads',
        'direct_writes': :'directWrites',
        'executions': :'executions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'cpu_time': :'Integer',
        'elapsed_time': :'Integer',
        'buffer_gets': :'Integer',
        'disk_reads': :'Integer',
        'direct_writes': :'Integer',
        'executions': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :cpu_time The value to assign to the {#cpu_time} property
    # @option attributes [Integer] :elapsed_time The value to assign to the {#elapsed_time} property
    # @option attributes [Integer] :buffer_gets The value to assign to the {#buffer_gets} property
    # @option attributes [Integer] :disk_reads The value to assign to the {#disk_reads} property
    # @option attributes [Integer] :direct_writes The value to assign to the {#direct_writes} property
    # @option attributes [Integer] :executions The value to assign to the {#executions} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.cpu_time = attributes[:'cpuTime'] if attributes[:'cpuTime']

      raise 'You cannot provide both :cpuTime and :cpu_time' if attributes.key?(:'cpuTime') && attributes.key?(:'cpu_time')

      self.cpu_time = attributes[:'cpu_time'] if attributes[:'cpu_time']

      self.elapsed_time = attributes[:'elapsedTime'] if attributes[:'elapsedTime']

      raise 'You cannot provide both :elapsedTime and :elapsed_time' if attributes.key?(:'elapsedTime') && attributes.key?(:'elapsed_time')

      self.elapsed_time = attributes[:'elapsed_time'] if attributes[:'elapsed_time']

      self.buffer_gets = attributes[:'bufferGets'] if attributes[:'bufferGets']

      raise 'You cannot provide both :bufferGets and :buffer_gets' if attributes.key?(:'bufferGets') && attributes.key?(:'buffer_gets')

      self.buffer_gets = attributes[:'buffer_gets'] if attributes[:'buffer_gets']

      self.disk_reads = attributes[:'diskReads'] if attributes[:'diskReads']

      raise 'You cannot provide both :diskReads and :disk_reads' if attributes.key?(:'diskReads') && attributes.key?(:'disk_reads')

      self.disk_reads = attributes[:'disk_reads'] if attributes[:'disk_reads']

      self.direct_writes = attributes[:'directWrites'] if attributes[:'directWrites']

      raise 'You cannot provide both :directWrites and :direct_writes' if attributes.key?(:'directWrites') && attributes.key?(:'direct_writes')

      self.direct_writes = attributes[:'direct_writes'] if attributes[:'direct_writes']

      self.executions = attributes[:'executions'] if attributes[:'executions']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        cpu_time == other.cpu_time &&
        elapsed_time == other.elapsed_time &&
        buffer_gets == other.buffer_gets &&
        disk_reads == other.disk_reads &&
        direct_writes == other.direct_writes &&
        executions == other.executions
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cpu_time, elapsed_time, buffer_gets, disk_reads, direct_writes, executions].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
