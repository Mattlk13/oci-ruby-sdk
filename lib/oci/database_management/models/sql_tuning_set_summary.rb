# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The summary information of a SQL tuning set.
  class DatabaseManagement::Models::SqlTuningSetSummary
    STATUS_ENUM = [
      STATUS_DISABLED = 'DISABLED'.freeze,
      STATUS_RETRY_SCHEDULED = 'RETRY_SCHEDULED'.freeze,
      STATUS_SCHEDULED = 'SCHEDULED'.freeze,
      STATUS_BLOCKED = 'BLOCKED'.freeze,
      STATUS_RUNNING = 'RUNNING'.freeze,
      STATUS_COMPLETED = 'COMPLETED'.freeze,
      STATUS_BROKEN = 'BROKEN'.freeze,
      STATUS_FAILED = 'FAILED'.freeze,
      STATUS_REMOTE = 'REMOTE'.freeze,
      STATUS_RESOURCE_UNAVAILABLE = 'RESOURCE_UNAVAILABLE'.freeze,
      STATUS_SUCCEEDED = 'SUCCEEDED'.freeze,
      STATUS_CHAIN_STALLED = 'CHAIN_STALLED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The name of the SQL tuning set.
    # @return [String]
    attr_accessor :name

    # **[Required]** The owner of the SQL tuning set.
    # @return [String]
    attr_accessor :owner

    # The description of the SQL tuning set.
    # @return [String]
    attr_accessor :description

    # The number of SQL statements in the SQL tuning set.
    # @return [Integer]
    attr_accessor :statement_counts

    # The unique Sql tuning set identifier. This is not OCID.
    # @return [Integer]
    attr_accessor :id

    # The created time of the Sql tuning set.
    # @return [DateTime]
    attr_accessor :time_created

    # Last modified time of the Sql tuning set.
    # @return [DateTime]
    attr_accessor :time_last_modified

    # Current status of the Sql tuning set.
    # @return [String]
    attr_reader :status

    # Name of the Sql tuning set scheduler job.
    # @return [String]
    attr_accessor :scheduled_job_name

    # Latest execution error of the plsql that was submitted as a scheduler job.
    # @return [String]
    attr_accessor :error_message

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'owner': :'owner',
        'description': :'description',
        'statement_counts': :'statementCounts',
        'id': :'id',
        'time_created': :'timeCreated',
        'time_last_modified': :'timeLastModified',
        'status': :'status',
        'scheduled_job_name': :'scheduledJobName',
        'error_message': :'errorMessage'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'owner': :'String',
        'description': :'String',
        'statement_counts': :'Integer',
        'id': :'Integer',
        'time_created': :'DateTime',
        'time_last_modified': :'DateTime',
        'status': :'String',
        'scheduled_job_name': :'String',
        'error_message': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :owner The value to assign to the {#owner} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Integer] :statement_counts The value to assign to the {#statement_counts} property
    # @option attributes [Integer] :id The value to assign to the {#id} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_last_modified The value to assign to the {#time_last_modified} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :scheduled_job_name The value to assign to the {#scheduled_job_name} property
    # @option attributes [String] :error_message The value to assign to the {#error_message} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.owner = attributes[:'owner'] if attributes[:'owner']

      self.description = attributes[:'description'] if attributes[:'description']

      self.statement_counts = attributes[:'statementCounts'] if attributes[:'statementCounts']

      raise 'You cannot provide both :statementCounts and :statement_counts' if attributes.key?(:'statementCounts') && attributes.key?(:'statement_counts')

      self.statement_counts = attributes[:'statement_counts'] if attributes[:'statement_counts']

      self.id = attributes[:'id'] if attributes[:'id']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_last_modified = attributes[:'timeLastModified'] if attributes[:'timeLastModified']

      raise 'You cannot provide both :timeLastModified and :time_last_modified' if attributes.key?(:'timeLastModified') && attributes.key?(:'time_last_modified')

      self.time_last_modified = attributes[:'time_last_modified'] if attributes[:'time_last_modified']

      self.status = attributes[:'status'] if attributes[:'status']

      self.scheduled_job_name = attributes[:'scheduledJobName'] if attributes[:'scheduledJobName']

      raise 'You cannot provide both :scheduledJobName and :scheduled_job_name' if attributes.key?(:'scheduledJobName') && attributes.key?(:'scheduled_job_name')

      self.scheduled_job_name = attributes[:'scheduled_job_name'] if attributes[:'scheduled_job_name']

      self.error_message = attributes[:'errorMessage'] if attributes[:'errorMessage']

      raise 'You cannot provide both :errorMessage and :error_message' if attributes.key?(:'errorMessage') && attributes.key?(:'error_message')

      self.error_message = attributes[:'error_message'] if attributes[:'error_message']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        owner == other.owner &&
        description == other.description &&
        statement_counts == other.statement_counts &&
        id == other.id &&
        time_created == other.time_created &&
        time_last_modified == other.time_last_modified &&
        status == other.status &&
        scheduled_job_name == other.scheduled_job_name &&
        error_message == other.error_message
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, owner, description, statement_counts, id, time_created, time_last_modified, status, scheduled_job_name, error_message].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
