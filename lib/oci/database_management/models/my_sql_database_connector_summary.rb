# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of external database connector.
  class DatabaseManagement::Models::MySqlDatabaseConnectorSummary
    SOURCE_DATABASE_TYPE_ENUM = [
      SOURCE_DATABASE_TYPE_EXTERNAL = 'EXTERNAL'.freeze,
      SOURCE_DATABASE_TYPE_MDS = 'MDS'.freeze,
      SOURCE_DATABASE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CONNECTOR_TYPE_ENUM = [
      CONNECTOR_TYPE_MACS = 'MACS'.freeze,
      CONNECTOR_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    NETWORK_PROTOCOL_ENUM = [
      NETWORK_PROTOCOL_TCP = 'TCP'.freeze,
      NETWORK_PROTOCOL_TCPS = 'TCPS'.freeze,
      NETWORK_PROTOCOL_SOCKETS = 'SOCKETS'.freeze,
      NETWORK_PROTOCOL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CREDENTIAL_TYPE_ENUM = [
      CREDENTIAL_TYPE_MYSQL_EXTERNAL_NON_SSL_CREDENTIALS = 'MYSQL_EXTERNAL_NON_SSL_CREDENTIALS'.freeze,
      CREDENTIAL_TYPE_MYSQL_EXTERNAL_SSL_CREDENTIALS = 'MYSQL_EXTERNAL_SSL_CREDENTIALS'.freeze,
      CREDENTIAL_TYPE_MYSQL_EXTERNAL_SOCKET_CREDENTIALS = 'MYSQL_EXTERNAL_SOCKET_CREDENTIALS'.freeze,
      CREDENTIAL_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # External MySQL Database Connector Name
    # @return [String]
    attr_accessor :name

    # OCID of compartment for the External MySQL connector.
    # @return [String]
    attr_accessor :compartment_id

    # OCI Services associated with this connector.
    # @return [String]
    attr_accessor :associated_services

    # **[Required]** OCID of MySQL Database Connector.
    # @return [String]
    attr_accessor :id

    # Connector creation time.
    # @return [DateTime]
    attr_accessor :time_created

    # Connector update time.
    # @return [DateTime]
    attr_accessor :time_updated

    # Name of MySQL Database.
    # @return [String]
    attr_accessor :source_database

    # Type of MySQL Database.
    # @return [String]
    attr_reader :source_database_type

    # Connection Status.
    # @return [String]
    attr_accessor :connection_status

    # Time when connection status was last updated.
    # @return [DateTime]
    attr_accessor :time_connection_status_updated

    # Host name for Connector.
    # @return [String]
    attr_accessor :host_name

    # Agent Id of the MACS agent.
    # @return [String]
    attr_accessor :macs_agent_id

    # Connector port.
    # @return [Integer]
    attr_accessor :port

    # Connector Type.
    # @return [String]
    attr_reader :connector_type

    # Network Protocol.
    # @return [String]
    attr_reader :network_protocol

    # Credential type used to connect to database.
    # @return [String]
    attr_reader :credential_type

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # System tags can be viewed by users, but can only be created by the system.
    #
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Indicates lifecycle  state of the resource.
    # @return [String]
    attr_reader :lifecycle_state

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'compartment_id': :'compartmentId',
        'associated_services': :'associatedServices',
        'id': :'id',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'source_database': :'sourceDatabase',
        'source_database_type': :'sourceDatabaseType',
        'connection_status': :'connectionStatus',
        'time_connection_status_updated': :'timeConnectionStatusUpdated',
        'host_name': :'hostName',
        'macs_agent_id': :'macsAgentId',
        'port': :'port',
        'connector_type': :'connectorType',
        'network_protocol': :'networkProtocol',
        'credential_type': :'credentialType',
        'system_tags': :'systemTags',
        'lifecycle_state': :'lifecycleState'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'compartment_id': :'String',
        'associated_services': :'String',
        'id': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'source_database': :'String',
        'source_database_type': :'String',
        'connection_status': :'String',
        'time_connection_status_updated': :'DateTime',
        'host_name': :'String',
        'macs_agent_id': :'String',
        'port': :'Integer',
        'connector_type': :'String',
        'network_protocol': :'String',
        'credential_type': :'String',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'lifecycle_state': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :associated_services The value to assign to the {#associated_services} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :source_database The value to assign to the {#source_database} property
    # @option attributes [String] :source_database_type The value to assign to the {#source_database_type} property
    # @option attributes [String] :connection_status The value to assign to the {#connection_status} property
    # @option attributes [DateTime] :time_connection_status_updated The value to assign to the {#time_connection_status_updated} property
    # @option attributes [String] :host_name The value to assign to the {#host_name} property
    # @option attributes [String] :macs_agent_id The value to assign to the {#macs_agent_id} property
    # @option attributes [Integer] :port The value to assign to the {#port} property
    # @option attributes [String] :connector_type The value to assign to the {#connector_type} property
    # @option attributes [String] :network_protocol The value to assign to the {#network_protocol} property
    # @option attributes [String] :credential_type The value to assign to the {#credential_type} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.associated_services = attributes[:'associatedServices'] if attributes[:'associatedServices']

      raise 'You cannot provide both :associatedServices and :associated_services' if attributes.key?(:'associatedServices') && attributes.key?(:'associated_services')

      self.associated_services = attributes[:'associated_services'] if attributes[:'associated_services']

      self.id = attributes[:'id'] if attributes[:'id']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.source_database = attributes[:'sourceDatabase'] if attributes[:'sourceDatabase']

      raise 'You cannot provide both :sourceDatabase and :source_database' if attributes.key?(:'sourceDatabase') && attributes.key?(:'source_database')

      self.source_database = attributes[:'source_database'] if attributes[:'source_database']

      self.source_database_type = attributes[:'sourceDatabaseType'] if attributes[:'sourceDatabaseType']

      raise 'You cannot provide both :sourceDatabaseType and :source_database_type' if attributes.key?(:'sourceDatabaseType') && attributes.key?(:'source_database_type')

      self.source_database_type = attributes[:'source_database_type'] if attributes[:'source_database_type']

      self.connection_status = attributes[:'connectionStatus'] if attributes[:'connectionStatus']

      raise 'You cannot provide both :connectionStatus and :connection_status' if attributes.key?(:'connectionStatus') && attributes.key?(:'connection_status')

      self.connection_status = attributes[:'connection_status'] if attributes[:'connection_status']

      self.time_connection_status_updated = attributes[:'timeConnectionStatusUpdated'] if attributes[:'timeConnectionStatusUpdated']

      raise 'You cannot provide both :timeConnectionStatusUpdated and :time_connection_status_updated' if attributes.key?(:'timeConnectionStatusUpdated') && attributes.key?(:'time_connection_status_updated')

      self.time_connection_status_updated = attributes[:'time_connection_status_updated'] if attributes[:'time_connection_status_updated']

      self.host_name = attributes[:'hostName'] if attributes[:'hostName']

      raise 'You cannot provide both :hostName and :host_name' if attributes.key?(:'hostName') && attributes.key?(:'host_name')

      self.host_name = attributes[:'host_name'] if attributes[:'host_name']

      self.macs_agent_id = attributes[:'macsAgentId'] if attributes[:'macsAgentId']

      raise 'You cannot provide both :macsAgentId and :macs_agent_id' if attributes.key?(:'macsAgentId') && attributes.key?(:'macs_agent_id')

      self.macs_agent_id = attributes[:'macs_agent_id'] if attributes[:'macs_agent_id']

      self.port = attributes[:'port'] if attributes[:'port']

      self.connector_type = attributes[:'connectorType'] if attributes[:'connectorType']

      raise 'You cannot provide both :connectorType and :connector_type' if attributes.key?(:'connectorType') && attributes.key?(:'connector_type')

      self.connector_type = attributes[:'connector_type'] if attributes[:'connector_type']

      self.network_protocol = attributes[:'networkProtocol'] if attributes[:'networkProtocol']

      raise 'You cannot provide both :networkProtocol and :network_protocol' if attributes.key?(:'networkProtocol') && attributes.key?(:'network_protocol')

      self.network_protocol = attributes[:'network_protocol'] if attributes[:'network_protocol']

      self.credential_type = attributes[:'credentialType'] if attributes[:'credentialType']

      raise 'You cannot provide both :credentialType and :credential_type' if attributes.key?(:'credentialType') && attributes.key?(:'credential_type')

      self.credential_type = attributes[:'credential_type'] if attributes[:'credential_type']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_database_type Object to be assigned
    def source_database_type=(source_database_type)
      # rubocop:disable Style/ConditionalAssignment
      if source_database_type && !SOURCE_DATABASE_TYPE_ENUM.include?(source_database_type)
        OCI.logger.debug("Unknown value for 'source_database_type' [" + source_database_type + "]. Mapping to 'SOURCE_DATABASE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @source_database_type = SOURCE_DATABASE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @source_database_type = source_database_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] connector_type Object to be assigned
    def connector_type=(connector_type)
      # rubocop:disable Style/ConditionalAssignment
      if connector_type && !CONNECTOR_TYPE_ENUM.include?(connector_type)
        OCI.logger.debug("Unknown value for 'connector_type' [" + connector_type + "]. Mapping to 'CONNECTOR_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @connector_type = CONNECTOR_TYPE_UNKNOWN_ENUM_VALUE
      else
        @connector_type = connector_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_protocol Object to be assigned
    def network_protocol=(network_protocol)
      # rubocop:disable Style/ConditionalAssignment
      if network_protocol && !NETWORK_PROTOCOL_ENUM.include?(network_protocol)
        OCI.logger.debug("Unknown value for 'network_protocol' [" + network_protocol + "]. Mapping to 'NETWORK_PROTOCOL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @network_protocol = NETWORK_PROTOCOL_UNKNOWN_ENUM_VALUE
      else
        @network_protocol = network_protocol
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credential_type Object to be assigned
    def credential_type=(credential_type)
      # rubocop:disable Style/ConditionalAssignment
      if credential_type && !CREDENTIAL_TYPE_ENUM.include?(credential_type)
        OCI.logger.debug("Unknown value for 'credential_type' [" + credential_type + "]. Mapping to 'CREDENTIAL_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @credential_type = CREDENTIAL_TYPE_UNKNOWN_ENUM_VALUE
      else
        @credential_type = credential_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        compartment_id == other.compartment_id &&
        associated_services == other.associated_services &&
        id == other.id &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        source_database == other.source_database &&
        source_database_type == other.source_database_type &&
        connection_status == other.connection_status &&
        time_connection_status_updated == other.time_connection_status_updated &&
        host_name == other.host_name &&
        macs_agent_id == other.macs_agent_id &&
        port == other.port &&
        connector_type == other.connector_type &&
        network_protocol == other.network_protocol &&
        credential_type == other.credential_type &&
        system_tags == other.system_tags &&
        lifecycle_state == other.lifecycle_state
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, compartment_id, associated_services, id, time_created, time_updated, source_database, source_database_type, connection_status, time_connection_status_updated, host_name, macs_agent_id, port, connector_type, network_protocol, credential_type, system_tags, lifecycle_state].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
