# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The list of aggregated metrics for a HeatWave cluster in the fleet.
  class DatabaseManagement::Models::HeatWaveClusterUsageMetrics
    STATUS_ENUM = [
      STATUS_UP = 'UP'.freeze,
      STATUS_DOWN = 'DOWN'.freeze,
      STATUS_UNKNOWN = 'UNKNOWN'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The status of the HeatWave cluster. Indicates whether the status of the cluster is UP, DOWN, or UNKNOWN at the current time.
    # @return [String]
    attr_reader :status

    # **[Required]** The OCID of the MySQL Database System associated with the HeatWave cluster.
    # @return [String]
    attr_accessor :db_system_id

    # **[Required]** The name of the MySQL Database System associated with the HeatWave cluster.
    # @return [String]
    attr_accessor :db_system_name

    # **[Required]** The name of the HeatWave cluster.
    # @return [String]
    attr_accessor :heat_wave_cluster_display_name

    # **[Required]** The number of nodes in the HeatWave cluster.
    # @return [Integer]
    attr_accessor :node_count

    # **[Required]** Indicates whether Lakehouse is enabled for the HeatWave cluster or not.
    # @return [BOOLEAN]
    attr_accessor :is_lakehouse_enabled

    # **[Required]** The shape of the nodes in the HeatWave cluster.
    # @return [String]
    attr_accessor :heat_wave_node_shape

    # **[Required]** The total memory belonging to the HeatWave cluster in GBs.
    # @return [Integer]
    attr_accessor :memory_size

    # **[Required]** A list of the HeatWave cluster health metrics like CPU and Memory.
    # @return [Array<OCI::DatabaseManagement::Models::HeatWaveFleetMetricDefinition>]
    attr_accessor :metrics

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'status': :'status',
        'db_system_id': :'dbSystemId',
        'db_system_name': :'dbSystemName',
        'heat_wave_cluster_display_name': :'heatWaveClusterDisplayName',
        'node_count': :'nodeCount',
        'is_lakehouse_enabled': :'isLakehouseEnabled',
        'heat_wave_node_shape': :'heatWaveNodeShape',
        'memory_size': :'memorySize',
        'metrics': :'metrics'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'status': :'String',
        'db_system_id': :'String',
        'db_system_name': :'String',
        'heat_wave_cluster_display_name': :'String',
        'node_count': :'Integer',
        'is_lakehouse_enabled': :'BOOLEAN',
        'heat_wave_node_shape': :'String',
        'memory_size': :'Integer',
        'metrics': :'Array<OCI::DatabaseManagement::Models::HeatWaveFleetMetricDefinition>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :db_system_id The value to assign to the {#db_system_id} property
    # @option attributes [String] :db_system_name The value to assign to the {#db_system_name} property
    # @option attributes [String] :heat_wave_cluster_display_name The value to assign to the {#heat_wave_cluster_display_name} property
    # @option attributes [Integer] :node_count The value to assign to the {#node_count} property
    # @option attributes [BOOLEAN] :is_lakehouse_enabled The value to assign to the {#is_lakehouse_enabled} property
    # @option attributes [String] :heat_wave_node_shape The value to assign to the {#heat_wave_node_shape} property
    # @option attributes [Integer] :memory_size The value to assign to the {#memory_size} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::HeatWaveFleetMetricDefinition>] :metrics The value to assign to the {#metrics} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.status = attributes[:'status'] if attributes[:'status']

      self.db_system_id = attributes[:'dbSystemId'] if attributes[:'dbSystemId']

      raise 'You cannot provide both :dbSystemId and :db_system_id' if attributes.key?(:'dbSystemId') && attributes.key?(:'db_system_id')

      self.db_system_id = attributes[:'db_system_id'] if attributes[:'db_system_id']

      self.db_system_name = attributes[:'dbSystemName'] if attributes[:'dbSystemName']

      raise 'You cannot provide both :dbSystemName and :db_system_name' if attributes.key?(:'dbSystemName') && attributes.key?(:'db_system_name')

      self.db_system_name = attributes[:'db_system_name'] if attributes[:'db_system_name']

      self.heat_wave_cluster_display_name = attributes[:'heatWaveClusterDisplayName'] if attributes[:'heatWaveClusterDisplayName']

      raise 'You cannot provide both :heatWaveClusterDisplayName and :heat_wave_cluster_display_name' if attributes.key?(:'heatWaveClusterDisplayName') && attributes.key?(:'heat_wave_cluster_display_name')

      self.heat_wave_cluster_display_name = attributes[:'heat_wave_cluster_display_name'] if attributes[:'heat_wave_cluster_display_name']

      self.node_count = attributes[:'nodeCount'] if attributes[:'nodeCount']

      raise 'You cannot provide both :nodeCount and :node_count' if attributes.key?(:'nodeCount') && attributes.key?(:'node_count')

      self.node_count = attributes[:'node_count'] if attributes[:'node_count']

      self.is_lakehouse_enabled = attributes[:'isLakehouseEnabled'] unless attributes[:'isLakehouseEnabled'].nil?

      raise 'You cannot provide both :isLakehouseEnabled and :is_lakehouse_enabled' if attributes.key?(:'isLakehouseEnabled') && attributes.key?(:'is_lakehouse_enabled')

      self.is_lakehouse_enabled = attributes[:'is_lakehouse_enabled'] unless attributes[:'is_lakehouse_enabled'].nil?

      self.heat_wave_node_shape = attributes[:'heatWaveNodeShape'] if attributes[:'heatWaveNodeShape']

      raise 'You cannot provide both :heatWaveNodeShape and :heat_wave_node_shape' if attributes.key?(:'heatWaveNodeShape') && attributes.key?(:'heat_wave_node_shape')

      self.heat_wave_node_shape = attributes[:'heat_wave_node_shape'] if attributes[:'heat_wave_node_shape']

      self.memory_size = attributes[:'memorySize'] if attributes[:'memorySize']

      raise 'You cannot provide both :memorySize and :memory_size' if attributes.key?(:'memorySize') && attributes.key?(:'memory_size')

      self.memory_size = attributes[:'memory_size'] if attributes[:'memory_size']

      self.metrics = attributes[:'metrics'] if attributes[:'metrics']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        status == other.status &&
        db_system_id == other.db_system_id &&
        db_system_name == other.db_system_name &&
        heat_wave_cluster_display_name == other.heat_wave_cluster_display_name &&
        node_count == other.node_count &&
        is_lakehouse_enabled == other.is_lakehouse_enabled &&
        heat_wave_node_shape == other.heat_wave_node_shape &&
        memory_size == other.memory_size &&
        metrics == other.metrics
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [status, db_system_id, db_system_name, heat_wave_cluster_display_name, node_count, is_lakehouse_enabled, heat_wave_node_shape, memory_size, metrics].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
