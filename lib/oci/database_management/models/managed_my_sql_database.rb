# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of the Managed MySQL Database.
  class DatabaseManagement::Models::ManagedMySqlDatabase
    DATABASE_TYPE_ENUM = [
      DATABASE_TYPE_EXTERNAL = 'EXTERNAL'.freeze,
      DATABASE_TYPE_MDS = 'MDS'.freeze,
      DATABASE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MANAGEMENT_STATE_ENUM = [
      MANAGEMENT_STATE_ENABLED = 'ENABLED'.freeze,
      MANAGEMENT_STATE_DISABLED = 'DISABLED'.freeze,
      MANAGEMENT_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the Managed MySQL Database.
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The name of the MySQL Database.
    # @return [String]
    attr_accessor :db_name

    # **[Required]** The version of the MySQL Database.
    # @return [String]
    attr_accessor :db_version

    # **[Required]** The date and time the Managed MySQL Database was created.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The name of the Managed MySQL Database.
    # @return [String]
    attr_accessor :name

    # The name of the HeatWave cluster.
    # @return [String]
    attr_accessor :heat_wave_cluster_display_name

    # Indicates whether HeatWave is enabled for the MySQL Database System or not.
    # @return [BOOLEAN]
    attr_accessor :is_heat_wave_enabled

    # Indicates whether HeatWave Lakehouse is enabled for the MySQL Database System or not.
    # @return [BOOLEAN]
    attr_accessor :is_lakehouse_enabled

    # The shape of the nodes in the HeatWave cluster.
    # @return [String]
    attr_accessor :heat_wave_node_shape

    # The total memory belonging to the HeatWave cluster in GBs.
    # @return [Integer]
    attr_accessor :heat_wave_memory_size

    # The information about individual HeatWave nodes in the cluster.
    # @return [Array<OCI::DatabaseManagement::Models::HeatWaveNode>]
    attr_accessor :heat_wave_nodes

    # Indicates whether the HeatWave cluster is active or not.
    # @return [BOOLEAN]
    attr_accessor :is_heat_wave_active

    # The date and time the Managed MySQL Database was created.
    # @return [DateTime]
    attr_accessor :time_created_heat_wave

    # The type of the MySQL Database. Indicates whether the database
    # is external or MDS.
    #
    # @return [String]
    attr_reader :database_type

    # Indicates database management status.
    # @return [String]
    attr_reader :management_state

    # Indicates lifecycle  state of the resource.
    # @return [String]
    attr_reader :lifecycle_state

    # The date and time the Managed MySQL Database was updated.
    # @return [DateTime]
    attr_accessor :time_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'db_name': :'dbName',
        'db_version': :'dbVersion',
        'time_created': :'timeCreated',
        'name': :'name',
        'heat_wave_cluster_display_name': :'heatWaveClusterDisplayName',
        'is_heat_wave_enabled': :'isHeatWaveEnabled',
        'is_lakehouse_enabled': :'isLakehouseEnabled',
        'heat_wave_node_shape': :'heatWaveNodeShape',
        'heat_wave_memory_size': :'heatWaveMemorySize',
        'heat_wave_nodes': :'heatWaveNodes',
        'is_heat_wave_active': :'isHeatWaveActive',
        'time_created_heat_wave': :'timeCreatedHeatWave',
        'database_type': :'databaseType',
        'management_state': :'managementState',
        'lifecycle_state': :'lifecycleState',
        'time_updated': :'timeUpdated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'db_name': :'String',
        'db_version': :'String',
        'time_created': :'DateTime',
        'name': :'String',
        'heat_wave_cluster_display_name': :'String',
        'is_heat_wave_enabled': :'BOOLEAN',
        'is_lakehouse_enabled': :'BOOLEAN',
        'heat_wave_node_shape': :'String',
        'heat_wave_memory_size': :'Integer',
        'heat_wave_nodes': :'Array<OCI::DatabaseManagement::Models::HeatWaveNode>',
        'is_heat_wave_active': :'BOOLEAN',
        'time_created_heat_wave': :'DateTime',
        'database_type': :'String',
        'management_state': :'String',
        'lifecycle_state': :'String',
        'time_updated': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :db_name The value to assign to the {#db_name} property
    # @option attributes [String] :db_version The value to assign to the {#db_version} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :heat_wave_cluster_display_name The value to assign to the {#heat_wave_cluster_display_name} property
    # @option attributes [BOOLEAN] :is_heat_wave_enabled The value to assign to the {#is_heat_wave_enabled} property
    # @option attributes [BOOLEAN] :is_lakehouse_enabled The value to assign to the {#is_lakehouse_enabled} property
    # @option attributes [String] :heat_wave_node_shape The value to assign to the {#heat_wave_node_shape} property
    # @option attributes [Integer] :heat_wave_memory_size The value to assign to the {#heat_wave_memory_size} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::HeatWaveNode>] :heat_wave_nodes The value to assign to the {#heat_wave_nodes} property
    # @option attributes [BOOLEAN] :is_heat_wave_active The value to assign to the {#is_heat_wave_active} property
    # @option attributes [DateTime] :time_created_heat_wave The value to assign to the {#time_created_heat_wave} property
    # @option attributes [String] :database_type The value to assign to the {#database_type} property
    # @option attributes [String] :management_state The value to assign to the {#management_state} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.db_name = attributes[:'dbName'] if attributes[:'dbName']

      raise 'You cannot provide both :dbName and :db_name' if attributes.key?(:'dbName') && attributes.key?(:'db_name')

      self.db_name = attributes[:'db_name'] if attributes[:'db_name']

      self.db_version = attributes[:'dbVersion'] if attributes[:'dbVersion']

      raise 'You cannot provide both :dbVersion and :db_version' if attributes.key?(:'dbVersion') && attributes.key?(:'db_version')

      self.db_version = attributes[:'db_version'] if attributes[:'db_version']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.name = attributes[:'name'] if attributes[:'name']

      self.heat_wave_cluster_display_name = attributes[:'heatWaveClusterDisplayName'] if attributes[:'heatWaveClusterDisplayName']

      raise 'You cannot provide both :heatWaveClusterDisplayName and :heat_wave_cluster_display_name' if attributes.key?(:'heatWaveClusterDisplayName') && attributes.key?(:'heat_wave_cluster_display_name')

      self.heat_wave_cluster_display_name = attributes[:'heat_wave_cluster_display_name'] if attributes[:'heat_wave_cluster_display_name']

      self.is_heat_wave_enabled = attributes[:'isHeatWaveEnabled'] unless attributes[:'isHeatWaveEnabled'].nil?

      raise 'You cannot provide both :isHeatWaveEnabled and :is_heat_wave_enabled' if attributes.key?(:'isHeatWaveEnabled') && attributes.key?(:'is_heat_wave_enabled')

      self.is_heat_wave_enabled = attributes[:'is_heat_wave_enabled'] unless attributes[:'is_heat_wave_enabled'].nil?

      self.is_lakehouse_enabled = attributes[:'isLakehouseEnabled'] unless attributes[:'isLakehouseEnabled'].nil?

      raise 'You cannot provide both :isLakehouseEnabled and :is_lakehouse_enabled' if attributes.key?(:'isLakehouseEnabled') && attributes.key?(:'is_lakehouse_enabled')

      self.is_lakehouse_enabled = attributes[:'is_lakehouse_enabled'] unless attributes[:'is_lakehouse_enabled'].nil?

      self.heat_wave_node_shape = attributes[:'heatWaveNodeShape'] if attributes[:'heatWaveNodeShape']

      raise 'You cannot provide both :heatWaveNodeShape and :heat_wave_node_shape' if attributes.key?(:'heatWaveNodeShape') && attributes.key?(:'heat_wave_node_shape')

      self.heat_wave_node_shape = attributes[:'heat_wave_node_shape'] if attributes[:'heat_wave_node_shape']

      self.heat_wave_memory_size = attributes[:'heatWaveMemorySize'] if attributes[:'heatWaveMemorySize']

      raise 'You cannot provide both :heatWaveMemorySize and :heat_wave_memory_size' if attributes.key?(:'heatWaveMemorySize') && attributes.key?(:'heat_wave_memory_size')

      self.heat_wave_memory_size = attributes[:'heat_wave_memory_size'] if attributes[:'heat_wave_memory_size']

      self.heat_wave_nodes = attributes[:'heatWaveNodes'] if attributes[:'heatWaveNodes']

      raise 'You cannot provide both :heatWaveNodes and :heat_wave_nodes' if attributes.key?(:'heatWaveNodes') && attributes.key?(:'heat_wave_nodes')

      self.heat_wave_nodes = attributes[:'heat_wave_nodes'] if attributes[:'heat_wave_nodes']

      self.is_heat_wave_active = attributes[:'isHeatWaveActive'] unless attributes[:'isHeatWaveActive'].nil?

      raise 'You cannot provide both :isHeatWaveActive and :is_heat_wave_active' if attributes.key?(:'isHeatWaveActive') && attributes.key?(:'is_heat_wave_active')

      self.is_heat_wave_active = attributes[:'is_heat_wave_active'] unless attributes[:'is_heat_wave_active'].nil?

      self.time_created_heat_wave = attributes[:'timeCreatedHeatWave'] if attributes[:'timeCreatedHeatWave']

      raise 'You cannot provide both :timeCreatedHeatWave and :time_created_heat_wave' if attributes.key?(:'timeCreatedHeatWave') && attributes.key?(:'time_created_heat_wave')

      self.time_created_heat_wave = attributes[:'time_created_heat_wave'] if attributes[:'time_created_heat_wave']

      self.database_type = attributes[:'databaseType'] if attributes[:'databaseType']

      raise 'You cannot provide both :databaseType and :database_type' if attributes.key?(:'databaseType') && attributes.key?(:'database_type')

      self.database_type = attributes[:'database_type'] if attributes[:'database_type']

      self.management_state = attributes[:'managementState'] if attributes[:'managementState']

      raise 'You cannot provide both :managementState and :management_state' if attributes.key?(:'managementState') && attributes.key?(:'management_state')

      self.management_state = attributes[:'management_state'] if attributes[:'management_state']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] database_type Object to be assigned
    def database_type=(database_type)
      # rubocop:disable Style/ConditionalAssignment
      if database_type && !DATABASE_TYPE_ENUM.include?(database_type)
        OCI.logger.debug("Unknown value for 'database_type' [" + database_type + "]. Mapping to 'DATABASE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @database_type = DATABASE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @database_type = database_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] management_state Object to be assigned
    def management_state=(management_state)
      # rubocop:disable Style/ConditionalAssignment
      if management_state && !MANAGEMENT_STATE_ENUM.include?(management_state)
        OCI.logger.debug("Unknown value for 'management_state' [" + management_state + "]. Mapping to 'MANAGEMENT_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @management_state = MANAGEMENT_STATE_UNKNOWN_ENUM_VALUE
      else
        @management_state = management_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        db_name == other.db_name &&
        db_version == other.db_version &&
        time_created == other.time_created &&
        name == other.name &&
        heat_wave_cluster_display_name == other.heat_wave_cluster_display_name &&
        is_heat_wave_enabled == other.is_heat_wave_enabled &&
        is_lakehouse_enabled == other.is_lakehouse_enabled &&
        heat_wave_node_shape == other.heat_wave_node_shape &&
        heat_wave_memory_size == other.heat_wave_memory_size &&
        heat_wave_nodes == other.heat_wave_nodes &&
        is_heat_wave_active == other.is_heat_wave_active &&
        time_created_heat_wave == other.time_created_heat_wave &&
        database_type == other.database_type &&
        management_state == other.management_state &&
        lifecycle_state == other.lifecycle_state &&
        time_updated == other.time_updated
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, db_name, db_version, time_created, name, heat_wave_cluster_display_name, is_heat_wave_enabled, is_lakehouse_enabled, heat_wave_node_shape, heat_wave_memory_size, heat_wave_nodes, is_heat_wave_active, time_created_heat_wave, database_type, management_state, lifecycle_state, time_updated].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
