# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The user credential information.
  class DatabaseManagement::Models::RestCredential
    SSL_TRUST_STORE_TYPE_ENUM = [
      SSL_TRUST_STORE_TYPE_JKS = 'JKS'.freeze,
      SSL_TRUST_STORE_TYPE_BCFKS = 'BCFKS'.freeze
    ].freeze

    # **[Required]** The name of the user.
    # @return [String]
    attr_accessor :username

    # **[Required]** The password of the user.
    # @return [String]
    attr_accessor :password

    # The SSL truststore type.
    # @return [String]
    attr_reader :ssl_trust_store_type

    # The full path of the SSL truststore location in the agent.
    # @return [String]
    attr_accessor :ssl_trust_store_location

    # The password of the SSL truststore location in the agent.
    # @return [String]
    attr_accessor :ssl_trust_store_password

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'username': :'username',
        'password': :'password',
        'ssl_trust_store_type': :'sslTrustStoreType',
        'ssl_trust_store_location': :'sslTrustStoreLocation',
        'ssl_trust_store_password': :'sslTrustStorePassword'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'username': :'String',
        'password': :'String',
        'ssl_trust_store_type': :'String',
        'ssl_trust_store_location': :'String',
        'ssl_trust_store_password': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :username The value to assign to the {#username} property
    # @option attributes [String] :password The value to assign to the {#password} property
    # @option attributes [String] :ssl_trust_store_type The value to assign to the {#ssl_trust_store_type} property
    # @option attributes [String] :ssl_trust_store_location The value to assign to the {#ssl_trust_store_location} property
    # @option attributes [String] :ssl_trust_store_password The value to assign to the {#ssl_trust_store_password} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.username = attributes[:'username'] if attributes[:'username']

      self.password = attributes[:'password'] if attributes[:'password']

      self.ssl_trust_store_type = attributes[:'sslTrustStoreType'] if attributes[:'sslTrustStoreType']
      self.ssl_trust_store_type = "JKS" if ssl_trust_store_type.nil? && !attributes.key?(:'sslTrustStoreType') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :sslTrustStoreType and :ssl_trust_store_type' if attributes.key?(:'sslTrustStoreType') && attributes.key?(:'ssl_trust_store_type')

      self.ssl_trust_store_type = attributes[:'ssl_trust_store_type'] if attributes[:'ssl_trust_store_type']
      self.ssl_trust_store_type = "JKS" if ssl_trust_store_type.nil? && !attributes.key?(:'sslTrustStoreType') && !attributes.key?(:'ssl_trust_store_type') # rubocop:disable Style/StringLiterals

      self.ssl_trust_store_location = attributes[:'sslTrustStoreLocation'] if attributes[:'sslTrustStoreLocation']

      raise 'You cannot provide both :sslTrustStoreLocation and :ssl_trust_store_location' if attributes.key?(:'sslTrustStoreLocation') && attributes.key?(:'ssl_trust_store_location')

      self.ssl_trust_store_location = attributes[:'ssl_trust_store_location'] if attributes[:'ssl_trust_store_location']

      self.ssl_trust_store_password = attributes[:'sslTrustStorePassword'] if attributes[:'sslTrustStorePassword']

      raise 'You cannot provide both :sslTrustStorePassword and :ssl_trust_store_password' if attributes.key?(:'sslTrustStorePassword') && attributes.key?(:'ssl_trust_store_password')

      self.ssl_trust_store_password = attributes[:'ssl_trust_store_password'] if attributes[:'ssl_trust_store_password']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ssl_trust_store_type Object to be assigned
    def ssl_trust_store_type=(ssl_trust_store_type)
      raise "Invalid value for 'ssl_trust_store_type': this must be one of the values in SSL_TRUST_STORE_TYPE_ENUM." if ssl_trust_store_type && !SSL_TRUST_STORE_TYPE_ENUM.include?(ssl_trust_store_type)

      @ssl_trust_store_type = ssl_trust_store_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        username == other.username &&
        password == other.password &&
        ssl_trust_store_type == other.ssl_trust_store_type &&
        ssl_trust_store_location == other.ssl_trust_store_location &&
        ssl_trust_store_password == other.ssl_trust_store_password
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [username, password, ssl_trust_store_type, ssl_trust_store_location, ssl_trust_store_password].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
