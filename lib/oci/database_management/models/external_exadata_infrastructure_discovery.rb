# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'
require_relative 'entity_discovered'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The result of the Exadata infrastructure discovery.
  class DatabaseManagement::Models::ExternalExadataInfrastructureDiscovery < DatabaseManagement::Models::EntityDiscovered
    LICENSE_MODEL_ENUM = [
      LICENSE_MODEL_LICENSE_INCLUDED = 'LICENSE_INCLUDED'.freeze,
      LICENSE_MODEL_BRING_YOUR_OWN_LICENSE = 'BRING_YOUR_OWN_LICENSE'.freeze,
      LICENSE_MODEL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    RACK_SIZE_ENUM = [
      RACK_SIZE_FULL = 'FULL'.freeze,
      RACK_SIZE_HALF = 'HALF'.freeze,
      RACK_SIZE_QUARTER = 'QUARTER'.freeze,
      RACK_SIZE_EIGHTH = 'EIGHTH'.freeze,
      RACK_SIZE_UNKNOWN = 'UNKNOWN'.freeze,
      RACK_SIZE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The unique key of the discovery request.
    # @return [String]
    attr_accessor :discovery_key

    # The Oracle license model that applies to the database management resources.
    #
    # @return [String]
    attr_reader :license_model

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # The size of the Exadata infrastructure.
    # @return [String]
    attr_reader :rack_size

    # The Oracle home path of the Exadata infrastructure.
    # @return [String]
    attr_accessor :grid_home_path

    # The list of DB systems in the Exadata infrastructure.
    # @return [Array<OCI::DatabaseManagement::Models::ExternalDatabaseSystemDiscoverySummary>]
    attr_accessor :db_systems

    # @return [OCI::DatabaseManagement::Models::ExternalStorageGridDiscoverySummary]
    attr_accessor :storage_grid

    # The list of storage servers in the Exadata infrastructure.
    # @return [Array<OCI::DatabaseManagement::Models::ExternalStorageServerDiscoverySummary>]
    attr_accessor :storage_servers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'agent_id': :'agentId',
        'connector_id': :'connectorId',
        'display_name': :'displayName',
        'version': :'version',
        'internal_id': :'internalId',
        'status': :'status',
        'discover_status': :'discoverStatus',
        'discover_error_code': :'discoverErrorCode',
        'discover_error_msg': :'discoverErrorMsg',
        'entity_type': :'entityType',
        'discovery_key': :'discoveryKey',
        'license_model': :'licenseModel',
        'compartment_id': :'compartmentId',
        'rack_size': :'rackSize',
        'grid_home_path': :'gridHomePath',
        'db_systems': :'dbSystems',
        'storage_grid': :'storageGrid',
        'storage_servers': :'storageServers'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'agent_id': :'String',
        'connector_id': :'String',
        'display_name': :'String',
        'version': :'String',
        'internal_id': :'String',
        'status': :'String',
        'discover_status': :'String',
        'discover_error_code': :'String',
        'discover_error_msg': :'String',
        'entity_type': :'String',
        'discovery_key': :'String',
        'license_model': :'String',
        'compartment_id': :'String',
        'rack_size': :'String',
        'grid_home_path': :'String',
        'db_systems': :'Array<OCI::DatabaseManagement::Models::ExternalDatabaseSystemDiscoverySummary>',
        'storage_grid': :'OCI::DatabaseManagement::Models::ExternalStorageGridDiscoverySummary',
        'storage_servers': :'Array<OCI::DatabaseManagement::Models::ExternalStorageServerDiscoverySummary>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#id #id} proprety
    # @option attributes [String] :agent_id The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#agent_id #agent_id} proprety
    # @option attributes [String] :connector_id The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#connector_id #connector_id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#display_name #display_name} proprety
    # @option attributes [String] :version The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#version #version} proprety
    # @option attributes [String] :internal_id The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#internal_id #internal_id} proprety
    # @option attributes [String] :status The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#status #status} proprety
    # @option attributes [String] :discover_status The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#discover_status #discover_status} proprety
    # @option attributes [String] :discover_error_code The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#discover_error_code #discover_error_code} proprety
    # @option attributes [String] :discover_error_msg The value to assign to the {OCI::DatabaseManagement::Models::EntityDiscovered#discover_error_msg #discover_error_msg} proprety
    # @option attributes [String] :discovery_key The value to assign to the {#discovery_key} property
    # @option attributes [String] :license_model The value to assign to the {#license_model} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :rack_size The value to assign to the {#rack_size} property
    # @option attributes [String] :grid_home_path The value to assign to the {#grid_home_path} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::ExternalDatabaseSystemDiscoverySummary>] :db_systems The value to assign to the {#db_systems} property
    # @option attributes [OCI::DatabaseManagement::Models::ExternalStorageGridDiscoverySummary] :storage_grid The value to assign to the {#storage_grid} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::ExternalStorageServerDiscoverySummary>] :storage_servers The value to assign to the {#storage_servers} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['entityType'] = 'INFRASTRUCTURE_DISCOVER'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.discovery_key = attributes[:'discoveryKey'] if attributes[:'discoveryKey']

      raise 'You cannot provide both :discoveryKey and :discovery_key' if attributes.key?(:'discoveryKey') && attributes.key?(:'discovery_key')

      self.discovery_key = attributes[:'discovery_key'] if attributes[:'discovery_key']

      self.license_model = attributes[:'licenseModel'] if attributes[:'licenseModel']

      raise 'You cannot provide both :licenseModel and :license_model' if attributes.key?(:'licenseModel') && attributes.key?(:'license_model')

      self.license_model = attributes[:'license_model'] if attributes[:'license_model']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.rack_size = attributes[:'rackSize'] if attributes[:'rackSize']

      raise 'You cannot provide both :rackSize and :rack_size' if attributes.key?(:'rackSize') && attributes.key?(:'rack_size')

      self.rack_size = attributes[:'rack_size'] if attributes[:'rack_size']

      self.grid_home_path = attributes[:'gridHomePath'] if attributes[:'gridHomePath']

      raise 'You cannot provide both :gridHomePath and :grid_home_path' if attributes.key?(:'gridHomePath') && attributes.key?(:'grid_home_path')

      self.grid_home_path = attributes[:'grid_home_path'] if attributes[:'grid_home_path']

      self.db_systems = attributes[:'dbSystems'] if attributes[:'dbSystems']

      raise 'You cannot provide both :dbSystems and :db_systems' if attributes.key?(:'dbSystems') && attributes.key?(:'db_systems')

      self.db_systems = attributes[:'db_systems'] if attributes[:'db_systems']

      self.storage_grid = attributes[:'storageGrid'] if attributes[:'storageGrid']

      raise 'You cannot provide both :storageGrid and :storage_grid' if attributes.key?(:'storageGrid') && attributes.key?(:'storage_grid')

      self.storage_grid = attributes[:'storage_grid'] if attributes[:'storage_grid']

      self.storage_servers = attributes[:'storageServers'] if attributes[:'storageServers']

      raise 'You cannot provide both :storageServers and :storage_servers' if attributes.key?(:'storageServers') && attributes.key?(:'storage_servers')

      self.storage_servers = attributes[:'storage_servers'] if attributes[:'storage_servers']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_model Object to be assigned
    def license_model=(license_model)
      # rubocop:disable Style/ConditionalAssignment
      if license_model && !LICENSE_MODEL_ENUM.include?(license_model)
        OCI.logger.debug("Unknown value for 'license_model' [" + license_model + "]. Mapping to 'LICENSE_MODEL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @license_model = LICENSE_MODEL_UNKNOWN_ENUM_VALUE
      else
        @license_model = license_model
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rack_size Object to be assigned
    def rack_size=(rack_size)
      # rubocop:disable Style/ConditionalAssignment
      if rack_size && !RACK_SIZE_ENUM.include?(rack_size)
        OCI.logger.debug("Unknown value for 'rack_size' [" + rack_size + "]. Mapping to 'RACK_SIZE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @rack_size = RACK_SIZE_UNKNOWN_ENUM_VALUE
      else
        @rack_size = rack_size
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        agent_id == other.agent_id &&
        connector_id == other.connector_id &&
        display_name == other.display_name &&
        version == other.version &&
        internal_id == other.internal_id &&
        status == other.status &&
        discover_status == other.discover_status &&
        discover_error_code == other.discover_error_code &&
        discover_error_msg == other.discover_error_msg &&
        entity_type == other.entity_type &&
        discovery_key == other.discovery_key &&
        license_model == other.license_model &&
        compartment_id == other.compartment_id &&
        rack_size == other.rack_size &&
        grid_home_path == other.grid_home_path &&
        db_systems == other.db_systems &&
        storage_grid == other.storage_grid &&
        storage_servers == other.storage_servers
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, agent_id, connector_id, display_name, version, internal_id, status, discover_status, discover_error_code, discover_error_msg, entity_type, discovery_key, license_model, compartment_id, rack_size, grid_home_path, db_systems, storage_grid, storage_servers].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
