# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'
require_relative 'discovered_external_db_system_component'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of an external Oracle Database discovered in an external DB system discovery run.
  class DatabaseManagement::Models::DiscoveredExternalDatabase < DatabaseManagement::Models::DiscoveredExternalDbSystemComponent
    DB_TYPE_ENUM = [
      DB_TYPE_CDB = 'CDB'.freeze,
      DB_TYPE_PDB = 'PDB'.freeze,
      DB_TYPE_NON_CDB = 'NON_CDB'.freeze,
      DB_TYPE_ACD = 'ACD'.freeze,
      DB_TYPE_ADB = 'ADB'.freeze,
      DB_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DB_ROLE_ENUM = [
      DB_ROLE_LOGICAL_STANDBY = 'LOGICAL_STANDBY'.freeze,
      DB_ROLE_PHYSICAL_STANDBY = 'PHYSICAL_STANDBY'.freeze,
      DB_ROLE_SNAPSHOT_STANDBY = 'SNAPSHOT_STANDBY'.freeze,
      DB_ROLE_PRIMARY = 'PRIMARY'.freeze,
      DB_ROLE_FAR_SYNC = 'FAR_SYNC'.freeze,
      DB_ROLE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The `DB_UNIQUE_NAME` of the external database.
    # @return [String]
    attr_accessor :db_unique_name

    # The type of Oracle Database. Indicates whether the database is a Container Database,
    # Pluggable Database, or a Non-container Database.
    #
    # @return [String]
    attr_reader :db_type

    # Indicates whether the Oracle Database is part of a cluster.
    # @return [BOOLEAN]
    attr_accessor :is_cluster

    # The Oracle Database edition.
    # @return [String]
    attr_accessor :db_edition

    # The Oracle Database ID.
    # @return [String]
    attr_accessor :db_id

    # The database packs licensed for the external Oracle Database.
    # @return [String]
    attr_accessor :db_packs

    # The role of the Oracle Database in Oracle Data Guard configuration.
    # @return [String]
    attr_reader :db_role

    # The Oracle Database version.
    # @return [String]
    attr_accessor :db_version

    # The list of Pluggable Databases.
    # @return [Array<OCI::DatabaseManagement::Models::DiscoveredExternalPluggableDatabase>]
    attr_accessor :pluggable_databases

    # @return [OCI::DatabaseManagement::Models::ExternalDbSystemDiscoveryConnector]
    attr_accessor :connector

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'component_id': :'componentId',
        'display_name': :'displayName',
        'component_name': :'componentName',
        'component_type': :'componentType',
        'resource_id': :'resourceId',
        'is_selected_for_monitoring': :'isSelectedForMonitoring',
        'status': :'status',
        'associated_components': :'associatedComponents',
        'compartment_id': :'compartmentId',
        'db_unique_name': :'dbUniqueName',
        'db_type': :'dbType',
        'is_cluster': :'isCluster',
        'db_edition': :'dbEdition',
        'db_id': :'dbId',
        'db_packs': :'dbPacks',
        'db_role': :'dbRole',
        'db_version': :'dbVersion',
        'pluggable_databases': :'pluggableDatabases',
        'connector': :'connector'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'component_id': :'String',
        'display_name': :'String',
        'component_name': :'String',
        'component_type': :'String',
        'resource_id': :'String',
        'is_selected_for_monitoring': :'BOOLEAN',
        'status': :'String',
        'associated_components': :'Array<OCI::DatabaseManagement::Models::AssociatedComponent>',
        'compartment_id': :'String',
        'db_unique_name': :'String',
        'db_type': :'String',
        'is_cluster': :'BOOLEAN',
        'db_edition': :'String',
        'db_id': :'String',
        'db_packs': :'String',
        'db_role': :'String',
        'db_version': :'String',
        'pluggable_databases': :'Array<OCI::DatabaseManagement::Models::DiscoveredExternalPluggableDatabase>',
        'connector': :'OCI::DatabaseManagement::Models::ExternalDbSystemDiscoveryConnector'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :component_id The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#component_id #component_id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#display_name #display_name} proprety
    # @option attributes [String] :component_name The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#component_name #component_name} proprety
    # @option attributes [String] :resource_id The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#resource_id #resource_id} proprety
    # @option attributes [BOOLEAN] :is_selected_for_monitoring The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#is_selected_for_monitoring #is_selected_for_monitoring} proprety
    # @option attributes [String] :status The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#status #status} proprety
    # @option attributes [Array<OCI::DatabaseManagement::Models::AssociatedComponent>] :associated_components The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#associated_components #associated_components} proprety
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :db_unique_name The value to assign to the {#db_unique_name} property
    # @option attributes [String] :db_type The value to assign to the {#db_type} property
    # @option attributes [BOOLEAN] :is_cluster The value to assign to the {#is_cluster} property
    # @option attributes [String] :db_edition The value to assign to the {#db_edition} property
    # @option attributes [String] :db_id The value to assign to the {#db_id} property
    # @option attributes [String] :db_packs The value to assign to the {#db_packs} property
    # @option attributes [String] :db_role The value to assign to the {#db_role} property
    # @option attributes [String] :db_version The value to assign to the {#db_version} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::DiscoveredExternalPluggableDatabase>] :pluggable_databases The value to assign to the {#pluggable_databases} property
    # @option attributes [OCI::DatabaseManagement::Models::ExternalDbSystemDiscoveryConnector] :connector The value to assign to the {#connector} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['componentType'] = 'DATABASE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.db_unique_name = attributes[:'dbUniqueName'] if attributes[:'dbUniqueName']

      raise 'You cannot provide both :dbUniqueName and :db_unique_name' if attributes.key?(:'dbUniqueName') && attributes.key?(:'db_unique_name')

      self.db_unique_name = attributes[:'db_unique_name'] if attributes[:'db_unique_name']

      self.db_type = attributes[:'dbType'] if attributes[:'dbType']

      raise 'You cannot provide both :dbType and :db_type' if attributes.key?(:'dbType') && attributes.key?(:'db_type')

      self.db_type = attributes[:'db_type'] if attributes[:'db_type']

      self.is_cluster = attributes[:'isCluster'] unless attributes[:'isCluster'].nil?

      raise 'You cannot provide both :isCluster and :is_cluster' if attributes.key?(:'isCluster') && attributes.key?(:'is_cluster')

      self.is_cluster = attributes[:'is_cluster'] unless attributes[:'is_cluster'].nil?

      self.db_edition = attributes[:'dbEdition'] if attributes[:'dbEdition']

      raise 'You cannot provide both :dbEdition and :db_edition' if attributes.key?(:'dbEdition') && attributes.key?(:'db_edition')

      self.db_edition = attributes[:'db_edition'] if attributes[:'db_edition']

      self.db_id = attributes[:'dbId'] if attributes[:'dbId']

      raise 'You cannot provide both :dbId and :db_id' if attributes.key?(:'dbId') && attributes.key?(:'db_id')

      self.db_id = attributes[:'db_id'] if attributes[:'db_id']

      self.db_packs = attributes[:'dbPacks'] if attributes[:'dbPacks']

      raise 'You cannot provide both :dbPacks and :db_packs' if attributes.key?(:'dbPacks') && attributes.key?(:'db_packs')

      self.db_packs = attributes[:'db_packs'] if attributes[:'db_packs']

      self.db_role = attributes[:'dbRole'] if attributes[:'dbRole']

      raise 'You cannot provide both :dbRole and :db_role' if attributes.key?(:'dbRole') && attributes.key?(:'db_role')

      self.db_role = attributes[:'db_role'] if attributes[:'db_role']

      self.db_version = attributes[:'dbVersion'] if attributes[:'dbVersion']

      raise 'You cannot provide both :dbVersion and :db_version' if attributes.key?(:'dbVersion') && attributes.key?(:'db_version')

      self.db_version = attributes[:'db_version'] if attributes[:'db_version']

      self.pluggable_databases = attributes[:'pluggableDatabases'] if attributes[:'pluggableDatabases']

      raise 'You cannot provide both :pluggableDatabases and :pluggable_databases' if attributes.key?(:'pluggableDatabases') && attributes.key?(:'pluggable_databases')

      self.pluggable_databases = attributes[:'pluggable_databases'] if attributes[:'pluggable_databases']

      self.connector = attributes[:'connector'] if attributes[:'connector']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] db_type Object to be assigned
    def db_type=(db_type)
      # rubocop:disable Style/ConditionalAssignment
      if db_type && !DB_TYPE_ENUM.include?(db_type)
        OCI.logger.debug("Unknown value for 'db_type' [" + db_type + "]. Mapping to 'DB_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @db_type = DB_TYPE_UNKNOWN_ENUM_VALUE
      else
        @db_type = db_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] db_role Object to be assigned
    def db_role=(db_role)
      # rubocop:disable Style/ConditionalAssignment
      if db_role && !DB_ROLE_ENUM.include?(db_role)
        OCI.logger.debug("Unknown value for 'db_role' [" + db_role + "]. Mapping to 'DB_ROLE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @db_role = DB_ROLE_UNKNOWN_ENUM_VALUE
      else
        @db_role = db_role
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        component_id == other.component_id &&
        display_name == other.display_name &&
        component_name == other.component_name &&
        component_type == other.component_type &&
        resource_id == other.resource_id &&
        is_selected_for_monitoring == other.is_selected_for_monitoring &&
        status == other.status &&
        associated_components == other.associated_components &&
        compartment_id == other.compartment_id &&
        db_unique_name == other.db_unique_name &&
        db_type == other.db_type &&
        is_cluster == other.is_cluster &&
        db_edition == other.db_edition &&
        db_id == other.db_id &&
        db_packs == other.db_packs &&
        db_role == other.db_role &&
        db_version == other.db_version &&
        pluggable_databases == other.pluggable_databases &&
        connector == other.connector
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [component_id, display_name, component_name, component_type, resource_id, is_selected_for_monitoring, status, associated_components, compartment_id, db_unique_name, db_type, is_cluster, db_edition, db_id, db_packs, db_role, db_version, pluggable_databases, connector].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
