# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The IORM plan from an Exadata storage server.
  class DatabaseManagement::Models::IormPlan
    PLAN_STATUS_ENUM = [
      PLAN_STATUS_ACTIVE = 'ACTIVE'.freeze,
      PLAN_STATUS_INACTIVE = 'INACTIVE'.freeze,
      PLAN_STATUS_OTHER = 'OTHER'.freeze,
      PLAN_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PLAN_OBJECTIVE_ENUM = [
      PLAN_OBJECTIVE_AUTO = 'AUTO'.freeze,
      PLAN_OBJECTIVE_HIGH_THROUGHPUT = 'HIGH_THROUGHPUT'.freeze,
      PLAN_OBJECTIVE_LOW_LATENCY = 'LOW_LATENCY'.freeze,
      PLAN_OBJECTIVE_BALANCED = 'BALANCED'.freeze,
      PLAN_OBJECTIVE_BASIC = 'BASIC'.freeze,
      PLAN_OBJECTIVE_OTHER = 'OTHER'.freeze,
      PLAN_OBJECTIVE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The status of the IORM plan.
    # @return [String]
    attr_reader :plan_status

    # **[Required]** The objective of the IORM plan.
    # @return [String]
    attr_reader :plan_objective

    # @return [OCI::DatabaseManagement::Models::DatabasePlan]
    attr_accessor :db_plan

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'plan_status': :'planStatus',
        'plan_objective': :'planObjective',
        'db_plan': :'dbPlan'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'plan_status': :'String',
        'plan_objective': :'String',
        'db_plan': :'OCI::DatabaseManagement::Models::DatabasePlan'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :plan_status The value to assign to the {#plan_status} property
    # @option attributes [String] :plan_objective The value to assign to the {#plan_objective} property
    # @option attributes [OCI::DatabaseManagement::Models::DatabasePlan] :db_plan The value to assign to the {#db_plan} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.plan_status = attributes[:'planStatus'] if attributes[:'planStatus']

      raise 'You cannot provide both :planStatus and :plan_status' if attributes.key?(:'planStatus') && attributes.key?(:'plan_status')

      self.plan_status = attributes[:'plan_status'] if attributes[:'plan_status']

      self.plan_objective = attributes[:'planObjective'] if attributes[:'planObjective']

      raise 'You cannot provide both :planObjective and :plan_objective' if attributes.key?(:'planObjective') && attributes.key?(:'plan_objective')

      self.plan_objective = attributes[:'plan_objective'] if attributes[:'plan_objective']

      self.db_plan = attributes[:'dbPlan'] if attributes[:'dbPlan']

      raise 'You cannot provide both :dbPlan and :db_plan' if attributes.key?(:'dbPlan') && attributes.key?(:'db_plan')

      self.db_plan = attributes[:'db_plan'] if attributes[:'db_plan']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan_status Object to be assigned
    def plan_status=(plan_status)
      # rubocop:disable Style/ConditionalAssignment
      if plan_status && !PLAN_STATUS_ENUM.include?(plan_status)
        OCI.logger.debug("Unknown value for 'plan_status' [" + plan_status + "]. Mapping to 'PLAN_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @plan_status = PLAN_STATUS_UNKNOWN_ENUM_VALUE
      else
        @plan_status = plan_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan_objective Object to be assigned
    def plan_objective=(plan_objective)
      # rubocop:disable Style/ConditionalAssignment
      if plan_objective && !PLAN_OBJECTIVE_ENUM.include?(plan_objective)
        OCI.logger.debug("Unknown value for 'plan_objective' [" + plan_objective + "]. Mapping to 'PLAN_OBJECTIVE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @plan_objective = PLAN_OBJECTIVE_UNKNOWN_ENUM_VALUE
      else
        @plan_objective = plan_objective
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        plan_status == other.plan_status &&
        plan_objective == other.plan_objective &&
        db_plan == other.db_plan
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [plan_status, plan_objective, db_plan].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
