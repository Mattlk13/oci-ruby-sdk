# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Save current list of Sql statements into another Sql tuning set.
  #
  class DatabaseManagement::Models::SaveSqlTuningSetAsDetails
    PLAN_FILTER_ENUM = [
      PLAN_FILTER_LAST_GENERATED = 'LAST_GENERATED'.freeze,
      PLAN_FILTER_FIRST_GENERATED = 'FIRST_GENERATED'.freeze,
      PLAN_FILTER_LAST_LOADED = 'LAST_LOADED'.freeze,
      PLAN_FILTER_FIRST_LOADED = 'FIRST_LOADED'.freeze,
      PLAN_FILTER_MAX_ELAPSED_TIME = 'MAX_ELAPSED_TIME'.freeze,
      PLAN_FILTER_MAX_BUFFER_GETS = 'MAX_BUFFER_GETS'.freeze,
      PLAN_FILTER_MAX_DISK_READS = 'MAX_DISK_READS'.freeze,
      PLAN_FILTER_MAX_DIRECT_WRITES = 'MAX_DIRECT_WRITES'.freeze,
      PLAN_FILTER_MAX_OPTIMIZER_COST = 'MAX_OPTIMIZER_COST'.freeze
    ].freeze

    RECURSIVE_SQL_ENUM = [
      RECURSIVE_SQL_HAS_RECURSIVE_SQL = 'HAS_RECURSIVE_SQL'.freeze,
      RECURSIVE_SQL_NO_RECURSIVE_SQL = 'NO_RECURSIVE_SQL'.freeze
    ].freeze

    RANKING_MEASURE1_ENUM = [
      RANKING_MEASURE1_ELAPSED_TIME = 'ELAPSED_TIME'.freeze,
      RANKING_MEASURE1_CPU_TIME = 'CPU_TIME'.freeze,
      RANKING_MEASURE1_OPTIMIZER_COST = 'OPTIMIZER_COST'.freeze,
      RANKING_MEASURE1_BUFFER_GETS = 'BUFFER_GETS'.freeze,
      RANKING_MEASURE1_DISK_READS = 'DISK_READS'.freeze,
      RANKING_MEASURE1_DIRECT_WRITES = 'DIRECT_WRITES'.freeze
    ].freeze

    RANKING_MEASURE2_ENUM = [
      RANKING_MEASURE2_ELAPSED_TIME = 'ELAPSED_TIME'.freeze,
      RANKING_MEASURE2_CPU_TIME = 'CPU_TIME'.freeze,
      RANKING_MEASURE2_OPTIMIZER_COST = 'OPTIMIZER_COST'.freeze,
      RANKING_MEASURE2_BUFFER_GETS = 'BUFFER_GETS'.freeze,
      RANKING_MEASURE2_DISK_READS = 'DISK_READS'.freeze,
      RANKING_MEASURE2_DIRECT_WRITES = 'DIRECT_WRITES'.freeze
    ].freeze

    RANKING_MEASURE3_ENUM = [
      RANKING_MEASURE3_ELAPSED_TIME = 'ELAPSED_TIME'.freeze,
      RANKING_MEASURE3_CPU_TIME = 'CPU_TIME'.freeze,
      RANKING_MEASURE3_OPTIMIZER_COST = 'OPTIMIZER_COST'.freeze,
      RANKING_MEASURE3_BUFFER_GETS = 'BUFFER_GETS'.freeze,
      RANKING_MEASURE3_DISK_READS = 'DISK_READS'.freeze,
      RANKING_MEASURE3_DIRECT_WRITES = 'DIRECT_WRITES'.freeze
    ].freeze

    LOAD_OPTION_ENUM = [
      LOAD_OPTION_INSERT = 'INSERT'.freeze,
      LOAD_OPTION_UPDATE = 'UPDATE'.freeze,
      LOAD_OPTION_MERGE = 'MERGE'.freeze
    ].freeze

    UPDATE_OPTION_ENUM = [
      UPDATE_OPTION_REPLACE = 'REPLACE'.freeze,
      UPDATE_OPTION_ACCUMULATE = 'ACCUMULATE'.freeze
    ].freeze

    UPDATE_CONDITION_ENUM = [
      UPDATE_CONDITION_OLD = 'OLD'.freeze,
      UPDATE_CONDITION_NEW = 'NEW'.freeze
    ].freeze

    # This attribute is required.
    # @return [OCI::DatabaseManagement::Models::SqlTuningSetAdminCredentialDetails]
    attr_accessor :credential_details

    # Flag to indicate whether to save the Sql tuning set or just display the plsql used to save Sql tuning set.
    #
    # @return [Integer]
    attr_accessor :show_sql_only

    # The owner of the Sql tuning set.
    # @return [String]
    attr_accessor :owner

    # **[Required]** The name of the Sql tuning set.
    # @return [String]
    attr_accessor :name

    # **[Required]** The name of the destination Sql tuning set.
    # @return [String]
    attr_accessor :destination_sql_tuning_set_name

    # The description for the destination Sql tuning set.
    # @return [String]
    attr_accessor :destination_sql_tuning_set_description

    # Owner of the destination Sql tuning set.
    # @return [String]
    attr_accessor :destination_sql_tuning_set_owner

    # **[Required]** Specifies whether to create a new Sql tuning set or not.
    # Possible values
    # 1 - Create a new Sql tuning set
    # 0 - Do not create a new Sql tuning set
    #
    # @return [Integer]
    attr_accessor :create_new

    # Specifies the Sql predicate to filter the Sql from the Sql tuning set defined on attributes of the SQLSET_ROW.
    # User could use any combination of the following columns with appropriate values as Sql predicate
    # Refer to the documentation https://docs.oracle.com/en/database/oracle/oracle-database/18/arpls/DBMS_SQLTUNE.html#GUID-1F4AFB03-7B29-46FC-B3F2-CB01EC36326C
    #
    # @return [String]
    attr_accessor :basic_filter

    # Specifies the plan filter.
    # This parameter enables you to select a single plan when a statement has multiple plans.
    # Refer to the documentation https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/DBMS_SQLSET.html#GUID-9D995019-91AB-4B1E-9EAF-031050789B21
    #
    # @return [String]
    attr_reader :plan_filter

    # Specifies that the filter must include recursive Sql in the Sql tuning set.
    # @return [String]
    attr_reader :recursive_sql

    # Specifies a filter that picks the top n% according to the supplied ranking measure.
    # Note that this parameter applies only if one ranking measure is supplied.
    #
    # @return [Float]
    attr_accessor :result_percentage

    # The top limit Sql from the filtered source, ranked by the ranking measure.
    # @return [Integer]
    attr_accessor :result_limit

    # Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
    #
    # @return [String]
    attr_reader :ranking_measure1

    # Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
    #
    # @return [String]
    attr_reader :ranking_measure2

    # Specifies an ORDER BY clause on the selected Sql. User can specify upto three ranking measures.
    #
    # @return [String]
    attr_reader :ranking_measure3

    # Specifies the list of Sql statement attributes to return in the result.
    # Note that this parameter cannot be made an enum since custom value can take a list of comma separated attribute names.
    # Attribute list can take one of the following values.
    #  TYPICAL - Specifies BASIC plus Sql plan (without row source statistics) and without object reference list (default).
    #  BASIC - Specifies all attributes (such as execution statistics and binds) except the plans. The execution context is always part of the result.
    #  ALL - Specifies all attributes.
    #  CUSTOM - Comma-separated list of the following attribute names.
    #           - EXECUTION_STATISTICS
    #           - BIND_LIST
    #           - OBJECT_LIST
    #           - SQL_PLAN
    #           - SQL_PLAN_STATISTICS
    # Usage examples:
    #   1. \"attributeList\": \"TYPICAL\"
    #   2. \"attributeList\": \"ALL\"
    #   3. \"attributeList\": \"EXECUTION_STATISTICS,OBJECT_LIST,SQL_PLAN\"
    #
    # @return [String]
    attr_accessor :attribute_list

    # Specifies which statements are loaded into the Sql tuning set.
    # The possible values are.
    #   - INSERT (default)
    #     Adds only new statements.
    #   - UPDATE
    #     Updates existing the Sql statements and ignores any new statements.
    #   - MERGE
    #     Inserts new statements and updates the information of the existing ones.
    #
    # @return [String]
    attr_reader :load_option

    # Specifies how existing Sql statements are updated.
    # This parameter is applicable only if load_option is specified with UPDATE or MERGE as an option.
    # Update option can take one of the following values.
    #    REPLACE (default) - Updates the statement using the new statistics, bind list, object list, and so on.
    #    ACCUMULATE - Combines attributes when possible (for example, statistics such as elapsed_time), otherwise replaces the existing values (for example, module and action) with the provided values.
    #    Following Sql statement attributes can be accumulated.
    #        elapsed_time
    #        buffer_gets
    #        direct_writes
    #        disk_reads
    #        row_processed
    #        fetches
    #        executions
    #        end_of_fetch_count
    #        stat_period
    #        active_stat_period
    #
    # @return [String]
    attr_reader :update_option

    # Specifies when to perform the update.
    # The procedure only performs the update when the specified condition is satisfied.
    # The condition can refer to either the data source or destination.
    # The condition must use the following prefixes to refer to attributes from the source or the destination:
    #   OLD  \u2014 Refers to statement attributes from the SQL tuning set (destination).
    #   NEW  \u2014 Refers to statement attributes from the input statements (source).
    #   NULL \u2014 No updates are performed.
    #
    # @return [String]
    attr_reader :update_condition

    # Specifies the list of Sql statement attributes to update during a merge or update.
    # Note that this parameter cannot be made an enum since custom value can take a list of comma separated attribute names.
    # Update attributes can take one of the following values.
    #    NULL (default) - Specifies the content of the input cursor except the execution context. On other terms, it is equivalent to ALL without execution contexts such as module and action.
    #    BASIC - Specifies statistics and binds only.
    #    TYPICAL - Specifies BASIC with Sql plans (without row source statistics) and without an object reference list.
    #    ALL - Specifies all attributes, including the execution context attributes such as module and action.
    #    CUSTOM - List of comma separated attribute names to update
    #        EXECUTION_CONTEXT
    #        EXECUTION_STATISTICS
    #        SQL_BINDS
    #        SQL_PLAN
    #        SQL_PLAN_STATISTICS (similar to SQL_PLAN with added row source statistics)
    # Usage examples:
    #   1. \"updateAttributes\": \"TYPICAL\"
    #   2. \"updateAttributes\": \"BASIC\"
    #   3. \"updateAttributes\": \"EXECUTION_STATISTICS,SQL_PLAN_STATISTICS,SQL_PLAN\"
    #   4. \"updateAttributes\": \"EXECUTION_STATISTICS,SQL_PLAN\"
    #
    # @return [String]
    attr_accessor :update_attributes

    # Specifies whether to update attributes when the new value is NULL.
    # If TRUE, then the procedure does not update an attribute when the new value is NULL.
    # That is, do not override with NULL values unless intentional.
    # Possible values - true or false
    #
    # @return [BOOLEAN]
    attr_accessor :is_ignore_null

    # Specifies whether to commit statements after DML.
    # If a value is provided, then the load commits after each specified number of statements is inserted.
    # If NULL is provided, then the load commits only once, at the end of the operation.
    #
    # @return [Integer]
    attr_accessor :commit_rows

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'credential_details': :'credentialDetails',
        'show_sql_only': :'showSqlOnly',
        'owner': :'owner',
        'name': :'name',
        'destination_sql_tuning_set_name': :'destinationSqlTuningSetName',
        'destination_sql_tuning_set_description': :'destinationSqlTuningSetDescription',
        'destination_sql_tuning_set_owner': :'destinationSqlTuningSetOwner',
        'create_new': :'createNew',
        'basic_filter': :'basicFilter',
        'plan_filter': :'planFilter',
        'recursive_sql': :'recursiveSql',
        'result_percentage': :'resultPercentage',
        'result_limit': :'resultLimit',
        'ranking_measure1': :'rankingMeasure1',
        'ranking_measure2': :'rankingMeasure2',
        'ranking_measure3': :'rankingMeasure3',
        'attribute_list': :'attributeList',
        'load_option': :'loadOption',
        'update_option': :'updateOption',
        'update_condition': :'updateCondition',
        'update_attributes': :'updateAttributes',
        'is_ignore_null': :'isIgnoreNull',
        'commit_rows': :'commitRows'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'credential_details': :'OCI::DatabaseManagement::Models::SqlTuningSetAdminCredentialDetails',
        'show_sql_only': :'Integer',
        'owner': :'String',
        'name': :'String',
        'destination_sql_tuning_set_name': :'String',
        'destination_sql_tuning_set_description': :'String',
        'destination_sql_tuning_set_owner': :'String',
        'create_new': :'Integer',
        'basic_filter': :'String',
        'plan_filter': :'String',
        'recursive_sql': :'String',
        'result_percentage': :'Float',
        'result_limit': :'Integer',
        'ranking_measure1': :'String',
        'ranking_measure2': :'String',
        'ranking_measure3': :'String',
        'attribute_list': :'String',
        'load_option': :'String',
        'update_option': :'String',
        'update_condition': :'String',
        'update_attributes': :'String',
        'is_ignore_null': :'BOOLEAN',
        'commit_rows': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::DatabaseManagement::Models::SqlTuningSetAdminCredentialDetails] :credential_details The value to assign to the {#credential_details} property
    # @option attributes [Integer] :show_sql_only The value to assign to the {#show_sql_only} property
    # @option attributes [String] :owner The value to assign to the {#owner} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :destination_sql_tuning_set_name The value to assign to the {#destination_sql_tuning_set_name} property
    # @option attributes [String] :destination_sql_tuning_set_description The value to assign to the {#destination_sql_tuning_set_description} property
    # @option attributes [String] :destination_sql_tuning_set_owner The value to assign to the {#destination_sql_tuning_set_owner} property
    # @option attributes [Integer] :create_new The value to assign to the {#create_new} property
    # @option attributes [String] :basic_filter The value to assign to the {#basic_filter} property
    # @option attributes [String] :plan_filter The value to assign to the {#plan_filter} property
    # @option attributes [String] :recursive_sql The value to assign to the {#recursive_sql} property
    # @option attributes [Float] :result_percentage The value to assign to the {#result_percentage} property
    # @option attributes [Integer] :result_limit The value to assign to the {#result_limit} property
    # @option attributes [String] :ranking_measure1 The value to assign to the {#ranking_measure1} property
    # @option attributes [String] :ranking_measure2 The value to assign to the {#ranking_measure2} property
    # @option attributes [String] :ranking_measure3 The value to assign to the {#ranking_measure3} property
    # @option attributes [String] :attribute_list The value to assign to the {#attribute_list} property
    # @option attributes [String] :load_option The value to assign to the {#load_option} property
    # @option attributes [String] :update_option The value to assign to the {#update_option} property
    # @option attributes [String] :update_condition The value to assign to the {#update_condition} property
    # @option attributes [String] :update_attributes The value to assign to the {#update_attributes} property
    # @option attributes [BOOLEAN] :is_ignore_null The value to assign to the {#is_ignore_null} property
    # @option attributes [Integer] :commit_rows The value to assign to the {#commit_rows} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.credential_details = attributes[:'credentialDetails'] if attributes[:'credentialDetails']

      raise 'You cannot provide both :credentialDetails and :credential_details' if attributes.key?(:'credentialDetails') && attributes.key?(:'credential_details')

      self.credential_details = attributes[:'credential_details'] if attributes[:'credential_details']

      self.show_sql_only = attributes[:'showSqlOnly'] if attributes[:'showSqlOnly']

      raise 'You cannot provide both :showSqlOnly and :show_sql_only' if attributes.key?(:'showSqlOnly') && attributes.key?(:'show_sql_only')

      self.show_sql_only = attributes[:'show_sql_only'] if attributes[:'show_sql_only']

      self.owner = attributes[:'owner'] if attributes[:'owner']
      self.owner = "null" if owner.nil? && !attributes.key?(:'owner') # rubocop:disable Style/StringLiterals

      self.name = attributes[:'name'] if attributes[:'name']

      self.destination_sql_tuning_set_name = attributes[:'destinationSqlTuningSetName'] if attributes[:'destinationSqlTuningSetName']

      raise 'You cannot provide both :destinationSqlTuningSetName and :destination_sql_tuning_set_name' if attributes.key?(:'destinationSqlTuningSetName') && attributes.key?(:'destination_sql_tuning_set_name')

      self.destination_sql_tuning_set_name = attributes[:'destination_sql_tuning_set_name'] if attributes[:'destination_sql_tuning_set_name']

      self.destination_sql_tuning_set_description = attributes[:'destinationSqlTuningSetDescription'] if attributes[:'destinationSqlTuningSetDescription']

      raise 'You cannot provide both :destinationSqlTuningSetDescription and :destination_sql_tuning_set_description' if attributes.key?(:'destinationSqlTuningSetDescription') && attributes.key?(:'destination_sql_tuning_set_description')

      self.destination_sql_tuning_set_description = attributes[:'destination_sql_tuning_set_description'] if attributes[:'destination_sql_tuning_set_description']

      self.destination_sql_tuning_set_owner = attributes[:'destinationSqlTuningSetOwner'] if attributes[:'destinationSqlTuningSetOwner']
      self.destination_sql_tuning_set_owner = "null" if destination_sql_tuning_set_owner.nil? && !attributes.key?(:'destinationSqlTuningSetOwner') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :destinationSqlTuningSetOwner and :destination_sql_tuning_set_owner' if attributes.key?(:'destinationSqlTuningSetOwner') && attributes.key?(:'destination_sql_tuning_set_owner')

      self.destination_sql_tuning_set_owner = attributes[:'destination_sql_tuning_set_owner'] if attributes[:'destination_sql_tuning_set_owner']
      self.destination_sql_tuning_set_owner = "null" if destination_sql_tuning_set_owner.nil? && !attributes.key?(:'destinationSqlTuningSetOwner') && !attributes.key?(:'destination_sql_tuning_set_owner') # rubocop:disable Style/StringLiterals

      self.create_new = attributes[:'createNew'] if attributes[:'createNew']

      raise 'You cannot provide both :createNew and :create_new' if attributes.key?(:'createNew') && attributes.key?(:'create_new')

      self.create_new = attributes[:'create_new'] if attributes[:'create_new']

      self.basic_filter = attributes[:'basicFilter'] if attributes[:'basicFilter']
      self.basic_filter = "null" if basic_filter.nil? && !attributes.key?(:'basicFilter') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :basicFilter and :basic_filter' if attributes.key?(:'basicFilter') && attributes.key?(:'basic_filter')

      self.basic_filter = attributes[:'basic_filter'] if attributes[:'basic_filter']
      self.basic_filter = "null" if basic_filter.nil? && !attributes.key?(:'basicFilter') && !attributes.key?(:'basic_filter') # rubocop:disable Style/StringLiterals

      self.plan_filter = attributes[:'planFilter'] if attributes[:'planFilter']
      self.plan_filter = "null" if plan_filter.nil? && !attributes.key?(:'planFilter') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :planFilter and :plan_filter' if attributes.key?(:'planFilter') && attributes.key?(:'plan_filter')

      self.plan_filter = attributes[:'plan_filter'] if attributes[:'plan_filter']
      self.plan_filter = "null" if plan_filter.nil? && !attributes.key?(:'planFilter') && !attributes.key?(:'plan_filter') # rubocop:disable Style/StringLiterals

      self.recursive_sql = attributes[:'recursiveSql'] if attributes[:'recursiveSql']
      self.recursive_sql = "HAS_RECURSIVE_SQL" if recursive_sql.nil? && !attributes.key?(:'recursiveSql') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :recursiveSql and :recursive_sql' if attributes.key?(:'recursiveSql') && attributes.key?(:'recursive_sql')

      self.recursive_sql = attributes[:'recursive_sql'] if attributes[:'recursive_sql']
      self.recursive_sql = "HAS_RECURSIVE_SQL" if recursive_sql.nil? && !attributes.key?(:'recursiveSql') && !attributes.key?(:'recursive_sql') # rubocop:disable Style/StringLiterals

      self.result_percentage = attributes[:'resultPercentage'] if attributes[:'resultPercentage']
      self.result_percentage = 1.0 if result_percentage.nil? && !attributes.key?(:'resultPercentage') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :resultPercentage and :result_percentage' if attributes.key?(:'resultPercentage') && attributes.key?(:'result_percentage')

      self.result_percentage = attributes[:'result_percentage'] if attributes[:'result_percentage']
      self.result_percentage = 1.0 if result_percentage.nil? && !attributes.key?(:'resultPercentage') && !attributes.key?(:'result_percentage') # rubocop:disable Style/StringLiterals

      self.result_limit = attributes[:'resultLimit'] if attributes[:'resultLimit']

      raise 'You cannot provide both :resultLimit and :result_limit' if attributes.key?(:'resultLimit') && attributes.key?(:'result_limit')

      self.result_limit = attributes[:'result_limit'] if attributes[:'result_limit']

      self.ranking_measure1 = attributes[:'rankingMeasure1'] if attributes[:'rankingMeasure1']
      self.ranking_measure1 = "null" if ranking_measure1.nil? && !attributes.key?(:'rankingMeasure1') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :rankingMeasure1 and :ranking_measure1' if attributes.key?(:'rankingMeasure1') && attributes.key?(:'ranking_measure1')

      self.ranking_measure1 = attributes[:'ranking_measure1'] if attributes[:'ranking_measure1']
      self.ranking_measure1 = "null" if ranking_measure1.nil? && !attributes.key?(:'rankingMeasure1') && !attributes.key?(:'ranking_measure1') # rubocop:disable Style/StringLiterals

      self.ranking_measure2 = attributes[:'rankingMeasure2'] if attributes[:'rankingMeasure2']
      self.ranking_measure2 = "null" if ranking_measure2.nil? && !attributes.key?(:'rankingMeasure2') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :rankingMeasure2 and :ranking_measure2' if attributes.key?(:'rankingMeasure2') && attributes.key?(:'ranking_measure2')

      self.ranking_measure2 = attributes[:'ranking_measure2'] if attributes[:'ranking_measure2']
      self.ranking_measure2 = "null" if ranking_measure2.nil? && !attributes.key?(:'rankingMeasure2') && !attributes.key?(:'ranking_measure2') # rubocop:disable Style/StringLiterals

      self.ranking_measure3 = attributes[:'rankingMeasure3'] if attributes[:'rankingMeasure3']
      self.ranking_measure3 = "null" if ranking_measure3.nil? && !attributes.key?(:'rankingMeasure3') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :rankingMeasure3 and :ranking_measure3' if attributes.key?(:'rankingMeasure3') && attributes.key?(:'ranking_measure3')

      self.ranking_measure3 = attributes[:'ranking_measure3'] if attributes[:'ranking_measure3']
      self.ranking_measure3 = "null" if ranking_measure3.nil? && !attributes.key?(:'rankingMeasure3') && !attributes.key?(:'ranking_measure3') # rubocop:disable Style/StringLiterals

      self.attribute_list = attributes[:'attributeList'] if attributes[:'attributeList']
      self.attribute_list = "TYPICAL" if attribute_list.nil? && !attributes.key?(:'attributeList') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :attributeList and :attribute_list' if attributes.key?(:'attributeList') && attributes.key?(:'attribute_list')

      self.attribute_list = attributes[:'attribute_list'] if attributes[:'attribute_list']
      self.attribute_list = "TYPICAL" if attribute_list.nil? && !attributes.key?(:'attributeList') && !attributes.key?(:'attribute_list') # rubocop:disable Style/StringLiterals

      self.load_option = attributes[:'loadOption'] if attributes[:'loadOption']
      self.load_option = "INSERT" if load_option.nil? && !attributes.key?(:'loadOption') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :loadOption and :load_option' if attributes.key?(:'loadOption') && attributes.key?(:'load_option')

      self.load_option = attributes[:'load_option'] if attributes[:'load_option']
      self.load_option = "INSERT" if load_option.nil? && !attributes.key?(:'loadOption') && !attributes.key?(:'load_option') # rubocop:disable Style/StringLiterals

      self.update_option = attributes[:'updateOption'] if attributes[:'updateOption']
      self.update_option = "REPLACE" if update_option.nil? && !attributes.key?(:'updateOption') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :updateOption and :update_option' if attributes.key?(:'updateOption') && attributes.key?(:'update_option')

      self.update_option = attributes[:'update_option'] if attributes[:'update_option']
      self.update_option = "REPLACE" if update_option.nil? && !attributes.key?(:'updateOption') && !attributes.key?(:'update_option') # rubocop:disable Style/StringLiterals

      self.update_condition = attributes[:'updateCondition'] if attributes[:'updateCondition']
      self.update_condition = "null" if update_condition.nil? && !attributes.key?(:'updateCondition') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :updateCondition and :update_condition' if attributes.key?(:'updateCondition') && attributes.key?(:'update_condition')

      self.update_condition = attributes[:'update_condition'] if attributes[:'update_condition']
      self.update_condition = "null" if update_condition.nil? && !attributes.key?(:'updateCondition') && !attributes.key?(:'update_condition') # rubocop:disable Style/StringLiterals

      self.update_attributes = attributes[:'updateAttributes'] if attributes[:'updateAttributes']
      self.update_attributes = "null" if update_attributes.nil? && !attributes.key?(:'updateAttributes') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :updateAttributes and :update_attributes' if attributes.key?(:'updateAttributes') && attributes.key?(:'update_attributes')

      self.update_attributes = attributes[:'update_attributes'] if attributes[:'update_attributes']
      self.update_attributes = "null" if update_attributes.nil? && !attributes.key?(:'updateAttributes') && !attributes.key?(:'update_attributes') # rubocop:disable Style/StringLiterals

      self.is_ignore_null = attributes[:'isIgnoreNull'] unless attributes[:'isIgnoreNull'].nil?
      self.is_ignore_null = true if is_ignore_null.nil? && !attributes.key?(:'isIgnoreNull') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isIgnoreNull and :is_ignore_null' if attributes.key?(:'isIgnoreNull') && attributes.key?(:'is_ignore_null')

      self.is_ignore_null = attributes[:'is_ignore_null'] unless attributes[:'is_ignore_null'].nil?
      self.is_ignore_null = true if is_ignore_null.nil? && !attributes.key?(:'isIgnoreNull') && !attributes.key?(:'is_ignore_null') # rubocop:disable Style/StringLiterals

      self.commit_rows = attributes[:'commitRows'] if attributes[:'commitRows']

      raise 'You cannot provide both :commitRows and :commit_rows' if attributes.key?(:'commitRows') && attributes.key?(:'commit_rows')

      self.commit_rows = attributes[:'commit_rows'] if attributes[:'commit_rows']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan_filter Object to be assigned
    def plan_filter=(plan_filter)
      raise "Invalid value for 'plan_filter': this must be one of the values in PLAN_FILTER_ENUM." if plan_filter && !PLAN_FILTER_ENUM.include?(plan_filter)

      @plan_filter = plan_filter
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recursive_sql Object to be assigned
    def recursive_sql=(recursive_sql)
      raise "Invalid value for 'recursive_sql': this must be one of the values in RECURSIVE_SQL_ENUM." if recursive_sql && !RECURSIVE_SQL_ENUM.include?(recursive_sql)

      @recursive_sql = recursive_sql
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ranking_measure1 Object to be assigned
    def ranking_measure1=(ranking_measure1)
      raise "Invalid value for 'ranking_measure1': this must be one of the values in RANKING_MEASURE1_ENUM." if ranking_measure1 && !RANKING_MEASURE1_ENUM.include?(ranking_measure1)

      @ranking_measure1 = ranking_measure1
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ranking_measure2 Object to be assigned
    def ranking_measure2=(ranking_measure2)
      raise "Invalid value for 'ranking_measure2': this must be one of the values in RANKING_MEASURE2_ENUM." if ranking_measure2 && !RANKING_MEASURE2_ENUM.include?(ranking_measure2)

      @ranking_measure2 = ranking_measure2
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ranking_measure3 Object to be assigned
    def ranking_measure3=(ranking_measure3)
      raise "Invalid value for 'ranking_measure3': this must be one of the values in RANKING_MEASURE3_ENUM." if ranking_measure3 && !RANKING_MEASURE3_ENUM.include?(ranking_measure3)

      @ranking_measure3 = ranking_measure3
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] load_option Object to be assigned
    def load_option=(load_option)
      raise "Invalid value for 'load_option': this must be one of the values in LOAD_OPTION_ENUM." if load_option && !LOAD_OPTION_ENUM.include?(load_option)

      @load_option = load_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update_option Object to be assigned
    def update_option=(update_option)
      raise "Invalid value for 'update_option': this must be one of the values in UPDATE_OPTION_ENUM." if update_option && !UPDATE_OPTION_ENUM.include?(update_option)

      @update_option = update_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update_condition Object to be assigned
    def update_condition=(update_condition)
      raise "Invalid value for 'update_condition': this must be one of the values in UPDATE_CONDITION_ENUM." if update_condition && !UPDATE_CONDITION_ENUM.include?(update_condition)

      @update_condition = update_condition
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        credential_details == other.credential_details &&
        show_sql_only == other.show_sql_only &&
        owner == other.owner &&
        name == other.name &&
        destination_sql_tuning_set_name == other.destination_sql_tuning_set_name &&
        destination_sql_tuning_set_description == other.destination_sql_tuning_set_description &&
        destination_sql_tuning_set_owner == other.destination_sql_tuning_set_owner &&
        create_new == other.create_new &&
        basic_filter == other.basic_filter &&
        plan_filter == other.plan_filter &&
        recursive_sql == other.recursive_sql &&
        result_percentage == other.result_percentage &&
        result_limit == other.result_limit &&
        ranking_measure1 == other.ranking_measure1 &&
        ranking_measure2 == other.ranking_measure2 &&
        ranking_measure3 == other.ranking_measure3 &&
        attribute_list == other.attribute_list &&
        load_option == other.load_option &&
        update_option == other.update_option &&
        update_condition == other.update_condition &&
        update_attributes == other.update_attributes &&
        is_ignore_null == other.is_ignore_null &&
        commit_rows == other.commit_rows
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [credential_details, show_sql_only, owner, name, destination_sql_tuning_set_name, destination_sql_tuning_set_description, destination_sql_tuning_set_owner, create_new, basic_filter, plan_filter, recursive_sql, result_percentage, result_limit, ranking_measure1, ranking_measure2, ranking_measure3, attribute_list, load_option, update_option, update_condition, update_attributes, is_ignore_null, commit_rows].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
