# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Create Details of external database connector.
  class DatabaseManagement::Models::CreateMySqlDatabaseConnectorDetails
    NETWORK_PROTOCOL_ENUM = [
      NETWORK_PROTOCOL_TCP = 'TCP'.freeze,
      NETWORK_PROTOCOL_TCPS = 'TCPS'.freeze,
      NETWORK_PROTOCOL_SOCKETS = 'SOCKETS'.freeze
    ].freeze

    CREDENTIAL_TYPE_ENUM = [
      CREDENTIAL_TYPE_MYSQL_EXTERNAL_NON_SSL_CREDENTIALS = 'MYSQL_EXTERNAL_NON_SSL_CREDENTIALS'.freeze,
      CREDENTIAL_TYPE_MYSQL_EXTERNAL_SSL_CREDENTIALS = 'MYSQL_EXTERNAL_SSL_CREDENTIALS'.freeze,
      CREDENTIAL_TYPE_MYSQL_EXTERNAL_SOCKET_CREDENTIALS = 'MYSQL_EXTERNAL_SOCKET_CREDENTIALS'.freeze
    ].freeze

    # **[Required]** External MySQL Database Connector Name.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Agent Id of the MACS agent.
    # @return [String]
    attr_accessor :macs_agent_id

    # **[Required]** Host name for Connector.
    # @return [String]
    attr_accessor :host_name

    # **[Required]** Port number to connect to External MySQL Database.
    # @return [Integer]
    attr_accessor :port

    # **[Required]** Protocol to be used to connect to External MySQL Database; TCP, TCP with SSL or Socket.
    # @return [String]
    attr_reader :network_protocol

    # **[Required]** OCID of MySQL Database resource.
    # @return [String]
    attr_accessor :external_database_id

    # **[Required]** Type of the credential.
    # @return [String]
    attr_reader :credential_type

    # **[Required]** If using existing SSL secret to connect, OCID for the secret resource.
    # @return [String]
    attr_accessor :ssl_secret_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'macs_agent_id': :'macsAgentId',
        'host_name': :'hostName',
        'port': :'port',
        'network_protocol': :'networkProtocol',
        'external_database_id': :'externalDatabaseId',
        'credential_type': :'credentialType',
        'ssl_secret_id': :'sslSecretId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'macs_agent_id': :'String',
        'host_name': :'String',
        'port': :'Integer',
        'network_protocol': :'String',
        'external_database_id': :'String',
        'credential_type': :'String',
        'ssl_secret_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :macs_agent_id The value to assign to the {#macs_agent_id} property
    # @option attributes [String] :host_name The value to assign to the {#host_name} property
    # @option attributes [Integer] :port The value to assign to the {#port} property
    # @option attributes [String] :network_protocol The value to assign to the {#network_protocol} property
    # @option attributes [String] :external_database_id The value to assign to the {#external_database_id} property
    # @option attributes [String] :credential_type The value to assign to the {#credential_type} property
    # @option attributes [String] :ssl_secret_id The value to assign to the {#ssl_secret_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.macs_agent_id = attributes[:'macsAgentId'] if attributes[:'macsAgentId']

      raise 'You cannot provide both :macsAgentId and :macs_agent_id' if attributes.key?(:'macsAgentId') && attributes.key?(:'macs_agent_id')

      self.macs_agent_id = attributes[:'macs_agent_id'] if attributes[:'macs_agent_id']

      self.host_name = attributes[:'hostName'] if attributes[:'hostName']

      raise 'You cannot provide both :hostName and :host_name' if attributes.key?(:'hostName') && attributes.key?(:'host_name')

      self.host_name = attributes[:'host_name'] if attributes[:'host_name']

      self.port = attributes[:'port'] if attributes[:'port']

      self.network_protocol = attributes[:'networkProtocol'] if attributes[:'networkProtocol']

      raise 'You cannot provide both :networkProtocol and :network_protocol' if attributes.key?(:'networkProtocol') && attributes.key?(:'network_protocol')

      self.network_protocol = attributes[:'network_protocol'] if attributes[:'network_protocol']

      self.external_database_id = attributes[:'externalDatabaseId'] if attributes[:'externalDatabaseId']

      raise 'You cannot provide both :externalDatabaseId and :external_database_id' if attributes.key?(:'externalDatabaseId') && attributes.key?(:'external_database_id')

      self.external_database_id = attributes[:'external_database_id'] if attributes[:'external_database_id']

      self.credential_type = attributes[:'credentialType'] if attributes[:'credentialType']

      raise 'You cannot provide both :credentialType and :credential_type' if attributes.key?(:'credentialType') && attributes.key?(:'credential_type')

      self.credential_type = attributes[:'credential_type'] if attributes[:'credential_type']

      self.ssl_secret_id = attributes[:'sslSecretId'] if attributes[:'sslSecretId']

      raise 'You cannot provide both :sslSecretId and :ssl_secret_id' if attributes.key?(:'sslSecretId') && attributes.key?(:'ssl_secret_id')

      self.ssl_secret_id = attributes[:'ssl_secret_id'] if attributes[:'ssl_secret_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] network_protocol Object to be assigned
    def network_protocol=(network_protocol)
      raise "Invalid value for 'network_protocol': this must be one of the values in NETWORK_PROTOCOL_ENUM." if network_protocol && !NETWORK_PROTOCOL_ENUM.include?(network_protocol)

      @network_protocol = network_protocol
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credential_type Object to be assigned
    def credential_type=(credential_type)
      raise "Invalid value for 'credential_type': this must be one of the values in CREDENTIAL_TYPE_ENUM." if credential_type && !CREDENTIAL_TYPE_ENUM.include?(credential_type)

      @credential_type = credential_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        macs_agent_id == other.macs_agent_id &&
        host_name == other.host_name &&
        port == other.port &&
        network_protocol == other.network_protocol &&
        external_database_id == other.external_database_id &&
        credential_type == other.credential_type &&
        ssl_secret_id == other.ssl_secret_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, macs_agent_id, host_name, port, network_protocol, external_database_id, credential_type, ssl_secret_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
