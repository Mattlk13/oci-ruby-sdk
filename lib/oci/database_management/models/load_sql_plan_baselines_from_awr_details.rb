# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details required to load plans from Automatic Workload Repository (AWR).
  #
  class DatabaseManagement::Models::LoadSqlPlanBaselinesFromAwrDetails
    # **[Required]** The name of the database job used for loading SQL plan baselines.
    # @return [String]
    attr_accessor :job_name

    # The description of the job.
    # @return [String]
    attr_accessor :job_description

    # **[Required]** The begin snapshot.
    # @return [Integer]
    attr_accessor :begin_snapshot

    # **[Required]** The end snapshot.
    # @return [Integer]
    attr_accessor :end_snapshot

    # A filter applied to AWR to select only qualifying plans to be loaded.
    # By default all plans in AWR are selected. The filter can take the form of
    # any `WHERE` clause predicate that can be specified against the column
    # `DBA_HIST_SQLTEXT.SQL_TEXT`. An example is `sql_text like 'SELECT %'`.
    #
    # @return [String]
    attr_accessor :sql_text_filter

    # Indicates whether the plans are loaded as fixed plans (`true`) or non-fixed plans (`false`).
    # By default, they are loaded as non-fixed plans.
    #
    # @return [BOOLEAN]
    attr_accessor :is_fixed

    # Indicates whether the loaded plans are enabled (`true`) or not (`false`).
    # By default, they are enabled.
    #
    # @return [BOOLEAN]
    attr_accessor :is_enabled

    # This attribute is required.
    # @return [OCI::DatabaseManagement::Models::ManagedDatabaseCredential]
    attr_accessor :credentials

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'job_name': :'jobName',
        'job_description': :'jobDescription',
        'begin_snapshot': :'beginSnapshot',
        'end_snapshot': :'endSnapshot',
        'sql_text_filter': :'sqlTextFilter',
        'is_fixed': :'isFixed',
        'is_enabled': :'isEnabled',
        'credentials': :'credentials'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'job_name': :'String',
        'job_description': :'String',
        'begin_snapshot': :'Integer',
        'end_snapshot': :'Integer',
        'sql_text_filter': :'String',
        'is_fixed': :'BOOLEAN',
        'is_enabled': :'BOOLEAN',
        'credentials': :'OCI::DatabaseManagement::Models::ManagedDatabaseCredential'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :job_name The value to assign to the {#job_name} property
    # @option attributes [String] :job_description The value to assign to the {#job_description} property
    # @option attributes [Integer] :begin_snapshot The value to assign to the {#begin_snapshot} property
    # @option attributes [Integer] :end_snapshot The value to assign to the {#end_snapshot} property
    # @option attributes [String] :sql_text_filter The value to assign to the {#sql_text_filter} property
    # @option attributes [BOOLEAN] :is_fixed The value to assign to the {#is_fixed} property
    # @option attributes [BOOLEAN] :is_enabled The value to assign to the {#is_enabled} property
    # @option attributes [OCI::DatabaseManagement::Models::ManagedDatabaseCredential] :credentials The value to assign to the {#credentials} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.job_name = attributes[:'jobName'] if attributes[:'jobName']

      raise 'You cannot provide both :jobName and :job_name' if attributes.key?(:'jobName') && attributes.key?(:'job_name')

      self.job_name = attributes[:'job_name'] if attributes[:'job_name']

      self.job_description = attributes[:'jobDescription'] if attributes[:'jobDescription']

      raise 'You cannot provide both :jobDescription and :job_description' if attributes.key?(:'jobDescription') && attributes.key?(:'job_description')

      self.job_description = attributes[:'job_description'] if attributes[:'job_description']

      self.begin_snapshot = attributes[:'beginSnapshot'] if attributes[:'beginSnapshot']

      raise 'You cannot provide both :beginSnapshot and :begin_snapshot' if attributes.key?(:'beginSnapshot') && attributes.key?(:'begin_snapshot')

      self.begin_snapshot = attributes[:'begin_snapshot'] if attributes[:'begin_snapshot']

      self.end_snapshot = attributes[:'endSnapshot'] if attributes[:'endSnapshot']

      raise 'You cannot provide both :endSnapshot and :end_snapshot' if attributes.key?(:'endSnapshot') && attributes.key?(:'end_snapshot')

      self.end_snapshot = attributes[:'end_snapshot'] if attributes[:'end_snapshot']

      self.sql_text_filter = attributes[:'sqlTextFilter'] if attributes[:'sqlTextFilter']

      raise 'You cannot provide both :sqlTextFilter and :sql_text_filter' if attributes.key?(:'sqlTextFilter') && attributes.key?(:'sql_text_filter')

      self.sql_text_filter = attributes[:'sql_text_filter'] if attributes[:'sql_text_filter']

      self.is_fixed = attributes[:'isFixed'] unless attributes[:'isFixed'].nil?

      raise 'You cannot provide both :isFixed and :is_fixed' if attributes.key?(:'isFixed') && attributes.key?(:'is_fixed')

      self.is_fixed = attributes[:'is_fixed'] unless attributes[:'is_fixed'].nil?

      self.is_enabled = attributes[:'isEnabled'] unless attributes[:'isEnabled'].nil?

      raise 'You cannot provide both :isEnabled and :is_enabled' if attributes.key?(:'isEnabled') && attributes.key?(:'is_enabled')

      self.is_enabled = attributes[:'is_enabled'] unless attributes[:'is_enabled'].nil?

      self.credentials = attributes[:'credentials'] if attributes[:'credentials']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        job_name == other.job_name &&
        job_description == other.job_description &&
        begin_snapshot == other.begin_snapshot &&
        end_snapshot == other.end_snapshot &&
        sql_text_filter == other.sql_text_filter &&
        is_fixed == other.is_fixed &&
        is_enabled == other.is_enabled &&
        credentials == other.credentials
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [job_name, job_description, begin_snapshot, end_snapshot, sql_text_filter, is_fixed, is_enabled, credentials].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
