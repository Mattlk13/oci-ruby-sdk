# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The standby database details.
  class DatabaseManagement::Models::StandByDatabaseDataguardMetrics
    DB_ROLE_ENUM = [
      DB_ROLE_SNAPSHOT_STANDBY = 'SNAPSHOT_STANDBY'.freeze,
      DB_ROLE_LOGICAL_STANDBY = 'LOGICAL_STANDBY'.freeze,
      DB_ROLE_PHYSICAL_STANDBY = 'PHYSICAL_STANDBY'.freeze,
      DB_ROLE_PRIMARY = 'PRIMARY'.freeze,
      DB_ROLE_FAR_SYNC = 'FAR_SYNC'.freeze,
      DB_ROLE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Managed Database.
    # @return [String]
    attr_accessor :db_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment where the Managed Database resides.
    # @return [String]
    attr_accessor :compartment_id

    # The database ID of the Managed Database. Every database had its own ID and that value is captured here.
    # @return [String]
    attr_accessor :database_id

    # **[Required]** The display name of the Managed Database.
    # @return [String]
    attr_accessor :database_name

    # The database unique name of the Managed Database.
    # @return [String]
    attr_accessor :db_unique_name

    # **[Required]** The database role of the Managed Database.
    # @return [String]
    attr_reader :db_role

    # **[Required]** A list of standby databases with latest values for metrics such as ApplyLag, TransportLag, and RedoApplyRate.
    # @return [Array<OCI::DatabaseManagement::Models::HaMetricDefinition>]
    attr_accessor :metrics

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'db_id': :'dbId',
        'compartment_id': :'compartmentId',
        'database_id': :'databaseId',
        'database_name': :'databaseName',
        'db_unique_name': :'dbUniqueName',
        'db_role': :'dbRole',
        'metrics': :'metrics'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'db_id': :'String',
        'compartment_id': :'String',
        'database_id': :'String',
        'database_name': :'String',
        'db_unique_name': :'String',
        'db_role': :'String',
        'metrics': :'Array<OCI::DatabaseManagement::Models::HaMetricDefinition>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :db_id The value to assign to the {#db_id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :database_id The value to assign to the {#database_id} property
    # @option attributes [String] :database_name The value to assign to the {#database_name} property
    # @option attributes [String] :db_unique_name The value to assign to the {#db_unique_name} property
    # @option attributes [String] :db_role The value to assign to the {#db_role} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::HaMetricDefinition>] :metrics The value to assign to the {#metrics} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.db_id = attributes[:'dbId'] if attributes[:'dbId']

      raise 'You cannot provide both :dbId and :db_id' if attributes.key?(:'dbId') && attributes.key?(:'db_id')

      self.db_id = attributes[:'db_id'] if attributes[:'db_id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.database_id = attributes[:'databaseId'] if attributes[:'databaseId']

      raise 'You cannot provide both :databaseId and :database_id' if attributes.key?(:'databaseId') && attributes.key?(:'database_id')

      self.database_id = attributes[:'database_id'] if attributes[:'database_id']

      self.database_name = attributes[:'databaseName'] if attributes[:'databaseName']

      raise 'You cannot provide both :databaseName and :database_name' if attributes.key?(:'databaseName') && attributes.key?(:'database_name')

      self.database_name = attributes[:'database_name'] if attributes[:'database_name']

      self.db_unique_name = attributes[:'dbUniqueName'] if attributes[:'dbUniqueName']

      raise 'You cannot provide both :dbUniqueName and :db_unique_name' if attributes.key?(:'dbUniqueName') && attributes.key?(:'db_unique_name')

      self.db_unique_name = attributes[:'db_unique_name'] if attributes[:'db_unique_name']

      self.db_role = attributes[:'dbRole'] if attributes[:'dbRole']

      raise 'You cannot provide both :dbRole and :db_role' if attributes.key?(:'dbRole') && attributes.key?(:'db_role')

      self.db_role = attributes[:'db_role'] if attributes[:'db_role']

      self.metrics = attributes[:'metrics'] if attributes[:'metrics']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] db_role Object to be assigned
    def db_role=(db_role)
      # rubocop:disable Style/ConditionalAssignment
      if db_role && !DB_ROLE_ENUM.include?(db_role)
        OCI.logger.debug("Unknown value for 'db_role' [" + db_role + "]. Mapping to 'DB_ROLE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @db_role = DB_ROLE_UNKNOWN_ENUM_VALUE
      else
        @db_role = db_role
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        db_id == other.db_id &&
        compartment_id == other.compartment_id &&
        database_id == other.database_id &&
        database_name == other.database_name &&
        db_unique_name == other.db_unique_name &&
        db_role == other.db_role &&
        metrics == other.metrics
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [db_id, compartment_id, database_id, database_name, db_unique_name, db_role, metrics].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
