# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Sql information in the Sql tuning set.
  class DatabaseManagement::Models::SqlInSqlTuningSet
    # **[Required]** The unique Sql identifier.
    # @return [String]
    attr_accessor :sql_id

    # Sql text.
    # @return [String]
    attr_accessor :sql_text

    # The unique container database identifier.
    # @return [Integer]
    attr_accessor :container_database_id

    # **[Required]** Plan hash value of the Sql statement.
    # @return [Integer]
    attr_accessor :plan_hash_value

    # The schema name of the Sql.
    # @return [String]
    attr_accessor :schema

    # The module of the Sql.
    # @return [String]
    attr_accessor :_module

    # A list of the Sqls associated with the Sql tuning set.
    # @return [Array<OCI::DatabaseManagement::Models::SqlMetrics>]
    attr_accessor :metrics

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'sql_id': :'sqlId',
        'sql_text': :'sqlText',
        'container_database_id': :'containerDatabaseId',
        'plan_hash_value': :'planHashValue',
        'schema': :'schema',
        '_module': :'module',
        'metrics': :'metrics'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'sql_id': :'String',
        'sql_text': :'String',
        'container_database_id': :'Integer',
        'plan_hash_value': :'Integer',
        'schema': :'String',
        '_module': :'String',
        'metrics': :'Array<OCI::DatabaseManagement::Models::SqlMetrics>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :sql_id The value to assign to the {#sql_id} property
    # @option attributes [String] :sql_text The value to assign to the {#sql_text} property
    # @option attributes [Integer] :container_database_id The value to assign to the {#container_database_id} property
    # @option attributes [Integer] :plan_hash_value The value to assign to the {#plan_hash_value} property
    # @option attributes [String] :schema The value to assign to the {#schema} property
    # @option attributes [String] :_module The value to assign to the {#_module} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::SqlMetrics>] :metrics The value to assign to the {#metrics} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.sql_id = attributes[:'sqlId'] if attributes[:'sqlId']

      raise 'You cannot provide both :sqlId and :sql_id' if attributes.key?(:'sqlId') && attributes.key?(:'sql_id')

      self.sql_id = attributes[:'sql_id'] if attributes[:'sql_id']

      self.sql_text = attributes[:'sqlText'] if attributes[:'sqlText']

      raise 'You cannot provide both :sqlText and :sql_text' if attributes.key?(:'sqlText') && attributes.key?(:'sql_text')

      self.sql_text = attributes[:'sql_text'] if attributes[:'sql_text']

      self.container_database_id = attributes[:'containerDatabaseId'] if attributes[:'containerDatabaseId']

      raise 'You cannot provide both :containerDatabaseId and :container_database_id' if attributes.key?(:'containerDatabaseId') && attributes.key?(:'container_database_id')

      self.container_database_id = attributes[:'container_database_id'] if attributes[:'container_database_id']

      self.plan_hash_value = attributes[:'planHashValue'] if attributes[:'planHashValue']

      raise 'You cannot provide both :planHashValue and :plan_hash_value' if attributes.key?(:'planHashValue') && attributes.key?(:'plan_hash_value')

      self.plan_hash_value = attributes[:'plan_hash_value'] if attributes[:'plan_hash_value']

      self.schema = attributes[:'schema'] if attributes[:'schema']

      self._module = attributes[:'module'] if attributes[:'module']

      raise 'You cannot provide both :module and :_module' if attributes.key?(:'module') && attributes.key?(:'_module')

      self._module = attributes[:'_module'] if attributes[:'_module']

      self.metrics = attributes[:'metrics'] if attributes[:'metrics']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        sql_id == other.sql_id &&
        sql_text == other.sql_text &&
        container_database_id == other.container_database_id &&
        plan_hash_value == other.plan_hash_value &&
        schema == other.schema &&
        _module == other._module &&
        metrics == other.metrics
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [sql_id, sql_text, container_database_id, plan_hash_value, schema, _module, metrics].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
