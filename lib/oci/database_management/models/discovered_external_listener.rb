# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'
require_relative 'discovered_external_db_system_component'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of an Oracle listener discovered in an external DB system discovery run.
  class DatabaseManagement::Models::DiscoveredExternalListener < DatabaseManagement::Models::DiscoveredExternalDbSystemComponent
    LISTENER_TYPE_ENUM = [
      LISTENER_TYPE_ASM = 'ASM'.freeze,
      LISTENER_TYPE_LOCAL = 'LOCAL'.freeze,
      LISTENER_TYPE_SCAN = 'SCAN'.freeze,
      LISTENER_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The name of the DB node.
    # @return [String]
    attr_accessor :db_node_name

    # The Oracle home location of the listener.
    # @return [String]
    attr_accessor :oracle_home

    # The listener alias.
    # @return [String]
    attr_accessor :listener_alias

    # The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
    # @return [String]
    attr_accessor :adr_home_directory

    # The destination directory of the listener log file.
    # @return [String]
    attr_accessor :log_directory

    # The destination directory of the listener trace file.
    # @return [String]
    attr_accessor :trace_directory

    # The listener version.
    # @return [String]
    attr_accessor :version

    # The type of listener.
    # @return [String]
    attr_reader :listener_type

    # The name of the host on which the external listener is running.
    # @return [String]
    attr_accessor :host_name

    # The list of protocol addresses the listener is configured to listen on.
    # @return [Array<OCI::DatabaseManagement::Models::ExternalListenerEndpoint>]
    attr_accessor :endpoints

    # @return [OCI::DatabaseManagement::Models::ExternalDbSystemDiscoveryConnector]
    attr_accessor :connector

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'component_id': :'componentId',
        'display_name': :'displayName',
        'component_name': :'componentName',
        'component_type': :'componentType',
        'resource_id': :'resourceId',
        'is_selected_for_monitoring': :'isSelectedForMonitoring',
        'status': :'status',
        'associated_components': :'associatedComponents',
        'db_node_name': :'dbNodeName',
        'oracle_home': :'oracleHome',
        'listener_alias': :'listenerAlias',
        'adr_home_directory': :'adrHomeDirectory',
        'log_directory': :'logDirectory',
        'trace_directory': :'traceDirectory',
        'version': :'version',
        'listener_type': :'listenerType',
        'host_name': :'hostName',
        'endpoints': :'endpoints',
        'connector': :'connector'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'component_id': :'String',
        'display_name': :'String',
        'component_name': :'String',
        'component_type': :'String',
        'resource_id': :'String',
        'is_selected_for_monitoring': :'BOOLEAN',
        'status': :'String',
        'associated_components': :'Array<OCI::DatabaseManagement::Models::AssociatedComponent>',
        'db_node_name': :'String',
        'oracle_home': :'String',
        'listener_alias': :'String',
        'adr_home_directory': :'String',
        'log_directory': :'String',
        'trace_directory': :'String',
        'version': :'String',
        'listener_type': :'String',
        'host_name': :'String',
        'endpoints': :'Array<OCI::DatabaseManagement::Models::ExternalListenerEndpoint>',
        'connector': :'OCI::DatabaseManagement::Models::ExternalDbSystemDiscoveryConnector'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :component_id The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#component_id #component_id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#display_name #display_name} proprety
    # @option attributes [String] :component_name The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#component_name #component_name} proprety
    # @option attributes [String] :resource_id The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#resource_id #resource_id} proprety
    # @option attributes [BOOLEAN] :is_selected_for_monitoring The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#is_selected_for_monitoring #is_selected_for_monitoring} proprety
    # @option attributes [String] :status The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#status #status} proprety
    # @option attributes [Array<OCI::DatabaseManagement::Models::AssociatedComponent>] :associated_components The value to assign to the {OCI::DatabaseManagement::Models::DiscoveredExternalDbSystemComponent#associated_components #associated_components} proprety
    # @option attributes [String] :db_node_name The value to assign to the {#db_node_name} property
    # @option attributes [String] :oracle_home The value to assign to the {#oracle_home} property
    # @option attributes [String] :listener_alias The value to assign to the {#listener_alias} property
    # @option attributes [String] :adr_home_directory The value to assign to the {#adr_home_directory} property
    # @option attributes [String] :log_directory The value to assign to the {#log_directory} property
    # @option attributes [String] :trace_directory The value to assign to the {#trace_directory} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [String] :listener_type The value to assign to the {#listener_type} property
    # @option attributes [String] :host_name The value to assign to the {#host_name} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::ExternalListenerEndpoint>] :endpoints The value to assign to the {#endpoints} property
    # @option attributes [OCI::DatabaseManagement::Models::ExternalDbSystemDiscoveryConnector] :connector The value to assign to the {#connector} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['componentType'] = 'LISTENER'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.db_node_name = attributes[:'dbNodeName'] if attributes[:'dbNodeName']

      raise 'You cannot provide both :dbNodeName and :db_node_name' if attributes.key?(:'dbNodeName') && attributes.key?(:'db_node_name')

      self.db_node_name = attributes[:'db_node_name'] if attributes[:'db_node_name']

      self.oracle_home = attributes[:'oracleHome'] if attributes[:'oracleHome']

      raise 'You cannot provide both :oracleHome and :oracle_home' if attributes.key?(:'oracleHome') && attributes.key?(:'oracle_home')

      self.oracle_home = attributes[:'oracle_home'] if attributes[:'oracle_home']

      self.listener_alias = attributes[:'listenerAlias'] if attributes[:'listenerAlias']

      raise 'You cannot provide both :listenerAlias and :listener_alias' if attributes.key?(:'listenerAlias') && attributes.key?(:'listener_alias')

      self.listener_alias = attributes[:'listener_alias'] if attributes[:'listener_alias']

      self.adr_home_directory = attributes[:'adrHomeDirectory'] if attributes[:'adrHomeDirectory']

      raise 'You cannot provide both :adrHomeDirectory and :adr_home_directory' if attributes.key?(:'adrHomeDirectory') && attributes.key?(:'adr_home_directory')

      self.adr_home_directory = attributes[:'adr_home_directory'] if attributes[:'adr_home_directory']

      self.log_directory = attributes[:'logDirectory'] if attributes[:'logDirectory']

      raise 'You cannot provide both :logDirectory and :log_directory' if attributes.key?(:'logDirectory') && attributes.key?(:'log_directory')

      self.log_directory = attributes[:'log_directory'] if attributes[:'log_directory']

      self.trace_directory = attributes[:'traceDirectory'] if attributes[:'traceDirectory']

      raise 'You cannot provide both :traceDirectory and :trace_directory' if attributes.key?(:'traceDirectory') && attributes.key?(:'trace_directory')

      self.trace_directory = attributes[:'trace_directory'] if attributes[:'trace_directory']

      self.version = attributes[:'version'] if attributes[:'version']

      self.listener_type = attributes[:'listenerType'] if attributes[:'listenerType']

      raise 'You cannot provide both :listenerType and :listener_type' if attributes.key?(:'listenerType') && attributes.key?(:'listener_type')

      self.listener_type = attributes[:'listener_type'] if attributes[:'listener_type']

      self.host_name = attributes[:'hostName'] if attributes[:'hostName']

      raise 'You cannot provide both :hostName and :host_name' if attributes.key?(:'hostName') && attributes.key?(:'host_name')

      self.host_name = attributes[:'host_name'] if attributes[:'host_name']

      self.endpoints = attributes[:'endpoints'] if attributes[:'endpoints']

      self.connector = attributes[:'connector'] if attributes[:'connector']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] listener_type Object to be assigned
    def listener_type=(listener_type)
      # rubocop:disable Style/ConditionalAssignment
      if listener_type && !LISTENER_TYPE_ENUM.include?(listener_type)
        OCI.logger.debug("Unknown value for 'listener_type' [" + listener_type + "]. Mapping to 'LISTENER_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @listener_type = LISTENER_TYPE_UNKNOWN_ENUM_VALUE
      else
        @listener_type = listener_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        component_id == other.component_id &&
        display_name == other.display_name &&
        component_name == other.component_name &&
        component_type == other.component_type &&
        resource_id == other.resource_id &&
        is_selected_for_monitoring == other.is_selected_for_monitoring &&
        status == other.status &&
        associated_components == other.associated_components &&
        db_node_name == other.db_node_name &&
        oracle_home == other.oracle_home &&
        listener_alias == other.listener_alias &&
        adr_home_directory == other.adr_home_directory &&
        log_directory == other.log_directory &&
        trace_directory == other.trace_directory &&
        version == other.version &&
        listener_type == other.listener_type &&
        host_name == other.host_name &&
        endpoints == other.endpoints &&
        connector == other.connector
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [component_id, display_name, component_name, component_type, resource_id, is_selected_for_monitoring, status, associated_components, db_node_name, oracle_home, listener_alias, adr_home_directory, log_directory, trace_directory, version, listener_type, host_name, endpoints, connector].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
