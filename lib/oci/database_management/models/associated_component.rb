# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of the associated component.
  class DatabaseManagement::Models::AssociatedComponent
    COMPONENT_TYPE_ENUM = [
      COMPONENT_TYPE_ASM = 'ASM'.freeze,
      COMPONENT_TYPE_ASM_INSTANCE = 'ASM_INSTANCE'.freeze,
      COMPONENT_TYPE_CLUSTER = 'CLUSTER'.freeze,
      COMPONENT_TYPE_CLUSTER_INSTANCE = 'CLUSTER_INSTANCE'.freeze,
      COMPONENT_TYPE_DATABASE = 'DATABASE'.freeze,
      COMPONENT_TYPE_DATABASE_INSTANCE = 'DATABASE_INSTANCE'.freeze,
      COMPONENT_TYPE_DATABASE_HOME = 'DATABASE_HOME'.freeze,
      COMPONENT_TYPE_DATABASE_NODE = 'DATABASE_NODE'.freeze,
      COMPONENT_TYPE_DBSYSTEM = 'DBSYSTEM'.freeze,
      COMPONENT_TYPE_LISTENER = 'LISTENER'.freeze,
      COMPONENT_TYPE_PLUGGABLE_DATABASE = 'PLUGGABLE_DATABASE'.freeze,
      COMPONENT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ASSOCIATION_TYPE_ENUM = [
      ASSOCIATION_TYPE_CONTAINS = 'CONTAINS'.freeze,
      ASSOCIATION_TYPE_USES = 'USES'.freeze,
      ASSOCIATION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The identifier of the associated component.
    # @return [String]
    attr_accessor :component_id

    # The type of associated component.
    # @return [String]
    attr_reader :component_type

    # **[Required]** The association type.
    # @return [String]
    attr_reader :association_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'component_id': :'componentId',
        'component_type': :'componentType',
        'association_type': :'associationType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'component_id': :'String',
        'component_type': :'String',
        'association_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :component_id The value to assign to the {#component_id} property
    # @option attributes [String] :component_type The value to assign to the {#component_type} property
    # @option attributes [String] :association_type The value to assign to the {#association_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.component_id = attributes[:'componentId'] if attributes[:'componentId']

      raise 'You cannot provide both :componentId and :component_id' if attributes.key?(:'componentId') && attributes.key?(:'component_id')

      self.component_id = attributes[:'component_id'] if attributes[:'component_id']

      self.component_type = attributes[:'componentType'] if attributes[:'componentType']

      raise 'You cannot provide both :componentType and :component_type' if attributes.key?(:'componentType') && attributes.key?(:'component_type')

      self.component_type = attributes[:'component_type'] if attributes[:'component_type']

      self.association_type = attributes[:'associationType'] if attributes[:'associationType']

      raise 'You cannot provide both :associationType and :association_type' if attributes.key?(:'associationType') && attributes.key?(:'association_type')

      self.association_type = attributes[:'association_type'] if attributes[:'association_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] component_type Object to be assigned
    def component_type=(component_type)
      # rubocop:disable Style/ConditionalAssignment
      if component_type && !COMPONENT_TYPE_ENUM.include?(component_type)
        OCI.logger.debug("Unknown value for 'component_type' [" + component_type + "]. Mapping to 'COMPONENT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @component_type = COMPONENT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @component_type = component_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] association_type Object to be assigned
    def association_type=(association_type)
      # rubocop:disable Style/ConditionalAssignment
      if association_type && !ASSOCIATION_TYPE_ENUM.include?(association_type)
        OCI.logger.debug("Unknown value for 'association_type' [" + association_type + "]. Mapping to 'ASSOCIATION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @association_type = ASSOCIATION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @association_type = association_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        component_id == other.component_id &&
        component_type == other.component_type &&
        association_type == other.association_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [component_id, component_type, association_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
