# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of an external DB system connector.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class DatabaseManagement::Models::ExternalDbSystemConnector
    CONNECTOR_TYPE_ENUM = [
      CONNECTOR_TYPE_MACS = 'MACS'.freeze,
      CONNECTOR_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_NOT_CONNECTED = 'NOT_CONNECTED'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The type of connector.
    # @return [String]
    attr_reader :connector_type

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the external DB system connector.
    # @return [String]
    attr_accessor :id

    # **[Required]** The user-friendly name for the external connector. The name does not have to be unique.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the external DB system that the connector is a part of.
    # @return [String]
    attr_accessor :external_db_system_id

    # The status of connectivity to the external DB system component.
    # @return [String]
    attr_accessor :connection_status

    # The error message indicating the reason for connection failure or `null` if
    # the connection was successful.
    #
    # @return [String]
    attr_accessor :connection_failure_message

    # **[Required]** The current lifecycle state of the external DB system connector.
    # @return [String]
    attr_reader :lifecycle_state

    # Additional information about the current lifecycle state.
    # @return [String]
    attr_accessor :lifecycle_details

    # The date and time the connectionStatus of the external DB system connector was last updated.
    # @return [DateTime]
    attr_accessor :time_connection_status_last_updated

    # **[Required]** The date and time the external DB system connector was created.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time the external DB system connector was last updated.
    # @return [DateTime]
    attr_accessor :time_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'connector_type': :'connectorType',
        'id': :'id',
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'external_db_system_id': :'externalDbSystemId',
        'connection_status': :'connectionStatus',
        'connection_failure_message': :'connectionFailureMessage',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'time_connection_status_last_updated': :'timeConnectionStatusLastUpdated',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'connector_type': :'String',
        'id': :'String',
        'display_name': :'String',
        'compartment_id': :'String',
        'external_db_system_id': :'String',
        'connection_status': :'String',
        'connection_failure_message': :'String',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'time_connection_status_last_updated': :'DateTime',
        'time_created': :'DateTime',
        'time_updated': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'connectorType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::DatabaseManagement::Models::ExternalDbSystemMacsConnector' if type == 'MACS'

      # TODO: Log a warning when the subtype is not found.
      'OCI::DatabaseManagement::Models::ExternalDbSystemConnector'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :connector_type The value to assign to the {#connector_type} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :external_db_system_id The value to assign to the {#external_db_system_id} property
    # @option attributes [String] :connection_status The value to assign to the {#connection_status} property
    # @option attributes [String] :connection_failure_message The value to assign to the {#connection_failure_message} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [DateTime] :time_connection_status_last_updated The value to assign to the {#time_connection_status_last_updated} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.connector_type = attributes[:'connectorType'] if attributes[:'connectorType']

      raise 'You cannot provide both :connectorType and :connector_type' if attributes.key?(:'connectorType') && attributes.key?(:'connector_type')

      self.connector_type = attributes[:'connector_type'] if attributes[:'connector_type']

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.external_db_system_id = attributes[:'externalDbSystemId'] if attributes[:'externalDbSystemId']

      raise 'You cannot provide both :externalDbSystemId and :external_db_system_id' if attributes.key?(:'externalDbSystemId') && attributes.key?(:'external_db_system_id')

      self.external_db_system_id = attributes[:'external_db_system_id'] if attributes[:'external_db_system_id']

      self.connection_status = attributes[:'connectionStatus'] if attributes[:'connectionStatus']

      raise 'You cannot provide both :connectionStatus and :connection_status' if attributes.key?(:'connectionStatus') && attributes.key?(:'connection_status')

      self.connection_status = attributes[:'connection_status'] if attributes[:'connection_status']

      self.connection_failure_message = attributes[:'connectionFailureMessage'] if attributes[:'connectionFailureMessage']

      raise 'You cannot provide both :connectionFailureMessage and :connection_failure_message' if attributes.key?(:'connectionFailureMessage') && attributes.key?(:'connection_failure_message')

      self.connection_failure_message = attributes[:'connection_failure_message'] if attributes[:'connection_failure_message']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.time_connection_status_last_updated = attributes[:'timeConnectionStatusLastUpdated'] if attributes[:'timeConnectionStatusLastUpdated']

      raise 'You cannot provide both :timeConnectionStatusLastUpdated and :time_connection_status_last_updated' if attributes.key?(:'timeConnectionStatusLastUpdated') && attributes.key?(:'time_connection_status_last_updated')

      self.time_connection_status_last_updated = attributes[:'time_connection_status_last_updated'] if attributes[:'time_connection_status_last_updated']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] connector_type Object to be assigned
    def connector_type=(connector_type)
      # rubocop:disable Style/ConditionalAssignment
      if connector_type && !CONNECTOR_TYPE_ENUM.include?(connector_type)
        OCI.logger.debug("Unknown value for 'connector_type' [" + connector_type + "]. Mapping to 'CONNECTOR_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @connector_type = CONNECTOR_TYPE_UNKNOWN_ENUM_VALUE
      else
        @connector_type = connector_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        connector_type == other.connector_type &&
        id == other.id &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        external_db_system_id == other.external_db_system_id &&
        connection_status == other.connection_status &&
        connection_failure_message == other.connection_failure_message &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        time_connection_status_last_updated == other.time_connection_status_last_updated &&
        time_created == other.time_created &&
        time_updated == other.time_updated
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [connector_type, id, display_name, compartment_id, external_db_system_id, connection_status, connection_failure_message, lifecycle_state, lifecycle_details, time_connection_status_last_updated, time_created, time_updated].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
