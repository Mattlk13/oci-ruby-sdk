# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The summary of the Optimizer Statistics Advisor execution, which includes information about the Managed Database
  # and a comprehensive execution report.
  #
  class DatabaseManagement::Models::OptimizerStatisticsAdvisorExecution
    STATUS_ENUM = [
      STATUS_EXECUTING = 'EXECUTING'.freeze,
      STATUS_COMPLETED = 'COMPLETED'.freeze,
      STATUS_INTERRUPTED = 'INTERRUPTED'.freeze,
      STATUS_CANCELLED = 'CANCELLED'.freeze,
      STATUS_FATAL_ERROR = 'FATAL_ERROR'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # @return [OCI::DatabaseManagement::Models::OptimizerDatabase]
    attr_accessor :database

    # @return [OCI::DatabaseManagement::Models::OptimizerStatisticsAdvisorExecutionReport]
    attr_accessor :report

    # **[Required]** The name of the Optimizer Statistics Advisor task.
    # @return [String]
    attr_accessor :task_name

    # **[Required]** The name of the Optimizer Statistics Advisor execution.
    # @return [String]
    attr_accessor :execution_name

    # **[Required]** The start time of the time range to retrieve the Optimizer Statistics Advisor execution of a Managed Database
    # in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @return [DateTime]
    attr_accessor :time_start

    # **[Required]** The end time of the time range to retrieve the Optimizer Statistics Advisor execution of a Managed Database
    # in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    #
    # @return [DateTime]
    attr_accessor :time_end

    # **[Required]** The status of the Optimizer Statistics Advisor execution.
    # @return [String]
    attr_reader :status

    # The Optimizer Statistics Advisor execution status message, if any.
    # @return [String]
    attr_accessor :status_message

    # The errors in the Optimizer Statistics Advisor execution, if any.
    # @return [String]
    attr_accessor :error_message

    # The number of findings generated by the Optimizer Statistics Advisor execution.
    # @return [Integer]
    attr_accessor :findings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'database': :'database',
        'report': :'report',
        'task_name': :'taskName',
        'execution_name': :'executionName',
        'time_start': :'timeStart',
        'time_end': :'timeEnd',
        'status': :'status',
        'status_message': :'statusMessage',
        'error_message': :'errorMessage',
        'findings': :'findings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'database': :'OCI::DatabaseManagement::Models::OptimizerDatabase',
        'report': :'OCI::DatabaseManagement::Models::OptimizerStatisticsAdvisorExecutionReport',
        'task_name': :'String',
        'execution_name': :'String',
        'time_start': :'DateTime',
        'time_end': :'DateTime',
        'status': :'String',
        'status_message': :'String',
        'error_message': :'String',
        'findings': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::DatabaseManagement::Models::OptimizerDatabase] :database The value to assign to the {#database} property
    # @option attributes [OCI::DatabaseManagement::Models::OptimizerStatisticsAdvisorExecutionReport] :report The value to assign to the {#report} property
    # @option attributes [String] :task_name The value to assign to the {#task_name} property
    # @option attributes [String] :execution_name The value to assign to the {#execution_name} property
    # @option attributes [DateTime] :time_start The value to assign to the {#time_start} property
    # @option attributes [DateTime] :time_end The value to assign to the {#time_end} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :status_message The value to assign to the {#status_message} property
    # @option attributes [String] :error_message The value to assign to the {#error_message} property
    # @option attributes [Integer] :findings The value to assign to the {#findings} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.database = attributes[:'database'] if attributes[:'database']

      self.report = attributes[:'report'] if attributes[:'report']

      self.task_name = attributes[:'taskName'] if attributes[:'taskName']

      raise 'You cannot provide both :taskName and :task_name' if attributes.key?(:'taskName') && attributes.key?(:'task_name')

      self.task_name = attributes[:'task_name'] if attributes[:'task_name']

      self.execution_name = attributes[:'executionName'] if attributes[:'executionName']

      raise 'You cannot provide both :executionName and :execution_name' if attributes.key?(:'executionName') && attributes.key?(:'execution_name')

      self.execution_name = attributes[:'execution_name'] if attributes[:'execution_name']

      self.time_start = attributes[:'timeStart'] if attributes[:'timeStart']

      raise 'You cannot provide both :timeStart and :time_start' if attributes.key?(:'timeStart') && attributes.key?(:'time_start')

      self.time_start = attributes[:'time_start'] if attributes[:'time_start']

      self.time_end = attributes[:'timeEnd'] if attributes[:'timeEnd']

      raise 'You cannot provide both :timeEnd and :time_end' if attributes.key?(:'timeEnd') && attributes.key?(:'time_end')

      self.time_end = attributes[:'time_end'] if attributes[:'time_end']

      self.status = attributes[:'status'] if attributes[:'status']

      self.status_message = attributes[:'statusMessage'] if attributes[:'statusMessage']

      raise 'You cannot provide both :statusMessage and :status_message' if attributes.key?(:'statusMessage') && attributes.key?(:'status_message')

      self.status_message = attributes[:'status_message'] if attributes[:'status_message']

      self.error_message = attributes[:'errorMessage'] if attributes[:'errorMessage']

      raise 'You cannot provide both :errorMessage and :error_message' if attributes.key?(:'errorMessage') && attributes.key?(:'error_message')

      self.error_message = attributes[:'error_message'] if attributes[:'error_message']

      self.findings = attributes[:'findings'] if attributes[:'findings']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        database == other.database &&
        report == other.report &&
        task_name == other.task_name &&
        execution_name == other.execution_name &&
        time_start == other.time_start &&
        time_end == other.time_end &&
        status == other.status &&
        status_message == other.status_message &&
        error_message == other.error_message &&
        findings == other.findings
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [database, report, task_name, execution_name, time_start, time_end, status, status_message, error_message, findings].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
