# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of the base entity discovery.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class DatabaseManagement::Models::EntityDiscovered
    DISCOVER_STATUS_ENUM = [
      DISCOVER_STATUS_PREV_DISCOVERED = 'PREV_DISCOVERED'.freeze,
      DISCOVER_STATUS_NEW_DISCOVERED = 'NEW_DISCOVERED'.freeze,
      DISCOVER_STATUS_NOT_FOUND = 'NOT_FOUND'.freeze,
      DISCOVER_STATUS_DISCOVERING = 'DISCOVERING'.freeze
    ].freeze

    ENTITY_TYPE_ENUM = [
      ENTITY_TYPE_STORAGE_SERVER_DISCOVER_SUMMARY = 'STORAGE_SERVER_DISCOVER_SUMMARY'.freeze,
      ENTITY_TYPE_STORAGE_GRID_DISCOVER_SUMMARY = 'STORAGE_GRID_DISCOVER_SUMMARY'.freeze,
      ENTITY_TYPE_DATABASE_SYSTEM_DISCOVER_SUMMARY = 'DATABASE_SYSTEM_DISCOVER_SUMMARY'.freeze,
      ENTITY_TYPE_INFRASTRUCTURE_DISCOVER_SUMMARY = 'INFRASTRUCTURE_DISCOVER_SUMMARY'.freeze,
      ENTITY_TYPE_INFRASTRUCTURE_DISCOVER = 'INFRASTRUCTURE_DISCOVER'.freeze
    ].freeze

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the entity discovered.
    # @return [String]
    attr_accessor :id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the agent used for monitoring.
    # @return [String]
    attr_accessor :agent_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the associated connector.
    # @return [String]
    attr_accessor :connector_id

    # **[Required]** The name of the entity.
    # @return [String]
    attr_accessor :display_name

    # The version of the entity.
    # @return [String]
    attr_accessor :version

    # The internal identifier of the entity.
    # @return [String]
    attr_accessor :internal_id

    # The status of the entity.
    # @return [String]
    attr_accessor :status

    # The status of the entity discovery.
    # @return [String]
    attr_reader :discover_status

    # The error code of the discovery.
    # @return [String]
    attr_accessor :discover_error_code

    # The error message of the discovery.
    # @return [String]
    attr_accessor :discover_error_msg

    # **[Required]** The type of discovered entities.
    # @return [String]
    attr_reader :entity_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'agent_id': :'agentId',
        'connector_id': :'connectorId',
        'display_name': :'displayName',
        'version': :'version',
        'internal_id': :'internalId',
        'status': :'status',
        'discover_status': :'discoverStatus',
        'discover_error_code': :'discoverErrorCode',
        'discover_error_msg': :'discoverErrorMsg',
        'entity_type': :'entityType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'agent_id': :'String',
        'connector_id': :'String',
        'display_name': :'String',
        'version': :'String',
        'internal_id': :'String',
        'status': :'String',
        'discover_status': :'String',
        'discover_error_code': :'String',
        'discover_error_msg': :'String',
        'entity_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'entityType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::DatabaseManagement::Models::ExternalStorageGridDiscoverySummary' if type == 'STORAGE_GRID_DISCOVER_SUMMARY'
      return 'OCI::DatabaseManagement::Models::ExternalExadataInfrastructureDiscovery' if type == 'INFRASTRUCTURE_DISCOVER'
      return 'OCI::DatabaseManagement::Models::ExternalDatabaseSystemDiscoverySummary' if type == 'DATABASE_SYSTEM_DISCOVER_SUMMARY'
      return 'OCI::DatabaseManagement::Models::ExternalExadataInfrastructureDiscoverySummary' if type == 'INFRASTRUCTURE_DISCOVER_SUMMARY'
      return 'OCI::DatabaseManagement::Models::ExternalStorageServerDiscoverySummary' if type == 'STORAGE_SERVER_DISCOVER_SUMMARY'

      # TODO: Log a warning when the subtype is not found.
      'OCI::DatabaseManagement::Models::EntityDiscovered'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :agent_id The value to assign to the {#agent_id} property
    # @option attributes [String] :connector_id The value to assign to the {#connector_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [String] :internal_id The value to assign to the {#internal_id} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :discover_status The value to assign to the {#discover_status} property
    # @option attributes [String] :discover_error_code The value to assign to the {#discover_error_code} property
    # @option attributes [String] :discover_error_msg The value to assign to the {#discover_error_msg} property
    # @option attributes [String] :entity_type The value to assign to the {#entity_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.agent_id = attributes[:'agentId'] if attributes[:'agentId']

      raise 'You cannot provide both :agentId and :agent_id' if attributes.key?(:'agentId') && attributes.key?(:'agent_id')

      self.agent_id = attributes[:'agent_id'] if attributes[:'agent_id']

      self.connector_id = attributes[:'connectorId'] if attributes[:'connectorId']

      raise 'You cannot provide both :connectorId and :connector_id' if attributes.key?(:'connectorId') && attributes.key?(:'connector_id')

      self.connector_id = attributes[:'connector_id'] if attributes[:'connector_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.version = attributes[:'version'] if attributes[:'version']

      self.internal_id = attributes[:'internalId'] if attributes[:'internalId']

      raise 'You cannot provide both :internalId and :internal_id' if attributes.key?(:'internalId') && attributes.key?(:'internal_id')

      self.internal_id = attributes[:'internal_id'] if attributes[:'internal_id']

      self.status = attributes[:'status'] if attributes[:'status']

      self.discover_status = attributes[:'discoverStatus'] if attributes[:'discoverStatus']
      self.discover_status = "NEW_DISCOVERED" if discover_status.nil? && !attributes.key?(:'discoverStatus') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :discoverStatus and :discover_status' if attributes.key?(:'discoverStatus') && attributes.key?(:'discover_status')

      self.discover_status = attributes[:'discover_status'] if attributes[:'discover_status']
      self.discover_status = "NEW_DISCOVERED" if discover_status.nil? && !attributes.key?(:'discoverStatus') && !attributes.key?(:'discover_status') # rubocop:disable Style/StringLiterals

      self.discover_error_code = attributes[:'discoverErrorCode'] if attributes[:'discoverErrorCode']

      raise 'You cannot provide both :discoverErrorCode and :discover_error_code' if attributes.key?(:'discoverErrorCode') && attributes.key?(:'discover_error_code')

      self.discover_error_code = attributes[:'discover_error_code'] if attributes[:'discover_error_code']

      self.discover_error_msg = attributes[:'discoverErrorMsg'] if attributes[:'discoverErrorMsg']

      raise 'You cannot provide both :discoverErrorMsg and :discover_error_msg' if attributes.key?(:'discoverErrorMsg') && attributes.key?(:'discover_error_msg')

      self.discover_error_msg = attributes[:'discover_error_msg'] if attributes[:'discover_error_msg']

      self.entity_type = attributes[:'entityType'] if attributes[:'entityType']

      raise 'You cannot provide both :entityType and :entity_type' if attributes.key?(:'entityType') && attributes.key?(:'entity_type')

      self.entity_type = attributes[:'entity_type'] if attributes[:'entity_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discover_status Object to be assigned
    def discover_status=(discover_status)
      raise "Invalid value for 'discover_status': this must be one of the values in DISCOVER_STATUS_ENUM." if discover_status && !DISCOVER_STATUS_ENUM.include?(discover_status)

      @discover_status = discover_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity_type Object to be assigned
    def entity_type=(entity_type)
      raise "Invalid value for 'entity_type': this must be one of the values in ENTITY_TYPE_ENUM." if entity_type && !ENTITY_TYPE_ENUM.include?(entity_type)

      @entity_type = entity_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        agent_id == other.agent_id &&
        connector_id == other.connector_id &&
        display_name == other.display_name &&
        version == other.version &&
        internal_id == other.internal_id &&
        status == other.status &&
        discover_status == other.discover_status &&
        discover_error_code == other.discover_error_code &&
        discover_error_msg == other.discover_error_msg &&
        entity_type == other.entity_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, agent_id, connector_id, display_name, version, internal_id, status, discover_status, discover_error_code, discover_error_msg, entity_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
