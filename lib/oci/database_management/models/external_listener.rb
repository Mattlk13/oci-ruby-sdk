# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of an external listener.
  class DatabaseManagement::Models::ExternalListener
    LISTENER_TYPE_ENUM = [
      LISTENER_TYPE_ASM = 'ASM'.freeze,
      LISTENER_TYPE_LOCAL = 'LOCAL'.freeze,
      LISTENER_TYPE_SCAN = 'SCAN'.freeze,
      LISTENER_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_NOT_CONNECTED = 'NOT_CONNECTED'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the external listener.
    # @return [String]
    attr_accessor :id

    # **[Required]** The user-friendly name for the external listener. The name does not have to be unique.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The name of the external listener.
    # @return [String]
    attr_accessor :component_name

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the external DB system that the listener is a part of.
    # @return [String]
    attr_accessor :external_db_system_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the external connector.
    # @return [String]
    attr_accessor :external_connector_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the external DB node.
    # @return [String]
    attr_accessor :external_db_node_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the external DB home.
    # @return [String]
    attr_accessor :external_db_home_id

    # The listener alias.
    # @return [String]
    attr_accessor :listener_alias

    # The type of listener.
    # @return [String]
    attr_reader :listener_type

    # The additional details of the external listener defined in `{\"key\": \"value\"}` format.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :additional_details

    # **[Required]** The current lifecycle state of the external listener.
    # @return [String]
    attr_reader :lifecycle_state

    # Additional information about the current lifecycle state.
    # @return [String]
    attr_accessor :lifecycle_details

    # The location of the listener configuration file listener.ora.
    # @return [String]
    attr_accessor :listener_ora_location

    # The Oracle home location of the listener.
    # @return [String]
    attr_accessor :oracle_home

    # The name of the host on which the external listener is running.
    # @return [String]
    attr_accessor :host_name

    # The directory that stores tracing and logging incidents when Automatic Diagnostic Repository (ADR) is enabled.
    # @return [String]
    attr_accessor :adr_home_directory

    # The destination directory of the listener log file.
    # @return [String]
    attr_accessor :log_directory

    # The destination directory of the listener trace file.
    # @return [String]
    attr_accessor :trace_directory

    # The listener version.
    # @return [String]
    attr_accessor :version

    # The list of protocol addresses the listener is configured to listen on.
    # @return [Array<OCI::DatabaseManagement::Models::ExternalListenerEndpoint>]
    attr_accessor :endpoints

    # The list of databases that are serviced by the listener.
    # @return [Array<OCI::DatabaseManagement::Models::ExternalListenerServicedDatabase>]
    attr_accessor :serviced_databases

    # The list of ASMs that are serviced by the listener.
    # @return [Array<OCI::DatabaseManagement::Models::ExternalServicedAsm>]
    attr_accessor :serviced_asms

    # **[Required]** The date and time the external listener was created.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time the external listener was last updated.
    # @return [DateTime]
    attr_accessor :time_updated

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # System tags can be viewed by users, but can only be created by the system.
    #
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'component_name': :'componentName',
        'compartment_id': :'compartmentId',
        'external_db_system_id': :'externalDbSystemId',
        'external_connector_id': :'externalConnectorId',
        'external_db_node_id': :'externalDbNodeId',
        'external_db_home_id': :'externalDbHomeId',
        'listener_alias': :'listenerAlias',
        'listener_type': :'listenerType',
        'additional_details': :'additionalDetails',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'listener_ora_location': :'listenerOraLocation',
        'oracle_home': :'oracleHome',
        'host_name': :'hostName',
        'adr_home_directory': :'adrHomeDirectory',
        'log_directory': :'logDirectory',
        'trace_directory': :'traceDirectory',
        'version': :'version',
        'endpoints': :'endpoints',
        'serviced_databases': :'servicedDatabases',
        'serviced_asms': :'servicedAsms',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'component_name': :'String',
        'compartment_id': :'String',
        'external_db_system_id': :'String',
        'external_connector_id': :'String',
        'external_db_node_id': :'String',
        'external_db_home_id': :'String',
        'listener_alias': :'String',
        'listener_type': :'String',
        'additional_details': :'Hash<String, String>',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'listener_ora_location': :'String',
        'oracle_home': :'String',
        'host_name': :'String',
        'adr_home_directory': :'String',
        'log_directory': :'String',
        'trace_directory': :'String',
        'version': :'String',
        'endpoints': :'Array<OCI::DatabaseManagement::Models::ExternalListenerEndpoint>',
        'serviced_databases': :'Array<OCI::DatabaseManagement::Models::ExternalListenerServicedDatabase>',
        'serviced_asms': :'Array<OCI::DatabaseManagement::Models::ExternalServicedAsm>',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :component_name The value to assign to the {#component_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :external_db_system_id The value to assign to the {#external_db_system_id} property
    # @option attributes [String] :external_connector_id The value to assign to the {#external_connector_id} property
    # @option attributes [String] :external_db_node_id The value to assign to the {#external_db_node_id} property
    # @option attributes [String] :external_db_home_id The value to assign to the {#external_db_home_id} property
    # @option attributes [String] :listener_alias The value to assign to the {#listener_alias} property
    # @option attributes [String] :listener_type The value to assign to the {#listener_type} property
    # @option attributes [Hash<String, String>] :additional_details The value to assign to the {#additional_details} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :listener_ora_location The value to assign to the {#listener_ora_location} property
    # @option attributes [String] :oracle_home The value to assign to the {#oracle_home} property
    # @option attributes [String] :host_name The value to assign to the {#host_name} property
    # @option attributes [String] :adr_home_directory The value to assign to the {#adr_home_directory} property
    # @option attributes [String] :log_directory The value to assign to the {#log_directory} property
    # @option attributes [String] :trace_directory The value to assign to the {#trace_directory} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::ExternalListenerEndpoint>] :endpoints The value to assign to the {#endpoints} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::ExternalListenerServicedDatabase>] :serviced_databases The value to assign to the {#serviced_databases} property
    # @option attributes [Array<OCI::DatabaseManagement::Models::ExternalServicedAsm>] :serviced_asms The value to assign to the {#serviced_asms} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.component_name = attributes[:'componentName'] if attributes[:'componentName']

      raise 'You cannot provide both :componentName and :component_name' if attributes.key?(:'componentName') && attributes.key?(:'component_name')

      self.component_name = attributes[:'component_name'] if attributes[:'component_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.external_db_system_id = attributes[:'externalDbSystemId'] if attributes[:'externalDbSystemId']

      raise 'You cannot provide both :externalDbSystemId and :external_db_system_id' if attributes.key?(:'externalDbSystemId') && attributes.key?(:'external_db_system_id')

      self.external_db_system_id = attributes[:'external_db_system_id'] if attributes[:'external_db_system_id']

      self.external_connector_id = attributes[:'externalConnectorId'] if attributes[:'externalConnectorId']

      raise 'You cannot provide both :externalConnectorId and :external_connector_id' if attributes.key?(:'externalConnectorId') && attributes.key?(:'external_connector_id')

      self.external_connector_id = attributes[:'external_connector_id'] if attributes[:'external_connector_id']

      self.external_db_node_id = attributes[:'externalDbNodeId'] if attributes[:'externalDbNodeId']

      raise 'You cannot provide both :externalDbNodeId and :external_db_node_id' if attributes.key?(:'externalDbNodeId') && attributes.key?(:'external_db_node_id')

      self.external_db_node_id = attributes[:'external_db_node_id'] if attributes[:'external_db_node_id']

      self.external_db_home_id = attributes[:'externalDbHomeId'] if attributes[:'externalDbHomeId']

      raise 'You cannot provide both :externalDbHomeId and :external_db_home_id' if attributes.key?(:'externalDbHomeId') && attributes.key?(:'external_db_home_id')

      self.external_db_home_id = attributes[:'external_db_home_id'] if attributes[:'external_db_home_id']

      self.listener_alias = attributes[:'listenerAlias'] if attributes[:'listenerAlias']

      raise 'You cannot provide both :listenerAlias and :listener_alias' if attributes.key?(:'listenerAlias') && attributes.key?(:'listener_alias')

      self.listener_alias = attributes[:'listener_alias'] if attributes[:'listener_alias']

      self.listener_type = attributes[:'listenerType'] if attributes[:'listenerType']

      raise 'You cannot provide both :listenerType and :listener_type' if attributes.key?(:'listenerType') && attributes.key?(:'listener_type')

      self.listener_type = attributes[:'listener_type'] if attributes[:'listener_type']

      self.additional_details = attributes[:'additionalDetails'] if attributes[:'additionalDetails']

      raise 'You cannot provide both :additionalDetails and :additional_details' if attributes.key?(:'additionalDetails') && attributes.key?(:'additional_details')

      self.additional_details = attributes[:'additional_details'] if attributes[:'additional_details']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.listener_ora_location = attributes[:'listenerOraLocation'] if attributes[:'listenerOraLocation']

      raise 'You cannot provide both :listenerOraLocation and :listener_ora_location' if attributes.key?(:'listenerOraLocation') && attributes.key?(:'listener_ora_location')

      self.listener_ora_location = attributes[:'listener_ora_location'] if attributes[:'listener_ora_location']

      self.oracle_home = attributes[:'oracleHome'] if attributes[:'oracleHome']

      raise 'You cannot provide both :oracleHome and :oracle_home' if attributes.key?(:'oracleHome') && attributes.key?(:'oracle_home')

      self.oracle_home = attributes[:'oracle_home'] if attributes[:'oracle_home']

      self.host_name = attributes[:'hostName'] if attributes[:'hostName']

      raise 'You cannot provide both :hostName and :host_name' if attributes.key?(:'hostName') && attributes.key?(:'host_name')

      self.host_name = attributes[:'host_name'] if attributes[:'host_name']

      self.adr_home_directory = attributes[:'adrHomeDirectory'] if attributes[:'adrHomeDirectory']

      raise 'You cannot provide both :adrHomeDirectory and :adr_home_directory' if attributes.key?(:'adrHomeDirectory') && attributes.key?(:'adr_home_directory')

      self.adr_home_directory = attributes[:'adr_home_directory'] if attributes[:'adr_home_directory']

      self.log_directory = attributes[:'logDirectory'] if attributes[:'logDirectory']

      raise 'You cannot provide both :logDirectory and :log_directory' if attributes.key?(:'logDirectory') && attributes.key?(:'log_directory')

      self.log_directory = attributes[:'log_directory'] if attributes[:'log_directory']

      self.trace_directory = attributes[:'traceDirectory'] if attributes[:'traceDirectory']

      raise 'You cannot provide both :traceDirectory and :trace_directory' if attributes.key?(:'traceDirectory') && attributes.key?(:'trace_directory')

      self.trace_directory = attributes[:'trace_directory'] if attributes[:'trace_directory']

      self.version = attributes[:'version'] if attributes[:'version']

      self.endpoints = attributes[:'endpoints'] if attributes[:'endpoints']

      self.serviced_databases = attributes[:'servicedDatabases'] if attributes[:'servicedDatabases']

      raise 'You cannot provide both :servicedDatabases and :serviced_databases' if attributes.key?(:'servicedDatabases') && attributes.key?(:'serviced_databases')

      self.serviced_databases = attributes[:'serviced_databases'] if attributes[:'serviced_databases']

      self.serviced_asms = attributes[:'servicedAsms'] if attributes[:'servicedAsms']

      raise 'You cannot provide both :servicedAsms and :serviced_asms' if attributes.key?(:'servicedAsms') && attributes.key?(:'serviced_asms')

      self.serviced_asms = attributes[:'serviced_asms'] if attributes[:'serviced_asms']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] listener_type Object to be assigned
    def listener_type=(listener_type)
      # rubocop:disable Style/ConditionalAssignment
      if listener_type && !LISTENER_TYPE_ENUM.include?(listener_type)
        OCI.logger.debug("Unknown value for 'listener_type' [" + listener_type + "]. Mapping to 'LISTENER_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @listener_type = LISTENER_TYPE_UNKNOWN_ENUM_VALUE
      else
        @listener_type = listener_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        component_name == other.component_name &&
        compartment_id == other.compartment_id &&
        external_db_system_id == other.external_db_system_id &&
        external_connector_id == other.external_connector_id &&
        external_db_node_id == other.external_db_node_id &&
        external_db_home_id == other.external_db_home_id &&
        listener_alias == other.listener_alias &&
        listener_type == other.listener_type &&
        additional_details == other.additional_details &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        listener_ora_location == other.listener_ora_location &&
        oracle_home == other.oracle_home &&
        host_name == other.host_name &&
        adr_home_directory == other.adr_home_directory &&
        log_directory == other.log_directory &&
        trace_directory == other.trace_directory &&
        version == other.version &&
        endpoints == other.endpoints &&
        serviced_databases == other.serviced_databases &&
        serviced_asms == other.serviced_asms &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, component_name, compartment_id, external_db_system_id, external_connector_id, external_db_node_id, external_db_home_id, listener_alias, listener_type, additional_details, lifecycle_state, lifecycle_details, listener_ora_location, oracle_home, host_name, adr_home_directory, log_directory, trace_directory, version, endpoints, serviced_databases, serviced_asms, time_created, time_updated, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
