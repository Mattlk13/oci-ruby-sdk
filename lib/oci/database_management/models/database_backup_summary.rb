# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The summary of the High Availability (HA) and backup for a database.
  class DatabaseManagement::Models::DatabaseBackupSummary
    BACKUP_DESTINATION_ENUM = [
      BACKUP_DESTINATION_DISK = 'DISK'.freeze,
      BACKUP_DESTINATION_TAPE = 'TAPE'.freeze,
      BACKUP_DESTINATION_NFS = 'NFS'.freeze,
      BACKUP_DESTINATION_LOCAL = 'LOCAL'.freeze,
      BACKUP_DESTINATION_DBRS = 'DBRS'.freeze,
      BACKUP_DESTINATION_OBJECT_STORE = 'OBJECT_STORE'.freeze,
      BACKUP_DESTINATION_RECOVERY_APPLIANCE = 'RECOVERY_APPLIANCE'.freeze,
      BACKUP_DESTINATION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The backup status of the database.
    # @return [String]
    attr_accessor :backup_status

    # **[Required]** The database backup completion date and time in UTC in ISO-8601 format, which is \"yyyy-MM-dd'T'hh:mm:ss.sss'Z'\".
    # @return [DateTime]
    attr_accessor :time_backup_completed

    # **[Required]** The backup duration of the database in seconds.
    # @return [Integer]
    attr_accessor :backup_duration_in_seconds

    # **[Required]** The backup type of the database (FULL/INCREMENTAL).
    # @return [String]
    attr_accessor :backup_type

    # **[Required]** The backup destination of the database.
    # @return [String]
    attr_reader :backup_destination

    # **[Required]** The backup size of the database.
    # @return [Float]
    attr_accessor :backup_size_in_gbs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'backup_status': :'backupStatus',
        'time_backup_completed': :'timeBackupCompleted',
        'backup_duration_in_seconds': :'backupDurationInSeconds',
        'backup_type': :'backupType',
        'backup_destination': :'backupDestination',
        'backup_size_in_gbs': :'backupSizeInGBs'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'backup_status': :'String',
        'time_backup_completed': :'DateTime',
        'backup_duration_in_seconds': :'Integer',
        'backup_type': :'String',
        'backup_destination': :'String',
        'backup_size_in_gbs': :'Float'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :backup_status The value to assign to the {#backup_status} property
    # @option attributes [DateTime] :time_backup_completed The value to assign to the {#time_backup_completed} property
    # @option attributes [Integer] :backup_duration_in_seconds The value to assign to the {#backup_duration_in_seconds} property
    # @option attributes [String] :backup_type The value to assign to the {#backup_type} property
    # @option attributes [String] :backup_destination The value to assign to the {#backup_destination} property
    # @option attributes [Float] :backup_size_in_gbs The value to assign to the {#backup_size_in_gbs} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.backup_status = attributes[:'backupStatus'] if attributes[:'backupStatus']

      raise 'You cannot provide both :backupStatus and :backup_status' if attributes.key?(:'backupStatus') && attributes.key?(:'backup_status')

      self.backup_status = attributes[:'backup_status'] if attributes[:'backup_status']

      self.time_backup_completed = attributes[:'timeBackupCompleted'] if attributes[:'timeBackupCompleted']

      raise 'You cannot provide both :timeBackupCompleted and :time_backup_completed' if attributes.key?(:'timeBackupCompleted') && attributes.key?(:'time_backup_completed')

      self.time_backup_completed = attributes[:'time_backup_completed'] if attributes[:'time_backup_completed']

      self.backup_duration_in_seconds = attributes[:'backupDurationInSeconds'] if attributes[:'backupDurationInSeconds']

      raise 'You cannot provide both :backupDurationInSeconds and :backup_duration_in_seconds' if attributes.key?(:'backupDurationInSeconds') && attributes.key?(:'backup_duration_in_seconds')

      self.backup_duration_in_seconds = attributes[:'backup_duration_in_seconds'] if attributes[:'backup_duration_in_seconds']

      self.backup_type = attributes[:'backupType'] if attributes[:'backupType']

      raise 'You cannot provide both :backupType and :backup_type' if attributes.key?(:'backupType') && attributes.key?(:'backup_type')

      self.backup_type = attributes[:'backup_type'] if attributes[:'backup_type']

      self.backup_destination = attributes[:'backupDestination'] if attributes[:'backupDestination']

      raise 'You cannot provide both :backupDestination and :backup_destination' if attributes.key?(:'backupDestination') && attributes.key?(:'backup_destination')

      self.backup_destination = attributes[:'backup_destination'] if attributes[:'backup_destination']

      self.backup_size_in_gbs = attributes[:'backupSizeInGBs'] if attributes[:'backupSizeInGBs']

      raise 'You cannot provide both :backupSizeInGBs and :backup_size_in_gbs' if attributes.key?(:'backupSizeInGBs') && attributes.key?(:'backup_size_in_gbs')

      self.backup_size_in_gbs = attributes[:'backup_size_in_gbs'] if attributes[:'backup_size_in_gbs']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] backup_destination Object to be assigned
    def backup_destination=(backup_destination)
      # rubocop:disable Style/ConditionalAssignment
      if backup_destination && !BACKUP_DESTINATION_ENUM.include?(backup_destination)
        OCI.logger.debug("Unknown value for 'backup_destination' [" + backup_destination + "]. Mapping to 'BACKUP_DESTINATION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @backup_destination = BACKUP_DESTINATION_UNKNOWN_ENUM_VALUE
      else
        @backup_destination = backup_destination
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        backup_status == other.backup_status &&
        time_backup_completed == other.time_backup_completed &&
        backup_duration_in_seconds == other.backup_duration_in_seconds &&
        backup_type == other.backup_type &&
        backup_destination == other.backup_destination &&
        backup_size_in_gbs == other.backup_size_in_gbs
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [backup_status, time_backup_completed, backup_duration_in_seconds, backup_type, backup_destination, backup_size_in_gbs].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
