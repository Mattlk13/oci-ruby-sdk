# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The summary of the Optimizer Statistics Collection, which includes the aggregated number of tasks grouped by status.
  class DatabaseManagement::Models::OptimizerStatisticsCollectionAggregationSummary
    GROUP_BY_ENUM = [
      GROUP_BY_TASK_STATUS = 'TASK_STATUS'.freeze,
      GROUP_BY_TASK_OBJECTS_STATUS = 'TASK_OBJECTS_STATUS'.freeze,
      GROUP_BY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The optimizer statistics tasks grouped by type.
    # @return [String]
    attr_reader :group_by

    # **[Required]** Indicates the start of the hour as the statistics are aggregated per hour.
    # @return [DateTime]
    attr_accessor :time_start

    # Indicates the end of the hour as the statistics are aggregated per hour.
    # @return [DateTime]
    attr_accessor :time_end

    # The number of tasks or objects for which statistics are yet to be gathered.
    # @return [Integer]
    attr_accessor :pending

    # The number of tasks or objects for which statistics gathering is in progress.
    # @return [Integer]
    attr_accessor :in_progress

    # The number of tasks or objects for which statistics gathering is completed.
    # @return [Integer]
    attr_accessor :completed

    # The number of tasks or objects for which statistics gathering failed.
    # @return [Integer]
    attr_accessor :failed

    # The number of tasks or objects for which statistics gathering was skipped.
    # @return [Integer]
    attr_accessor :skipped

    # The number of tasks or objects for which statistics gathering timed out.
    # @return [Integer]
    attr_accessor :timed_out

    # The number of tasks or objects for which the status of statistics gathering is unknown.
    # @return [Integer]
    attr_accessor :unknown

    # The total number of tasks or objects for which statistics collection is finished. This number is the
    # sum of all the tasks or objects with various statuses: pending, inProgress, completed, failed, skipped,
    # timedOut, and unknown.
    #
    # @return [Integer]
    attr_accessor :total

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'group_by': :'groupBy',
        'time_start': :'timeStart',
        'time_end': :'timeEnd',
        'pending': :'pending',
        'in_progress': :'inProgress',
        'completed': :'completed',
        'failed': :'failed',
        'skipped': :'skipped',
        'timed_out': :'timedOut',
        'unknown': :'unknown',
        'total': :'total'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'group_by': :'String',
        'time_start': :'DateTime',
        'time_end': :'DateTime',
        'pending': :'Integer',
        'in_progress': :'Integer',
        'completed': :'Integer',
        'failed': :'Integer',
        'skipped': :'Integer',
        'timed_out': :'Integer',
        'unknown': :'Integer',
        'total': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :group_by The value to assign to the {#group_by} property
    # @option attributes [DateTime] :time_start The value to assign to the {#time_start} property
    # @option attributes [DateTime] :time_end The value to assign to the {#time_end} property
    # @option attributes [Integer] :pending The value to assign to the {#pending} property
    # @option attributes [Integer] :in_progress The value to assign to the {#in_progress} property
    # @option attributes [Integer] :completed The value to assign to the {#completed} property
    # @option attributes [Integer] :failed The value to assign to the {#failed} property
    # @option attributes [Integer] :skipped The value to assign to the {#skipped} property
    # @option attributes [Integer] :timed_out The value to assign to the {#timed_out} property
    # @option attributes [Integer] :unknown The value to assign to the {#unknown} property
    # @option attributes [Integer] :total The value to assign to the {#total} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.group_by = attributes[:'groupBy'] if attributes[:'groupBy']

      raise 'You cannot provide both :groupBy and :group_by' if attributes.key?(:'groupBy') && attributes.key?(:'group_by')

      self.group_by = attributes[:'group_by'] if attributes[:'group_by']

      self.time_start = attributes[:'timeStart'] if attributes[:'timeStart']

      raise 'You cannot provide both :timeStart and :time_start' if attributes.key?(:'timeStart') && attributes.key?(:'time_start')

      self.time_start = attributes[:'time_start'] if attributes[:'time_start']

      self.time_end = attributes[:'timeEnd'] if attributes[:'timeEnd']

      raise 'You cannot provide both :timeEnd and :time_end' if attributes.key?(:'timeEnd') && attributes.key?(:'time_end')

      self.time_end = attributes[:'time_end'] if attributes[:'time_end']

      self.pending = attributes[:'pending'] if attributes[:'pending']

      self.in_progress = attributes[:'inProgress'] if attributes[:'inProgress']

      raise 'You cannot provide both :inProgress and :in_progress' if attributes.key?(:'inProgress') && attributes.key?(:'in_progress')

      self.in_progress = attributes[:'in_progress'] if attributes[:'in_progress']

      self.completed = attributes[:'completed'] if attributes[:'completed']

      self.failed = attributes[:'failed'] if attributes[:'failed']

      self.skipped = attributes[:'skipped'] if attributes[:'skipped']

      self.timed_out = attributes[:'timedOut'] if attributes[:'timedOut']

      raise 'You cannot provide both :timedOut and :timed_out' if attributes.key?(:'timedOut') && attributes.key?(:'timed_out')

      self.timed_out = attributes[:'timed_out'] if attributes[:'timed_out']

      self.unknown = attributes[:'unknown'] if attributes[:'unknown']

      self.total = attributes[:'total'] if attributes[:'total']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] group_by Object to be assigned
    def group_by=(group_by)
      # rubocop:disable Style/ConditionalAssignment
      if group_by && !GROUP_BY_ENUM.include?(group_by)
        OCI.logger.debug("Unknown value for 'group_by' [" + group_by + "]. Mapping to 'GROUP_BY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @group_by = GROUP_BY_UNKNOWN_ENUM_VALUE
      else
        @group_by = group_by
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        group_by == other.group_by &&
        time_start == other.time_start &&
        time_end == other.time_end &&
        pending == other.pending &&
        in_progress == other.in_progress &&
        completed == other.completed &&
        failed == other.failed &&
        skipped == other.skipped &&
        timed_out == other.timed_out &&
        unknown == other.unknown &&
        total == other.total
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [group_by, time_start, time_end, pending, in_progress, completed, failed, skipped, timed_out, unknown, total].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
