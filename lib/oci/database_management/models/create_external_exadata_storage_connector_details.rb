# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20201101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details required to create the connector to the Exadata storage server.
  class DatabaseManagement::Models::CreateExternalExadataStorageConnectorDetails
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Exadata storage server.
    # @return [String]
    attr_accessor :storage_server_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the agent for the Exadata storage server.
    # @return [String]
    attr_accessor :agent_id

    # **[Required]** The name of the Exadata storage server connector.
    # @return [String]
    attr_accessor :connector_name

    # **[Required]** The unique string of the connection. For example, \"https://<storage-server-name>/MS/RESTService/\".
    # @return [String]
    attr_accessor :connection_uri

    # This attribute is required.
    # @return [OCI::DatabaseManagement::Models::RestCredential]
    attr_accessor :credential_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'storage_server_id': :'storageServerId',
        'agent_id': :'agentId',
        'connector_name': :'connectorName',
        'connection_uri': :'connectionUri',
        'credential_info': :'credentialInfo'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'storage_server_id': :'String',
        'agent_id': :'String',
        'connector_name': :'String',
        'connection_uri': :'String',
        'credential_info': :'OCI::DatabaseManagement::Models::RestCredential'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :storage_server_id The value to assign to the {#storage_server_id} property
    # @option attributes [String] :agent_id The value to assign to the {#agent_id} property
    # @option attributes [String] :connector_name The value to assign to the {#connector_name} property
    # @option attributes [String] :connection_uri The value to assign to the {#connection_uri} property
    # @option attributes [OCI::DatabaseManagement::Models::RestCredential] :credential_info The value to assign to the {#credential_info} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.storage_server_id = attributes[:'storageServerId'] if attributes[:'storageServerId']

      raise 'You cannot provide both :storageServerId and :storage_server_id' if attributes.key?(:'storageServerId') && attributes.key?(:'storage_server_id')

      self.storage_server_id = attributes[:'storage_server_id'] if attributes[:'storage_server_id']

      self.agent_id = attributes[:'agentId'] if attributes[:'agentId']

      raise 'You cannot provide both :agentId and :agent_id' if attributes.key?(:'agentId') && attributes.key?(:'agent_id')

      self.agent_id = attributes[:'agent_id'] if attributes[:'agent_id']

      self.connector_name = attributes[:'connectorName'] if attributes[:'connectorName']

      raise 'You cannot provide both :connectorName and :connector_name' if attributes.key?(:'connectorName') && attributes.key?(:'connector_name')

      self.connector_name = attributes[:'connector_name'] if attributes[:'connector_name']

      self.connection_uri = attributes[:'connectionUri'] if attributes[:'connectionUri']

      raise 'You cannot provide both :connectionUri and :connection_uri' if attributes.key?(:'connectionUri') && attributes.key?(:'connection_uri')

      self.connection_uri = attributes[:'connection_uri'] if attributes[:'connection_uri']

      self.credential_info = attributes[:'credentialInfo'] if attributes[:'credentialInfo']

      raise 'You cannot provide both :credentialInfo and :credential_info' if attributes.key?(:'credentialInfo') && attributes.key?(:'credential_info')

      self.credential_info = attributes[:'credential_info'] if attributes[:'credential_info']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        storage_server_id == other.storage_server_id &&
        agent_id == other.agent_id &&
        connector_name == other.connector_name &&
        connection_uri == other.connection_uri &&
        credential_info == other.credential_info
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [storage_server_id, agent_id, connector_name, connection_uri, credential_info].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
