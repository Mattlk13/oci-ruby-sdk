# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190531
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about the Node's backup.
  class Bds::Models::NodeBackup
    BACKUP_TRIGGER_TYPE_ENUM = [
      BACKUP_TRIGGER_TYPE_MANUAL = 'MANUAL'.freeze,
      BACKUP_TRIGGER_TYPE_SCHEDULED = 'SCHEDULED'.freeze,
      BACKUP_TRIGGER_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    BACKUP_TYPE_ENUM = [
      BACKUP_TYPE_FULL = 'FULL'.freeze,
      BACKUP_TYPE_INCREMENTAL = 'INCREMENTAL'.freeze,
      BACKUP_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_PARTIAL = 'PARTIAL'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The id of the node backup.
    # @return [String]
    attr_accessor :id

    # **[Required]** BDS generated name for the backup. Format is nodeHostName_timeCreated
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The instance OCID of the node, which is the resource from which the node backup was acquired.
    # @return [String]
    attr_accessor :node_instance_id

    # **[Required]** Host name of the node to which this backup belongs.
    # @return [String]
    attr_accessor :node_host_name

    # **[Required]** type based on how backup action was initiated.
    # @return [String]
    attr_reader :backup_trigger_type

    # The ID of the nodeBackupConfiguration if the NodeBackup is automatically created by applying the configuration.
    # @return [String]
    attr_accessor :node_backup_config_id

    # **[Required]** Incremental backup type includes only the changes since the last backup. Full backup type includes all changes since the volume was created.
    # @return [String]
    attr_reader :backup_type

    # **[Required]** The state of the NodeBackup.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The time the cluster was created, shown as an RFC 3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'node_instance_id': :'nodeInstanceId',
        'node_host_name': :'nodeHostName',
        'backup_trigger_type': :'backupTriggerType',
        'node_backup_config_id': :'nodeBackupConfigId',
        'backup_type': :'backupType',
        'lifecycle_state': :'lifecycleState',
        'time_created': :'timeCreated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'node_instance_id': :'String',
        'node_host_name': :'String',
        'backup_trigger_type': :'String',
        'node_backup_config_id': :'String',
        'backup_type': :'String',
        'lifecycle_state': :'String',
        'time_created': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :node_instance_id The value to assign to the {#node_instance_id} property
    # @option attributes [String] :node_host_name The value to assign to the {#node_host_name} property
    # @option attributes [String] :backup_trigger_type The value to assign to the {#backup_trigger_type} property
    # @option attributes [String] :node_backup_config_id The value to assign to the {#node_backup_config_id} property
    # @option attributes [String] :backup_type The value to assign to the {#backup_type} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.node_instance_id = attributes[:'nodeInstanceId'] if attributes[:'nodeInstanceId']

      raise 'You cannot provide both :nodeInstanceId and :node_instance_id' if attributes.key?(:'nodeInstanceId') && attributes.key?(:'node_instance_id')

      self.node_instance_id = attributes[:'node_instance_id'] if attributes[:'node_instance_id']

      self.node_host_name = attributes[:'nodeHostName'] if attributes[:'nodeHostName']

      raise 'You cannot provide both :nodeHostName and :node_host_name' if attributes.key?(:'nodeHostName') && attributes.key?(:'node_host_name')

      self.node_host_name = attributes[:'node_host_name'] if attributes[:'node_host_name']

      self.backup_trigger_type = attributes[:'backupTriggerType'] if attributes[:'backupTriggerType']

      raise 'You cannot provide both :backupTriggerType and :backup_trigger_type' if attributes.key?(:'backupTriggerType') && attributes.key?(:'backup_trigger_type')

      self.backup_trigger_type = attributes[:'backup_trigger_type'] if attributes[:'backup_trigger_type']

      self.node_backup_config_id = attributes[:'nodeBackupConfigId'] if attributes[:'nodeBackupConfigId']

      raise 'You cannot provide both :nodeBackupConfigId and :node_backup_config_id' if attributes.key?(:'nodeBackupConfigId') && attributes.key?(:'node_backup_config_id')

      self.node_backup_config_id = attributes[:'node_backup_config_id'] if attributes[:'node_backup_config_id']

      self.backup_type = attributes[:'backupType'] if attributes[:'backupType']

      raise 'You cannot provide both :backupType and :backup_type' if attributes.key?(:'backupType') && attributes.key?(:'backup_type')

      self.backup_type = attributes[:'backup_type'] if attributes[:'backup_type']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] backup_trigger_type Object to be assigned
    def backup_trigger_type=(backup_trigger_type)
      # rubocop:disable Style/ConditionalAssignment
      if backup_trigger_type && !BACKUP_TRIGGER_TYPE_ENUM.include?(backup_trigger_type)
        OCI.logger.debug("Unknown value for 'backup_trigger_type' [" + backup_trigger_type + "]. Mapping to 'BACKUP_TRIGGER_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @backup_trigger_type = BACKUP_TRIGGER_TYPE_UNKNOWN_ENUM_VALUE
      else
        @backup_trigger_type = backup_trigger_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] backup_type Object to be assigned
    def backup_type=(backup_type)
      # rubocop:disable Style/ConditionalAssignment
      if backup_type && !BACKUP_TYPE_ENUM.include?(backup_type)
        OCI.logger.debug("Unknown value for 'backup_type' [" + backup_type + "]. Mapping to 'BACKUP_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @backup_type = BACKUP_TYPE_UNKNOWN_ENUM_VALUE
      else
        @backup_type = backup_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        node_instance_id == other.node_instance_id &&
        node_host_name == other.node_host_name &&
        backup_trigger_type == other.backup_trigger_type &&
        node_backup_config_id == other.node_backup_config_id &&
        backup_type == other.backup_type &&
        lifecycle_state == other.lifecycle_state &&
        time_created == other.time_created
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, node_instance_id, node_host_name, backup_trigger_type, node_backup_config_id, backup_type, lifecycle_state, time_created].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
