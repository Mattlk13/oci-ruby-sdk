# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190531
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Information about the UPST configuration.
  class Bds::Models::UpstConfiguration
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The instance OCID of the node, which is the resource from which the node backup was acquired.
    # @return [String]
    attr_accessor :vault_id

    # **[Required]** Master Encryption key used for encrypting token exchange keytab.
    # @return [String]
    attr_accessor :master_encryption_key_id

    # **[Required]** Secret ID for token exchange keytab
    # @return [String]
    attr_accessor :secret_id

    # **[Required]** Time when the keytab for token exchange principal is last refreshed, shown as an RFC 3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_token_exchange_keytab_last_refreshed

    # Token exchange kerberos Principal name in cluster
    # @return [String]
    attr_accessor :token_exchange_principal_name

    # **[Required]** Lifecycle state of the UPST config
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** Time when this UPST config was created, shown as an RFC 3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** Time when this UPST config was updated, shown as an RFC 3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** The kerberos keytab content used for creating identity propagation trust config, in base64 format
    # @return [String]
    attr_accessor :keytab_content

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'vault_id': :'vaultId',
        'master_encryption_key_id': :'masterEncryptionKeyId',
        'secret_id': :'secretId',
        'time_token_exchange_keytab_last_refreshed': :'timeTokenExchangeKeytabLastRefreshed',
        'token_exchange_principal_name': :'tokenExchangePrincipalName',
        'lifecycle_state': :'lifecycleState',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'keytab_content': :'keytabContent'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'vault_id': :'String',
        'master_encryption_key_id': :'String',
        'secret_id': :'String',
        'time_token_exchange_keytab_last_refreshed': :'DateTime',
        'token_exchange_principal_name': :'String',
        'lifecycle_state': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'keytab_content': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :vault_id The value to assign to the {#vault_id} property
    # @option attributes [String] :master_encryption_key_id The value to assign to the {#master_encryption_key_id} property
    # @option attributes [String] :secret_id The value to assign to the {#secret_id} property
    # @option attributes [DateTime] :time_token_exchange_keytab_last_refreshed The value to assign to the {#time_token_exchange_keytab_last_refreshed} property
    # @option attributes [String] :token_exchange_principal_name The value to assign to the {#token_exchange_principal_name} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :keytab_content The value to assign to the {#keytab_content} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.vault_id = attributes[:'vaultId'] if attributes[:'vaultId']

      raise 'You cannot provide both :vaultId and :vault_id' if attributes.key?(:'vaultId') && attributes.key?(:'vault_id')

      self.vault_id = attributes[:'vault_id'] if attributes[:'vault_id']

      self.master_encryption_key_id = attributes[:'masterEncryptionKeyId'] if attributes[:'masterEncryptionKeyId']

      raise 'You cannot provide both :masterEncryptionKeyId and :master_encryption_key_id' if attributes.key?(:'masterEncryptionKeyId') && attributes.key?(:'master_encryption_key_id')

      self.master_encryption_key_id = attributes[:'master_encryption_key_id'] if attributes[:'master_encryption_key_id']

      self.secret_id = attributes[:'secretId'] if attributes[:'secretId']

      raise 'You cannot provide both :secretId and :secret_id' if attributes.key?(:'secretId') && attributes.key?(:'secret_id')

      self.secret_id = attributes[:'secret_id'] if attributes[:'secret_id']

      self.time_token_exchange_keytab_last_refreshed = attributes[:'timeTokenExchangeKeytabLastRefreshed'] if attributes[:'timeTokenExchangeKeytabLastRefreshed']

      raise 'You cannot provide both :timeTokenExchangeKeytabLastRefreshed and :time_token_exchange_keytab_last_refreshed' if attributes.key?(:'timeTokenExchangeKeytabLastRefreshed') && attributes.key?(:'time_token_exchange_keytab_last_refreshed')

      self.time_token_exchange_keytab_last_refreshed = attributes[:'time_token_exchange_keytab_last_refreshed'] if attributes[:'time_token_exchange_keytab_last_refreshed']

      self.token_exchange_principal_name = attributes[:'tokenExchangePrincipalName'] if attributes[:'tokenExchangePrincipalName']

      raise 'You cannot provide both :tokenExchangePrincipalName and :token_exchange_principal_name' if attributes.key?(:'tokenExchangePrincipalName') && attributes.key?(:'token_exchange_principal_name')

      self.token_exchange_principal_name = attributes[:'token_exchange_principal_name'] if attributes[:'token_exchange_principal_name']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.keytab_content = attributes[:'keytabContent'] if attributes[:'keytabContent']

      raise 'You cannot provide both :keytabContent and :keytab_content' if attributes.key?(:'keytabContent') && attributes.key?(:'keytab_content')

      self.keytab_content = attributes[:'keytab_content'] if attributes[:'keytab_content']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        vault_id == other.vault_id &&
        master_encryption_key_id == other.master_encryption_key_id &&
        secret_id == other.secret_id &&
        time_token_exchange_keytab_last_refreshed == other.time_token_exchange_keytab_last_refreshed &&
        token_exchange_principal_name == other.token_exchange_principal_name &&
        lifecycle_state == other.lifecycle_state &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        keytab_content == other.keytab_content
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [vault_id, master_encryption_key_id, secret_id, time_token_exchange_keytab_last_refreshed, token_exchange_principal_name, lifecycle_state, time_created, time_updated, keytab_content].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
