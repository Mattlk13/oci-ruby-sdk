# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Version for the runbook.
  class FleetAppsManagement::Models::Version
    # **[Required]** A set of tasks to execute in the runbook.
    # @return [Array<OCI::FleetAppsManagement::Models::Task>]
    attr_accessor :tasks

    # **[Required]** The groups of the runbook.
    #
    # @return [Array<OCI::FleetAppsManagement::Models::Group>]
    attr_accessor :groups

    # This attribute is required.
    # @return [OCI::FleetAppsManagement::Models::ExecutionWorkflowDetails]
    attr_accessor :execution_workflow_details

    # @return [OCI::FleetAppsManagement::Models::RollbackWorkflowDetails]
    attr_accessor :rollback_workflow_details

    # The version of the runbook.
    # @return [String]
    attr_accessor :version

    # Is this version the latest?
    #
    # @return [BOOLEAN]
    attr_accessor :is_latest

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'tasks': :'tasks',
        'groups': :'groups',
        'execution_workflow_details': :'executionWorkflowDetails',
        'rollback_workflow_details': :'rollbackWorkflowDetails',
        'version': :'version',
        'is_latest': :'isLatest'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'tasks': :'Array<OCI::FleetAppsManagement::Models::Task>',
        'groups': :'Array<OCI::FleetAppsManagement::Models::Group>',
        'execution_workflow_details': :'OCI::FleetAppsManagement::Models::ExecutionWorkflowDetails',
        'rollback_workflow_details': :'OCI::FleetAppsManagement::Models::RollbackWorkflowDetails',
        'version': :'String',
        'is_latest': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<OCI::FleetAppsManagement::Models::Task>] :tasks The value to assign to the {#tasks} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::Group>] :groups The value to assign to the {#groups} property
    # @option attributes [OCI::FleetAppsManagement::Models::ExecutionWorkflowDetails] :execution_workflow_details The value to assign to the {#execution_workflow_details} property
    # @option attributes [OCI::FleetAppsManagement::Models::RollbackWorkflowDetails] :rollback_workflow_details The value to assign to the {#rollback_workflow_details} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [BOOLEAN] :is_latest The value to assign to the {#is_latest} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.tasks = attributes[:'tasks'] if attributes[:'tasks']

      self.groups = attributes[:'groups'] if attributes[:'groups']

      self.execution_workflow_details = attributes[:'executionWorkflowDetails'] if attributes[:'executionWorkflowDetails']

      raise 'You cannot provide both :executionWorkflowDetails and :execution_workflow_details' if attributes.key?(:'executionWorkflowDetails') && attributes.key?(:'execution_workflow_details')

      self.execution_workflow_details = attributes[:'execution_workflow_details'] if attributes[:'execution_workflow_details']

      self.rollback_workflow_details = attributes[:'rollbackWorkflowDetails'] if attributes[:'rollbackWorkflowDetails']

      raise 'You cannot provide both :rollbackWorkflowDetails and :rollback_workflow_details' if attributes.key?(:'rollbackWorkflowDetails') && attributes.key?(:'rollback_workflow_details')

      self.rollback_workflow_details = attributes[:'rollback_workflow_details'] if attributes[:'rollback_workflow_details']

      self.version = attributes[:'version'] if attributes[:'version']

      self.is_latest = attributes[:'isLatest'] unless attributes[:'isLatest'].nil?
      self.is_latest = false if is_latest.nil? && !attributes.key?(:'isLatest') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isLatest and :is_latest' if attributes.key?(:'isLatest') && attributes.key?(:'is_latest')

      self.is_latest = attributes[:'is_latest'] unless attributes[:'is_latest'].nil?
      self.is_latest = false if is_latest.nil? && !attributes.key?(:'isLatest') && !attributes.key?(:'is_latest') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        tasks == other.tasks &&
        groups == other.groups &&
        execution_workflow_details == other.execution_workflow_details &&
        rollback_workflow_details == other.rollback_workflow_details &&
        version == other.version &&
        is_latest == other.is_latest
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [tasks, groups, execution_workflow_details, rollback_workflow_details, version, is_latest].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
