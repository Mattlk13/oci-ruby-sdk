# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Preferences to send notifications on the fleet activities.
  class FleetAppsManagement::Models::Preferences
    # @return [OCI::FleetAppsManagement::Models::UpcomingSchedule]
    attr_accessor :upcoming_schedule

    # Enables or disables notification on Job Failures.
    # @return [BOOLEAN]
    attr_accessor :on_job_failure

    # Enables or disables notification on Environment Fleet Topology Modification.
    # @return [BOOLEAN]
    attr_accessor :on_topology_modification

    # Enables or disables notification when a task is paused.
    # @return [BOOLEAN]
    attr_accessor :on_task_pause

    # Enables or disables notification on task failure.
    # @return [BOOLEAN]
    attr_accessor :on_task_failure

    # Enables or disables notification on task success.
    # @return [BOOLEAN]
    attr_accessor :on_task_success

    # Enables or disables notification when fleet resource becomes non compliant.
    # @return [BOOLEAN]
    attr_accessor :on_resource_non_compliance

    # Enables or disables notification when a newer version of runbook associated with a fleet is available
    # @return [BOOLEAN]
    attr_accessor :on_runbook_newer_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'upcoming_schedule': :'upcomingSchedule',
        'on_job_failure': :'onJobFailure',
        'on_topology_modification': :'onTopologyModification',
        'on_task_pause': :'onTaskPause',
        'on_task_failure': :'onTaskFailure',
        'on_task_success': :'onTaskSuccess',
        'on_resource_non_compliance': :'onResourceNonCompliance',
        'on_runbook_newer_version': :'onRunbookNewerVersion'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'upcoming_schedule': :'OCI::FleetAppsManagement::Models::UpcomingSchedule',
        'on_job_failure': :'BOOLEAN',
        'on_topology_modification': :'BOOLEAN',
        'on_task_pause': :'BOOLEAN',
        'on_task_failure': :'BOOLEAN',
        'on_task_success': :'BOOLEAN',
        'on_resource_non_compliance': :'BOOLEAN',
        'on_runbook_newer_version': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::FleetAppsManagement::Models::UpcomingSchedule] :upcoming_schedule The value to assign to the {#upcoming_schedule} property
    # @option attributes [BOOLEAN] :on_job_failure The value to assign to the {#on_job_failure} property
    # @option attributes [BOOLEAN] :on_topology_modification The value to assign to the {#on_topology_modification} property
    # @option attributes [BOOLEAN] :on_task_pause The value to assign to the {#on_task_pause} property
    # @option attributes [BOOLEAN] :on_task_failure The value to assign to the {#on_task_failure} property
    # @option attributes [BOOLEAN] :on_task_success The value to assign to the {#on_task_success} property
    # @option attributes [BOOLEAN] :on_resource_non_compliance The value to assign to the {#on_resource_non_compliance} property
    # @option attributes [BOOLEAN] :on_runbook_newer_version The value to assign to the {#on_runbook_newer_version} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.upcoming_schedule = attributes[:'upcomingSchedule'] if attributes[:'upcomingSchedule']

      raise 'You cannot provide both :upcomingSchedule and :upcoming_schedule' if attributes.key?(:'upcomingSchedule') && attributes.key?(:'upcoming_schedule')

      self.upcoming_schedule = attributes[:'upcoming_schedule'] if attributes[:'upcoming_schedule']

      self.on_job_failure = attributes[:'onJobFailure'] unless attributes[:'onJobFailure'].nil?
      self.on_job_failure = false if on_job_failure.nil? && !attributes.key?(:'onJobFailure') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :onJobFailure and :on_job_failure' if attributes.key?(:'onJobFailure') && attributes.key?(:'on_job_failure')

      self.on_job_failure = attributes[:'on_job_failure'] unless attributes[:'on_job_failure'].nil?
      self.on_job_failure = false if on_job_failure.nil? && !attributes.key?(:'onJobFailure') && !attributes.key?(:'on_job_failure') # rubocop:disable Style/StringLiterals

      self.on_topology_modification = attributes[:'onTopologyModification'] unless attributes[:'onTopologyModification'].nil?
      self.on_topology_modification = false if on_topology_modification.nil? && !attributes.key?(:'onTopologyModification') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :onTopologyModification and :on_topology_modification' if attributes.key?(:'onTopologyModification') && attributes.key?(:'on_topology_modification')

      self.on_topology_modification = attributes[:'on_topology_modification'] unless attributes[:'on_topology_modification'].nil?
      self.on_topology_modification = false if on_topology_modification.nil? && !attributes.key?(:'onTopologyModification') && !attributes.key?(:'on_topology_modification') # rubocop:disable Style/StringLiterals

      self.on_task_pause = attributes[:'onTaskPause'] unless attributes[:'onTaskPause'].nil?
      self.on_task_pause = false if on_task_pause.nil? && !attributes.key?(:'onTaskPause') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :onTaskPause and :on_task_pause' if attributes.key?(:'onTaskPause') && attributes.key?(:'on_task_pause')

      self.on_task_pause = attributes[:'on_task_pause'] unless attributes[:'on_task_pause'].nil?
      self.on_task_pause = false if on_task_pause.nil? && !attributes.key?(:'onTaskPause') && !attributes.key?(:'on_task_pause') # rubocop:disable Style/StringLiterals

      self.on_task_failure = attributes[:'onTaskFailure'] unless attributes[:'onTaskFailure'].nil?
      self.on_task_failure = false if on_task_failure.nil? && !attributes.key?(:'onTaskFailure') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :onTaskFailure and :on_task_failure' if attributes.key?(:'onTaskFailure') && attributes.key?(:'on_task_failure')

      self.on_task_failure = attributes[:'on_task_failure'] unless attributes[:'on_task_failure'].nil?
      self.on_task_failure = false if on_task_failure.nil? && !attributes.key?(:'onTaskFailure') && !attributes.key?(:'on_task_failure') # rubocop:disable Style/StringLiterals

      self.on_task_success = attributes[:'onTaskSuccess'] unless attributes[:'onTaskSuccess'].nil?
      self.on_task_success = false if on_task_success.nil? && !attributes.key?(:'onTaskSuccess') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :onTaskSuccess and :on_task_success' if attributes.key?(:'onTaskSuccess') && attributes.key?(:'on_task_success')

      self.on_task_success = attributes[:'on_task_success'] unless attributes[:'on_task_success'].nil?
      self.on_task_success = false if on_task_success.nil? && !attributes.key?(:'onTaskSuccess') && !attributes.key?(:'on_task_success') # rubocop:disable Style/StringLiterals

      self.on_resource_non_compliance = attributes[:'onResourceNonCompliance'] unless attributes[:'onResourceNonCompliance'].nil?
      self.on_resource_non_compliance = false if on_resource_non_compliance.nil? && !attributes.key?(:'onResourceNonCompliance') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :onResourceNonCompliance and :on_resource_non_compliance' if attributes.key?(:'onResourceNonCompliance') && attributes.key?(:'on_resource_non_compliance')

      self.on_resource_non_compliance = attributes[:'on_resource_non_compliance'] unless attributes[:'on_resource_non_compliance'].nil?
      self.on_resource_non_compliance = false if on_resource_non_compliance.nil? && !attributes.key?(:'onResourceNonCompliance') && !attributes.key?(:'on_resource_non_compliance') # rubocop:disable Style/StringLiterals

      self.on_runbook_newer_version = attributes[:'onRunbookNewerVersion'] unless attributes[:'onRunbookNewerVersion'].nil?
      self.on_runbook_newer_version = false if on_runbook_newer_version.nil? && !attributes.key?(:'onRunbookNewerVersion') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :onRunbookNewerVersion and :on_runbook_newer_version' if attributes.key?(:'onRunbookNewerVersion') && attributes.key?(:'on_runbook_newer_version')

      self.on_runbook_newer_version = attributes[:'on_runbook_newer_version'] unless attributes[:'on_runbook_newer_version'].nil?
      self.on_runbook_newer_version = false if on_runbook_newer_version.nil? && !attributes.key?(:'onRunbookNewerVersion') && !attributes.key?(:'on_runbook_newer_version') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        upcoming_schedule == other.upcoming_schedule &&
        on_job_failure == other.on_job_failure &&
        on_topology_modification == other.on_topology_modification &&
        on_task_pause == other.on_task_pause &&
        on_task_failure == other.on_task_failure &&
        on_task_success == other.on_task_success &&
        on_resource_non_compliance == other.on_resource_non_compliance &&
        on_runbook_newer_version == other.on_runbook_newer_version
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [upcoming_schedule, on_job_failure, on_topology_modification, on_task_pause, on_task_failure, on_task_success, on_resource_non_compliance, on_runbook_newer_version].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
