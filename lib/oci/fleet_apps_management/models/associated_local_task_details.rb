# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'
require_relative 'associated_task_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of the local task.
  # The local tasks are specific to a single runbook.
  #
  class FleetAppsManagement::Models::AssociatedLocalTaskDetails < FleetAppsManagement::Models::AssociatedTaskDetails
    OS_TYPE_ENUM = [
      OS_TYPE_WINDOWS = 'WINDOWS'.freeze,
      OS_TYPE_LINUX = 'LINUX'.freeze,
      OS_TYPE_GENERIC = 'GENERIC'.freeze,
      OS_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # This attribute is required.
    # @return [OCI::FleetAppsManagement::Models::ExecutionDetails]
    attr_accessor :execution_details

    # The description of the task.
    # @return [String]
    attr_accessor :description

    # The platform of the runbook.
    # @return [String]
    attr_accessor :platform

    # Make a copy of this task in Library
    # @return [BOOLEAN]
    attr_accessor :is_copy_to_library_enabled

    # The OS for the task.
    # @return [String]
    attr_reader :os_type

    # @return [OCI::FleetAppsManagement::Models::Properties]
    attr_accessor :properties

    # Is this a discovery output task?
    # @return [BOOLEAN]
    attr_accessor :is_discovery_output_task

    # Is this an Apply Subject Task? Ex. Patch Execution Task
    # @return [BOOLEAN]
    attr_accessor :is_apply_subject_task

    # The name of the task
    # @return [String]
    attr_accessor :name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'scope': :'scope',
        'execution_details': :'executionDetails',
        'description': :'description',
        'platform': :'platform',
        'is_copy_to_library_enabled': :'isCopyToLibraryEnabled',
        'os_type': :'osType',
        'properties': :'properties',
        'is_discovery_output_task': :'isDiscoveryOutputTask',
        'is_apply_subject_task': :'isApplySubjectTask',
        'name': :'name'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'scope': :'String',
        'execution_details': :'OCI::FleetAppsManagement::Models::ExecutionDetails',
        'description': :'String',
        'platform': :'String',
        'is_copy_to_library_enabled': :'BOOLEAN',
        'os_type': :'String',
        'properties': :'OCI::FleetAppsManagement::Models::Properties',
        'is_discovery_output_task': :'BOOLEAN',
        'is_apply_subject_task': :'BOOLEAN',
        'name': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::FleetAppsManagement::Models::ExecutionDetails] :execution_details The value to assign to the {#execution_details} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :platform The value to assign to the {#platform} property
    # @option attributes [BOOLEAN] :is_copy_to_library_enabled The value to assign to the {#is_copy_to_library_enabled} property
    # @option attributes [String] :os_type The value to assign to the {#os_type} property
    # @option attributes [OCI::FleetAppsManagement::Models::Properties] :properties The value to assign to the {#properties} property
    # @option attributes [BOOLEAN] :is_discovery_output_task The value to assign to the {#is_discovery_output_task} property
    # @option attributes [BOOLEAN] :is_apply_subject_task The value to assign to the {#is_apply_subject_task} property
    # @option attributes [String] :name The value to assign to the {#name} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['scope'] = 'LOCAL'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.execution_details = attributes[:'executionDetails'] if attributes[:'executionDetails']

      raise 'You cannot provide both :executionDetails and :execution_details' if attributes.key?(:'executionDetails') && attributes.key?(:'execution_details')

      self.execution_details = attributes[:'execution_details'] if attributes[:'execution_details']

      self.description = attributes[:'description'] if attributes[:'description']

      self.platform = attributes[:'platform'] if attributes[:'platform']

      self.is_copy_to_library_enabled = attributes[:'isCopyToLibraryEnabled'] unless attributes[:'isCopyToLibraryEnabled'].nil?
      self.is_copy_to_library_enabled = false if is_copy_to_library_enabled.nil? && !attributes.key?(:'isCopyToLibraryEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isCopyToLibraryEnabled and :is_copy_to_library_enabled' if attributes.key?(:'isCopyToLibraryEnabled') && attributes.key?(:'is_copy_to_library_enabled')

      self.is_copy_to_library_enabled = attributes[:'is_copy_to_library_enabled'] unless attributes[:'is_copy_to_library_enabled'].nil?
      self.is_copy_to_library_enabled = false if is_copy_to_library_enabled.nil? && !attributes.key?(:'isCopyToLibraryEnabled') && !attributes.key?(:'is_copy_to_library_enabled') # rubocop:disable Style/StringLiterals

      self.os_type = attributes[:'osType'] if attributes[:'osType']
      self.os_type = "GENERIC" if os_type.nil? && !attributes.key?(:'osType') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :osType and :os_type' if attributes.key?(:'osType') && attributes.key?(:'os_type')

      self.os_type = attributes[:'os_type'] if attributes[:'os_type']
      self.os_type = "GENERIC" if os_type.nil? && !attributes.key?(:'osType') && !attributes.key?(:'os_type') # rubocop:disable Style/StringLiterals

      self.properties = attributes[:'properties'] if attributes[:'properties']

      self.is_discovery_output_task = attributes[:'isDiscoveryOutputTask'] unless attributes[:'isDiscoveryOutputTask'].nil?
      self.is_discovery_output_task = false if is_discovery_output_task.nil? && !attributes.key?(:'isDiscoveryOutputTask') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDiscoveryOutputTask and :is_discovery_output_task' if attributes.key?(:'isDiscoveryOutputTask') && attributes.key?(:'is_discovery_output_task')

      self.is_discovery_output_task = attributes[:'is_discovery_output_task'] unless attributes[:'is_discovery_output_task'].nil?
      self.is_discovery_output_task = false if is_discovery_output_task.nil? && !attributes.key?(:'isDiscoveryOutputTask') && !attributes.key?(:'is_discovery_output_task') # rubocop:disable Style/StringLiterals

      self.is_apply_subject_task = attributes[:'isApplySubjectTask'] unless attributes[:'isApplySubjectTask'].nil?
      self.is_apply_subject_task = false if is_apply_subject_task.nil? && !attributes.key?(:'isApplySubjectTask') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isApplySubjectTask and :is_apply_subject_task' if attributes.key?(:'isApplySubjectTask') && attributes.key?(:'is_apply_subject_task')

      self.is_apply_subject_task = attributes[:'is_apply_subject_task'] unless attributes[:'is_apply_subject_task'].nil?
      self.is_apply_subject_task = false if is_apply_subject_task.nil? && !attributes.key?(:'isApplySubjectTask') && !attributes.key?(:'is_apply_subject_task') # rubocop:disable Style/StringLiterals

      self.name = attributes[:'name'] if attributes[:'name']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_type Object to be assigned
    def os_type=(os_type)
      # rubocop:disable Style/ConditionalAssignment
      if os_type && !OS_TYPE_ENUM.include?(os_type)
        OCI.logger.debug("Unknown value for 'os_type' [" + os_type + "]. Mapping to 'OS_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @os_type = OS_TYPE_UNKNOWN_ENUM_VALUE
      else
        @os_type = os_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        scope == other.scope &&
        execution_details == other.execution_details &&
        description == other.description &&
        platform == other.platform &&
        is_copy_to_library_enabled == other.is_copy_to_library_enabled &&
        os_type == other.os_type &&
        properties == other.properties &&
        is_discovery_output_task == other.is_discovery_output_task &&
        is_apply_subject_task == other.is_apply_subject_task &&
        name == other.name
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [scope, execution_details, description, platform, is_copy_to_library_enabled, os_type, properties, is_discovery_output_task, is_apply_subject_task, name].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
