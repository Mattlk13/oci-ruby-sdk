# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Activity details including status corresponding to an Action Group.
  class FleetAppsManagement::Models::JobActivity
    STATUS_ENUM = [
      STATUS_ACCEPTED = 'ACCEPTED'.freeze,
      STATUS_WAITING = 'WAITING'.freeze,
      STATUS_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      STATUS_FAILED = 'FAILED'.freeze,
      STATUS_SUCCEEDED = 'SUCCEEDED'.freeze,
      STATUS_CANCELED = 'CANCELED'.freeze,
      STATUS_SKIPPED = 'SKIPPED'.freeze,
      STATUS_IGNORED = 'IGNORED'.freeze,
      STATUS_NOT_APPLICABLE = 'NOT_APPLICABLE'.freeze,
      STATUS_ABORTED = 'ABORTED'.freeze,
      STATUS_TIMED_OUT = 'TIMED_OUT'.freeze,
      STATUS_PAUSED = 'PAUSED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique activity id at the action group level.
    # In most cases, this would be a generated ActionGroupId.
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** Status of the Job at Action Group Level.
    # @return [String]
    attr_reader :status

    # The time the execution for the Action Group started. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_started

    # The time the execution for the Action Group ended. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_ended

    # OCID of the runbook associated with the Action Group.
    # @return [String]
    attr_accessor :runbook_id

    # Name of the RunbookVersion associated with the Action Group.
    # @return [String]
    attr_accessor :runbook_version_name

    # Name of the runbook associated with the Action Group.
    # @return [String]
    attr_accessor :runbook_name

    # A description of the Job Activity status.
    # If there are any errors, this can also include a short error message.
    #
    # @return [String]
    attr_accessor :description

    # List of Resource executions associated with the Action Group.
    # @return [Array<OCI::FleetAppsManagement::Models::EntityExecutionDetails>]
    attr_accessor :resource_level_executions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'status': :'status',
        'time_started': :'timeStarted',
        'time_ended': :'timeEnded',
        'runbook_id': :'runbookId',
        'runbook_version_name': :'runbookVersionName',
        'runbook_name': :'runbookName',
        'description': :'description',
        'resource_level_executions': :'resourceLevelExecutions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'status': :'String',
        'time_started': :'DateTime',
        'time_ended': :'DateTime',
        'runbook_id': :'String',
        'runbook_version_name': :'String',
        'runbook_name': :'String',
        'description': :'String',
        'resource_level_executions': :'Array<OCI::FleetAppsManagement::Models::EntityExecutionDetails>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_ended The value to assign to the {#time_ended} property
    # @option attributes [String] :runbook_id The value to assign to the {#runbook_id} property
    # @option attributes [String] :runbook_version_name The value to assign to the {#runbook_version_name} property
    # @option attributes [String] :runbook_name The value to assign to the {#runbook_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::EntityExecutionDetails>] :resource_level_executions The value to assign to the {#resource_level_executions} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.status = attributes[:'status'] if attributes[:'status']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_ended = attributes[:'timeEnded'] if attributes[:'timeEnded']

      raise 'You cannot provide both :timeEnded and :time_ended' if attributes.key?(:'timeEnded') && attributes.key?(:'time_ended')

      self.time_ended = attributes[:'time_ended'] if attributes[:'time_ended']

      self.runbook_id = attributes[:'runbookId'] if attributes[:'runbookId']

      raise 'You cannot provide both :runbookId and :runbook_id' if attributes.key?(:'runbookId') && attributes.key?(:'runbook_id')

      self.runbook_id = attributes[:'runbook_id'] if attributes[:'runbook_id']

      self.runbook_version_name = attributes[:'runbookVersionName'] if attributes[:'runbookVersionName']

      raise 'You cannot provide both :runbookVersionName and :runbook_version_name' if attributes.key?(:'runbookVersionName') && attributes.key?(:'runbook_version_name')

      self.runbook_version_name = attributes[:'runbook_version_name'] if attributes[:'runbook_version_name']

      self.runbook_name = attributes[:'runbookName'] if attributes[:'runbookName']

      raise 'You cannot provide both :runbookName and :runbook_name' if attributes.key?(:'runbookName') && attributes.key?(:'runbook_name')

      self.runbook_name = attributes[:'runbook_name'] if attributes[:'runbook_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.resource_level_executions = attributes[:'resourceLevelExecutions'] if attributes[:'resourceLevelExecutions']

      raise 'You cannot provide both :resourceLevelExecutions and :resource_level_executions' if attributes.key?(:'resourceLevelExecutions') && attributes.key?(:'resource_level_executions')

      self.resource_level_executions = attributes[:'resource_level_executions'] if attributes[:'resource_level_executions']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        status == other.status &&
        time_started == other.time_started &&
        time_ended == other.time_ended &&
        runbook_id == other.runbook_id &&
        runbook_version_name == other.runbook_version_name &&
        runbook_name == other.runbook_name &&
        description == other.description &&
        resource_level_executions == other.resource_level_executions
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, status, time_started, time_ended, runbook_id, runbook_version_name, runbook_name, description, resource_level_executions].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
