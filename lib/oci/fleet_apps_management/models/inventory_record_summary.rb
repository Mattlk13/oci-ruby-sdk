# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary information about an inventory target.
  class FleetAppsManagement::Models::InventoryRecordSummary
    # **[Required]** The OCID of the Inventory target.
    # @return [String]
    attr_accessor :target_id

    # **[Required]** Name of the target
    # @return [String]
    attr_accessor :target_name

    # **[Required]** Version of the product on the target
    # @return [String]
    attr_accessor :version

    # **[Required]** OCID of the resource associated with the target
    # @return [String]
    attr_accessor :target_resource_id

    # Name of the resource associated with the target
    # @return [String]
    attr_accessor :target_resource_name

    # **[Required]** OCID of the compartment to which the resource belongs to.
    # @return [String]
    attr_accessor :compartment_id

    # OCID of the product installed at the target path
    # @return [String]
    attr_accessor :target_product_id

    # **[Required]** Name of the product installed at the target path
    # @return [String]
    attr_accessor :target_product_name

    # **[Required]** OS installed on the resource associated with the target
    # @return [String]
    attr_accessor :os_type

    # **[Required]** Architecture of the resource associated with the target
    # @return [String]
    attr_accessor :architecture

    # **[Required]** List of target properties
    # @return [Array<OCI::FleetAppsManagement::Models::InventoryRecordProperty>]
    attr_accessor :properties

    # **[Required]** List of target components
    # @return [Array<OCI::FleetAppsManagement::Models::InventoryRecordComponent>]
    attr_accessor :components

    # **[Required]** List of details on the patches currently installed on the target
    # @return [Array<OCI::FleetAppsManagement::Models::InventoryRecordPatchDetails>]
    attr_accessor :installed_patches

    # The time this resource was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # The time this resource was last updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # The current state of the Inventory target.
    # @return [String]
    attr_accessor :lifecycle_state

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'target_id': :'targetId',
        'target_name': :'targetName',
        'version': :'version',
        'target_resource_id': :'targetResourceId',
        'target_resource_name': :'targetResourceName',
        'compartment_id': :'compartmentId',
        'target_product_id': :'targetProductId',
        'target_product_name': :'targetProductName',
        'os_type': :'osType',
        'architecture': :'architecture',
        'properties': :'properties',
        'components': :'components',
        'installed_patches': :'installedPatches',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'target_id': :'String',
        'target_name': :'String',
        'version': :'String',
        'target_resource_id': :'String',
        'target_resource_name': :'String',
        'compartment_id': :'String',
        'target_product_id': :'String',
        'target_product_name': :'String',
        'os_type': :'String',
        'architecture': :'String',
        'properties': :'Array<OCI::FleetAppsManagement::Models::InventoryRecordProperty>',
        'components': :'Array<OCI::FleetAppsManagement::Models::InventoryRecordComponent>',
        'installed_patches': :'Array<OCI::FleetAppsManagement::Models::InventoryRecordPatchDetails>',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :target_id The value to assign to the {#target_id} property
    # @option attributes [String] :target_name The value to assign to the {#target_name} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [String] :target_resource_id The value to assign to the {#target_resource_id} property
    # @option attributes [String] :target_resource_name The value to assign to the {#target_resource_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :target_product_id The value to assign to the {#target_product_id} property
    # @option attributes [String] :target_product_name The value to assign to the {#target_product_name} property
    # @option attributes [String] :os_type The value to assign to the {#os_type} property
    # @option attributes [String] :architecture The value to assign to the {#architecture} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::InventoryRecordProperty>] :properties The value to assign to the {#properties} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::InventoryRecordComponent>] :components The value to assign to the {#components} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::InventoryRecordPatchDetails>] :installed_patches The value to assign to the {#installed_patches} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.target_id = attributes[:'targetId'] if attributes[:'targetId']

      raise 'You cannot provide both :targetId and :target_id' if attributes.key?(:'targetId') && attributes.key?(:'target_id')

      self.target_id = attributes[:'target_id'] if attributes[:'target_id']

      self.target_name = attributes[:'targetName'] if attributes[:'targetName']

      raise 'You cannot provide both :targetName and :target_name' if attributes.key?(:'targetName') && attributes.key?(:'target_name')

      self.target_name = attributes[:'target_name'] if attributes[:'target_name']

      self.version = attributes[:'version'] if attributes[:'version']

      self.target_resource_id = attributes[:'targetResourceId'] if attributes[:'targetResourceId']

      raise 'You cannot provide both :targetResourceId and :target_resource_id' if attributes.key?(:'targetResourceId') && attributes.key?(:'target_resource_id')

      self.target_resource_id = attributes[:'target_resource_id'] if attributes[:'target_resource_id']

      self.target_resource_name = attributes[:'targetResourceName'] if attributes[:'targetResourceName']

      raise 'You cannot provide both :targetResourceName and :target_resource_name' if attributes.key?(:'targetResourceName') && attributes.key?(:'target_resource_name')

      self.target_resource_name = attributes[:'target_resource_name'] if attributes[:'target_resource_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.target_product_id = attributes[:'targetProductId'] if attributes[:'targetProductId']

      raise 'You cannot provide both :targetProductId and :target_product_id' if attributes.key?(:'targetProductId') && attributes.key?(:'target_product_id')

      self.target_product_id = attributes[:'target_product_id'] if attributes[:'target_product_id']

      self.target_product_name = attributes[:'targetProductName'] if attributes[:'targetProductName']

      raise 'You cannot provide both :targetProductName and :target_product_name' if attributes.key?(:'targetProductName') && attributes.key?(:'target_product_name')

      self.target_product_name = attributes[:'target_product_name'] if attributes[:'target_product_name']

      self.os_type = attributes[:'osType'] if attributes[:'osType']

      raise 'You cannot provide both :osType and :os_type' if attributes.key?(:'osType') && attributes.key?(:'os_type')

      self.os_type = attributes[:'os_type'] if attributes[:'os_type']

      self.architecture = attributes[:'architecture'] if attributes[:'architecture']

      self.properties = attributes[:'properties'] if attributes[:'properties']

      self.components = attributes[:'components'] if attributes[:'components']

      self.installed_patches = attributes[:'installedPatches'] if attributes[:'installedPatches']

      raise 'You cannot provide both :installedPatches and :installed_patches' if attributes.key?(:'installedPatches') && attributes.key?(:'installed_patches')

      self.installed_patches = attributes[:'installed_patches'] if attributes[:'installed_patches']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        target_id == other.target_id &&
        target_name == other.target_name &&
        version == other.version &&
        target_resource_id == other.target_resource_id &&
        target_resource_name == other.target_resource_name &&
        compartment_id == other.compartment_id &&
        target_product_id == other.target_product_id &&
        target_product_name == other.target_product_name &&
        os_type == other.os_type &&
        architecture == other.architecture &&
        properties == other.properties &&
        components == other.components &&
        installed_patches == other.installed_patches &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [target_id, target_name, version, target_resource_id, target_resource_name, compartment_id, target_product_id, target_product_name, os_type, architecture, properties, components, installed_patches, time_created, time_updated, lifecycle_state].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
