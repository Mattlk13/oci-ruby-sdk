# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A confirmed target within a fleet.
  class FleetAppsManagement::Models::FleetTarget
    COMPLIANCE_STATE_ENUM = [
      COMPLIANCE_STATE_UNKNOWN = 'UNKNOWN'.freeze,
      COMPLIANCE_STATE_COMPLIANT = 'COMPLIANT'.freeze,
      COMPLIANCE_STATE_NON_COMPLIANT = 'NON_COMPLIANT'.freeze,
      COMPLIANCE_STATE_WARNING = 'WARNING'.freeze,
      COMPLIANCE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the resource.
    # @return [String]
    attr_accessor :id

    # compartment OCID
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # Example: `My new resource`
    #
    # @return [String]
    attr_accessor :display_name

    # The time this resource was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # Current version of target.
    # @return [String]
    attr_accessor :version

    # Product to which the target belongs to.
    # @return [String]
    attr_accessor :product

    # @return [OCI::FleetAppsManagement::Models::TargetResource]
    attr_accessor :resource

    # The last known compliance state of the target.
    # @return [String]
    attr_reader :compliance_state

    # The time when the last successful discovery was made.
    # @return [DateTime]
    attr_accessor :time_of_last_successful_discovery

    # The time when last discovery was attempted.
    # @return [DateTime]
    attr_accessor :time_of_last_discovery_attempt

    # A boolean flag that represents whether the last discovery attempt was successful.
    # @return [BOOLEAN]
    attr_accessor :is_last_discovery_attempt_successful

    # The current state of the FleetTarget.
    # @return [String]
    attr_reader :lifecycle_state

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'time_created': :'timeCreated',
        'version': :'version',
        'product': :'product',
        'resource': :'resource',
        'compliance_state': :'complianceState',
        'time_of_last_successful_discovery': :'timeOfLastSuccessfulDiscovery',
        'time_of_last_discovery_attempt': :'timeOfLastDiscoveryAttempt',
        'is_last_discovery_attempt_successful': :'isLastDiscoveryAttemptSuccessful',
        'lifecycle_state': :'lifecycleState',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'time_created': :'DateTime',
        'version': :'String',
        'product': :'String',
        'resource': :'OCI::FleetAppsManagement::Models::TargetResource',
        'compliance_state': :'String',
        'time_of_last_successful_discovery': :'DateTime',
        'time_of_last_discovery_attempt': :'DateTime',
        'is_last_discovery_attempt_successful': :'BOOLEAN',
        'lifecycle_state': :'String',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [String] :product The value to assign to the {#product} property
    # @option attributes [OCI::FleetAppsManagement::Models::TargetResource] :resource The value to assign to the {#resource} property
    # @option attributes [String] :compliance_state The value to assign to the {#compliance_state} property
    # @option attributes [DateTime] :time_of_last_successful_discovery The value to assign to the {#time_of_last_successful_discovery} property
    # @option attributes [DateTime] :time_of_last_discovery_attempt The value to assign to the {#time_of_last_discovery_attempt} property
    # @option attributes [BOOLEAN] :is_last_discovery_attempt_successful The value to assign to the {#is_last_discovery_attempt_successful} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.version = attributes[:'version'] if attributes[:'version']

      self.product = attributes[:'product'] if attributes[:'product']

      self.resource = attributes[:'resource'] if attributes[:'resource']

      self.compliance_state = attributes[:'complianceState'] if attributes[:'complianceState']

      raise 'You cannot provide both :complianceState and :compliance_state' if attributes.key?(:'complianceState') && attributes.key?(:'compliance_state')

      self.compliance_state = attributes[:'compliance_state'] if attributes[:'compliance_state']

      self.time_of_last_successful_discovery = attributes[:'timeOfLastSuccessfulDiscovery'] if attributes[:'timeOfLastSuccessfulDiscovery']

      raise 'You cannot provide both :timeOfLastSuccessfulDiscovery and :time_of_last_successful_discovery' if attributes.key?(:'timeOfLastSuccessfulDiscovery') && attributes.key?(:'time_of_last_successful_discovery')

      self.time_of_last_successful_discovery = attributes[:'time_of_last_successful_discovery'] if attributes[:'time_of_last_successful_discovery']

      self.time_of_last_discovery_attempt = attributes[:'timeOfLastDiscoveryAttempt'] if attributes[:'timeOfLastDiscoveryAttempt']

      raise 'You cannot provide both :timeOfLastDiscoveryAttempt and :time_of_last_discovery_attempt' if attributes.key?(:'timeOfLastDiscoveryAttempt') && attributes.key?(:'time_of_last_discovery_attempt')

      self.time_of_last_discovery_attempt = attributes[:'time_of_last_discovery_attempt'] if attributes[:'time_of_last_discovery_attempt']

      self.is_last_discovery_attempt_successful = attributes[:'isLastDiscoveryAttemptSuccessful'] unless attributes[:'isLastDiscoveryAttemptSuccessful'].nil?

      raise 'You cannot provide both :isLastDiscoveryAttemptSuccessful and :is_last_discovery_attempt_successful' if attributes.key?(:'isLastDiscoveryAttemptSuccessful') && attributes.key?(:'is_last_discovery_attempt_successful')

      self.is_last_discovery_attempt_successful = attributes[:'is_last_discovery_attempt_successful'] unless attributes[:'is_last_discovery_attempt_successful'].nil?

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compliance_state Object to be assigned
    def compliance_state=(compliance_state)
      # rubocop:disable Style/ConditionalAssignment
      if compliance_state && !COMPLIANCE_STATE_ENUM.include?(compliance_state)
        OCI.logger.debug("Unknown value for 'compliance_state' [" + compliance_state + "]. Mapping to 'COMPLIANCE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @compliance_state = COMPLIANCE_STATE_UNKNOWN_ENUM_VALUE
      else
        @compliance_state = compliance_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        time_created == other.time_created &&
        version == other.version &&
        product == other.product &&
        resource == other.resource &&
        compliance_state == other.compliance_state &&
        time_of_last_successful_discovery == other.time_of_last_successful_discovery &&
        time_of_last_discovery_attempt == other.time_of_last_discovery_attempt &&
        is_last_discovery_attempt_successful == other.is_last_discovery_attempt_successful &&
        lifecycle_state == other.lifecycle_state &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, time_created, version, product, resource, compliance_state, time_of_last_successful_discovery, time_of_last_discovery_attempt, is_last_discovery_attempt_successful, lifecycle_state, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
