# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require_relative 'config_category_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Product Config Category Details.
  # Defines individual products which contribute to the applications hosting on the resources that are to be managed.
  #
  class FleetAppsManagement::Models::ProductConfigCategoryDetails < FleetAppsManagement::Models::ConfigCategoryDetails
    # **[Required]** Versions associated with the PRODUCT .
    #
    # @return [Array<String>]
    attr_accessor :versions

    # OCID for the Credential name to be associated with the Product.
    # These are useful for target discovery or lifecycle management activities, for example, Oracle WebLogic admin credentials for Oracle WebLogic Application server.
    #
    # @return [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>]
    attr_accessor :credentials

    # Various components of the Product.
    # For example:The administration server or node manager can be the components of the Oracle WebLogic Application server.
    # Forms server or concurrent manager can be the components of the Oracle E-Business Suite.
    #
    # @return [Array<String>]
    attr_accessor :components

    # Products compatible with this Product.
    # Provide products from the list of other products you have created that are compatible with the present one
    #
    # @return [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>]
    attr_accessor :compatible_products

    # Patch Types associated with this Product.
    #
    # @return [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>]
    attr_accessor :patch_types

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'config_category': :'configCategory',
        'versions': :'versions',
        'credentials': :'credentials',
        'components': :'components',
        'compatible_products': :'compatibleProducts',
        'patch_types': :'patchTypes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'config_category': :'String',
        'versions': :'Array<String>',
        'credentials': :'Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>',
        'components': :'Array<String>',
        'compatible_products': :'Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>',
        'patch_types': :'Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :versions The value to assign to the {#versions} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>] :credentials The value to assign to the {#credentials} property
    # @option attributes [Array<String>] :components The value to assign to the {#components} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>] :compatible_products The value to assign to the {#compatible_products} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>] :patch_types The value to assign to the {#patch_types} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['configCategory'] = 'PRODUCT'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.versions = attributes[:'versions'] if attributes[:'versions']

      self.credentials = attributes[:'credentials'] if attributes[:'credentials']

      self.components = attributes[:'components'] if attributes[:'components']

      self.compatible_products = attributes[:'compatibleProducts'] if attributes[:'compatibleProducts']

      raise 'You cannot provide both :compatibleProducts and :compatible_products' if attributes.key?(:'compatibleProducts') && attributes.key?(:'compatible_products')

      self.compatible_products = attributes[:'compatible_products'] if attributes[:'compatible_products']

      self.patch_types = attributes[:'patchTypes'] if attributes[:'patchTypes']

      raise 'You cannot provide both :patchTypes and :patch_types' if attributes.key?(:'patchTypes') && attributes.key?(:'patch_types')

      self.patch_types = attributes[:'patch_types'] if attributes[:'patch_types']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        config_category == other.config_category &&
        versions == other.versions &&
        credentials == other.credentials &&
        components == other.components &&
        compatible_products == other.compatible_products &&
        patch_types == other.patch_types
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [config_category, versions, credentials, components, compatible_products, patch_types].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
