# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Action Group details.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class FleetAppsManagement::Models::ActionGroupDetails
    KIND_ENUM = [
      KIND_FLEET_USING_RUNBOOK = 'FLEET_USING_RUNBOOK'.freeze,
      KIND_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_ACCEPTED = 'ACCEPTED'.freeze,
      STATUS_WAITING = 'WAITING'.freeze,
      STATUS_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      STATUS_FAILED = 'FAILED'.freeze,
      STATUS_SUCCEEDED = 'SUCCEEDED'.freeze,
      STATUS_CANCELED = 'CANCELED'.freeze,
      STATUS_SKIPPED = 'SKIPPED'.freeze,
      STATUS_IGNORED = 'IGNORED'.freeze,
      STATUS_NOT_APPLICABLE = 'NOT_APPLICABLE'.freeze,
      STATUS_ABORTED = 'ABORTED'.freeze,
      STATUS_TIMED_OUT = 'TIMED_OUT'.freeze,
      STATUS_PAUSED = 'PAUSED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Name of the ActionGroup.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Action Group kind
    # @return [String]
    attr_reader :kind

    # Product associated.
    # Only applicable if actionGroup type is PRODUCT.
    #
    # @return [String]
    attr_accessor :product

    # LifeCycle Operation.
    # @return [String]
    attr_accessor :lifecycle_operation

    # Unique producer Id at Action Group Level
    # @return [String]
    attr_accessor :activity_id

    # Status of the Job at Action Group Level.
    # @return [String]
    attr_reader :status

    # The time the Scheduler Job started. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_started

    # The time the Scheduler Job ended. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_ended

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'kind': :'kind',
        'product': :'product',
        'lifecycle_operation': :'lifecycleOperation',
        'activity_id': :'activityId',
        'status': :'status',
        'time_started': :'timeStarted',
        'time_ended': :'timeEnded'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'kind': :'String',
        'product': :'String',
        'lifecycle_operation': :'String',
        'activity_id': :'String',
        'status': :'String',
        'time_started': :'DateTime',
        'time_ended': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'kind'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::FleetAppsManagement::Models::FleetBasedActionGroupDetails' if type == 'FLEET_USING_RUNBOOK'

      # TODO: Log a warning when the subtype is not found.
      'OCI::FleetAppsManagement::Models::ActionGroupDetails'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :kind The value to assign to the {#kind} property
    # @option attributes [String] :product The value to assign to the {#product} property
    # @option attributes [String] :lifecycle_operation The value to assign to the {#lifecycle_operation} property
    # @option attributes [String] :activity_id The value to assign to the {#activity_id} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_ended The value to assign to the {#time_ended} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.kind = attributes[:'kind'] if attributes[:'kind']

      self.product = attributes[:'product'] if attributes[:'product']

      self.lifecycle_operation = attributes[:'lifecycleOperation'] if attributes[:'lifecycleOperation']

      raise 'You cannot provide both :lifecycleOperation and :lifecycle_operation' if attributes.key?(:'lifecycleOperation') && attributes.key?(:'lifecycle_operation')

      self.lifecycle_operation = attributes[:'lifecycle_operation'] if attributes[:'lifecycle_operation']

      self.activity_id = attributes[:'activityId'] if attributes[:'activityId']

      raise 'You cannot provide both :activityId and :activity_id' if attributes.key?(:'activityId') && attributes.key?(:'activity_id')

      self.activity_id = attributes[:'activity_id'] if attributes[:'activity_id']

      self.status = attributes[:'status'] if attributes[:'status']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_ended = attributes[:'timeEnded'] if attributes[:'timeEnded']

      raise 'You cannot provide both :timeEnded and :time_ended' if attributes.key?(:'timeEnded') && attributes.key?(:'time_ended')

      self.time_ended = attributes[:'time_ended'] if attributes[:'time_ended']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(kind)
      # rubocop:disable Style/ConditionalAssignment
      if kind && !KIND_ENUM.include?(kind)
        OCI.logger.debug("Unknown value for 'kind' [" + kind + "]. Mapping to 'KIND_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @kind = KIND_UNKNOWN_ENUM_VALUE
      else
        @kind = kind
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        kind == other.kind &&
        product == other.product &&
        lifecycle_operation == other.lifecycle_operation &&
        activity_id == other.activity_id &&
        status == other.status &&
        time_started == other.time_started &&
        time_ended == other.time_ended
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, kind, product, lifecycle_operation, activity_id, status, time_started, time_ended].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
