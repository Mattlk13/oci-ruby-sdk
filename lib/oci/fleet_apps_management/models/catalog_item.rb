# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A description of a CatalogItem resource.
  #
  # To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized, talk to
  # an administrator. If you're an administrator who needs to write policies to give users access, see
  # [Getting Started with Policies](https://docs.cloud.oracle.com/iaas/Content/Identity/policiesgs/get-started-with-policies.htm).
  #
  class FleetAppsManagement::Models::CatalogItem
    CONFIG_SOURCE_TYPE_ENUM = [
      CONFIG_SOURCE_TYPE_PAR_CATALOG_SOURCE = 'PAR_CATALOG_SOURCE'.freeze,
      CONFIG_SOURCE_TYPE_GIT_CATALOG_SOURCE = 'GIT_CATALOG_SOURCE'.freeze,
      CONFIG_SOURCE_TYPE_MARKETPLACE_CATALOG_SOURCE = 'MARKETPLACE_CATALOG_SOURCE'.freeze,
      CONFIG_SOURCE_TYPE_STACK_TEMPLATE_CATALOG_SOURCE = 'STACK_TEMPLATE_CATALOG_SOURCE'.freeze,
      CONFIG_SOURCE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PACKAGE_TYPE_ENUM = [
      PACKAGE_TYPE_TF_PACKAGE = 'TF_PACKAGE'.freeze,
      PACKAGE_TYPE_NON_TF_PACKAGE = 'NON_TF_PACKAGE'.freeze,
      PACKAGE_TYPE_CONFIG_FILE = 'CONFIG_FILE'.freeze,
      PACKAGE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the catalog.
    # @return [String]
    attr_accessor :id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** Config source type Eg: STACK_TEMPLATE_CATALOG_SOURCE, PAR_CATALOG_SOURCE, GIT_CATALOG_SOURCE, MARKETPLACE_CATALOG_SOURCE.
    #
    # @return [String]
    attr_reader :config_source_type

    # The indicator to append Public Items from the root compartment to any query, when set to TRUE.
    # @return [BOOLEAN]
    attr_accessor :should_list_public_items

    # **[Required]** Description about the catalog item.
    # @return [String]
    attr_accessor :description

    # @return [OCI::FleetAppsManagement::Models::CatalogSourcePayload]
    attr_accessor :catalog_source_payload

    # @return [OCI::FleetAppsManagement::Models::CatalogResultPayload]
    attr_accessor :catalog_result_payload

    # **[Required]** The catalog listing Id.
    #
    # @return [String]
    attr_accessor :listing_id

    # **[Required]** The catalog package version.
    #
    # @return [String]
    attr_accessor :listing_version

    # **[Required]** A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # Version description about the catalog item.
    # @return [String]
    attr_accessor :version_description

    # Short description about the catalog item.
    # @return [String]
    attr_accessor :short_description

    # **[Required]** Config package type Eg: TF_PACKAGE, NON_TF_PACKAGE, CONFIG_FILE.
    #
    # @return [String]
    attr_reader :package_type

    # **[Required]** The current state of the CatalogItem.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The details of lifecycle state CatalogItem.
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** The date and time the CatalogItem was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time the CatalogItem was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # The date and time the CatalogItem was released, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_released

    # The date and time the CatalogItem was last checked by backfill job, in the format defined by
    # [RFC 3339](https://tools.ietf.org/html/rfc3339).
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_backfill_last_checked

    # The date and time the CatalogItem was last checked, in the format defined by
    # [RFC 3339](https://tools.ietf.org/html/rfc3339).
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_last_checked

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'config_source_type': :'configSourceType',
        'should_list_public_items': :'shouldListPublicItems',
        'description': :'description',
        'catalog_source_payload': :'catalogSourcePayload',
        'catalog_result_payload': :'catalogResultPayload',
        'listing_id': :'listingId',
        'listing_version': :'listingVersion',
        'display_name': :'displayName',
        'version_description': :'versionDescription',
        'short_description': :'shortDescription',
        'package_type': :'packageType',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'time_released': :'timeReleased',
        'time_backfill_last_checked': :'timeBackfillLastChecked',
        'time_last_checked': :'timeLastChecked',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'config_source_type': :'String',
        'should_list_public_items': :'BOOLEAN',
        'description': :'String',
        'catalog_source_payload': :'OCI::FleetAppsManagement::Models::CatalogSourcePayload',
        'catalog_result_payload': :'OCI::FleetAppsManagement::Models::CatalogResultPayload',
        'listing_id': :'String',
        'listing_version': :'String',
        'display_name': :'String',
        'version_description': :'String',
        'short_description': :'String',
        'package_type': :'String',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'time_released': :'DateTime',
        'time_backfill_last_checked': :'DateTime',
        'time_last_checked': :'DateTime',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :config_source_type The value to assign to the {#config_source_type} property
    # @option attributes [BOOLEAN] :should_list_public_items The value to assign to the {#should_list_public_items} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [OCI::FleetAppsManagement::Models::CatalogSourcePayload] :catalog_source_payload The value to assign to the {#catalog_source_payload} property
    # @option attributes [OCI::FleetAppsManagement::Models::CatalogResultPayload] :catalog_result_payload The value to assign to the {#catalog_result_payload} property
    # @option attributes [String] :listing_id The value to assign to the {#listing_id} property
    # @option attributes [String] :listing_version The value to assign to the {#listing_version} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :version_description The value to assign to the {#version_description} property
    # @option attributes [String] :short_description The value to assign to the {#short_description} property
    # @option attributes [String] :package_type The value to assign to the {#package_type} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [DateTime] :time_released The value to assign to the {#time_released} property
    # @option attributes [DateTime] :time_backfill_last_checked The value to assign to the {#time_backfill_last_checked} property
    # @option attributes [DateTime] :time_last_checked The value to assign to the {#time_last_checked} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.config_source_type = attributes[:'configSourceType'] if attributes[:'configSourceType']

      raise 'You cannot provide both :configSourceType and :config_source_type' if attributes.key?(:'configSourceType') && attributes.key?(:'config_source_type')

      self.config_source_type = attributes[:'config_source_type'] if attributes[:'config_source_type']

      self.should_list_public_items = attributes[:'shouldListPublicItems'] unless attributes[:'shouldListPublicItems'].nil?
      self.should_list_public_items = false if should_list_public_items.nil? && !attributes.key?(:'shouldListPublicItems') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldListPublicItems and :should_list_public_items' if attributes.key?(:'shouldListPublicItems') && attributes.key?(:'should_list_public_items')

      self.should_list_public_items = attributes[:'should_list_public_items'] unless attributes[:'should_list_public_items'].nil?
      self.should_list_public_items = false if should_list_public_items.nil? && !attributes.key?(:'shouldListPublicItems') && !attributes.key?(:'should_list_public_items') # rubocop:disable Style/StringLiterals

      self.description = attributes[:'description'] if attributes[:'description']

      self.catalog_source_payload = attributes[:'catalogSourcePayload'] if attributes[:'catalogSourcePayload']

      raise 'You cannot provide both :catalogSourcePayload and :catalog_source_payload' if attributes.key?(:'catalogSourcePayload') && attributes.key?(:'catalog_source_payload')

      self.catalog_source_payload = attributes[:'catalog_source_payload'] if attributes[:'catalog_source_payload']

      self.catalog_result_payload = attributes[:'catalogResultPayload'] if attributes[:'catalogResultPayload']

      raise 'You cannot provide both :catalogResultPayload and :catalog_result_payload' if attributes.key?(:'catalogResultPayload') && attributes.key?(:'catalog_result_payload')

      self.catalog_result_payload = attributes[:'catalog_result_payload'] if attributes[:'catalog_result_payload']

      self.listing_id = attributes[:'listingId'] if attributes[:'listingId']

      raise 'You cannot provide both :listingId and :listing_id' if attributes.key?(:'listingId') && attributes.key?(:'listing_id')

      self.listing_id = attributes[:'listing_id'] if attributes[:'listing_id']

      self.listing_version = attributes[:'listingVersion'] if attributes[:'listingVersion']

      raise 'You cannot provide both :listingVersion and :listing_version' if attributes.key?(:'listingVersion') && attributes.key?(:'listing_version')

      self.listing_version = attributes[:'listing_version'] if attributes[:'listing_version']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.version_description = attributes[:'versionDescription'] if attributes[:'versionDescription']

      raise 'You cannot provide both :versionDescription and :version_description' if attributes.key?(:'versionDescription') && attributes.key?(:'version_description')

      self.version_description = attributes[:'version_description'] if attributes[:'version_description']

      self.short_description = attributes[:'shortDescription'] if attributes[:'shortDescription']

      raise 'You cannot provide both :shortDescription and :short_description' if attributes.key?(:'shortDescription') && attributes.key?(:'short_description')

      self.short_description = attributes[:'short_description'] if attributes[:'short_description']

      self.package_type = attributes[:'packageType'] if attributes[:'packageType']

      raise 'You cannot provide both :packageType and :package_type' if attributes.key?(:'packageType') && attributes.key?(:'package_type')

      self.package_type = attributes[:'package_type'] if attributes[:'package_type']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.time_released = attributes[:'timeReleased'] if attributes[:'timeReleased']

      raise 'You cannot provide both :timeReleased and :time_released' if attributes.key?(:'timeReleased') && attributes.key?(:'time_released')

      self.time_released = attributes[:'time_released'] if attributes[:'time_released']

      self.time_backfill_last_checked = attributes[:'timeBackfillLastChecked'] if attributes[:'timeBackfillLastChecked']

      raise 'You cannot provide both :timeBackfillLastChecked and :time_backfill_last_checked' if attributes.key?(:'timeBackfillLastChecked') && attributes.key?(:'time_backfill_last_checked')

      self.time_backfill_last_checked = attributes[:'time_backfill_last_checked'] if attributes[:'time_backfill_last_checked']

      self.time_last_checked = attributes[:'timeLastChecked'] if attributes[:'timeLastChecked']

      raise 'You cannot provide both :timeLastChecked and :time_last_checked' if attributes.key?(:'timeLastChecked') && attributes.key?(:'time_last_checked')

      self.time_last_checked = attributes[:'time_last_checked'] if attributes[:'time_last_checked']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] config_source_type Object to be assigned
    def config_source_type=(config_source_type)
      # rubocop:disable Style/ConditionalAssignment
      if config_source_type && !CONFIG_SOURCE_TYPE_ENUM.include?(config_source_type)
        OCI.logger.debug("Unknown value for 'config_source_type' [" + config_source_type + "]. Mapping to 'CONFIG_SOURCE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @config_source_type = CONFIG_SOURCE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @config_source_type = config_source_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] package_type Object to be assigned
    def package_type=(package_type)
      # rubocop:disable Style/ConditionalAssignment
      if package_type && !PACKAGE_TYPE_ENUM.include?(package_type)
        OCI.logger.debug("Unknown value for 'package_type' [" + package_type + "]. Mapping to 'PACKAGE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @package_type = PACKAGE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @package_type = package_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        config_source_type == other.config_source_type &&
        should_list_public_items == other.should_list_public_items &&
        description == other.description &&
        catalog_source_payload == other.catalog_source_payload &&
        catalog_result_payload == other.catalog_result_payload &&
        listing_id == other.listing_id &&
        listing_version == other.listing_version &&
        display_name == other.display_name &&
        version_description == other.version_description &&
        short_description == other.short_description &&
        package_type == other.package_type &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        time_released == other.time_released &&
        time_backfill_last_checked == other.time_backfill_last_checked &&
        time_last_checked == other.time_last_checked &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, config_source_type, should_list_public_items, description, catalog_source_payload, catalog_result_payload, listing_id, listing_version, display_name, version_description, short_description, package_type, lifecycle_state, lifecycle_details, time_created, time_updated, time_released, time_backfill_last_checked, time_last_checked, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
