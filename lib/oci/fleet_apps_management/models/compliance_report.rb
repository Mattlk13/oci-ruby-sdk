# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Compliance details for a fleet in Fleet Application Management.
  class FleetAppsManagement::Models::ComplianceReport
    COMPLIANCE_STATE_ENUM = [
      COMPLIANCE_STATE_UNKNOWN = 'UNKNOWN'.freeze,
      COMPLIANCE_STATE_COMPLIANT = 'COMPLIANT'.freeze,
      COMPLIANCE_STATE_NON_COMPLIANT = 'NON_COMPLIANT'.freeze,
      COMPLIANCE_STATE_WARNING = 'WARNING'.freeze,
      COMPLIANCE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Compliance Report Identifier
    # @return [String]
    attr_accessor :id

    # **[Required]** The fleet OCID.
    # @return [String]
    attr_accessor :fleet_id

    # **[Required]** The last known compliance state of the fleet.
    # @return [String]
    attr_reader :compliance_state

    # The compliance percentage.
    # @return [Float]
    attr_accessor :percent_compliant

    # Resources associated with the Fleet.
    # @return [Array<OCI::FleetAppsManagement::Models::ComplianceReportResource>]
    attr_accessor :resources

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'fleet_id': :'fleetId',
        'compliance_state': :'complianceState',
        'percent_compliant': :'percentCompliant',
        'resources': :'resources'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'fleet_id': :'String',
        'compliance_state': :'String',
        'percent_compliant': :'Float',
        'resources': :'Array<OCI::FleetAppsManagement::Models::ComplianceReportResource>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :fleet_id The value to assign to the {#fleet_id} property
    # @option attributes [String] :compliance_state The value to assign to the {#compliance_state} property
    # @option attributes [Float] :percent_compliant The value to assign to the {#percent_compliant} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::ComplianceReportResource>] :resources The value to assign to the {#resources} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.fleet_id = attributes[:'fleetId'] if attributes[:'fleetId']

      raise 'You cannot provide both :fleetId and :fleet_id' if attributes.key?(:'fleetId') && attributes.key?(:'fleet_id')

      self.fleet_id = attributes[:'fleet_id'] if attributes[:'fleet_id']

      self.compliance_state = attributes[:'complianceState'] if attributes[:'complianceState']

      raise 'You cannot provide both :complianceState and :compliance_state' if attributes.key?(:'complianceState') && attributes.key?(:'compliance_state')

      self.compliance_state = attributes[:'compliance_state'] if attributes[:'compliance_state']

      self.percent_compliant = attributes[:'percentCompliant'] if attributes[:'percentCompliant']

      raise 'You cannot provide both :percentCompliant and :percent_compliant' if attributes.key?(:'percentCompliant') && attributes.key?(:'percent_compliant')

      self.percent_compliant = attributes[:'percent_compliant'] if attributes[:'percent_compliant']

      self.resources = attributes[:'resources'] if attributes[:'resources']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compliance_state Object to be assigned
    def compliance_state=(compliance_state)
      # rubocop:disable Style/ConditionalAssignment
      if compliance_state && !COMPLIANCE_STATE_ENUM.include?(compliance_state)
        OCI.logger.debug("Unknown value for 'compliance_state' [" + compliance_state + "]. Mapping to 'COMPLIANCE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @compliance_state = COMPLIANCE_STATE_UNKNOWN_ENUM_VALUE
      else
        @compliance_state = compliance_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        fleet_id == other.fleet_id &&
        compliance_state == other.compliance_state &&
        percent_compliant == other.percent_compliant &&
        resources == other.resources
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, fleet_id, compliance_state, percent_compliant, resources].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
