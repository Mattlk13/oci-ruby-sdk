# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Runbook definition.
  # Runbooks allow you to capture procedural tasks for handling a workflow.
  # Only active versions of runbook will be available for executions.
  #
  class FleetAppsManagement::Models::Runbook
    TYPE_ENUM = [
      TYPE_USER_DEFINED = 'USER_DEFINED'.freeze,
      TYPE_ORACLE_DEFINED = 'ORACLE_DEFINED'.freeze,
      TYPE_SYSTEM_DEFINED = 'SYSTEM_DEFINED'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    OS_TYPE_ENUM = [
      OS_TYPE_WINDOWS = 'WINDOWS'.freeze,
      OS_TYPE_LINUX = 'LINUX'.freeze,
      OS_TYPE_GENERIC = 'GENERIC'.freeze,
      OS_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the resource.
    # @return [String]
    attr_accessor :id

    # **[Required]** A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # Example: `My new resource`
    #
    # @return [String]
    attr_accessor :display_name

    # A user-friendly description. To provide some insight about the resource.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :description

    # **[Required]** The type of the runbook.
    # @return [String]
    attr_reader :type

    # **[Required]** The lifecycle operation performed by the runbook.
    # @return [String]
    attr_accessor :operation

    # The OS type for the runbook.
    # @return [String]
    attr_reader :os_type

    # The platform of the runbook.
    # @return [String]
    attr_accessor :platform

    # **[Required]** Is the runbook default?
    # Sets this runbook as the default for the chosen product/product stack for the specified lifecycle operation.
    #
    # @return [BOOLEAN]
    attr_accessor :is_default

    # Does this runbook need SUDO access to execute?
    # @return [BOOLEAN]
    attr_accessor :is_sudo_access_needed

    # Estimated time to successfully complete the runbook execution.
    # @return [String]
    attr_accessor :estimated_time

    # Latest runbook version
    # @return [String]
    attr_accessor :latest_version

    # Does this runbook has draft versions?
    # @return [BOOLEAN]
    attr_accessor :has_draft_version

    # **[Required]** The current state of the runbook.
    # @return [String]
    attr_reader :lifecycle_state

    # A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** The time this resource was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The time this resource was last updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # @return [OCI::FleetAppsManagement::Models::Version]
    attr_accessor :runbook_version

    # **[Required]** OCID of the compartment to which the resource belongs to.
    # @return [String]
    attr_accessor :compartment_id

    # Associated region
    # @return [String]
    attr_accessor :resource_region

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'description': :'description',
        'type': :'type',
        'operation': :'operation',
        'os_type': :'osType',
        'platform': :'platform',
        'is_default': :'isDefault',
        'is_sudo_access_needed': :'isSudoAccessNeeded',
        'estimated_time': :'estimatedTime',
        'latest_version': :'latestVersion',
        'has_draft_version': :'hasDraftVersion',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'runbook_version': :'runbookVersion',
        'compartment_id': :'compartmentId',
        'resource_region': :'resourceRegion',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'description': :'String',
        'type': :'String',
        'operation': :'String',
        'os_type': :'String',
        'platform': :'String',
        'is_default': :'BOOLEAN',
        'is_sudo_access_needed': :'BOOLEAN',
        'estimated_time': :'String',
        'latest_version': :'String',
        'has_draft_version': :'BOOLEAN',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'runbook_version': :'OCI::FleetAppsManagement::Models::Version',
        'compartment_id': :'String',
        'resource_region': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :operation The value to assign to the {#operation} property
    # @option attributes [String] :os_type The value to assign to the {#os_type} property
    # @option attributes [String] :platform The value to assign to the {#platform} property
    # @option attributes [BOOLEAN] :is_default The value to assign to the {#is_default} property
    # @option attributes [BOOLEAN] :is_sudo_access_needed The value to assign to the {#is_sudo_access_needed} property
    # @option attributes [String] :estimated_time The value to assign to the {#estimated_time} property
    # @option attributes [String] :latest_version The value to assign to the {#latest_version} property
    # @option attributes [BOOLEAN] :has_draft_version The value to assign to the {#has_draft_version} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [OCI::FleetAppsManagement::Models::Version] :runbook_version The value to assign to the {#runbook_version} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :resource_region The value to assign to the {#resource_region} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.type = attributes[:'type'] if attributes[:'type']

      self.operation = attributes[:'operation'] if attributes[:'operation']

      self.os_type = attributes[:'osType'] if attributes[:'osType']

      raise 'You cannot provide both :osType and :os_type' if attributes.key?(:'osType') && attributes.key?(:'os_type')

      self.os_type = attributes[:'os_type'] if attributes[:'os_type']

      self.platform = attributes[:'platform'] if attributes[:'platform']

      self.is_default = attributes[:'isDefault'] unless attributes[:'isDefault'].nil?
      self.is_default = false if is_default.nil? && !attributes.key?(:'isDefault') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDefault and :is_default' if attributes.key?(:'isDefault') && attributes.key?(:'is_default')

      self.is_default = attributes[:'is_default'] unless attributes[:'is_default'].nil?
      self.is_default = false if is_default.nil? && !attributes.key?(:'isDefault') && !attributes.key?(:'is_default') # rubocop:disable Style/StringLiterals

      self.is_sudo_access_needed = attributes[:'isSudoAccessNeeded'] unless attributes[:'isSudoAccessNeeded'].nil?
      self.is_sudo_access_needed = false if is_sudo_access_needed.nil? && !attributes.key?(:'isSudoAccessNeeded') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSudoAccessNeeded and :is_sudo_access_needed' if attributes.key?(:'isSudoAccessNeeded') && attributes.key?(:'is_sudo_access_needed')

      self.is_sudo_access_needed = attributes[:'is_sudo_access_needed'] unless attributes[:'is_sudo_access_needed'].nil?
      self.is_sudo_access_needed = false if is_sudo_access_needed.nil? && !attributes.key?(:'isSudoAccessNeeded') && !attributes.key?(:'is_sudo_access_needed') # rubocop:disable Style/StringLiterals

      self.estimated_time = attributes[:'estimatedTime'] if attributes[:'estimatedTime']

      raise 'You cannot provide both :estimatedTime and :estimated_time' if attributes.key?(:'estimatedTime') && attributes.key?(:'estimated_time')

      self.estimated_time = attributes[:'estimated_time'] if attributes[:'estimated_time']

      self.latest_version = attributes[:'latestVersion'] if attributes[:'latestVersion']

      raise 'You cannot provide both :latestVersion and :latest_version' if attributes.key?(:'latestVersion') && attributes.key?(:'latest_version')

      self.latest_version = attributes[:'latest_version'] if attributes[:'latest_version']

      self.has_draft_version = attributes[:'hasDraftVersion'] unless attributes[:'hasDraftVersion'].nil?
      self.has_draft_version = false if has_draft_version.nil? && !attributes.key?(:'hasDraftVersion') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :hasDraftVersion and :has_draft_version' if attributes.key?(:'hasDraftVersion') && attributes.key?(:'has_draft_version')

      self.has_draft_version = attributes[:'has_draft_version'] unless attributes[:'has_draft_version'].nil?
      self.has_draft_version = false if has_draft_version.nil? && !attributes.key?(:'hasDraftVersion') && !attributes.key?(:'has_draft_version') # rubocop:disable Style/StringLiterals

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.runbook_version = attributes[:'runbookVersion'] if attributes[:'runbookVersion']

      raise 'You cannot provide both :runbookVersion and :runbook_version' if attributes.key?(:'runbookVersion') && attributes.key?(:'runbook_version')

      self.runbook_version = attributes[:'runbook_version'] if attributes[:'runbook_version']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.resource_region = attributes[:'resourceRegion'] if attributes[:'resourceRegion']

      raise 'You cannot provide both :resourceRegion and :resource_region' if attributes.key?(:'resourceRegion') && attributes.key?(:'resource_region')

      self.resource_region = attributes[:'resource_region'] if attributes[:'resource_region']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_type Object to be assigned
    def os_type=(os_type)
      # rubocop:disable Style/ConditionalAssignment
      if os_type && !OS_TYPE_ENUM.include?(os_type)
        OCI.logger.debug("Unknown value for 'os_type' [" + os_type + "]. Mapping to 'OS_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @os_type = OS_TYPE_UNKNOWN_ENUM_VALUE
      else
        @os_type = os_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        description == other.description &&
        type == other.type &&
        operation == other.operation &&
        os_type == other.os_type &&
        platform == other.platform &&
        is_default == other.is_default &&
        is_sudo_access_needed == other.is_sudo_access_needed &&
        estimated_time == other.estimated_time &&
        latest_version == other.latest_version &&
        has_draft_version == other.has_draft_version &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        runbook_version == other.runbook_version &&
        compartment_id == other.compartment_id &&
        resource_region == other.resource_region &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, description, type, operation, os_type, platform, is_default, is_sudo_access_needed, estimated_time, latest_version, has_draft_version, lifecycle_state, lifecycle_details, time_created, time_updated, runbook_version, compartment_id, resource_region, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
