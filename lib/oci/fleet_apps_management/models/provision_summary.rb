# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary information about a FamProvision.
  class FleetAppsManagement::Models::ProvisionSummary
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the FamProvision.
    # @return [String]
    attr_accessor :id

    # **[Required]** A user-friendly name. Does not have to be unique, and it's changeable.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** A description of the provision.
    # @return [String]
    attr_accessor :provision_description

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The date and time the FamProvision was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # The date and time the FamProvision was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** The current state of the FamProvision.
    # @return [String]
    attr_accessor :lifecycle_state

    # A message that describes the current state of the FamProvision in more detail. For example,
    # can be used to provide actionable information for a resource in the Failed state.
    #
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Catalog Item.
    # @return [String]
    attr_accessor :package_catalog_item_id

    # **[Required]** A [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Catalog Item to a file with key/value pairs to set up variables for createStack API.
    # @return [String]
    attr_accessor :config_catalog_item_id

    # **[Required]** A display Name of the Catalog Item in the Catalog.
    # @return [String]
    attr_accessor :package_catalog_item_display_name

    # **[Required]** A listing ID of the Catalog Item in the Catalog.
    # @return [String]
    attr_accessor :package_catalog_item_listing_id

    # **[Required]** A listing version of the Catalog Item in the Catalog.
    # @return [String]
    attr_accessor :package_catalog_item_listing_version

    # **[Required]** A display Name of the Catalog Item in the Catalog.
    # @return [String]
    attr_accessor :config_catalog_item_display_name

    # **[Required]** A listing ID of the Catalog Item in the Catalog.
    # @return [String]
    attr_accessor :config_catalog_item_listing_id

    # **[Required]** A listing version of the Catalog Item in the Catalog.
    # @return [String]
    attr_accessor :config_catalog_item_listing_version

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the RMS Stack.
    # @return [String]
    attr_accessor :stack_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Fleet.
    # @return [String]
    attr_accessor :fleet_id

    # **[Required]** Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'provision_description': :'provisionDescription',
        'compartment_id': :'compartmentId',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'package_catalog_item_id': :'packageCatalogItemId',
        'config_catalog_item_id': :'configCatalogItemId',
        'package_catalog_item_display_name': :'packageCatalogItemDisplayName',
        'package_catalog_item_listing_id': :'packageCatalogItemListingId',
        'package_catalog_item_listing_version': :'packageCatalogItemListingVersion',
        'config_catalog_item_display_name': :'configCatalogItemDisplayName',
        'config_catalog_item_listing_id': :'configCatalogItemListingId',
        'config_catalog_item_listing_version': :'configCatalogItemListingVersion',
        'stack_id': :'stackId',
        'fleet_id': :'fleetId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'provision_description': :'String',
        'compartment_id': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'package_catalog_item_id': :'String',
        'config_catalog_item_id': :'String',
        'package_catalog_item_display_name': :'String',
        'package_catalog_item_listing_id': :'String',
        'package_catalog_item_listing_version': :'String',
        'config_catalog_item_display_name': :'String',
        'config_catalog_item_listing_id': :'String',
        'config_catalog_item_listing_version': :'String',
        'stack_id': :'String',
        'fleet_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :provision_description The value to assign to the {#provision_description} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :package_catalog_item_id The value to assign to the {#package_catalog_item_id} property
    # @option attributes [String] :config_catalog_item_id The value to assign to the {#config_catalog_item_id} property
    # @option attributes [String] :package_catalog_item_display_name The value to assign to the {#package_catalog_item_display_name} property
    # @option attributes [String] :package_catalog_item_listing_id The value to assign to the {#package_catalog_item_listing_id} property
    # @option attributes [String] :package_catalog_item_listing_version The value to assign to the {#package_catalog_item_listing_version} property
    # @option attributes [String] :config_catalog_item_display_name The value to assign to the {#config_catalog_item_display_name} property
    # @option attributes [String] :config_catalog_item_listing_id The value to assign to the {#config_catalog_item_listing_id} property
    # @option attributes [String] :config_catalog_item_listing_version The value to assign to the {#config_catalog_item_listing_version} property
    # @option attributes [String] :stack_id The value to assign to the {#stack_id} property
    # @option attributes [String] :fleet_id The value to assign to the {#fleet_id} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.provision_description = attributes[:'provisionDescription'] if attributes[:'provisionDescription']

      raise 'You cannot provide both :provisionDescription and :provision_description' if attributes.key?(:'provisionDescription') && attributes.key?(:'provision_description')

      self.provision_description = attributes[:'provision_description'] if attributes[:'provision_description']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.package_catalog_item_id = attributes[:'packageCatalogItemId'] if attributes[:'packageCatalogItemId']

      raise 'You cannot provide both :packageCatalogItemId and :package_catalog_item_id' if attributes.key?(:'packageCatalogItemId') && attributes.key?(:'package_catalog_item_id')

      self.package_catalog_item_id = attributes[:'package_catalog_item_id'] if attributes[:'package_catalog_item_id']

      self.config_catalog_item_id = attributes[:'configCatalogItemId'] if attributes[:'configCatalogItemId']

      raise 'You cannot provide both :configCatalogItemId and :config_catalog_item_id' if attributes.key?(:'configCatalogItemId') && attributes.key?(:'config_catalog_item_id')

      self.config_catalog_item_id = attributes[:'config_catalog_item_id'] if attributes[:'config_catalog_item_id']

      self.package_catalog_item_display_name = attributes[:'packageCatalogItemDisplayName'] if attributes[:'packageCatalogItemDisplayName']

      raise 'You cannot provide both :packageCatalogItemDisplayName and :package_catalog_item_display_name' if attributes.key?(:'packageCatalogItemDisplayName') && attributes.key?(:'package_catalog_item_display_name')

      self.package_catalog_item_display_name = attributes[:'package_catalog_item_display_name'] if attributes[:'package_catalog_item_display_name']

      self.package_catalog_item_listing_id = attributes[:'packageCatalogItemListingId'] if attributes[:'packageCatalogItemListingId']

      raise 'You cannot provide both :packageCatalogItemListingId and :package_catalog_item_listing_id' if attributes.key?(:'packageCatalogItemListingId') && attributes.key?(:'package_catalog_item_listing_id')

      self.package_catalog_item_listing_id = attributes[:'package_catalog_item_listing_id'] if attributes[:'package_catalog_item_listing_id']

      self.package_catalog_item_listing_version = attributes[:'packageCatalogItemListingVersion'] if attributes[:'packageCatalogItemListingVersion']

      raise 'You cannot provide both :packageCatalogItemListingVersion and :package_catalog_item_listing_version' if attributes.key?(:'packageCatalogItemListingVersion') && attributes.key?(:'package_catalog_item_listing_version')

      self.package_catalog_item_listing_version = attributes[:'package_catalog_item_listing_version'] if attributes[:'package_catalog_item_listing_version']

      self.config_catalog_item_display_name = attributes[:'configCatalogItemDisplayName'] if attributes[:'configCatalogItemDisplayName']

      raise 'You cannot provide both :configCatalogItemDisplayName and :config_catalog_item_display_name' if attributes.key?(:'configCatalogItemDisplayName') && attributes.key?(:'config_catalog_item_display_name')

      self.config_catalog_item_display_name = attributes[:'config_catalog_item_display_name'] if attributes[:'config_catalog_item_display_name']

      self.config_catalog_item_listing_id = attributes[:'configCatalogItemListingId'] if attributes[:'configCatalogItemListingId']

      raise 'You cannot provide both :configCatalogItemListingId and :config_catalog_item_listing_id' if attributes.key?(:'configCatalogItemListingId') && attributes.key?(:'config_catalog_item_listing_id')

      self.config_catalog_item_listing_id = attributes[:'config_catalog_item_listing_id'] if attributes[:'config_catalog_item_listing_id']

      self.config_catalog_item_listing_version = attributes[:'configCatalogItemListingVersion'] if attributes[:'configCatalogItemListingVersion']

      raise 'You cannot provide both :configCatalogItemListingVersion and :config_catalog_item_listing_version' if attributes.key?(:'configCatalogItemListingVersion') && attributes.key?(:'config_catalog_item_listing_version')

      self.config_catalog_item_listing_version = attributes[:'config_catalog_item_listing_version'] if attributes[:'config_catalog_item_listing_version']

      self.stack_id = attributes[:'stackId'] if attributes[:'stackId']

      raise 'You cannot provide both :stackId and :stack_id' if attributes.key?(:'stackId') && attributes.key?(:'stack_id')

      self.stack_id = attributes[:'stack_id'] if attributes[:'stack_id']

      self.fleet_id = attributes[:'fleetId'] if attributes[:'fleetId']

      raise 'You cannot provide both :fleetId and :fleet_id' if attributes.key?(:'fleetId') && attributes.key?(:'fleet_id')

      self.fleet_id = attributes[:'fleet_id'] if attributes[:'fleet_id']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        provision_description == other.provision_description &&
        compartment_id == other.compartment_id &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        package_catalog_item_id == other.package_catalog_item_id &&
        config_catalog_item_id == other.config_catalog_item_id &&
        package_catalog_item_display_name == other.package_catalog_item_display_name &&
        package_catalog_item_listing_id == other.package_catalog_item_listing_id &&
        package_catalog_item_listing_version == other.package_catalog_item_listing_version &&
        config_catalog_item_display_name == other.config_catalog_item_display_name &&
        config_catalog_item_listing_id == other.config_catalog_item_listing_id &&
        config_catalog_item_listing_version == other.config_catalog_item_listing_version &&
        stack_id == other.stack_id &&
        fleet_id == other.fleet_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, provision_description, compartment_id, time_created, time_updated, lifecycle_state, lifecycle_details, package_catalog_item_id, config_catalog_item_id, package_catalog_item_display_name, package_catalog_item_listing_id, package_catalog_item_listing_version, config_catalog_item_display_name, config_catalog_item_listing_id, config_catalog_item_listing_version, stack_id, fleet_id, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
