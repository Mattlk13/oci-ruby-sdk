# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The Filtered List Of Deployed Resources
  class FleetAppsManagement::Models::DeployedResourceDetails
    # **[Required]** The mode of the resource. Example: \"managed\"
    # @return [String]
    attr_accessor :mode

    # **[Required]** The name of the resource
    # @return [String]
    attr_accessor :resource_name

    # **[Required]** The name of the Provider
    # @return [String]
    attr_accessor :resource_provider

    # **[Required]** The provider resource type. Must be supported by the [Oracle Cloud Infrastructure provider](https://registry.terraform.io/providers/oracle/oci/latest/docs).
    # Example: oci_core_instance
    #
    # @return [String]
    attr_accessor :resource_type

    # **[Required]** Collection of InstanceSummary
    # @return [Array<OCI::FleetAppsManagement::Models::InstanceSummary>]
    attr_accessor :resource_instance_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'mode': :'mode',
        'resource_name': :'resourceName',
        'resource_provider': :'resourceProvider',
        'resource_type': :'resourceType',
        'resource_instance_list': :'resourceInstanceList'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'mode': :'String',
        'resource_name': :'String',
        'resource_provider': :'String',
        'resource_type': :'String',
        'resource_instance_list': :'Array<OCI::FleetAppsManagement::Models::InstanceSummary>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :mode The value to assign to the {#mode} property
    # @option attributes [String] :resource_name The value to assign to the {#resource_name} property
    # @option attributes [String] :resource_provider The value to assign to the {#resource_provider} property
    # @option attributes [String] :resource_type The value to assign to the {#resource_type} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::InstanceSummary>] :resource_instance_list The value to assign to the {#resource_instance_list} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.mode = attributes[:'mode'] if attributes[:'mode']

      self.resource_name = attributes[:'resourceName'] if attributes[:'resourceName']

      raise 'You cannot provide both :resourceName and :resource_name' if attributes.key?(:'resourceName') && attributes.key?(:'resource_name')

      self.resource_name = attributes[:'resource_name'] if attributes[:'resource_name']

      self.resource_provider = attributes[:'resourceProvider'] if attributes[:'resourceProvider']

      raise 'You cannot provide both :resourceProvider and :resource_provider' if attributes.key?(:'resourceProvider') && attributes.key?(:'resource_provider')

      self.resource_provider = attributes[:'resource_provider'] if attributes[:'resource_provider']

      self.resource_type = attributes[:'resourceType'] if attributes[:'resourceType']

      raise 'You cannot provide both :resourceType and :resource_type' if attributes.key?(:'resourceType') && attributes.key?(:'resource_type')

      self.resource_type = attributes[:'resource_type'] if attributes[:'resource_type']

      self.resource_instance_list = attributes[:'resourceInstanceList'] if attributes[:'resourceInstanceList']

      raise 'You cannot provide both :resourceInstanceList and :resource_instance_list' if attributes.key?(:'resourceInstanceList') && attributes.key?(:'resource_instance_list')

      self.resource_instance_list = attributes[:'resource_instance_list'] if attributes[:'resource_instance_list']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        mode == other.mode &&
        resource_name == other.resource_name &&
        resource_provider == other.resource_provider &&
        resource_type == other.resource_type &&
        resource_instance_list == other.resource_instance_list
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [mode, resource_name, resource_provider, resource_type, resource_instance_list].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
