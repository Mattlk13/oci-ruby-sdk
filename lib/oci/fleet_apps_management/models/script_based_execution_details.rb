# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250228
require 'date'
require_relative 'execution_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for script-based execution.
  class FleetAppsManagement::Models::ScriptBasedExecutionDetails < FleetAppsManagement::Models::ExecutionDetails
    # @return [OCI::FleetAppsManagement::Models::TaskVariable]
    attr_accessor :variables

    # @return [OCI::FleetAppsManagement::Models::ContentDetails]
    attr_accessor :content

    # Optional command to execute the content.
    # You can provide any commands/arguments that can't be part of the script.
    #
    # @return [String]
    attr_accessor :command

    # Credentials required for executing the task.
    #
    # @return [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>]
    attr_accessor :credentials

    # Is the script locked to prevent changes directly in Object Storage?
    # @return [BOOLEAN]
    attr_accessor :is_locked

    # Is the Content an executable file?
    # @return [BOOLEAN]
    attr_accessor :is_executable_content

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'execution_type': :'executionType',
        'variables': :'variables',
        'content': :'content',
        'command': :'command',
        'credentials': :'credentials',
        'is_locked': :'isLocked',
        'is_executable_content': :'isExecutableContent'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'execution_type': :'String',
        'variables': :'OCI::FleetAppsManagement::Models::TaskVariable',
        'content': :'OCI::FleetAppsManagement::Models::ContentDetails',
        'command': :'String',
        'credentials': :'Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>',
        'is_locked': :'BOOLEAN',
        'is_executable_content': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::FleetAppsManagement::Models::TaskVariable] :variables The value to assign to the {#variables} property
    # @option attributes [OCI::FleetAppsManagement::Models::ContentDetails] :content The value to assign to the {#content} property
    # @option attributes [String] :command The value to assign to the {#command} property
    # @option attributes [Array<OCI::FleetAppsManagement::Models::ConfigAssociationDetails>] :credentials The value to assign to the {#credentials} property
    # @option attributes [BOOLEAN] :is_locked The value to assign to the {#is_locked} property
    # @option attributes [BOOLEAN] :is_executable_content The value to assign to the {#is_executable_content} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['executionType'] = 'SCRIPT'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.variables = attributes[:'variables'] if attributes[:'variables']

      self.content = attributes[:'content'] if attributes[:'content']

      self.command = attributes[:'command'] if attributes[:'command']

      self.credentials = attributes[:'credentials'] if attributes[:'credentials']

      self.is_locked = attributes[:'isLocked'] unless attributes[:'isLocked'].nil?
      self.is_locked = false if is_locked.nil? && !attributes.key?(:'isLocked') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isLocked and :is_locked' if attributes.key?(:'isLocked') && attributes.key?(:'is_locked')

      self.is_locked = attributes[:'is_locked'] unless attributes[:'is_locked'].nil?
      self.is_locked = false if is_locked.nil? && !attributes.key?(:'isLocked') && !attributes.key?(:'is_locked') # rubocop:disable Style/StringLiterals

      self.is_executable_content = attributes[:'isExecutableContent'] unless attributes[:'isExecutableContent'].nil?
      self.is_executable_content = false if is_executable_content.nil? && !attributes.key?(:'isExecutableContent') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isExecutableContent and :is_executable_content' if attributes.key?(:'isExecutableContent') && attributes.key?(:'is_executable_content')

      self.is_executable_content = attributes[:'is_executable_content'] unless attributes[:'is_executable_content'].nil?
      self.is_executable_content = false if is_executable_content.nil? && !attributes.key?(:'isExecutableContent') && !attributes.key?(:'is_executable_content') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        execution_type == other.execution_type &&
        variables == other.variables &&
        content == other.content &&
        command == other.command &&
        credentials == other.credentials &&
        is_locked == other.is_locked &&
        is_executable_content == other.is_executable_content
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [execution_type, variables, content, command, credentials, is_locked, is_executable_content].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
