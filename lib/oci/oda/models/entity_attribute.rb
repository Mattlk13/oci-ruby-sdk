# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190506
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Attribute of an entity
  class Oda::Models::EntityAttribute
    TYPE_ENUM = [
      TYPE_TEXT = 'TEXT'.freeze,
      TYPE_NUMBER = 'NUMBER'.freeze,
      TYPE_DATE_TIME = 'DATE_TIME'.freeze,
      TYPE_DATE = 'DATE'.freeze,
      TYPE_ENTITY = 'ENTITY'.freeze,
      TYPE_COMPOSITE_ENTITY = 'COMPOSITE_ENTITY'.freeze,
      TYPE_ATTRIBUTE_REFERENCE = 'ATTRIBUTE_REFERENCE'.freeze,
      TYPE_BOOLEAN = 'BOOLEAN'.freeze
    ].freeze

    TEMPORAL_PREFERENCE_ENUM = [
      TEMPORAL_PREFERENCE_PAST = 'PAST'.freeze,
      TEMPORAL_PREFERENCE_FUTURE = 'FUTURE'.freeze,
      TEMPORAL_PREFERENCE_NEAREST = 'NEAREST'.freeze
    ].freeze

    # **[Required]** The name of an entity attribute
    # @return [String]
    attr_accessor :name

    # **[Required]** The type of an entity attribute
    # @return [String]
    attr_reader :type

    # @return [OCI::Oda::Models::EntityAttributeNaturalLanguageMapping]
    attr_accessor :natural_language_mapping

    # Is the entity attribute multi-value
    # @return [BOOLEAN]
    attr_accessor :is_multi_value

    # Is the entity attribute a fuzzy match
    # @return [BOOLEAN]
    attr_accessor :is_fuzzy_match

    # Are comparisons inverted in the entity attribute
    # @return [BOOLEAN]
    attr_accessor :is_invert_comparisons

    # Temporal preference of an attribute
    # @return [String]
    attr_reader :temporal_preference

    # Name of referenced entity.
    # @return [String]
    attr_accessor :entity_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'type': :'type',
        'natural_language_mapping': :'naturalLanguageMapping',
        'is_multi_value': :'isMultiValue',
        'is_fuzzy_match': :'isFuzzyMatch',
        'is_invert_comparisons': :'isInvertComparisons',
        'temporal_preference': :'temporalPreference',
        'entity_name': :'entityName'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'type': :'String',
        'natural_language_mapping': :'OCI::Oda::Models::EntityAttributeNaturalLanguageMapping',
        'is_multi_value': :'BOOLEAN',
        'is_fuzzy_match': :'BOOLEAN',
        'is_invert_comparisons': :'BOOLEAN',
        'temporal_preference': :'String',
        'entity_name': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [OCI::Oda::Models::EntityAttributeNaturalLanguageMapping] :natural_language_mapping The value to assign to the {#natural_language_mapping} property
    # @option attributes [BOOLEAN] :is_multi_value The value to assign to the {#is_multi_value} property
    # @option attributes [BOOLEAN] :is_fuzzy_match The value to assign to the {#is_fuzzy_match} property
    # @option attributes [BOOLEAN] :is_invert_comparisons The value to assign to the {#is_invert_comparisons} property
    # @option attributes [String] :temporal_preference The value to assign to the {#temporal_preference} property
    # @option attributes [String] :entity_name The value to assign to the {#entity_name} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.type = attributes[:'type'] if attributes[:'type']

      self.natural_language_mapping = attributes[:'naturalLanguageMapping'] if attributes[:'naturalLanguageMapping']

      raise 'You cannot provide both :naturalLanguageMapping and :natural_language_mapping' if attributes.key?(:'naturalLanguageMapping') && attributes.key?(:'natural_language_mapping')

      self.natural_language_mapping = attributes[:'natural_language_mapping'] if attributes[:'natural_language_mapping']

      self.is_multi_value = attributes[:'isMultiValue'] unless attributes[:'isMultiValue'].nil?

      raise 'You cannot provide both :isMultiValue and :is_multi_value' if attributes.key?(:'isMultiValue') && attributes.key?(:'is_multi_value')

      self.is_multi_value = attributes[:'is_multi_value'] unless attributes[:'is_multi_value'].nil?

      self.is_fuzzy_match = attributes[:'isFuzzyMatch'] unless attributes[:'isFuzzyMatch'].nil?

      raise 'You cannot provide both :isFuzzyMatch and :is_fuzzy_match' if attributes.key?(:'isFuzzyMatch') && attributes.key?(:'is_fuzzy_match')

      self.is_fuzzy_match = attributes[:'is_fuzzy_match'] unless attributes[:'is_fuzzy_match'].nil?

      self.is_invert_comparisons = attributes[:'isInvertComparisons'] unless attributes[:'isInvertComparisons'].nil?

      raise 'You cannot provide both :isInvertComparisons and :is_invert_comparisons' if attributes.key?(:'isInvertComparisons') && attributes.key?(:'is_invert_comparisons')

      self.is_invert_comparisons = attributes[:'is_invert_comparisons'] unless attributes[:'is_invert_comparisons'].nil?

      self.temporal_preference = attributes[:'temporalPreference'] if attributes[:'temporalPreference']

      raise 'You cannot provide both :temporalPreference and :temporal_preference' if attributes.key?(:'temporalPreference') && attributes.key?(:'temporal_preference')

      self.temporal_preference = attributes[:'temporal_preference'] if attributes[:'temporal_preference']

      self.entity_name = attributes[:'entityName'] if attributes[:'entityName']

      raise 'You cannot provide both :entityName and :entity_name' if attributes.key?(:'entityName') && attributes.key?(:'entity_name')

      self.entity_name = attributes[:'entity_name'] if attributes[:'entity_name']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      raise "Invalid value for 'type': this must be one of the values in TYPE_ENUM." if type && !TYPE_ENUM.include?(type)

      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] temporal_preference Object to be assigned
    def temporal_preference=(temporal_preference)
      raise "Invalid value for 'temporal_preference': this must be one of the values in TEMPORAL_PREFERENCE_ENUM." if temporal_preference && !TEMPORAL_PREFERENCE_ENUM.include?(temporal_preference)

      @temporal_preference = temporal_preference
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        type == other.type &&
        natural_language_mapping == other.natural_language_mapping &&
        is_multi_value == other.is_multi_value &&
        is_fuzzy_match == other.is_fuzzy_match &&
        is_invert_comparisons == other.is_invert_comparisons &&
        temporal_preference == other.temporal_preference &&
        entity_name == other.entity_name
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, type, natural_language_mapping, is_multi_value, is_fuzzy_match, is_invert_comparisons, temporal_preference, entity_name].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
