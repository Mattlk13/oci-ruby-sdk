# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # OPN membership information
  class MarketplacePublisher::Models::OpnMembership
    OPN_STATUS_ENUM = [
      OPN_STATUS_ACTIVE = 'ACTIVE'.freeze,
      OPN_STATUS_INACTIVE = 'INACTIVE'.freeze,
      OPN_STATUS_RENEWAL_IN_PROGRESS = 'RENEWAL_IN_PROGRESS'.freeze,
      OPN_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # OPN membership start date. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_start

    # OPN membership end date. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_end

    # OPN status
    # @return [String]
    attr_reader :opn_status

    # OPN Number number
    # @return [String]
    attr_accessor :opn_number

    # OPN membership type
    # @return [String]
    attr_accessor :opn_membership_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'time_start': :'timeStart',
        'time_end': :'timeEnd',
        'opn_status': :'opnStatus',
        'opn_number': :'opnNumber',
        'opn_membership_type': :'opnMembershipType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'time_start': :'DateTime',
        'time_end': :'DateTime',
        'opn_status': :'String',
        'opn_number': :'String',
        'opn_membership_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_start The value to assign to the {#time_start} property
    # @option attributes [DateTime] :time_end The value to assign to the {#time_end} property
    # @option attributes [String] :opn_status The value to assign to the {#opn_status} property
    # @option attributes [String] :opn_number The value to assign to the {#opn_number} property
    # @option attributes [String] :opn_membership_type The value to assign to the {#opn_membership_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.time_start = attributes[:'timeStart'] if attributes[:'timeStart']

      raise 'You cannot provide both :timeStart and :time_start' if attributes.key?(:'timeStart') && attributes.key?(:'time_start')

      self.time_start = attributes[:'time_start'] if attributes[:'time_start']

      self.time_end = attributes[:'timeEnd'] if attributes[:'timeEnd']

      raise 'You cannot provide both :timeEnd and :time_end' if attributes.key?(:'timeEnd') && attributes.key?(:'time_end')

      self.time_end = attributes[:'time_end'] if attributes[:'time_end']

      self.opn_status = attributes[:'opnStatus'] if attributes[:'opnStatus']

      raise 'You cannot provide both :opnStatus and :opn_status' if attributes.key?(:'opnStatus') && attributes.key?(:'opn_status')

      self.opn_status = attributes[:'opn_status'] if attributes[:'opn_status']

      self.opn_number = attributes[:'opnNumber'] if attributes[:'opnNumber']

      raise 'You cannot provide both :opnNumber and :opn_number' if attributes.key?(:'opnNumber') && attributes.key?(:'opn_number')

      self.opn_number = attributes[:'opn_number'] if attributes[:'opn_number']

      self.opn_membership_type = attributes[:'opnMembershipType'] if attributes[:'opnMembershipType']

      raise 'You cannot provide both :opnMembershipType and :opn_membership_type' if attributes.key?(:'opnMembershipType') && attributes.key?(:'opn_membership_type')

      self.opn_membership_type = attributes[:'opn_membership_type'] if attributes[:'opn_membership_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] opn_status Object to be assigned
    def opn_status=(opn_status)
      # rubocop:disable Style/ConditionalAssignment
      if opn_status && !OPN_STATUS_ENUM.include?(opn_status)
        OCI.logger.debug("Unknown value for 'opn_status' [" + opn_status + "]. Mapping to 'OPN_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @opn_status = OPN_STATUS_UNKNOWN_ENUM_VALUE
      else
        @opn_status = opn_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        time_start == other.time_start &&
        time_end == other.time_end &&
        opn_status == other.opn_status &&
        opn_number == other.opn_number &&
        opn_membership_type == other.opn_membership_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [time_start, time_end, opn_status, opn_number, opn_membership_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
