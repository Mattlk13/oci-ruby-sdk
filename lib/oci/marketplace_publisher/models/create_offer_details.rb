# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about new Offers.
  class MarketplacePublisher::Models::CreateOfferDetails
    # **[Required]** Offers Identifier
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Compartment Identifier of the seller
    # @return [String]
    attr_accessor :seller_compartment_id

    # Compartment Identifier of the buyer
    # @return [String]
    attr_accessor :buyer_compartment_id

    # Description of the Offer
    # @return [String]
    attr_accessor :description

    # Internal notes of the Offer
    # @return [String]
    attr_accessor :internal_notes

    # The time the Offer will become active after it has been accepted by the Buyer. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_start_date

    # Duration the Offer will be active after its start date. An ISO8601 extended formatted string.
    # @return [String]
    attr_accessor :duration

    # The time the Offer must be accepted by the Buyer before the Offer becomes invalid. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_accept_by

    # @return [OCI::MarketplacePublisher::Models::Pricing]
    attr_accessor :pricing

    # @return [OCI::MarketplacePublisher::Models::BuyerInformation]
    attr_accessor :buyer_information

    # @return [OCI::MarketplacePublisher::Models::SellerInformation]
    attr_accessor :seller_information

    # A list of Resource Bundles associated with an Offer.
    # @return [Array<OCI::MarketplacePublisher::Models::ResourceBundle>]
    attr_accessor :resource_bundles

    # A list of key value pairs specified by the seller
    # @return [Array<OCI::MarketplacePublisher::Models::CustomField>]
    attr_accessor :custom_fields

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'seller_compartment_id': :'sellerCompartmentId',
        'buyer_compartment_id': :'buyerCompartmentId',
        'description': :'description',
        'internal_notes': :'internalNotes',
        'time_start_date': :'timeStartDate',
        'duration': :'duration',
        'time_accept_by': :'timeAcceptBy',
        'pricing': :'pricing',
        'buyer_information': :'buyerInformation',
        'seller_information': :'sellerInformation',
        'resource_bundles': :'resourceBundles',
        'custom_fields': :'customFields',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'seller_compartment_id': :'String',
        'buyer_compartment_id': :'String',
        'description': :'String',
        'internal_notes': :'String',
        'time_start_date': :'DateTime',
        'duration': :'String',
        'time_accept_by': :'DateTime',
        'pricing': :'OCI::MarketplacePublisher::Models::Pricing',
        'buyer_information': :'OCI::MarketplacePublisher::Models::BuyerInformation',
        'seller_information': :'OCI::MarketplacePublisher::Models::SellerInformation',
        'resource_bundles': :'Array<OCI::MarketplacePublisher::Models::ResourceBundle>',
        'custom_fields': :'Array<OCI::MarketplacePublisher::Models::CustomField>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :seller_compartment_id The value to assign to the {#seller_compartment_id} property
    # @option attributes [String] :buyer_compartment_id The value to assign to the {#buyer_compartment_id} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :internal_notes The value to assign to the {#internal_notes} property
    # @option attributes [DateTime] :time_start_date The value to assign to the {#time_start_date} property
    # @option attributes [String] :duration The value to assign to the {#duration} property
    # @option attributes [DateTime] :time_accept_by The value to assign to the {#time_accept_by} property
    # @option attributes [OCI::MarketplacePublisher::Models::Pricing] :pricing The value to assign to the {#pricing} property
    # @option attributes [OCI::MarketplacePublisher::Models::BuyerInformation] :buyer_information The value to assign to the {#buyer_information} property
    # @option attributes [OCI::MarketplacePublisher::Models::SellerInformation] :seller_information The value to assign to the {#seller_information} property
    # @option attributes [Array<OCI::MarketplacePublisher::Models::ResourceBundle>] :resource_bundles The value to assign to the {#resource_bundles} property
    # @option attributes [Array<OCI::MarketplacePublisher::Models::CustomField>] :custom_fields The value to assign to the {#custom_fields} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.seller_compartment_id = attributes[:'sellerCompartmentId'] if attributes[:'sellerCompartmentId']

      raise 'You cannot provide both :sellerCompartmentId and :seller_compartment_id' if attributes.key?(:'sellerCompartmentId') && attributes.key?(:'seller_compartment_id')

      self.seller_compartment_id = attributes[:'seller_compartment_id'] if attributes[:'seller_compartment_id']

      self.buyer_compartment_id = attributes[:'buyerCompartmentId'] if attributes[:'buyerCompartmentId']

      raise 'You cannot provide both :buyerCompartmentId and :buyer_compartment_id' if attributes.key?(:'buyerCompartmentId') && attributes.key?(:'buyer_compartment_id')

      self.buyer_compartment_id = attributes[:'buyer_compartment_id'] if attributes[:'buyer_compartment_id']

      self.description = attributes[:'description'] if attributes[:'description']

      self.internal_notes = attributes[:'internalNotes'] if attributes[:'internalNotes']

      raise 'You cannot provide both :internalNotes and :internal_notes' if attributes.key?(:'internalNotes') && attributes.key?(:'internal_notes')

      self.internal_notes = attributes[:'internal_notes'] if attributes[:'internal_notes']

      self.time_start_date = attributes[:'timeStartDate'] if attributes[:'timeStartDate']

      raise 'You cannot provide both :timeStartDate and :time_start_date' if attributes.key?(:'timeStartDate') && attributes.key?(:'time_start_date')

      self.time_start_date = attributes[:'time_start_date'] if attributes[:'time_start_date']

      self.duration = attributes[:'duration'] if attributes[:'duration']

      self.time_accept_by = attributes[:'timeAcceptBy'] if attributes[:'timeAcceptBy']

      raise 'You cannot provide both :timeAcceptBy and :time_accept_by' if attributes.key?(:'timeAcceptBy') && attributes.key?(:'time_accept_by')

      self.time_accept_by = attributes[:'time_accept_by'] if attributes[:'time_accept_by']

      self.pricing = attributes[:'pricing'] if attributes[:'pricing']

      self.buyer_information = attributes[:'buyerInformation'] if attributes[:'buyerInformation']

      raise 'You cannot provide both :buyerInformation and :buyer_information' if attributes.key?(:'buyerInformation') && attributes.key?(:'buyer_information')

      self.buyer_information = attributes[:'buyer_information'] if attributes[:'buyer_information']

      self.seller_information = attributes[:'sellerInformation'] if attributes[:'sellerInformation']

      raise 'You cannot provide both :sellerInformation and :seller_information' if attributes.key?(:'sellerInformation') && attributes.key?(:'seller_information')

      self.seller_information = attributes[:'seller_information'] if attributes[:'seller_information']

      self.resource_bundles = attributes[:'resourceBundles'] if attributes[:'resourceBundles']

      raise 'You cannot provide both :resourceBundles and :resource_bundles' if attributes.key?(:'resourceBundles') && attributes.key?(:'resource_bundles')

      self.resource_bundles = attributes[:'resource_bundles'] if attributes[:'resource_bundles']

      self.custom_fields = attributes[:'customFields'] if attributes[:'customFields']

      raise 'You cannot provide both :customFields and :custom_fields' if attributes.key?(:'customFields') && attributes.key?(:'custom_fields')

      self.custom_fields = attributes[:'custom_fields'] if attributes[:'custom_fields']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        seller_compartment_id == other.seller_compartment_id &&
        buyer_compartment_id == other.buyer_compartment_id &&
        description == other.description &&
        internal_notes == other.internal_notes &&
        time_start_date == other.time_start_date &&
        duration == other.duration &&
        time_accept_by == other.time_accept_by &&
        pricing == other.pricing &&
        buyer_information == other.buyer_information &&
        seller_information == other.seller_information &&
        resource_bundles == other.resource_bundles &&
        custom_fields == other.custom_fields &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, seller_compartment_id, buyer_compartment_id, description, internal_notes, time_start_date, duration, time_accept_by, pricing, buyer_information, seller_information, resource_bundles, custom_fields, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
