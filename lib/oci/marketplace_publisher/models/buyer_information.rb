# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information related to the buyer of an Offer
  class MarketplacePublisher::Models::BuyerInformation
    # the name of the company for the buyer
    # @return [String]
    attr_accessor :company_name

    # a note the seller can specify for the buyer through a notification email
    # @return [String]
    attr_accessor :note_to_buyer

    # @return [OCI::MarketplacePublisher::Models::Contact]
    attr_accessor :primary_contact

    # the additional contacts associated with the buyer
    # @return [Array<OCI::MarketplacePublisher::Models::Contact>]
    attr_accessor :additional_contacts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'company_name': :'companyName',
        'note_to_buyer': :'noteToBuyer',
        'primary_contact': :'primaryContact',
        'additional_contacts': :'additionalContacts'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'company_name': :'String',
        'note_to_buyer': :'String',
        'primary_contact': :'OCI::MarketplacePublisher::Models::Contact',
        'additional_contacts': :'Array<OCI::MarketplacePublisher::Models::Contact>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :company_name The value to assign to the {#company_name} property
    # @option attributes [String] :note_to_buyer The value to assign to the {#note_to_buyer} property
    # @option attributes [OCI::MarketplacePublisher::Models::Contact] :primary_contact The value to assign to the {#primary_contact} property
    # @option attributes [Array<OCI::MarketplacePublisher::Models::Contact>] :additional_contacts The value to assign to the {#additional_contacts} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.company_name = attributes[:'companyName'] if attributes[:'companyName']

      raise 'You cannot provide both :companyName and :company_name' if attributes.key?(:'companyName') && attributes.key?(:'company_name')

      self.company_name = attributes[:'company_name'] if attributes[:'company_name']

      self.note_to_buyer = attributes[:'noteToBuyer'] if attributes[:'noteToBuyer']

      raise 'You cannot provide both :noteToBuyer and :note_to_buyer' if attributes.key?(:'noteToBuyer') && attributes.key?(:'note_to_buyer')

      self.note_to_buyer = attributes[:'note_to_buyer'] if attributes[:'note_to_buyer']

      self.primary_contact = attributes[:'primaryContact'] if attributes[:'primaryContact']

      raise 'You cannot provide both :primaryContact and :primary_contact' if attributes.key?(:'primaryContact') && attributes.key?(:'primary_contact')

      self.primary_contact = attributes[:'primary_contact'] if attributes[:'primary_contact']

      self.additional_contacts = attributes[:'additionalContacts'] if attributes[:'additionalContacts']

      raise 'You cannot provide both :additionalContacts and :additional_contacts' if attributes.key?(:'additionalContacts') && attributes.key?(:'additional_contacts')

      self.additional_contacts = attributes[:'additional_contacts'] if attributes[:'additional_contacts']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        company_name == other.company_name &&
        note_to_buyer == other.note_to_buyer &&
        primary_contact == other.primary_contact &&
        additional_contacts == other.additional_contacts
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [company_name, note_to_buyer, primary_contact, additional_contacts].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
