# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The model for an Oracle Cloud Infrastructure Marketplace Publisher listing revision.
  class MarketplacePublisher::Models::ListingRevision
    STATUS_ENUM = [
      STATUS_NEW = 'NEW'.freeze,
      STATUS_PENDING_REVIEW = 'PENDING_REVIEW'.freeze,
      STATUS_REVIEW_IN_PROGRESS = 'REVIEW_IN_PROGRESS'.freeze,
      STATUS_REJECTED = 'REJECTED'.freeze,
      STATUS_APPROVED = 'APPROVED'.freeze,
      STATUS_PUBLISH_IN_PROGRESS = 'PUBLISH_IN_PROGRESS'.freeze,
      STATUS_PUBLISH_FAILED = 'PUBLISH_FAILED'.freeze,
      STATUS_PUBLISHED = 'PUBLISHED'.freeze,
      STATUS_PUBLISH_AS_PRIVATE_FAILED = 'PUBLISH_AS_PRIVATE_FAILED'.freeze,
      STATUS_PUBLISHED_AS_PRIVATE = 'PUBLISHED_AS_PRIVATE'.freeze,
      STATUS_PUBLISH_AS_PRIVATE_IN_PROGRESS = 'PUBLISH_AS_PRIVATE_IN_PROGRESS'.freeze,
      STATUS_UNPUBLISH_IN_PROGRESS = 'UNPUBLISH_IN_PROGRESS'.freeze,
      STATUS_UNPUBLISHED = 'UNPUBLISHED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PACKAGE_TYPE_ENUM = [
      PACKAGE_TYPE_CONTAINER_IMAGE = 'CONTAINER_IMAGE'.freeze,
      PACKAGE_TYPE_HELM_CHART = 'HELM_CHART'.freeze,
      PACKAGE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PRICING_TYPE_ENUM = [
      PRICING_TYPE_FREE = 'FREE'.freeze,
      PRICING_TYPE_BYOL = 'BYOL'.freeze,
      PRICING_TYPE_PAYGO = 'PAYGO'.freeze,
      PRICING_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique OCID identifier for the listing revision in Marketplace Publisher.
    # @return [String]
    attr_accessor :id

    # **[Required]** The unique identifier for the listing this revision belongs to.
    # @return [String]
    attr_accessor :listing_id

    # The unique identifier for the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The name for the listing revision.
    # @return [String]
    attr_accessor :display_name

    # The revision number for the listing revision. This is an internal attribute
    # @return [String]
    attr_accessor :revision_number

    # @return [OCI::MarketplacePublisher::Models::VersionDetails]
    attr_accessor :version_details

    # **[Required]** Single line introduction for the listing revision.
    # @return [String]
    attr_accessor :headline

    # The tagline of the listing revision.
    # @return [String]
    attr_accessor :tagline

    # Keywords associated with the listing revision.
    # @return [String]
    attr_accessor :keywords

    # A short description for the listing revision.
    # @return [String]
    attr_accessor :short_description

    # Usage information for the listing revision.
    # @return [String]
    attr_accessor :usage_information

    # A long description for the listing revision.
    # @return [String]
    attr_accessor :long_description

    # System requirements for the listing revision.
    # @return [String]
    attr_accessor :system_requirements

    # **[Required]** The time the listing revision was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The time the listing revision was updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** The categories for the listing revsion.
    # @return [Array<String>]
    attr_accessor :categories

    # The markets supported by the listing revision.
    # @return [Array<String>]
    attr_accessor :markets

    # @return [OCI::MarketplacePublisher::Models::LanguageItem]
    attr_accessor :content_language

    # Languages supported by the publisher for the listing revision.
    # @return [Array<OCI::MarketplacePublisher::Models::LanguageItem>]
    attr_accessor :supportedlanguages

    # Contact information to use to get support from the publisher for the listing revision.
    # @return [Array<OCI::MarketplacePublisher::Models::SupportContact>]
    attr_accessor :support_contacts

    # Links to support resources for the listing revision.
    # @return [Array<OCI::MarketplacePublisher::Models::NamedLink>]
    attr_accessor :support_links

    # @return [OCI::MarketplacePublisher::Models::ListingRevisionIconAttachment]
    attr_accessor :icon

    # **[Required]** The current status for the Listing revision.
    # @return [String]
    attr_reader :status

    # Status notes for the listing revision.
    # @return [String]
    attr_accessor :status_notes

    # **[Required]** The current state of the listing revision.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The listing's package type. Populated from the listing.
    # @return [String]
    attr_reader :package_type

    # **[Required]** The pricing model for the listing revision.
    # @return [String]
    attr_reader :pricing_type

    # Allowed tenancies provided when a listing revision is published as private.
    # @return [Array<String>]
    attr_accessor :allowed_tenancies

    # Identifies whether publisher allows internal tenancy launches for the listing revision.
    # @return [BOOLEAN]
    attr_accessor :are_internal_tenancy_launch_allowed

    # Additional metadata key/value pairs for the listing revision summary.
    #
    # @return [Hash<String, String>]
    attr_accessor :extended_metadata

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'listing_id': :'listingId',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'revision_number': :'revisionNumber',
        'version_details': :'versionDetails',
        'headline': :'headline',
        'tagline': :'tagline',
        'keywords': :'keywords',
        'short_description': :'shortDescription',
        'usage_information': :'usageInformation',
        'long_description': :'longDescription',
        'system_requirements': :'systemRequirements',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'categories': :'categories',
        'markets': :'markets',
        'content_language': :'contentLanguage',
        'supportedlanguages': :'supportedlanguages',
        'support_contacts': :'supportContacts',
        'support_links': :'supportLinks',
        'icon': :'icon',
        'status': :'status',
        'status_notes': :'statusNotes',
        'lifecycle_state': :'lifecycleState',
        'package_type': :'packageType',
        'pricing_type': :'pricingType',
        'allowed_tenancies': :'allowedTenancies',
        'are_internal_tenancy_launch_allowed': :'areInternalTenancyLaunchAllowed',
        'extended_metadata': :'extendedMetadata',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'listing_id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'revision_number': :'String',
        'version_details': :'OCI::MarketplacePublisher::Models::VersionDetails',
        'headline': :'String',
        'tagline': :'String',
        'keywords': :'String',
        'short_description': :'String',
        'usage_information': :'String',
        'long_description': :'String',
        'system_requirements': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'categories': :'Array<String>',
        'markets': :'Array<String>',
        'content_language': :'OCI::MarketplacePublisher::Models::LanguageItem',
        'supportedlanguages': :'Array<OCI::MarketplacePublisher::Models::LanguageItem>',
        'support_contacts': :'Array<OCI::MarketplacePublisher::Models::SupportContact>',
        'support_links': :'Array<OCI::MarketplacePublisher::Models::NamedLink>',
        'icon': :'OCI::MarketplacePublisher::Models::ListingRevisionIconAttachment',
        'status': :'String',
        'status_notes': :'String',
        'lifecycle_state': :'String',
        'package_type': :'String',
        'pricing_type': :'String',
        'allowed_tenancies': :'Array<String>',
        'are_internal_tenancy_launch_allowed': :'BOOLEAN',
        'extended_metadata': :'Hash<String, String>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :listing_id The value to assign to the {#listing_id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :revision_number The value to assign to the {#revision_number} property
    # @option attributes [OCI::MarketplacePublisher::Models::VersionDetails] :version_details The value to assign to the {#version_details} property
    # @option attributes [String] :headline The value to assign to the {#headline} property
    # @option attributes [String] :tagline The value to assign to the {#tagline} property
    # @option attributes [String] :keywords The value to assign to the {#keywords} property
    # @option attributes [String] :short_description The value to assign to the {#short_description} property
    # @option attributes [String] :usage_information The value to assign to the {#usage_information} property
    # @option attributes [String] :long_description The value to assign to the {#long_description} property
    # @option attributes [String] :system_requirements The value to assign to the {#system_requirements} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [Array<String>] :categories The value to assign to the {#categories} property
    # @option attributes [Array<String>] :markets The value to assign to the {#markets} property
    # @option attributes [OCI::MarketplacePublisher::Models::LanguageItem] :content_language The value to assign to the {#content_language} property
    # @option attributes [Array<OCI::MarketplacePublisher::Models::LanguageItem>] :supportedlanguages The value to assign to the {#supportedlanguages} property
    # @option attributes [Array<OCI::MarketplacePublisher::Models::SupportContact>] :support_contacts The value to assign to the {#support_contacts} property
    # @option attributes [Array<OCI::MarketplacePublisher::Models::NamedLink>] :support_links The value to assign to the {#support_links} property
    # @option attributes [OCI::MarketplacePublisher::Models::ListingRevisionIconAttachment] :icon The value to assign to the {#icon} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :status_notes The value to assign to the {#status_notes} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :package_type The value to assign to the {#package_type} property
    # @option attributes [String] :pricing_type The value to assign to the {#pricing_type} property
    # @option attributes [Array<String>] :allowed_tenancies The value to assign to the {#allowed_tenancies} property
    # @option attributes [BOOLEAN] :are_internal_tenancy_launch_allowed The value to assign to the {#are_internal_tenancy_launch_allowed} property
    # @option attributes [Hash<String, String>] :extended_metadata The value to assign to the {#extended_metadata} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.listing_id = attributes[:'listingId'] if attributes[:'listingId']

      raise 'You cannot provide both :listingId and :listing_id' if attributes.key?(:'listingId') && attributes.key?(:'listing_id')

      self.listing_id = attributes[:'listing_id'] if attributes[:'listing_id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.revision_number = attributes[:'revisionNumber'] if attributes[:'revisionNumber']

      raise 'You cannot provide both :revisionNumber and :revision_number' if attributes.key?(:'revisionNumber') && attributes.key?(:'revision_number')

      self.revision_number = attributes[:'revision_number'] if attributes[:'revision_number']

      self.version_details = attributes[:'versionDetails'] if attributes[:'versionDetails']

      raise 'You cannot provide both :versionDetails and :version_details' if attributes.key?(:'versionDetails') && attributes.key?(:'version_details')

      self.version_details = attributes[:'version_details'] if attributes[:'version_details']

      self.headline = attributes[:'headline'] if attributes[:'headline']

      self.tagline = attributes[:'tagline'] if attributes[:'tagline']

      self.keywords = attributes[:'keywords'] if attributes[:'keywords']

      self.short_description = attributes[:'shortDescription'] if attributes[:'shortDescription']

      raise 'You cannot provide both :shortDescription and :short_description' if attributes.key?(:'shortDescription') && attributes.key?(:'short_description')

      self.short_description = attributes[:'short_description'] if attributes[:'short_description']

      self.usage_information = attributes[:'usageInformation'] if attributes[:'usageInformation']

      raise 'You cannot provide both :usageInformation and :usage_information' if attributes.key?(:'usageInformation') && attributes.key?(:'usage_information')

      self.usage_information = attributes[:'usage_information'] if attributes[:'usage_information']

      self.long_description = attributes[:'longDescription'] if attributes[:'longDescription']

      raise 'You cannot provide both :longDescription and :long_description' if attributes.key?(:'longDescription') && attributes.key?(:'long_description')

      self.long_description = attributes[:'long_description'] if attributes[:'long_description']

      self.system_requirements = attributes[:'systemRequirements'] if attributes[:'systemRequirements']

      raise 'You cannot provide both :systemRequirements and :system_requirements' if attributes.key?(:'systemRequirements') && attributes.key?(:'system_requirements')

      self.system_requirements = attributes[:'system_requirements'] if attributes[:'system_requirements']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.categories = attributes[:'categories'] if attributes[:'categories']

      self.markets = attributes[:'markets'] if attributes[:'markets']

      self.content_language = attributes[:'contentLanguage'] if attributes[:'contentLanguage']

      raise 'You cannot provide both :contentLanguage and :content_language' if attributes.key?(:'contentLanguage') && attributes.key?(:'content_language')

      self.content_language = attributes[:'content_language'] if attributes[:'content_language']

      self.supportedlanguages = attributes[:'supportedlanguages'] if attributes[:'supportedlanguages']

      self.support_contacts = attributes[:'supportContacts'] if attributes[:'supportContacts']

      raise 'You cannot provide both :supportContacts and :support_contacts' if attributes.key?(:'supportContacts') && attributes.key?(:'support_contacts')

      self.support_contacts = attributes[:'support_contacts'] if attributes[:'support_contacts']

      self.support_links = attributes[:'supportLinks'] if attributes[:'supportLinks']

      raise 'You cannot provide both :supportLinks and :support_links' if attributes.key?(:'supportLinks') && attributes.key?(:'support_links')

      self.support_links = attributes[:'support_links'] if attributes[:'support_links']

      self.icon = attributes[:'icon'] if attributes[:'icon']

      self.status = attributes[:'status'] if attributes[:'status']

      self.status_notes = attributes[:'statusNotes'] if attributes[:'statusNotes']

      raise 'You cannot provide both :statusNotes and :status_notes' if attributes.key?(:'statusNotes') && attributes.key?(:'status_notes')

      self.status_notes = attributes[:'status_notes'] if attributes[:'status_notes']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.package_type = attributes[:'packageType'] if attributes[:'packageType']

      raise 'You cannot provide both :packageType and :package_type' if attributes.key?(:'packageType') && attributes.key?(:'package_type')

      self.package_type = attributes[:'package_type'] if attributes[:'package_type']

      self.pricing_type = attributes[:'pricingType'] if attributes[:'pricingType']

      raise 'You cannot provide both :pricingType and :pricing_type' if attributes.key?(:'pricingType') && attributes.key?(:'pricing_type')

      self.pricing_type = attributes[:'pricing_type'] if attributes[:'pricing_type']

      self.allowed_tenancies = attributes[:'allowedTenancies'] if attributes[:'allowedTenancies']

      raise 'You cannot provide both :allowedTenancies and :allowed_tenancies' if attributes.key?(:'allowedTenancies') && attributes.key?(:'allowed_tenancies')

      self.allowed_tenancies = attributes[:'allowed_tenancies'] if attributes[:'allowed_tenancies']

      self.are_internal_tenancy_launch_allowed = attributes[:'areInternalTenancyLaunchAllowed'] unless attributes[:'areInternalTenancyLaunchAllowed'].nil?

      raise 'You cannot provide both :areInternalTenancyLaunchAllowed and :are_internal_tenancy_launch_allowed' if attributes.key?(:'areInternalTenancyLaunchAllowed') && attributes.key?(:'are_internal_tenancy_launch_allowed')

      self.are_internal_tenancy_launch_allowed = attributes[:'are_internal_tenancy_launch_allowed'] unless attributes[:'are_internal_tenancy_launch_allowed'].nil?

      self.extended_metadata = attributes[:'extendedMetadata'] if attributes[:'extendedMetadata']

      raise 'You cannot provide both :extendedMetadata and :extended_metadata' if attributes.key?(:'extendedMetadata') && attributes.key?(:'extended_metadata')

      self.extended_metadata = attributes[:'extended_metadata'] if attributes[:'extended_metadata']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] package_type Object to be assigned
    def package_type=(package_type)
      # rubocop:disable Style/ConditionalAssignment
      if package_type && !PACKAGE_TYPE_ENUM.include?(package_type)
        OCI.logger.debug("Unknown value for 'package_type' [" + package_type + "]. Mapping to 'PACKAGE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @package_type = PACKAGE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @package_type = package_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pricing_type Object to be assigned
    def pricing_type=(pricing_type)
      # rubocop:disable Style/ConditionalAssignment
      if pricing_type && !PRICING_TYPE_ENUM.include?(pricing_type)
        OCI.logger.debug("Unknown value for 'pricing_type' [" + pricing_type + "]. Mapping to 'PRICING_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @pricing_type = PRICING_TYPE_UNKNOWN_ENUM_VALUE
      else
        @pricing_type = pricing_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        listing_id == other.listing_id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        revision_number == other.revision_number &&
        version_details == other.version_details &&
        headline == other.headline &&
        tagline == other.tagline &&
        keywords == other.keywords &&
        short_description == other.short_description &&
        usage_information == other.usage_information &&
        long_description == other.long_description &&
        system_requirements == other.system_requirements &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        categories == other.categories &&
        markets == other.markets &&
        content_language == other.content_language &&
        supportedlanguages == other.supportedlanguages &&
        support_contacts == other.support_contacts &&
        support_links == other.support_links &&
        icon == other.icon &&
        status == other.status &&
        status_notes == other.status_notes &&
        lifecycle_state == other.lifecycle_state &&
        package_type == other.package_type &&
        pricing_type == other.pricing_type &&
        allowed_tenancies == other.allowed_tenancies &&
        are_internal_tenancy_launch_allowed == other.are_internal_tenancy_launch_allowed &&
        extended_metadata == other.extended_metadata &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, listing_id, compartment_id, display_name, revision_number, version_details, headline, tagline, keywords, short_description, usage_information, long_description, system_requirements, time_created, time_updated, categories, markets, content_language, supportedlanguages, support_contacts, support_links, icon, status, status_notes, lifecycle_state, package_type, pricing_type, allowed_tenancies, are_internal_tenancy_launch_allowed, extended_metadata, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
