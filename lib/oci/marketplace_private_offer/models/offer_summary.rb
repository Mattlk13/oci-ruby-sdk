# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of the Offers.
  class MarketplacePrivateOffer::Models::OfferSummary
    # **[Required]** Unique identifier that is immutable on creation
    # @return [String]
    attr_accessor :id

    # **[Required]** Offer Identifier, can be renamed
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Ocid of the buyer tenancy.
    # @return [String]
    attr_accessor :buyer_compartment_id

    # **[Required]** Ocid of the seller tenancy.
    # @return [String]
    attr_accessor :seller_compartment_id

    # **[Required]** The time the the Offer was created. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_created

    # The time the Offer was updated. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_updated

    # The time the Offer must be accepted by the Buyer before the Offer becomes invalid. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_accept_by

    # The time the Offer was accepted by the Buyer of the Offer. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_accepted

    # The time the Offer will become active after it has been accepted by the Buyer. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_start_date

    # The time the accepted Offer will end. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_offer_end

    # **[Required]** The current state of the Offer.
    # @return [String]
    attr_accessor :lifecycle_state

    # A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
    # @return [String]
    attr_accessor :lifecycle_details

    # The human readable representation of where the offer is at in it's contract lifecycle.
    # @return [String]
    attr_accessor :offer_status

    # @return [OCI::MarketplacePrivateOffer::Models::BuyerInformation]
    attr_accessor :buyer_information

    # @return [OCI::MarketplacePrivateOffer::Models::SellerInformation]
    attr_accessor :seller_information

    # @return [OCI::MarketplacePrivateOffer::Models::Pricing]
    attr_accessor :pricing

    # **[Required]** Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'buyer_compartment_id': :'buyerCompartmentId',
        'seller_compartment_id': :'sellerCompartmentId',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'time_accept_by': :'timeAcceptBy',
        'time_accepted': :'timeAccepted',
        'time_start_date': :'timeStartDate',
        'time_offer_end': :'timeOfferEnd',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'offer_status': :'offerStatus',
        'buyer_information': :'buyerInformation',
        'seller_information': :'sellerInformation',
        'pricing': :'pricing',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'buyer_compartment_id': :'String',
        'seller_compartment_id': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'time_accept_by': :'DateTime',
        'time_accepted': :'DateTime',
        'time_start_date': :'DateTime',
        'time_offer_end': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'offer_status': :'String',
        'buyer_information': :'OCI::MarketplacePrivateOffer::Models::BuyerInformation',
        'seller_information': :'OCI::MarketplacePrivateOffer::Models::SellerInformation',
        'pricing': :'OCI::MarketplacePrivateOffer::Models::Pricing',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :buyer_compartment_id The value to assign to the {#buyer_compartment_id} property
    # @option attributes [String] :seller_compartment_id The value to assign to the {#seller_compartment_id} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [DateTime] :time_accept_by The value to assign to the {#time_accept_by} property
    # @option attributes [DateTime] :time_accepted The value to assign to the {#time_accepted} property
    # @option attributes [DateTime] :time_start_date The value to assign to the {#time_start_date} property
    # @option attributes [DateTime] :time_offer_end The value to assign to the {#time_offer_end} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :offer_status The value to assign to the {#offer_status} property
    # @option attributes [OCI::MarketplacePrivateOffer::Models::BuyerInformation] :buyer_information The value to assign to the {#buyer_information} property
    # @option attributes [OCI::MarketplacePrivateOffer::Models::SellerInformation] :seller_information The value to assign to the {#seller_information} property
    # @option attributes [OCI::MarketplacePrivateOffer::Models::Pricing] :pricing The value to assign to the {#pricing} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.buyer_compartment_id = attributes[:'buyerCompartmentId'] if attributes[:'buyerCompartmentId']

      raise 'You cannot provide both :buyerCompartmentId and :buyer_compartment_id' if attributes.key?(:'buyerCompartmentId') && attributes.key?(:'buyer_compartment_id')

      self.buyer_compartment_id = attributes[:'buyer_compartment_id'] if attributes[:'buyer_compartment_id']

      self.seller_compartment_id = attributes[:'sellerCompartmentId'] if attributes[:'sellerCompartmentId']

      raise 'You cannot provide both :sellerCompartmentId and :seller_compartment_id' if attributes.key?(:'sellerCompartmentId') && attributes.key?(:'seller_compartment_id')

      self.seller_compartment_id = attributes[:'seller_compartment_id'] if attributes[:'seller_compartment_id']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.time_accept_by = attributes[:'timeAcceptBy'] if attributes[:'timeAcceptBy']

      raise 'You cannot provide both :timeAcceptBy and :time_accept_by' if attributes.key?(:'timeAcceptBy') && attributes.key?(:'time_accept_by')

      self.time_accept_by = attributes[:'time_accept_by'] if attributes[:'time_accept_by']

      self.time_accepted = attributes[:'timeAccepted'] if attributes[:'timeAccepted']

      raise 'You cannot provide both :timeAccepted and :time_accepted' if attributes.key?(:'timeAccepted') && attributes.key?(:'time_accepted')

      self.time_accepted = attributes[:'time_accepted'] if attributes[:'time_accepted']

      self.time_start_date = attributes[:'timeStartDate'] if attributes[:'timeStartDate']

      raise 'You cannot provide both :timeStartDate and :time_start_date' if attributes.key?(:'timeStartDate') && attributes.key?(:'time_start_date')

      self.time_start_date = attributes[:'time_start_date'] if attributes[:'time_start_date']

      self.time_offer_end = attributes[:'timeOfferEnd'] if attributes[:'timeOfferEnd']

      raise 'You cannot provide both :timeOfferEnd and :time_offer_end' if attributes.key?(:'timeOfferEnd') && attributes.key?(:'time_offer_end')

      self.time_offer_end = attributes[:'time_offer_end'] if attributes[:'time_offer_end']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.offer_status = attributes[:'offerStatus'] if attributes[:'offerStatus']

      raise 'You cannot provide both :offerStatus and :offer_status' if attributes.key?(:'offerStatus') && attributes.key?(:'offer_status')

      self.offer_status = attributes[:'offer_status'] if attributes[:'offer_status']

      self.buyer_information = attributes[:'buyerInformation'] if attributes[:'buyerInformation']

      raise 'You cannot provide both :buyerInformation and :buyer_information' if attributes.key?(:'buyerInformation') && attributes.key?(:'buyer_information')

      self.buyer_information = attributes[:'buyer_information'] if attributes[:'buyer_information']

      self.seller_information = attributes[:'sellerInformation'] if attributes[:'sellerInformation']

      raise 'You cannot provide both :sellerInformation and :seller_information' if attributes.key?(:'sellerInformation') && attributes.key?(:'seller_information')

      self.seller_information = attributes[:'seller_information'] if attributes[:'seller_information']

      self.pricing = attributes[:'pricing'] if attributes[:'pricing']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        buyer_compartment_id == other.buyer_compartment_id &&
        seller_compartment_id == other.seller_compartment_id &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        time_accept_by == other.time_accept_by &&
        time_accepted == other.time_accepted &&
        time_start_date == other.time_start_date &&
        time_offer_end == other.time_offer_end &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        offer_status == other.offer_status &&
        buyer_information == other.buyer_information &&
        seller_information == other.seller_information &&
        pricing == other.pricing &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, buyer_compartment_id, seller_compartment_id, time_created, time_updated, time_accept_by, time_accepted, time_start_date, time_offer_end, lifecycle_state, lifecycle_details, offer_status, buyer_information, seller_information, pricing, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
