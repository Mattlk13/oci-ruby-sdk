# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20211201
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Subscription information for compartmentId. Only root compartments are allowed.
  class FusionApps::Models::Subscription
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_DETAILS_ENUM = [
      LIFECYCLE_DETAILS_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_DETAILS_PURGED = 'PURGED'.freeze,
      LIFECYCLE_DETAILS_CANCELED = 'CANCELED'.freeze,
      LIFECYCLE_DETAILS_PAID_PURGED = 'PAID_PURGED'.freeze,
      LIFECYCLE_DETAILS_INITIALIZED = 'INITIALIZED'.freeze,
      LIFECYCLE_DETAILS_SOFT_TERMINATED = 'SOFT_TERMINATED'.freeze,
      LIFECYCLE_DETAILS_DISABLED = 'DISABLED'.freeze,
      LIFECYCLE_DETAILS_BEGIN_TERMINATION = 'BEGIN_TERMINATION'.freeze,
      LIFECYCLE_DETAILS_MIGRATED = 'MIGRATED'.freeze,
      LIFECYCLE_DETAILS_PENDING_CANCELATION = 'PENDING_CANCELATION'.freeze,
      LIFECYCLE_DETAILS_ARCHIVED = 'ARCHIVED'.freeze,
      LIFECYCLE_DETAILS_NON_RECOVERABLE = 'NON_RECOVERABLE'.freeze,
      LIFECYCLE_DETAILS_BEGIN_SOFT_TERMINATION = 'BEGIN_SOFT_TERMINATION'.freeze,
      LIFECYCLE_DETAILS_ACTIVATED = 'ACTIVATED'.freeze,
      LIFECYCLE_DETAILS_ACCESS_DISABLED = 'ACCESS_DISABLED'.freeze,
      LIFECYCLE_DETAILS_PENDING_REGISTRATION = 'PENDING_REGISTRATION'.freeze,
      LIFECYCLE_DETAILS_TERMINATED = 'TERMINATED'.freeze,
      LIFECYCLE_DETAILS_RELOCATING = 'RELOCATING'.freeze,
      LIFECYCLE_DETAILS_DEPROVISIONED = 'DEPROVISIONED'.freeze,
      LIFECYCLE_DETAILS_PROVISIONED = 'PROVISIONED'.freeze,
      LIFECYCLE_DETAILS_BEGIN_TERMINATION_PASSIVE = 'BEGIN_TERMINATION_PASSIVE'.freeze,
      LIFECYCLE_DETAILS_LOCKED = 'LOCKED'.freeze,
      LIFECYCLE_DETAILS_PENDING_DEPROVISIONING = 'PENDING_DEPROVISIONING'.freeze,
      LIFECYCLE_DETAILS_REGISTERED = 'REGISTERED'.freeze,
      LIFECYCLE_DETAILS_CANCELLED = 'CANCELLED'.freeze,
      LIFECYCLE_DETAILS_EXPIRED = 'EXPIRED'.freeze,
      LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** OCID of the subscription details for particular root compartment or tenancy.
    # @return [String]
    attr_accessor :id

    # **[Required]** Subscription id.
    # @return [String]
    attr_accessor :classic_subscription_id

    # **[Required]** The type of subscription, such as 'CLOUDCM'/'SAAS'/'CRM', etc.
    # @return [String]
    attr_accessor :service_name

    # Lifecycle state of the subscription.
    # @return [String]
    attr_reader :lifecycle_state

    # Subscription resource intermediate states.
    # @return [String]
    attr_reader :lifecycle_details

    # **[Required]** Stock keeping unit.
    # @return [Array<OCI::FusionApps::Models::SubscriptionSku>]
    attr_accessor :skus

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'classic_subscription_id': :'classicSubscriptionId',
        'service_name': :'serviceName',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'skus': :'skus'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'classic_subscription_id': :'String',
        'service_name': :'String',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'skus': :'Array<OCI::FusionApps::Models::SubscriptionSku>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :classic_subscription_id The value to assign to the {#classic_subscription_id} property
    # @option attributes [String] :service_name The value to assign to the {#service_name} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [Array<OCI::FusionApps::Models::SubscriptionSku>] :skus The value to assign to the {#skus} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.classic_subscription_id = attributes[:'classicSubscriptionId'] if attributes[:'classicSubscriptionId']

      raise 'You cannot provide both :classicSubscriptionId and :classic_subscription_id' if attributes.key?(:'classicSubscriptionId') && attributes.key?(:'classic_subscription_id')

      self.classic_subscription_id = attributes[:'classic_subscription_id'] if attributes[:'classic_subscription_id']

      self.service_name = attributes[:'serviceName'] if attributes[:'serviceName']

      raise 'You cannot provide both :serviceName and :service_name' if attributes.key?(:'serviceName') && attributes.key?(:'service_name')

      self.service_name = attributes[:'service_name'] if attributes[:'service_name']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.skus = attributes[:'skus'] if attributes[:'skus']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_details Object to be assigned
    def lifecycle_details=(lifecycle_details)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_details && !LIFECYCLE_DETAILS_ENUM.include?(lifecycle_details)
        OCI.logger.debug("Unknown value for 'lifecycle_details' [" + lifecycle_details + "]. Mapping to 'LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_details = LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_details = lifecycle_details
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        classic_subscription_id == other.classic_subscription_id &&
        service_name == other.service_name &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        skus == other.skus
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, classic_subscription_id, service_name, lifecycle_state, lifecycle_details, skus].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
