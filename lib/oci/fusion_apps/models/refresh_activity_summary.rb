# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20211201
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of the refresh activity.
  class FusionApps::Models::RefreshActivitySummary
    # **[Required]** The unique identifier (OCID) of the refresh activity. Can't be changed after creation.
    # @return [String]
    attr_accessor :id

    # **[Required]** A friendly name for the refresh activity. Can be changed later.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The OCID of the Fusion environment that is the source environment for the refresh.
    # @return [String]
    attr_accessor :source_fusion_environment_id

    # The date and time of the most recent source environment backup used for the environment refresh.
    # @return [DateTime]
    attr_accessor :time_of_restoration_point

    # **[Required]** The current state of the refresh activity. Valid values are Scheduled, In progress , Failed, Completed.
    # @return [String]
    attr_accessor :lifecycle_state

    # **[Required]** The time the refresh activity is scheduled to start. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_scheduled_start

    # **[Required]** The time the refresh activity is scheduled to end. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_expected_finish

    # The time the refresh activity actually completed / cancelled / failed. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_finished

    # **[Required]** Service availability / impact during refresh activity execution, up down
    # @return [String]
    attr_accessor :service_availability

    # The time the refresh activity record was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_accepted

    # The time the refresh activity record was updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # Represents if the customer opted for Data Masking or not during refreshActivity.
    # @return [BOOLEAN]
    attr_accessor :is_data_masking_opted

    # A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
    # @return [String]
    attr_accessor :lifecycle_details

    # Details of refresh investigation information, each item represents a different issue.
    # @return [Array<OCI::FusionApps::Models::RefreshIssueDetails>]
    attr_accessor :refresh_issue_details_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'source_fusion_environment_id': :'sourceFusionEnvironmentId',
        'time_of_restoration_point': :'timeOfRestorationPoint',
        'lifecycle_state': :'lifecycleState',
        'time_scheduled_start': :'timeScheduledStart',
        'time_expected_finish': :'timeExpectedFinish',
        'time_finished': :'timeFinished',
        'service_availability': :'serviceAvailability',
        'time_accepted': :'timeAccepted',
        'time_updated': :'timeUpdated',
        'is_data_masking_opted': :'isDataMaskingOpted',
        'lifecycle_details': :'lifecycleDetails',
        'refresh_issue_details_list': :'refreshIssueDetailsList'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'source_fusion_environment_id': :'String',
        'time_of_restoration_point': :'DateTime',
        'lifecycle_state': :'String',
        'time_scheduled_start': :'DateTime',
        'time_expected_finish': :'DateTime',
        'time_finished': :'DateTime',
        'service_availability': :'String',
        'time_accepted': :'DateTime',
        'time_updated': :'DateTime',
        'is_data_masking_opted': :'BOOLEAN',
        'lifecycle_details': :'String',
        'refresh_issue_details_list': :'Array<OCI::FusionApps::Models::RefreshIssueDetails>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :source_fusion_environment_id The value to assign to the {#source_fusion_environment_id} property
    # @option attributes [DateTime] :time_of_restoration_point The value to assign to the {#time_of_restoration_point} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [DateTime] :time_scheduled_start The value to assign to the {#time_scheduled_start} property
    # @option attributes [DateTime] :time_expected_finish The value to assign to the {#time_expected_finish} property
    # @option attributes [DateTime] :time_finished The value to assign to the {#time_finished} property
    # @option attributes [String] :service_availability The value to assign to the {#service_availability} property
    # @option attributes [DateTime] :time_accepted The value to assign to the {#time_accepted} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [BOOLEAN] :is_data_masking_opted The value to assign to the {#is_data_masking_opted} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [Array<OCI::FusionApps::Models::RefreshIssueDetails>] :refresh_issue_details_list The value to assign to the {#refresh_issue_details_list} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.source_fusion_environment_id = attributes[:'sourceFusionEnvironmentId'] if attributes[:'sourceFusionEnvironmentId']

      raise 'You cannot provide both :sourceFusionEnvironmentId and :source_fusion_environment_id' if attributes.key?(:'sourceFusionEnvironmentId') && attributes.key?(:'source_fusion_environment_id')

      self.source_fusion_environment_id = attributes[:'source_fusion_environment_id'] if attributes[:'source_fusion_environment_id']

      self.time_of_restoration_point = attributes[:'timeOfRestorationPoint'] if attributes[:'timeOfRestorationPoint']

      raise 'You cannot provide both :timeOfRestorationPoint and :time_of_restoration_point' if attributes.key?(:'timeOfRestorationPoint') && attributes.key?(:'time_of_restoration_point')

      self.time_of_restoration_point = attributes[:'time_of_restoration_point'] if attributes[:'time_of_restoration_point']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.time_scheduled_start = attributes[:'timeScheduledStart'] if attributes[:'timeScheduledStart']

      raise 'You cannot provide both :timeScheduledStart and :time_scheduled_start' if attributes.key?(:'timeScheduledStart') && attributes.key?(:'time_scheduled_start')

      self.time_scheduled_start = attributes[:'time_scheduled_start'] if attributes[:'time_scheduled_start']

      self.time_expected_finish = attributes[:'timeExpectedFinish'] if attributes[:'timeExpectedFinish']

      raise 'You cannot provide both :timeExpectedFinish and :time_expected_finish' if attributes.key?(:'timeExpectedFinish') && attributes.key?(:'time_expected_finish')

      self.time_expected_finish = attributes[:'time_expected_finish'] if attributes[:'time_expected_finish']

      self.time_finished = attributes[:'timeFinished'] if attributes[:'timeFinished']

      raise 'You cannot provide both :timeFinished and :time_finished' if attributes.key?(:'timeFinished') && attributes.key?(:'time_finished')

      self.time_finished = attributes[:'time_finished'] if attributes[:'time_finished']

      self.service_availability = attributes[:'serviceAvailability'] if attributes[:'serviceAvailability']

      raise 'You cannot provide both :serviceAvailability and :service_availability' if attributes.key?(:'serviceAvailability') && attributes.key?(:'service_availability')

      self.service_availability = attributes[:'service_availability'] if attributes[:'service_availability']

      self.time_accepted = attributes[:'timeAccepted'] if attributes[:'timeAccepted']

      raise 'You cannot provide both :timeAccepted and :time_accepted' if attributes.key?(:'timeAccepted') && attributes.key?(:'time_accepted')

      self.time_accepted = attributes[:'time_accepted'] if attributes[:'time_accepted']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.is_data_masking_opted = attributes[:'isDataMaskingOpted'] unless attributes[:'isDataMaskingOpted'].nil?
      self.is_data_masking_opted = false if is_data_masking_opted.nil? && !attributes.key?(:'isDataMaskingOpted') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDataMaskingOpted and :is_data_masking_opted' if attributes.key?(:'isDataMaskingOpted') && attributes.key?(:'is_data_masking_opted')

      self.is_data_masking_opted = attributes[:'is_data_masking_opted'] unless attributes[:'is_data_masking_opted'].nil?
      self.is_data_masking_opted = false if is_data_masking_opted.nil? && !attributes.key?(:'isDataMaskingOpted') && !attributes.key?(:'is_data_masking_opted') # rubocop:disable Style/StringLiterals

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.refresh_issue_details_list = attributes[:'refreshIssueDetailsList'] if attributes[:'refreshIssueDetailsList']

      raise 'You cannot provide both :refreshIssueDetailsList and :refresh_issue_details_list' if attributes.key?(:'refreshIssueDetailsList') && attributes.key?(:'refresh_issue_details_list')

      self.refresh_issue_details_list = attributes[:'refresh_issue_details_list'] if attributes[:'refresh_issue_details_list']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        source_fusion_environment_id == other.source_fusion_environment_id &&
        time_of_restoration_point == other.time_of_restoration_point &&
        lifecycle_state == other.lifecycle_state &&
        time_scheduled_start == other.time_scheduled_start &&
        time_expected_finish == other.time_expected_finish &&
        time_finished == other.time_finished &&
        service_availability == other.service_availability &&
        time_accepted == other.time_accepted &&
        time_updated == other.time_updated &&
        is_data_masking_opted == other.is_data_masking_opted &&
        lifecycle_details == other.lifecycle_details &&
        refresh_issue_details_list == other.refresh_issue_details_list
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, source_fusion_environment_id, time_of_restoration_point, lifecycle_state, time_scheduled_start, time_expected_finish, time_finished, service_availability, time_accepted, time_updated, is_data_masking_opted, lifecycle_details, refresh_issue_details_list].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
