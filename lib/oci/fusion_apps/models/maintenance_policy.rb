# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20211201
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The policy that specifies the maintenance and upgrade preferences for an environment. For more information about the options, see [Understanding Environment Maintenance](https://docs.cloud.oracle.com/iaas/Content/fusion-applications/plan-environment-family.htm#about-env-maintenance).
  class FusionApps::Models::MaintenancePolicy
    MONTHLY_PATCHING_OVERRIDE_ENUM = [
      MONTHLY_PATCHING_OVERRIDE_ENABLED = 'ENABLED'.freeze,
      MONTHLY_PATCHING_OVERRIDE_DISABLED = 'DISABLED'.freeze,
      MONTHLY_PATCHING_OVERRIDE_NONE = 'NONE'.freeze
    ].freeze

    ENVIRONMENT_MAINTENANCE_OVERRIDE_ENUM = [
      ENVIRONMENT_MAINTENANCE_OVERRIDE_PROD = 'PROD'.freeze,
      ENVIRONMENT_MAINTENANCE_OVERRIDE_NON_PROD = 'NON_PROD'.freeze,
      ENVIRONMENT_MAINTENANCE_OVERRIDE_NONE = 'NONE'.freeze
    ].freeze

    # When \"ENABLED\", the Fusion environment is patched monthly. When \"DISABLED\", the Fusion environment is not patched monthly. This setting overrides the environment family setting. When not set, the environment follows the environment family policy.
    # @return [String]
    attr_reader :monthly_patching_override

    # User choice to upgrade both test and prod pods at the same time. Overrides fusion environment families'.
    # @return [String]
    attr_reader :environment_maintenance_override

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'monthly_patching_override': :'monthlyPatchingOverride',
        'environment_maintenance_override': :'environmentMaintenanceOverride'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'monthly_patching_override': :'String',
        'environment_maintenance_override': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :monthly_patching_override The value to assign to the {#monthly_patching_override} property
    # @option attributes [String] :environment_maintenance_override The value to assign to the {#environment_maintenance_override} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.monthly_patching_override = attributes[:'monthlyPatchingOverride'] if attributes[:'monthlyPatchingOverride']
      self.monthly_patching_override = "NONE" if monthly_patching_override.nil? && !attributes.key?(:'monthlyPatchingOverride') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :monthlyPatchingOverride and :monthly_patching_override' if attributes.key?(:'monthlyPatchingOverride') && attributes.key?(:'monthly_patching_override')

      self.monthly_patching_override = attributes[:'monthly_patching_override'] if attributes[:'monthly_patching_override']
      self.monthly_patching_override = "NONE" if monthly_patching_override.nil? && !attributes.key?(:'monthlyPatchingOverride') && !attributes.key?(:'monthly_patching_override') # rubocop:disable Style/StringLiterals

      self.environment_maintenance_override = attributes[:'environmentMaintenanceOverride'] if attributes[:'environmentMaintenanceOverride']
      self.environment_maintenance_override = "NONE" if environment_maintenance_override.nil? && !attributes.key?(:'environmentMaintenanceOverride') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :environmentMaintenanceOverride and :environment_maintenance_override' if attributes.key?(:'environmentMaintenanceOverride') && attributes.key?(:'environment_maintenance_override')

      self.environment_maintenance_override = attributes[:'environment_maintenance_override'] if attributes[:'environment_maintenance_override']
      self.environment_maintenance_override = "NONE" if environment_maintenance_override.nil? && !attributes.key?(:'environmentMaintenanceOverride') && !attributes.key?(:'environment_maintenance_override') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] monthly_patching_override Object to be assigned
    def monthly_patching_override=(monthly_patching_override)
      raise "Invalid value for 'monthly_patching_override': this must be one of the values in MONTHLY_PATCHING_OVERRIDE_ENUM." if monthly_patching_override && !MONTHLY_PATCHING_OVERRIDE_ENUM.include?(monthly_patching_override)

      @monthly_patching_override = monthly_patching_override
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] environment_maintenance_override Object to be assigned
    def environment_maintenance_override=(environment_maintenance_override)
      raise "Invalid value for 'environment_maintenance_override': this must be one of the values in ENVIRONMENT_MAINTENANCE_OVERRIDE_ENUM." if environment_maintenance_override && !ENVIRONMENT_MAINTENANCE_OVERRIDE_ENUM.include?(environment_maintenance_override)

      @environment_maintenance_override = environment_maintenance_override
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        monthly_patching_override == other.monthly_patching_override &&
        environment_maintenance_override == other.environment_maintenance_override
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [monthly_patching_override, environment_maintenance_override].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
