# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Multi Factor Authentication Settings for Tenant
  class IdentityDomains::Models::AuthenticationFactorSetting
    IDCS_PREVENTED_OPERATIONS_ENUM = [
      IDCS_PREVENTED_OPERATIONS_REPLACE = 'replace'.freeze,
      IDCS_PREVENTED_OPERATIONS_UPDATE = 'update'.freeze,
      IDCS_PREVENTED_OPERATIONS_DELETE = 'delete'.freeze,
      IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    USER_ENROLLMENT_DISABLED_FACTORS_ENUM = [
      USER_ENROLLMENT_DISABLED_FACTORS_EMAIL = 'EMAIL'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_SMS = 'SMS'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_TOTP = 'TOTP'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_PUSH = 'PUSH'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_OFFLINETOTP = 'OFFLINETOTP'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_VOICE = 'VOICE'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_PHONE_CALL = 'PHONE_CALL'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_THIRDPARTY = 'THIRDPARTY'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_FIDO_AUTHENTICATOR = 'FIDO_AUTHENTICATOR'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_YUBICO_OTP = 'YUBICO_OTP'.freeze,
      USER_ENROLLMENT_DISABLED_FACTORS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :id

    # Unique OCI identifier for the SCIM Resource.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :ocid

    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # @return [OCI::IdentityDomains::Models::Meta]
    attr_accessor :meta

    # @return [OCI::IdentityDomains::Models::IdcsCreatedBy]
    attr_accessor :idcs_created_by

    # @return [OCI::IdentityDomains::Models::IdcsLastModifiedBy]
    attr_accessor :idcs_last_modified_by

    # Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :idcs_prevented_operations

    # A list of tags on this resource.
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::Tags>]
    attr_accessor :tags

    # A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :delete_in_progress

    # The release number when the resource was upgraded.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_last_upgraded_in_release

    # OCI Domain Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_ocid

    # OCI Compartment Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :compartment_ocid

    # OCI Tenant Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenancy_ocid

    # If true, indicates that the EMAIL channel is enabled for authentication
    #
    # **Added In:** 18.1.2
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :email_enabled

    # **[Required]** If true, indicates that the Short Message Service (SMS) channel is enabled for authentication
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :sms_enabled

    # If true, indicates that the phone (PHONE_CALL) channel is enabled for authentication
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :phone_call_enabled

    # **[Required]** If true, indicates that the Mobile App One Time Passcode channel is enabled for authentication
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :totp_enabled

    # **[Required]** If true, indicates that the Mobile App Push Notification channel is enabled for authentication
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :push_enabled

    # **[Required]** If true, indicates that Bypass Code is enabled for authentication
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :bypass_code_enabled

    # **[Required]** If true, indicates that Security Questions are enabled for authentication
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :security_questions_enabled

    # If true, indicates that the Fido Authenticator channels are enabled for authentication
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :fido_authenticator_enabled

    # If true, indicates that the Yubico OTP is enabled for authentication
    #
    # **Added In:** 2109090424
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :yubico_otp_enabled

    # **[Required]** Specifies if Multi-Factor Authentication enrollment is mandatory or optional for a user
    #
    # **Deprecated Since: 18.1.2**
    #
    # **SCIM++ Properties:**
    #  - idcsCanonicalValueSourceFilter: attrName eq \"mfaEnrollmentType\" and attrValues.value eq \"$(mfaEnrollmentType)\"
    #  - idcsCanonicalValueSourceResourceType: AllowedValue
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :mfa_enrollment_type

    # Specifies the category of people for whom Multi-Factor Authentication is enabled. This is a readOnly attribute which reflects the value of mfaEnabledCategory attribute in SsoSettings
    #
    # **Deprecated Since: 18.1.2**
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :mfa_enabled_category

    # If true, indicates that 'Show backup factor(s)' button will be hidden during authentication
    #
    # **Added In:** 19.3.3
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :hide_backup_factor_enabled

    # If true, indicates that email will not be enrolled as a MFA factor automatically if it a account recovery factor
    #
    # **Added In:** 2011192329
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :auto_enroll_email_factor_disabled

    # Factors for which enrollment should be blocked for End User
    #
    # **Added In:** 2012271618
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :user_enrollment_disabled_factors

    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsEmailSettings]
    attr_accessor :email_settings

    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsThirdPartyFactor]
    attr_accessor :third_party_factor

    # This attribute is required.
    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsNotificationSettings]
    attr_accessor :notification_settings

    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsIdentityStoreSettings]
    attr_accessor :identity_store_settings

    # This attribute is required.
    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsBypassCodeSettings]
    attr_accessor :bypass_code_settings

    # This attribute is required.
    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsClientAppSettings]
    attr_accessor :client_app_settings

    # This attribute is required.
    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsEndpointRestrictions]
    attr_accessor :endpoint_restrictions

    # **[Required]** Compliance Policy that defines actions to be taken when a condition is violated
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [name]
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::AuthenticationFactorSettingsCompliancePolicy>]
    attr_accessor :compliance_policy

    # This attribute is required.
    # @return [OCI::IdentityDomains::Models::AuthenticationFactorSettingsTotpSettings]
    attr_accessor :totp_settings

    # @return [OCI::IdentityDomains::Models::ExtensionThirdPartyAuthenticationFactorSettings]
    attr_accessor :urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings

    # @return [OCI::IdentityDomains::Models::ExtensionFidoAuthenticationFactorSettings]
    attr_accessor :urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ocid': :'ocid',
        'schemas': :'schemas',
        'meta': :'meta',
        'idcs_created_by': :'idcsCreatedBy',
        'idcs_last_modified_by': :'idcsLastModifiedBy',
        'idcs_prevented_operations': :'idcsPreventedOperations',
        'tags': :'tags',
        'delete_in_progress': :'deleteInProgress',
        'idcs_last_upgraded_in_release': :'idcsLastUpgradedInRelease',
        'domain_ocid': :'domainOcid',
        'compartment_ocid': :'compartmentOcid',
        'tenancy_ocid': :'tenancyOcid',
        'email_enabled': :'emailEnabled',
        'sms_enabled': :'smsEnabled',
        'phone_call_enabled': :'phoneCallEnabled',
        'totp_enabled': :'totpEnabled',
        'push_enabled': :'pushEnabled',
        'bypass_code_enabled': :'bypassCodeEnabled',
        'security_questions_enabled': :'securityQuestionsEnabled',
        'fido_authenticator_enabled': :'fidoAuthenticatorEnabled',
        'yubico_otp_enabled': :'yubicoOtpEnabled',
        'mfa_enrollment_type': :'mfaEnrollmentType',
        'mfa_enabled_category': :'mfaEnabledCategory',
        'hide_backup_factor_enabled': :'hideBackupFactorEnabled',
        'auto_enroll_email_factor_disabled': :'autoEnrollEmailFactorDisabled',
        'user_enrollment_disabled_factors': :'userEnrollmentDisabledFactors',
        'email_settings': :'emailSettings',
        'third_party_factor': :'thirdPartyFactor',
        'notification_settings': :'notificationSettings',
        'identity_store_settings': :'identityStoreSettings',
        'bypass_code_settings': :'bypassCodeSettings',
        'client_app_settings': :'clientAppSettings',
        'endpoint_restrictions': :'endpointRestrictions',
        'compliance_policy': :'compliancePolicy',
        'totp_settings': :'totpSettings',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings': :'urn:ietf:params:scim:schemas:oracle:idcs:extension:thirdParty:AuthenticationFactorSettings',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings': :'urn:ietf:params:scim:schemas:oracle:idcs:extension:fido:AuthenticationFactorSettings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ocid': :'String',
        'schemas': :'Array<String>',
        'meta': :'OCI::IdentityDomains::Models::Meta',
        'idcs_created_by': :'OCI::IdentityDomains::Models::IdcsCreatedBy',
        'idcs_last_modified_by': :'OCI::IdentityDomains::Models::IdcsLastModifiedBy',
        'idcs_prevented_operations': :'Array<String>',
        'tags': :'Array<OCI::IdentityDomains::Models::Tags>',
        'delete_in_progress': :'BOOLEAN',
        'idcs_last_upgraded_in_release': :'String',
        'domain_ocid': :'String',
        'compartment_ocid': :'String',
        'tenancy_ocid': :'String',
        'email_enabled': :'BOOLEAN',
        'sms_enabled': :'BOOLEAN',
        'phone_call_enabled': :'BOOLEAN',
        'totp_enabled': :'BOOLEAN',
        'push_enabled': :'BOOLEAN',
        'bypass_code_enabled': :'BOOLEAN',
        'security_questions_enabled': :'BOOLEAN',
        'fido_authenticator_enabled': :'BOOLEAN',
        'yubico_otp_enabled': :'BOOLEAN',
        'mfa_enrollment_type': :'String',
        'mfa_enabled_category': :'String',
        'hide_backup_factor_enabled': :'BOOLEAN',
        'auto_enroll_email_factor_disabled': :'BOOLEAN',
        'user_enrollment_disabled_factors': :'Array<String>',
        'email_settings': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsEmailSettings',
        'third_party_factor': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsThirdPartyFactor',
        'notification_settings': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsNotificationSettings',
        'identity_store_settings': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsIdentityStoreSettings',
        'bypass_code_settings': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsBypassCodeSettings',
        'client_app_settings': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsClientAppSettings',
        'endpoint_restrictions': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsEndpointRestrictions',
        'compliance_policy': :'Array<OCI::IdentityDomains::Models::AuthenticationFactorSettingsCompliancePolicy>',
        'totp_settings': :'OCI::IdentityDomains::Models::AuthenticationFactorSettingsTotpSettings',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings': :'OCI::IdentityDomains::Models::ExtensionThirdPartyAuthenticationFactorSettings',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings': :'OCI::IdentityDomains::Models::ExtensionFidoAuthenticationFactorSettings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [OCI::IdentityDomains::Models::Meta] :meta The value to assign to the {#meta} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsCreatedBy] :idcs_created_by The value to assign to the {#idcs_created_by} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsLastModifiedBy] :idcs_last_modified_by The value to assign to the {#idcs_last_modified_by} property
    # @option attributes [Array<String>] :idcs_prevented_operations The value to assign to the {#idcs_prevented_operations} property
    # @option attributes [Array<OCI::IdentityDomains::Models::Tags>] :tags The value to assign to the {#tags} property
    # @option attributes [BOOLEAN] :delete_in_progress The value to assign to the {#delete_in_progress} property
    # @option attributes [String] :idcs_last_upgraded_in_release The value to assign to the {#idcs_last_upgraded_in_release} property
    # @option attributes [String] :domain_ocid The value to assign to the {#domain_ocid} property
    # @option attributes [String] :compartment_ocid The value to assign to the {#compartment_ocid} property
    # @option attributes [String] :tenancy_ocid The value to assign to the {#tenancy_ocid} property
    # @option attributes [BOOLEAN] :email_enabled The value to assign to the {#email_enabled} property
    # @option attributes [BOOLEAN] :sms_enabled The value to assign to the {#sms_enabled} property
    # @option attributes [BOOLEAN] :phone_call_enabled The value to assign to the {#phone_call_enabled} property
    # @option attributes [BOOLEAN] :totp_enabled The value to assign to the {#totp_enabled} property
    # @option attributes [BOOLEAN] :push_enabled The value to assign to the {#push_enabled} property
    # @option attributes [BOOLEAN] :bypass_code_enabled The value to assign to the {#bypass_code_enabled} property
    # @option attributes [BOOLEAN] :security_questions_enabled The value to assign to the {#security_questions_enabled} property
    # @option attributes [BOOLEAN] :fido_authenticator_enabled The value to assign to the {#fido_authenticator_enabled} property
    # @option attributes [BOOLEAN] :yubico_otp_enabled The value to assign to the {#yubico_otp_enabled} property
    # @option attributes [String] :mfa_enrollment_type The value to assign to the {#mfa_enrollment_type} property
    # @option attributes [String] :mfa_enabled_category The value to assign to the {#mfa_enabled_category} property
    # @option attributes [BOOLEAN] :hide_backup_factor_enabled The value to assign to the {#hide_backup_factor_enabled} property
    # @option attributes [BOOLEAN] :auto_enroll_email_factor_disabled The value to assign to the {#auto_enroll_email_factor_disabled} property
    # @option attributes [Array<String>] :user_enrollment_disabled_factors The value to assign to the {#user_enrollment_disabled_factors} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsEmailSettings] :email_settings The value to assign to the {#email_settings} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsThirdPartyFactor] :third_party_factor The value to assign to the {#third_party_factor} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsNotificationSettings] :notification_settings The value to assign to the {#notification_settings} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsIdentityStoreSettings] :identity_store_settings The value to assign to the {#identity_store_settings} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsBypassCodeSettings] :bypass_code_settings The value to assign to the {#bypass_code_settings} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsClientAppSettings] :client_app_settings The value to assign to the {#client_app_settings} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsEndpointRestrictions] :endpoint_restrictions The value to assign to the {#endpoint_restrictions} property
    # @option attributes [Array<OCI::IdentityDomains::Models::AuthenticationFactorSettingsCompliancePolicy>] :compliance_policy The value to assign to the {#compliance_policy} property
    # @option attributes [OCI::IdentityDomains::Models::AuthenticationFactorSettingsTotpSettings] :totp_settings The value to assign to the {#totp_settings} property
    # @option attributes [OCI::IdentityDomains::Models::ExtensionThirdPartyAuthenticationFactorSettings] :urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings The value to assign to the {#urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings} property
    # @option attributes [OCI::IdentityDomains::Models::ExtensionFidoAuthenticationFactorSettings] :urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings The value to assign to the {#urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.meta = attributes[:'meta'] if attributes[:'meta']

      self.idcs_created_by = attributes[:'idcsCreatedBy'] if attributes[:'idcsCreatedBy']

      raise 'You cannot provide both :idcsCreatedBy and :idcs_created_by' if attributes.key?(:'idcsCreatedBy') && attributes.key?(:'idcs_created_by')

      self.idcs_created_by = attributes[:'idcs_created_by'] if attributes[:'idcs_created_by']

      self.idcs_last_modified_by = attributes[:'idcsLastModifiedBy'] if attributes[:'idcsLastModifiedBy']

      raise 'You cannot provide both :idcsLastModifiedBy and :idcs_last_modified_by' if attributes.key?(:'idcsLastModifiedBy') && attributes.key?(:'idcs_last_modified_by')

      self.idcs_last_modified_by = attributes[:'idcs_last_modified_by'] if attributes[:'idcs_last_modified_by']

      self.idcs_prevented_operations = attributes[:'idcsPreventedOperations'] if attributes[:'idcsPreventedOperations']

      raise 'You cannot provide both :idcsPreventedOperations and :idcs_prevented_operations' if attributes.key?(:'idcsPreventedOperations') && attributes.key?(:'idcs_prevented_operations')

      self.idcs_prevented_operations = attributes[:'idcs_prevented_operations'] if attributes[:'idcs_prevented_operations']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.delete_in_progress = attributes[:'deleteInProgress'] unless attributes[:'deleteInProgress'].nil?

      raise 'You cannot provide both :deleteInProgress and :delete_in_progress' if attributes.key?(:'deleteInProgress') && attributes.key?(:'delete_in_progress')

      self.delete_in_progress = attributes[:'delete_in_progress'] unless attributes[:'delete_in_progress'].nil?

      self.idcs_last_upgraded_in_release = attributes[:'idcsLastUpgradedInRelease'] if attributes[:'idcsLastUpgradedInRelease']

      raise 'You cannot provide both :idcsLastUpgradedInRelease and :idcs_last_upgraded_in_release' if attributes.key?(:'idcsLastUpgradedInRelease') && attributes.key?(:'idcs_last_upgraded_in_release')

      self.idcs_last_upgraded_in_release = attributes[:'idcs_last_upgraded_in_release'] if attributes[:'idcs_last_upgraded_in_release']

      self.domain_ocid = attributes[:'domainOcid'] if attributes[:'domainOcid']

      raise 'You cannot provide both :domainOcid and :domain_ocid' if attributes.key?(:'domainOcid') && attributes.key?(:'domain_ocid')

      self.domain_ocid = attributes[:'domain_ocid'] if attributes[:'domain_ocid']

      self.compartment_ocid = attributes[:'compartmentOcid'] if attributes[:'compartmentOcid']

      raise 'You cannot provide both :compartmentOcid and :compartment_ocid' if attributes.key?(:'compartmentOcid') && attributes.key?(:'compartment_ocid')

      self.compartment_ocid = attributes[:'compartment_ocid'] if attributes[:'compartment_ocid']

      self.tenancy_ocid = attributes[:'tenancyOcid'] if attributes[:'tenancyOcid']

      raise 'You cannot provide both :tenancyOcid and :tenancy_ocid' if attributes.key?(:'tenancyOcid') && attributes.key?(:'tenancy_ocid')

      self.tenancy_ocid = attributes[:'tenancy_ocid'] if attributes[:'tenancy_ocid']

      self.email_enabled = attributes[:'emailEnabled'] unless attributes[:'emailEnabled'].nil?

      raise 'You cannot provide both :emailEnabled and :email_enabled' if attributes.key?(:'emailEnabled') && attributes.key?(:'email_enabled')

      self.email_enabled = attributes[:'email_enabled'] unless attributes[:'email_enabled'].nil?

      self.sms_enabled = attributes[:'smsEnabled'] unless attributes[:'smsEnabled'].nil?

      raise 'You cannot provide both :smsEnabled and :sms_enabled' if attributes.key?(:'smsEnabled') && attributes.key?(:'sms_enabled')

      self.sms_enabled = attributes[:'sms_enabled'] unless attributes[:'sms_enabled'].nil?

      self.phone_call_enabled = attributes[:'phoneCallEnabled'] unless attributes[:'phoneCallEnabled'].nil?

      raise 'You cannot provide both :phoneCallEnabled and :phone_call_enabled' if attributes.key?(:'phoneCallEnabled') && attributes.key?(:'phone_call_enabled')

      self.phone_call_enabled = attributes[:'phone_call_enabled'] unless attributes[:'phone_call_enabled'].nil?

      self.totp_enabled = attributes[:'totpEnabled'] unless attributes[:'totpEnabled'].nil?

      raise 'You cannot provide both :totpEnabled and :totp_enabled' if attributes.key?(:'totpEnabled') && attributes.key?(:'totp_enabled')

      self.totp_enabled = attributes[:'totp_enabled'] unless attributes[:'totp_enabled'].nil?

      self.push_enabled = attributes[:'pushEnabled'] unless attributes[:'pushEnabled'].nil?

      raise 'You cannot provide both :pushEnabled and :push_enabled' if attributes.key?(:'pushEnabled') && attributes.key?(:'push_enabled')

      self.push_enabled = attributes[:'push_enabled'] unless attributes[:'push_enabled'].nil?

      self.bypass_code_enabled = attributes[:'bypassCodeEnabled'] unless attributes[:'bypassCodeEnabled'].nil?

      raise 'You cannot provide both :bypassCodeEnabled and :bypass_code_enabled' if attributes.key?(:'bypassCodeEnabled') && attributes.key?(:'bypass_code_enabled')

      self.bypass_code_enabled = attributes[:'bypass_code_enabled'] unless attributes[:'bypass_code_enabled'].nil?

      self.security_questions_enabled = attributes[:'securityQuestionsEnabled'] unless attributes[:'securityQuestionsEnabled'].nil?

      raise 'You cannot provide both :securityQuestionsEnabled and :security_questions_enabled' if attributes.key?(:'securityQuestionsEnabled') && attributes.key?(:'security_questions_enabled')

      self.security_questions_enabled = attributes[:'security_questions_enabled'] unless attributes[:'security_questions_enabled'].nil?

      self.fido_authenticator_enabled = attributes[:'fidoAuthenticatorEnabled'] unless attributes[:'fidoAuthenticatorEnabled'].nil?

      raise 'You cannot provide both :fidoAuthenticatorEnabled and :fido_authenticator_enabled' if attributes.key?(:'fidoAuthenticatorEnabled') && attributes.key?(:'fido_authenticator_enabled')

      self.fido_authenticator_enabled = attributes[:'fido_authenticator_enabled'] unless attributes[:'fido_authenticator_enabled'].nil?

      self.yubico_otp_enabled = attributes[:'yubicoOtpEnabled'] unless attributes[:'yubicoOtpEnabled'].nil?

      raise 'You cannot provide both :yubicoOtpEnabled and :yubico_otp_enabled' if attributes.key?(:'yubicoOtpEnabled') && attributes.key?(:'yubico_otp_enabled')

      self.yubico_otp_enabled = attributes[:'yubico_otp_enabled'] unless attributes[:'yubico_otp_enabled'].nil?

      self.mfa_enrollment_type = attributes[:'mfaEnrollmentType'] if attributes[:'mfaEnrollmentType']

      raise 'You cannot provide both :mfaEnrollmentType and :mfa_enrollment_type' if attributes.key?(:'mfaEnrollmentType') && attributes.key?(:'mfa_enrollment_type')

      self.mfa_enrollment_type = attributes[:'mfa_enrollment_type'] if attributes[:'mfa_enrollment_type']

      self.mfa_enabled_category = attributes[:'mfaEnabledCategory'] if attributes[:'mfaEnabledCategory']

      raise 'You cannot provide both :mfaEnabledCategory and :mfa_enabled_category' if attributes.key?(:'mfaEnabledCategory') && attributes.key?(:'mfa_enabled_category')

      self.mfa_enabled_category = attributes[:'mfa_enabled_category'] if attributes[:'mfa_enabled_category']

      self.hide_backup_factor_enabled = attributes[:'hideBackupFactorEnabled'] unless attributes[:'hideBackupFactorEnabled'].nil?

      raise 'You cannot provide both :hideBackupFactorEnabled and :hide_backup_factor_enabled' if attributes.key?(:'hideBackupFactorEnabled') && attributes.key?(:'hide_backup_factor_enabled')

      self.hide_backup_factor_enabled = attributes[:'hide_backup_factor_enabled'] unless attributes[:'hide_backup_factor_enabled'].nil?

      self.auto_enroll_email_factor_disabled = attributes[:'autoEnrollEmailFactorDisabled'] unless attributes[:'autoEnrollEmailFactorDisabled'].nil?

      raise 'You cannot provide both :autoEnrollEmailFactorDisabled and :auto_enroll_email_factor_disabled' if attributes.key?(:'autoEnrollEmailFactorDisabled') && attributes.key?(:'auto_enroll_email_factor_disabled')

      self.auto_enroll_email_factor_disabled = attributes[:'auto_enroll_email_factor_disabled'] unless attributes[:'auto_enroll_email_factor_disabled'].nil?

      self.user_enrollment_disabled_factors = attributes[:'userEnrollmentDisabledFactors'] if attributes[:'userEnrollmentDisabledFactors']

      raise 'You cannot provide both :userEnrollmentDisabledFactors and :user_enrollment_disabled_factors' if attributes.key?(:'userEnrollmentDisabledFactors') && attributes.key?(:'user_enrollment_disabled_factors')

      self.user_enrollment_disabled_factors = attributes[:'user_enrollment_disabled_factors'] if attributes[:'user_enrollment_disabled_factors']

      self.email_settings = attributes[:'emailSettings'] if attributes[:'emailSettings']

      raise 'You cannot provide both :emailSettings and :email_settings' if attributes.key?(:'emailSettings') && attributes.key?(:'email_settings')

      self.email_settings = attributes[:'email_settings'] if attributes[:'email_settings']

      self.third_party_factor = attributes[:'thirdPartyFactor'] if attributes[:'thirdPartyFactor']

      raise 'You cannot provide both :thirdPartyFactor and :third_party_factor' if attributes.key?(:'thirdPartyFactor') && attributes.key?(:'third_party_factor')

      self.third_party_factor = attributes[:'third_party_factor'] if attributes[:'third_party_factor']

      self.notification_settings = attributes[:'notificationSettings'] if attributes[:'notificationSettings']

      raise 'You cannot provide both :notificationSettings and :notification_settings' if attributes.key?(:'notificationSettings') && attributes.key?(:'notification_settings')

      self.notification_settings = attributes[:'notification_settings'] if attributes[:'notification_settings']

      self.identity_store_settings = attributes[:'identityStoreSettings'] if attributes[:'identityStoreSettings']

      raise 'You cannot provide both :identityStoreSettings and :identity_store_settings' if attributes.key?(:'identityStoreSettings') && attributes.key?(:'identity_store_settings')

      self.identity_store_settings = attributes[:'identity_store_settings'] if attributes[:'identity_store_settings']

      self.bypass_code_settings = attributes[:'bypassCodeSettings'] if attributes[:'bypassCodeSettings']

      raise 'You cannot provide both :bypassCodeSettings and :bypass_code_settings' if attributes.key?(:'bypassCodeSettings') && attributes.key?(:'bypass_code_settings')

      self.bypass_code_settings = attributes[:'bypass_code_settings'] if attributes[:'bypass_code_settings']

      self.client_app_settings = attributes[:'clientAppSettings'] if attributes[:'clientAppSettings']

      raise 'You cannot provide both :clientAppSettings and :client_app_settings' if attributes.key?(:'clientAppSettings') && attributes.key?(:'client_app_settings')

      self.client_app_settings = attributes[:'client_app_settings'] if attributes[:'client_app_settings']

      self.endpoint_restrictions = attributes[:'endpointRestrictions'] if attributes[:'endpointRestrictions']

      raise 'You cannot provide both :endpointRestrictions and :endpoint_restrictions' if attributes.key?(:'endpointRestrictions') && attributes.key?(:'endpoint_restrictions')

      self.endpoint_restrictions = attributes[:'endpoint_restrictions'] if attributes[:'endpoint_restrictions']

      self.compliance_policy = attributes[:'compliancePolicy'] if attributes[:'compliancePolicy']

      raise 'You cannot provide both :compliancePolicy and :compliance_policy' if attributes.key?(:'compliancePolicy') && attributes.key?(:'compliance_policy')

      self.compliance_policy = attributes[:'compliance_policy'] if attributes[:'compliance_policy']

      self.totp_settings = attributes[:'totpSettings'] if attributes[:'totpSettings']

      raise 'You cannot provide both :totpSettings and :totp_settings' if attributes.key?(:'totpSettings') && attributes.key?(:'totp_settings')

      self.totp_settings = attributes[:'totp_settings'] if attributes[:'totp_settings']

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings = attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:thirdParty:AuthenticationFactorSettings'] if attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:thirdParty:AuthenticationFactorSettings']

      raise 'You cannot provide both :urn:ietf:params:scim:schemas:oracle:idcs:extension:thirdParty:AuthenticationFactorSettings and :urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings' if attributes.key?(:'urn:ietf:params:scim:schemas:oracle:idcs:extension:thirdParty:AuthenticationFactorSettings') && attributes.key?(:'urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings')

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings = attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings'] if attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings']

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings = attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:fido:AuthenticationFactorSettings'] if attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:fido:AuthenticationFactorSettings']

      raise 'You cannot provide both :urn:ietf:params:scim:schemas:oracle:idcs:extension:fido:AuthenticationFactorSettings and :urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings' if attributes.key?(:'urn:ietf:params:scim:schemas:oracle:idcs:extension:fido:AuthenticationFactorSettings') && attributes.key?(:'urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings')

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings = attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings'] if attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_prevented_operations Object to be assigned
    def idcs_prevented_operations=(idcs_prevented_operations)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_prevented_operations.nil?
        @idcs_prevented_operations = nil
      else
        @idcs_prevented_operations =
          idcs_prevented_operations.collect do |item|
            if IDCS_PREVENTED_OPERATIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'idcs_prevented_operations' [#{item}]. Mapping to 'IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_enrollment_disabled_factors Object to be assigned
    def user_enrollment_disabled_factors=(user_enrollment_disabled_factors)
      # rubocop:disable Style/ConditionalAssignment
      if user_enrollment_disabled_factors.nil?
        @user_enrollment_disabled_factors = nil
      else
        @user_enrollment_disabled_factors =
          user_enrollment_disabled_factors.collect do |item|
            if USER_ENROLLMENT_DISABLED_FACTORS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'user_enrollment_disabled_factors' [#{item}]. Mapping to 'USER_ENROLLMENT_DISABLED_FACTORS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              USER_ENROLLMENT_DISABLED_FACTORS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ocid == other.ocid &&
        schemas == other.schemas &&
        meta == other.meta &&
        idcs_created_by == other.idcs_created_by &&
        idcs_last_modified_by == other.idcs_last_modified_by &&
        idcs_prevented_operations == other.idcs_prevented_operations &&
        tags == other.tags &&
        delete_in_progress == other.delete_in_progress &&
        idcs_last_upgraded_in_release == other.idcs_last_upgraded_in_release &&
        domain_ocid == other.domain_ocid &&
        compartment_ocid == other.compartment_ocid &&
        tenancy_ocid == other.tenancy_ocid &&
        email_enabled == other.email_enabled &&
        sms_enabled == other.sms_enabled &&
        phone_call_enabled == other.phone_call_enabled &&
        totp_enabled == other.totp_enabled &&
        push_enabled == other.push_enabled &&
        bypass_code_enabled == other.bypass_code_enabled &&
        security_questions_enabled == other.security_questions_enabled &&
        fido_authenticator_enabled == other.fido_authenticator_enabled &&
        yubico_otp_enabled == other.yubico_otp_enabled &&
        mfa_enrollment_type == other.mfa_enrollment_type &&
        mfa_enabled_category == other.mfa_enabled_category &&
        hide_backup_factor_enabled == other.hide_backup_factor_enabled &&
        auto_enroll_email_factor_disabled == other.auto_enroll_email_factor_disabled &&
        user_enrollment_disabled_factors == other.user_enrollment_disabled_factors &&
        email_settings == other.email_settings &&
        third_party_factor == other.third_party_factor &&
        notification_settings == other.notification_settings &&
        identity_store_settings == other.identity_store_settings &&
        bypass_code_settings == other.bypass_code_settings &&
        client_app_settings == other.client_app_settings &&
        endpoint_restrictions == other.endpoint_restrictions &&
        compliance_policy == other.compliance_policy &&
        totp_settings == other.totp_settings &&
        urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings == other.urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings &&
        urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings == other.urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ocid, schemas, meta, idcs_created_by, idcs_last_modified_by, idcs_prevented_operations, tags, delete_in_progress, idcs_last_upgraded_in_release, domain_ocid, compartment_ocid, tenancy_ocid, email_enabled, sms_enabled, phone_call_enabled, totp_enabled, push_enabled, bypass_code_enabled, security_questions_enabled, fido_authenticator_enabled, yubico_otp_enabled, mfa_enrollment_type, mfa_enabled_category, hide_backup_factor_enabled, auto_enroll_email_factor_disabled, user_enrollment_disabled_factors, email_settings, third_party_factor, notification_settings, identity_store_settings, bypass_code_settings, client_app_settings, endpoint_restrictions, compliance_policy, totp_settings, urn_ietf_params_scim_schemas_oracle_idcs_extension_third_party_authentication_factor_settings, urn_ietf_params_scim_schemas_oracle_idcs_extension_fido_authentication_factor_settings].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
