# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This extension defines attributes specific to Apps that represent instances of an Oracle Public Cloud (OPC) service.
  class IdentityDomains::Models::AppExtensionOpcServiceApp
    CURRENT_FEDERATION_MODE_ENUM = [
      CURRENT_FEDERATION_MODE_NONE = 'None'.freeze,
      CURRENT_FEDERATION_MODE_APP_AS_SERVICE_PROVIDER = 'AppAsServiceProvider'.freeze,
      CURRENT_FEDERATION_MODE_APP_AS_IDENTITY_PROVIDER = 'AppAsIdentityProvider'.freeze,
      CURRENT_FEDERATION_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CURRENT_SYNCHRONIZATION_MODE_ENUM = [
      CURRENT_SYNCHRONIZATION_MODE_NONE = 'None'.freeze,
      CURRENT_SYNCHRONIZATION_MODE_APP_AS_TARGET = 'AppAsTarget'.freeze,
      CURRENT_SYNCHRONIZATION_MODE_APP_AS_SOURCE = 'AppAsSource'.freeze,
      CURRENT_SYNCHRONIZATION_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    NEXT_FEDERATION_MODE_ENUM = [
      NEXT_FEDERATION_MODE_NONE = 'None'.freeze,
      NEXT_FEDERATION_MODE_APP_AS_SERVICE_PROVIDER = 'AppAsServiceProvider'.freeze,
      NEXT_FEDERATION_MODE_APP_AS_IDENTITY_PROVIDER = 'AppAsIdentityProvider'.freeze,
      NEXT_FEDERATION_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    NEXT_SYNCHRONIZATION_MODE_ENUM = [
      NEXT_SYNCHRONIZATION_MODE_NONE = 'None'.freeze,
      NEXT_SYNCHRONIZATION_MODE_APP_AS_TARGET = 'AppAsTarget'.freeze,
      NEXT_SYNCHRONIZATION_MODE_APP_AS_SOURCE = 'AppAsSource'.freeze,
      NEXT_SYNCHRONIZATION_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # This value specifies the unique identifier assigned to an instance of an Oracle Public Cloud service app.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: server
    # @return [String]
    attr_accessor :service_instance_identifier

    # This value identifies the OPC region in which the service is running.
    #
    # **Added In:** 19.1.4
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :region

    # Current Federation Mode
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    # @return [String]
    attr_reader :current_federation_mode

    # Current Synchronization Mode
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    # @return [String]
    attr_reader :current_synchronization_mode

    # Next Federation Mode
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    # @return [String]
    attr_reader :next_federation_mode

    # Next Synchronization Mode
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    # @return [String]
    attr_reader :next_synchronization_mode

    # If true, indicates that enablement is in progress started but not completed
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :enabling_next_fed_sync_modes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'service_instance_identifier': :'serviceInstanceIdentifier',
        'region': :'region',
        'current_federation_mode': :'currentFederationMode',
        'current_synchronization_mode': :'currentSynchronizationMode',
        'next_federation_mode': :'nextFederationMode',
        'next_synchronization_mode': :'nextSynchronizationMode',
        'enabling_next_fed_sync_modes': :'enablingNextFedSyncModes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'service_instance_identifier': :'String',
        'region': :'String',
        'current_federation_mode': :'String',
        'current_synchronization_mode': :'String',
        'next_federation_mode': :'String',
        'next_synchronization_mode': :'String',
        'enabling_next_fed_sync_modes': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :service_instance_identifier The value to assign to the {#service_instance_identifier} property
    # @option attributes [String] :region The value to assign to the {#region} property
    # @option attributes [String] :current_federation_mode The value to assign to the {#current_federation_mode} property
    # @option attributes [String] :current_synchronization_mode The value to assign to the {#current_synchronization_mode} property
    # @option attributes [String] :next_federation_mode The value to assign to the {#next_federation_mode} property
    # @option attributes [String] :next_synchronization_mode The value to assign to the {#next_synchronization_mode} property
    # @option attributes [BOOLEAN] :enabling_next_fed_sync_modes The value to assign to the {#enabling_next_fed_sync_modes} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.service_instance_identifier = attributes[:'serviceInstanceIdentifier'] if attributes[:'serviceInstanceIdentifier']

      raise 'You cannot provide both :serviceInstanceIdentifier and :service_instance_identifier' if attributes.key?(:'serviceInstanceIdentifier') && attributes.key?(:'service_instance_identifier')

      self.service_instance_identifier = attributes[:'service_instance_identifier'] if attributes[:'service_instance_identifier']

      self.region = attributes[:'region'] if attributes[:'region']

      self.current_federation_mode = attributes[:'currentFederationMode'] if attributes[:'currentFederationMode']

      raise 'You cannot provide both :currentFederationMode and :current_federation_mode' if attributes.key?(:'currentFederationMode') && attributes.key?(:'current_federation_mode')

      self.current_federation_mode = attributes[:'current_federation_mode'] if attributes[:'current_federation_mode']

      self.current_synchronization_mode = attributes[:'currentSynchronizationMode'] if attributes[:'currentSynchronizationMode']

      raise 'You cannot provide both :currentSynchronizationMode and :current_synchronization_mode' if attributes.key?(:'currentSynchronizationMode') && attributes.key?(:'current_synchronization_mode')

      self.current_synchronization_mode = attributes[:'current_synchronization_mode'] if attributes[:'current_synchronization_mode']

      self.next_federation_mode = attributes[:'nextFederationMode'] if attributes[:'nextFederationMode']

      raise 'You cannot provide both :nextFederationMode and :next_federation_mode' if attributes.key?(:'nextFederationMode') && attributes.key?(:'next_federation_mode')

      self.next_federation_mode = attributes[:'next_federation_mode'] if attributes[:'next_federation_mode']

      self.next_synchronization_mode = attributes[:'nextSynchronizationMode'] if attributes[:'nextSynchronizationMode']

      raise 'You cannot provide both :nextSynchronizationMode and :next_synchronization_mode' if attributes.key?(:'nextSynchronizationMode') && attributes.key?(:'next_synchronization_mode')

      self.next_synchronization_mode = attributes[:'next_synchronization_mode'] if attributes[:'next_synchronization_mode']

      self.enabling_next_fed_sync_modes = attributes[:'enablingNextFedSyncModes'] unless attributes[:'enablingNextFedSyncModes'].nil?

      raise 'You cannot provide both :enablingNextFedSyncModes and :enabling_next_fed_sync_modes' if attributes.key?(:'enablingNextFedSyncModes') && attributes.key?(:'enabling_next_fed_sync_modes')

      self.enabling_next_fed_sync_modes = attributes[:'enabling_next_fed_sync_modes'] unless attributes[:'enabling_next_fed_sync_modes'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_federation_mode Object to be assigned
    def current_federation_mode=(current_federation_mode)
      # rubocop:disable Style/ConditionalAssignment
      if current_federation_mode && !CURRENT_FEDERATION_MODE_ENUM.include?(current_federation_mode)
        OCI.logger.debug("Unknown value for 'current_federation_mode' [" + current_federation_mode + "]. Mapping to 'CURRENT_FEDERATION_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @current_federation_mode = CURRENT_FEDERATION_MODE_UNKNOWN_ENUM_VALUE
      else
        @current_federation_mode = current_federation_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_synchronization_mode Object to be assigned
    def current_synchronization_mode=(current_synchronization_mode)
      # rubocop:disable Style/ConditionalAssignment
      if current_synchronization_mode && !CURRENT_SYNCHRONIZATION_MODE_ENUM.include?(current_synchronization_mode)
        OCI.logger.debug("Unknown value for 'current_synchronization_mode' [" + current_synchronization_mode + "]. Mapping to 'CURRENT_SYNCHRONIZATION_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @current_synchronization_mode = CURRENT_SYNCHRONIZATION_MODE_UNKNOWN_ENUM_VALUE
      else
        @current_synchronization_mode = current_synchronization_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_federation_mode Object to be assigned
    def next_federation_mode=(next_federation_mode)
      # rubocop:disable Style/ConditionalAssignment
      if next_federation_mode && !NEXT_FEDERATION_MODE_ENUM.include?(next_federation_mode)
        OCI.logger.debug("Unknown value for 'next_federation_mode' [" + next_federation_mode + "]. Mapping to 'NEXT_FEDERATION_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @next_federation_mode = NEXT_FEDERATION_MODE_UNKNOWN_ENUM_VALUE
      else
        @next_federation_mode = next_federation_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] next_synchronization_mode Object to be assigned
    def next_synchronization_mode=(next_synchronization_mode)
      # rubocop:disable Style/ConditionalAssignment
      if next_synchronization_mode && !NEXT_SYNCHRONIZATION_MODE_ENUM.include?(next_synchronization_mode)
        OCI.logger.debug("Unknown value for 'next_synchronization_mode' [" + next_synchronization_mode + "]. Mapping to 'NEXT_SYNCHRONIZATION_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @next_synchronization_mode = NEXT_SYNCHRONIZATION_MODE_UNKNOWN_ENUM_VALUE
      else
        @next_synchronization_mode = next_synchronization_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        service_instance_identifier == other.service_instance_identifier &&
        region == other.region &&
        current_federation_mode == other.current_federation_mode &&
        current_synchronization_mode == other.current_synchronization_mode &&
        next_federation_mode == other.next_federation_mode &&
        next_synchronization_mode == other.next_synchronization_mode &&
        enabling_next_fed_sync_modes == other.enabling_next_fed_sync_modes
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [service_instance_identifier, region, current_federation_mode, current_synchronization_mode, next_federation_mode, next_synchronization_mode, enabling_next_fed_sync_modes].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
