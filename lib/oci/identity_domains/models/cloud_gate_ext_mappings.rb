# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A list of Cloud Gate Mappings that map Apps to this Cloud Gate
  class IdentityDomains::Models::CloudGateExtMappings
    # The id of the Cloud Gate Mapping
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :mapping_id

    # **[Required]** Resource prefix for this mapping.  This will be used to define the location block
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :resource_prefix

    # NGINX ProxyPass entry for this Mapping
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :proxy_pass

    # **[Required]** Server Instance for the Mapping. This is one of the server IDs(server blocks) from the associated Cloud Gate list
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :server_id

    # More NGINX Settings. JSON encoded key value pairs similar to WTP encoding
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :nginx_settings

    # The ID of the App being mapped to
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :app_id

    # The id of the App being mapped to
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :value

    # The name (Client ID) of the App being mapped to
    #
    # **Added In:** 19.2.1
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :name

    # URI of the App being mapped to
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: reference
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ref

    # The Web Tier policy name used for the App that is mapped to this Cloud Gate
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :policy_name

    # Upstream server group instance for the Mapping. This is one of the upstream server group IDs(upstream blocks) from the associated Cloud Gate list
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :upstream_server_group_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'mapping_id': :'mappingId',
        'resource_prefix': :'resourcePrefix',
        'proxy_pass': :'proxyPass',
        'server_id': :'serverId',
        'nginx_settings': :'nginxSettings',
        'app_id': :'appId',
        'value': :'value',
        'name': :'name',
        'ref': :'$ref',
        'policy_name': :'policyName',
        'upstream_server_group_id': :'upstreamServerGroupId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'mapping_id': :'String',
        'resource_prefix': :'String',
        'proxy_pass': :'String',
        'server_id': :'String',
        'nginx_settings': :'String',
        'app_id': :'String',
        'value': :'String',
        'name': :'String',
        'ref': :'String',
        'policy_name': :'String',
        'upstream_server_group_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :mapping_id The value to assign to the {#mapping_id} property
    # @option attributes [String] :resource_prefix The value to assign to the {#resource_prefix} property
    # @option attributes [String] :proxy_pass The value to assign to the {#proxy_pass} property
    # @option attributes [String] :server_id The value to assign to the {#server_id} property
    # @option attributes [String] :nginx_settings The value to assign to the {#nginx_settings} property
    # @option attributes [String] :app_id The value to assign to the {#app_id} property
    # @option attributes [String] :value The value to assign to the {#value} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :ref The value to assign to the {#ref} property
    # @option attributes [String] :policy_name The value to assign to the {#policy_name} property
    # @option attributes [String] :upstream_server_group_id The value to assign to the {#upstream_server_group_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.mapping_id = attributes[:'mappingId'] if attributes[:'mappingId']

      raise 'You cannot provide both :mappingId and :mapping_id' if attributes.key?(:'mappingId') && attributes.key?(:'mapping_id')

      self.mapping_id = attributes[:'mapping_id'] if attributes[:'mapping_id']

      self.resource_prefix = attributes[:'resourcePrefix'] if attributes[:'resourcePrefix']

      raise 'You cannot provide both :resourcePrefix and :resource_prefix' if attributes.key?(:'resourcePrefix') && attributes.key?(:'resource_prefix')

      self.resource_prefix = attributes[:'resource_prefix'] if attributes[:'resource_prefix']

      self.proxy_pass = attributes[:'proxyPass'] if attributes[:'proxyPass']

      raise 'You cannot provide both :proxyPass and :proxy_pass' if attributes.key?(:'proxyPass') && attributes.key?(:'proxy_pass')

      self.proxy_pass = attributes[:'proxy_pass'] if attributes[:'proxy_pass']

      self.server_id = attributes[:'serverId'] if attributes[:'serverId']

      raise 'You cannot provide both :serverId and :server_id' if attributes.key?(:'serverId') && attributes.key?(:'server_id')

      self.server_id = attributes[:'server_id'] if attributes[:'server_id']

      self.nginx_settings = attributes[:'nginxSettings'] if attributes[:'nginxSettings']

      raise 'You cannot provide both :nginxSettings and :nginx_settings' if attributes.key?(:'nginxSettings') && attributes.key?(:'nginx_settings')

      self.nginx_settings = attributes[:'nginx_settings'] if attributes[:'nginx_settings']

      self.app_id = attributes[:'appId'] if attributes[:'appId']

      raise 'You cannot provide both :appId and :app_id' if attributes.key?(:'appId') && attributes.key?(:'app_id')

      self.app_id = attributes[:'app_id'] if attributes[:'app_id']

      self.value = attributes[:'value'] if attributes[:'value']

      self.name = attributes[:'name'] if attributes[:'name']

      self.ref = attributes[:'$ref'] if attributes[:'$ref']

      self.policy_name = attributes[:'policyName'] if attributes[:'policyName']

      raise 'You cannot provide both :policyName and :policy_name' if attributes.key?(:'policyName') && attributes.key?(:'policy_name')

      self.policy_name = attributes[:'policy_name'] if attributes[:'policy_name']

      self.upstream_server_group_id = attributes[:'upstreamServerGroupId'] if attributes[:'upstreamServerGroupId']

      raise 'You cannot provide both :upstreamServerGroupId and :upstream_server_group_id' if attributes.key?(:'upstreamServerGroupId') && attributes.key?(:'upstream_server_group_id')

      self.upstream_server_group_id = attributes[:'upstream_server_group_id'] if attributes[:'upstream_server_group_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        mapping_id == other.mapping_id &&
        resource_prefix == other.resource_prefix &&
        proxy_pass == other.proxy_pass &&
        server_id == other.server_id &&
        nginx_settings == other.nginx_settings &&
        app_id == other.app_id &&
        value == other.value &&
        name == other.name &&
        ref == other.ref &&
        policy_name == other.policy_name &&
        upstream_server_group_id == other.upstream_server_group_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [mapping_id, resource_prefix, proxy_pass, server_id, nginx_settings, app_id, value, name, ref, policy_name, upstream_server_group_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
