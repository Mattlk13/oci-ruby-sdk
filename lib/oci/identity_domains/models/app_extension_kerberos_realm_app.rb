# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Kerberos Realm
  class IdentityDomains::Models::AppExtensionKerberosRealmApp
    # The name of the Kerberos Realm that this App uses for authentication.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :realm_name

    # The primary key that the system should use to encrypt artifacts that are specific to this Kerberos realm -- for example, to encrypt the Principal Key in each KerberosRealmUser.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - idcsSensitive: none
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :master_key

    # The type of salt that the system will use to encrypt Kerberos-specific artifacts of this App unless another type of salt is specified.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :default_encryption_salt_type

    # The types of salt that are available for the system to use when encrypting Kerberos-specific artifacts for this App.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :supported_encryption_salt_types

    # Ticket Flags
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :ticket_flags

    # Max Ticket Life in seconds
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_ticket_life

    # Max Renewable Age in seconds
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_renewable_age

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'realm_name': :'realmName',
        'master_key': :'masterKey',
        'default_encryption_salt_type': :'defaultEncryptionSaltType',
        'supported_encryption_salt_types': :'supportedEncryptionSaltTypes',
        'ticket_flags': :'ticketFlags',
        'max_ticket_life': :'maxTicketLife',
        'max_renewable_age': :'maxRenewableAge'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'realm_name': :'String',
        'master_key': :'String',
        'default_encryption_salt_type': :'String',
        'supported_encryption_salt_types': :'Array<String>',
        'ticket_flags': :'Integer',
        'max_ticket_life': :'Integer',
        'max_renewable_age': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :realm_name The value to assign to the {#realm_name} property
    # @option attributes [String] :master_key The value to assign to the {#master_key} property
    # @option attributes [String] :default_encryption_salt_type The value to assign to the {#default_encryption_salt_type} property
    # @option attributes [Array<String>] :supported_encryption_salt_types The value to assign to the {#supported_encryption_salt_types} property
    # @option attributes [Integer] :ticket_flags The value to assign to the {#ticket_flags} property
    # @option attributes [Integer] :max_ticket_life The value to assign to the {#max_ticket_life} property
    # @option attributes [Integer] :max_renewable_age The value to assign to the {#max_renewable_age} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.realm_name = attributes[:'realmName'] if attributes[:'realmName']

      raise 'You cannot provide both :realmName and :realm_name' if attributes.key?(:'realmName') && attributes.key?(:'realm_name')

      self.realm_name = attributes[:'realm_name'] if attributes[:'realm_name']

      self.master_key = attributes[:'masterKey'] if attributes[:'masterKey']

      raise 'You cannot provide both :masterKey and :master_key' if attributes.key?(:'masterKey') && attributes.key?(:'master_key')

      self.master_key = attributes[:'master_key'] if attributes[:'master_key']

      self.default_encryption_salt_type = attributes[:'defaultEncryptionSaltType'] if attributes[:'defaultEncryptionSaltType']

      raise 'You cannot provide both :defaultEncryptionSaltType and :default_encryption_salt_type' if attributes.key?(:'defaultEncryptionSaltType') && attributes.key?(:'default_encryption_salt_type')

      self.default_encryption_salt_type = attributes[:'default_encryption_salt_type'] if attributes[:'default_encryption_salt_type']

      self.supported_encryption_salt_types = attributes[:'supportedEncryptionSaltTypes'] if attributes[:'supportedEncryptionSaltTypes']

      raise 'You cannot provide both :supportedEncryptionSaltTypes and :supported_encryption_salt_types' if attributes.key?(:'supportedEncryptionSaltTypes') && attributes.key?(:'supported_encryption_salt_types')

      self.supported_encryption_salt_types = attributes[:'supported_encryption_salt_types'] if attributes[:'supported_encryption_salt_types']

      self.ticket_flags = attributes[:'ticketFlags'] if attributes[:'ticketFlags']

      raise 'You cannot provide both :ticketFlags and :ticket_flags' if attributes.key?(:'ticketFlags') && attributes.key?(:'ticket_flags')

      self.ticket_flags = attributes[:'ticket_flags'] if attributes[:'ticket_flags']

      self.max_ticket_life = attributes[:'maxTicketLife'] if attributes[:'maxTicketLife']

      raise 'You cannot provide both :maxTicketLife and :max_ticket_life' if attributes.key?(:'maxTicketLife') && attributes.key?(:'max_ticket_life')

      self.max_ticket_life = attributes[:'max_ticket_life'] if attributes[:'max_ticket_life']

      self.max_renewable_age = attributes[:'maxRenewableAge'] if attributes[:'maxRenewableAge']

      raise 'You cannot provide both :maxRenewableAge and :max_renewable_age' if attributes.key?(:'maxRenewableAge') && attributes.key?(:'max_renewable_age')

      self.max_renewable_age = attributes[:'max_renewable_age'] if attributes[:'max_renewable_age']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        realm_name == other.realm_name &&
        master_key == other.master_key &&
        default_encryption_salt_type == other.default_encryption_salt_type &&
        supported_encryption_salt_types == other.supported_encryption_salt_types &&
        ticket_flags == other.ticket_flags &&
        max_ticket_life == other.max_ticket_life &&
        max_renewable_age == other.max_renewable_age
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [realm_name, master_key, default_encryption_salt_type, supported_encryption_salt_types, ticket_flags, max_ticket_life, max_renewable_age].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
