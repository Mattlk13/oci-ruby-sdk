# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Settings that describe the set of restrictions that the system should apply to devices and trusted endpoints of a user
  #
  # **SCIM++ Properties:**
  #  - idcsSearchable: false
  #  - multiValued: false
  #  - mutability: readWrite
  #  - required: true
  #  - returned: default
  #  - type: complex
  #  - uniqueness: none
  class IdentityDomains::Models::AuthenticationFactorSettingsEndpointRestrictions
    # **[Required]** Maximum number of enrolled devices per user
    #
    # **SCIM++ Properties:**
    #  - idcsMaxValue: 20
    #  - idcsMinValue: 1
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_enrolled_devices

    # **[Required]** Max number of trusted endpoints per user
    #
    # **SCIM++ Properties:**
    #  - idcsMaxValue: 20
    #  - idcsMinValue: 1
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_trusted_endpoints

    # **[Required]** Maximum number of days until an endpoint can be trusted
    #
    # **SCIM++ Properties:**
    #  - idcsMaxValue: 180
    #  - idcsMinValue: 1
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_endpoint_trust_duration_in_days

    # **[Required]** Specify if trusted endpoints are enabled
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :trusted_endpoints_enabled

    # **[Required]** An integer that represents the maximum number of failed MFA logins before an account is locked
    #
    # **SCIM++ Properties:**
    #  - idcsMaxValue: 20
    #  - idcsMinValue: 5
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_incorrect_attempts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'max_enrolled_devices': :'maxEnrolledDevices',
        'max_trusted_endpoints': :'maxTrustedEndpoints',
        'max_endpoint_trust_duration_in_days': :'maxEndpointTrustDurationInDays',
        'trusted_endpoints_enabled': :'trustedEndpointsEnabled',
        'max_incorrect_attempts': :'maxIncorrectAttempts'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'max_enrolled_devices': :'Integer',
        'max_trusted_endpoints': :'Integer',
        'max_endpoint_trust_duration_in_days': :'Integer',
        'trusted_endpoints_enabled': :'BOOLEAN',
        'max_incorrect_attempts': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :max_enrolled_devices The value to assign to the {#max_enrolled_devices} property
    # @option attributes [Integer] :max_trusted_endpoints The value to assign to the {#max_trusted_endpoints} property
    # @option attributes [Integer] :max_endpoint_trust_duration_in_days The value to assign to the {#max_endpoint_trust_duration_in_days} property
    # @option attributes [BOOLEAN] :trusted_endpoints_enabled The value to assign to the {#trusted_endpoints_enabled} property
    # @option attributes [Integer] :max_incorrect_attempts The value to assign to the {#max_incorrect_attempts} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.max_enrolled_devices = attributes[:'maxEnrolledDevices'] if attributes[:'maxEnrolledDevices']

      raise 'You cannot provide both :maxEnrolledDevices and :max_enrolled_devices' if attributes.key?(:'maxEnrolledDevices') && attributes.key?(:'max_enrolled_devices')

      self.max_enrolled_devices = attributes[:'max_enrolled_devices'] if attributes[:'max_enrolled_devices']

      self.max_trusted_endpoints = attributes[:'maxTrustedEndpoints'] if attributes[:'maxTrustedEndpoints']

      raise 'You cannot provide both :maxTrustedEndpoints and :max_trusted_endpoints' if attributes.key?(:'maxTrustedEndpoints') && attributes.key?(:'max_trusted_endpoints')

      self.max_trusted_endpoints = attributes[:'max_trusted_endpoints'] if attributes[:'max_trusted_endpoints']

      self.max_endpoint_trust_duration_in_days = attributes[:'maxEndpointTrustDurationInDays'] if attributes[:'maxEndpointTrustDurationInDays']

      raise 'You cannot provide both :maxEndpointTrustDurationInDays and :max_endpoint_trust_duration_in_days' if attributes.key?(:'maxEndpointTrustDurationInDays') && attributes.key?(:'max_endpoint_trust_duration_in_days')

      self.max_endpoint_trust_duration_in_days = attributes[:'max_endpoint_trust_duration_in_days'] if attributes[:'max_endpoint_trust_duration_in_days']

      self.trusted_endpoints_enabled = attributes[:'trustedEndpointsEnabled'] unless attributes[:'trustedEndpointsEnabled'].nil?

      raise 'You cannot provide both :trustedEndpointsEnabled and :trusted_endpoints_enabled' if attributes.key?(:'trustedEndpointsEnabled') && attributes.key?(:'trusted_endpoints_enabled')

      self.trusted_endpoints_enabled = attributes[:'trusted_endpoints_enabled'] unless attributes[:'trusted_endpoints_enabled'].nil?

      self.max_incorrect_attempts = attributes[:'maxIncorrectAttempts'] if attributes[:'maxIncorrectAttempts']

      raise 'You cannot provide both :maxIncorrectAttempts and :max_incorrect_attempts' if attributes.key?(:'maxIncorrectAttempts') && attributes.key?(:'max_incorrect_attempts')

      self.max_incorrect_attempts = attributes[:'max_incorrect_attempts'] if attributes[:'max_incorrect_attempts']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        max_enrolled_devices == other.max_enrolled_devices &&
        max_trusted_endpoints == other.max_trusted_endpoints &&
        max_endpoint_trust_duration_in_days == other.max_endpoint_trust_duration_in_days &&
        trusted_endpoints_enabled == other.trusted_endpoints_enabled &&
        max_incorrect_attempts == other.max_incorrect_attempts
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [max_enrolled_devices, max_trusted_endpoints, max_endpoint_trust_duration_in_days, trusted_endpoints_enabled, max_incorrect_attempts].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
