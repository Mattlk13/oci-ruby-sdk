# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # SCIM schema
  class IdentityDomains::Models::Schema
    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # Contains the canonical name of the other attribute sharing the same idcsTargetAttributeName
    #
    # **Added In:** 2209122038
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_maps_to_same_target_attribute_name_as

    # An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :external_id

    # Schema's human-readable name
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :name

    # Resource types defs this resource refers to
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :idcs_resource_types

    # Schema's human-readable description
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :description

    # **[Required]** Specifies if the attributes in this schema can be used for mapping with external identity sources such as AD or LDAP
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :idcs_mappable

    # Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \\\"attributesToGet\\\" while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
    #
    # **Added In:** 17.3.4
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_attribute_cacheable

    # Specifies whether the dataprovider mapping from resource schema should override from common schema with the same name.
    #
    # **Added In:** 2102181953
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_override_common_attribute

    # A complex type that specifies the set of Resource attributes
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: []
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    # @return [Array<OCI::IdentityDomains::Models::SchemaAttributes>]
    attr_accessor :attributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'schemas': :'schemas',
        'idcs_maps_to_same_target_attribute_name_as': :'idcsMapsToSameTargetAttributeNameAs',
        'external_id': :'externalId',
        'name': :'name',
        'idcs_resource_types': :'idcsResourceTypes',
        'description': :'description',
        'idcs_mappable': :'idcsMappable',
        'idcs_attribute_cacheable': :'idcsAttributeCacheable',
        'idcs_override_common_attribute': :'idcsOverrideCommonAttribute',
        'attributes': :'attributes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'schemas': :'Array<String>',
        'idcs_maps_to_same_target_attribute_name_as': :'String',
        'external_id': :'String',
        'name': :'String',
        'idcs_resource_types': :'Array<String>',
        'description': :'String',
        'idcs_mappable': :'BOOLEAN',
        'idcs_attribute_cacheable': :'BOOLEAN',
        'idcs_override_common_attribute': :'BOOLEAN',
        'attributes': :'Array<OCI::IdentityDomains::Models::SchemaAttributes>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [String] :idcs_maps_to_same_target_attribute_name_as The value to assign to the {#idcs_maps_to_same_target_attribute_name_as} property
    # @option attributes [String] :external_id The value to assign to the {#external_id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [Array<String>] :idcs_resource_types The value to assign to the {#idcs_resource_types} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [BOOLEAN] :idcs_mappable The value to assign to the {#idcs_mappable} property
    # @option attributes [BOOLEAN] :idcs_attribute_cacheable The value to assign to the {#idcs_attribute_cacheable} property
    # @option attributes [BOOLEAN] :idcs_override_common_attribute The value to assign to the {#idcs_override_common_attribute} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SchemaAttributes>] :attributes The value to assign to the {#attributes} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.idcs_maps_to_same_target_attribute_name_as = attributes[:'idcsMapsToSameTargetAttributeNameAs'] if attributes[:'idcsMapsToSameTargetAttributeNameAs']

      raise 'You cannot provide both :idcsMapsToSameTargetAttributeNameAs and :idcs_maps_to_same_target_attribute_name_as' if attributes.key?(:'idcsMapsToSameTargetAttributeNameAs') && attributes.key?(:'idcs_maps_to_same_target_attribute_name_as')

      self.idcs_maps_to_same_target_attribute_name_as = attributes[:'idcs_maps_to_same_target_attribute_name_as'] if attributes[:'idcs_maps_to_same_target_attribute_name_as']

      self.external_id = attributes[:'externalId'] if attributes[:'externalId']

      raise 'You cannot provide both :externalId and :external_id' if attributes.key?(:'externalId') && attributes.key?(:'external_id')

      self.external_id = attributes[:'external_id'] if attributes[:'external_id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.idcs_resource_types = attributes[:'idcsResourceTypes'] if attributes[:'idcsResourceTypes']

      raise 'You cannot provide both :idcsResourceTypes and :idcs_resource_types' if attributes.key?(:'idcsResourceTypes') && attributes.key?(:'idcs_resource_types')

      self.idcs_resource_types = attributes[:'idcs_resource_types'] if attributes[:'idcs_resource_types']

      self.description = attributes[:'description'] if attributes[:'description']

      self.idcs_mappable = attributes[:'idcsMappable'] unless attributes[:'idcsMappable'].nil?

      raise 'You cannot provide both :idcsMappable and :idcs_mappable' if attributes.key?(:'idcsMappable') && attributes.key?(:'idcs_mappable')

      self.idcs_mappable = attributes[:'idcs_mappable'] unless attributes[:'idcs_mappable'].nil?

      self.idcs_attribute_cacheable = attributes[:'idcsAttributeCacheable'] unless attributes[:'idcsAttributeCacheable'].nil?

      raise 'You cannot provide both :idcsAttributeCacheable and :idcs_attribute_cacheable' if attributes.key?(:'idcsAttributeCacheable') && attributes.key?(:'idcs_attribute_cacheable')

      self.idcs_attribute_cacheable = attributes[:'idcs_attribute_cacheable'] unless attributes[:'idcs_attribute_cacheable'].nil?

      self.idcs_override_common_attribute = attributes[:'idcsOverrideCommonAttribute'] unless attributes[:'idcsOverrideCommonAttribute'].nil?

      raise 'You cannot provide both :idcsOverrideCommonAttribute and :idcs_override_common_attribute' if attributes.key?(:'idcsOverrideCommonAttribute') && attributes.key?(:'idcs_override_common_attribute')

      self.idcs_override_common_attribute = attributes[:'idcs_override_common_attribute'] unless attributes[:'idcs_override_common_attribute'].nil?

      self.attributes = attributes[:'attributes'] if attributes[:'attributes']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        schemas == other.schemas &&
        idcs_maps_to_same_target_attribute_name_as == other.idcs_maps_to_same_target_attribute_name_as &&
        external_id == other.external_id &&
        name == other.name &&
        idcs_resource_types == other.idcs_resource_types &&
        description == other.description &&
        idcs_mappable == other.idcs_mappable &&
        idcs_attribute_cacheable == other.idcs_attribute_cacheable &&
        idcs_override_common_attribute == other.idcs_override_common_attribute &&
        attributes == other.attributes
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [schemas, idcs_maps_to_same_target_attribute_name_as, external_id, name, idcs_resource_types, description, idcs_mappable, idcs_attribute_cacheable, idcs_override_common_attribute, attributes].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
