# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This extension defines attributes used to manage Multi-Factor Authentication settings of fido authentication
  class IdentityDomains::Models::ExtensionFidoAuthenticationFactorSettings
    ATTESTATION_ENUM = [
      ATTESTATION_NONE = 'NONE'.freeze,
      ATTESTATION_DIRECT = 'DIRECT'.freeze,
      ATTESTATION_INDIRECT = 'INDIRECT'.freeze,
      ATTESTATION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUTHENTICATOR_SELECTION_ATTACHMENT_ENUM = [
      AUTHENTICATOR_SELECTION_ATTACHMENT_PLATFORM = 'PLATFORM'.freeze,
      AUTHENTICATOR_SELECTION_ATTACHMENT_CROSS_PLATFORM = 'CROSS-PLATFORM'.freeze,
      AUTHENTICATOR_SELECTION_ATTACHMENT_BOTH = 'BOTH'.freeze,
      AUTHENTICATOR_SELECTION_ATTACHMENT_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUTHENTICATOR_SELECTION_USER_VERIFICATION_ENUM = [
      AUTHENTICATOR_SELECTION_USER_VERIFICATION_REQUIRED = 'REQUIRED'.freeze,
      AUTHENTICATOR_SELECTION_USER_VERIFICATION_PREFERRED = 'PREFERRED'.freeze,
      AUTHENTICATOR_SELECTION_USER_VERIFICATION_DISCOURAGED = 'DISCOURAGED'.freeze,
      AUTHENTICATOR_SELECTION_USER_VERIFICATION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUTHENTICATOR_SELECTION_RESIDENT_KEY_ENUM = [
      AUTHENTICATOR_SELECTION_RESIDENT_KEY_REQUIRED = 'REQUIRED'.freeze,
      AUTHENTICATOR_SELECTION_RESIDENT_KEY_PREFERRED = 'PREFERRED'.freeze,
      AUTHENTICATOR_SELECTION_RESIDENT_KEY_DISCOURAGED = 'DISCOURAGED'.freeze,
      AUTHENTICATOR_SELECTION_RESIDENT_KEY_NONE = 'NONE'.freeze,
      AUTHENTICATOR_SELECTION_RESIDENT_KEY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PUBLIC_KEY_TYPES_ENUM = [
      PUBLIC_KEY_TYPES_RS1 = 'RS1'.freeze,
      PUBLIC_KEY_TYPES_RS256 = 'RS256'.freeze,
      PUBLIC_KEY_TYPES_ES256 = 'ES256'.freeze,
      PUBLIC_KEY_TYPES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Attribute used to define the type of attestation required.
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :attestation

    # **[Required]** Attribute used to define authenticator selection attachment.
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :authenticator_selection_attachment

    # **[Required]** Attribute used to define authenticator selection verification.
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :authenticator_selection_user_verification

    # **[Required]** Attribute used to define authenticator selection resident key requirement.
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :authenticator_selection_resident_key

    # **[Required]** Timeout for the fido authentication to complete
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsMaxValue: 600000
    #  - idcsMinValue: 10000
    #  - required: true
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :timeout

    # **[Required]** Flag used to indicate authenticator selection is required or not
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :authenticator_selection_require_resident_key

    # **[Required]** List of server supported public key algorithms
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :public_key_types

    # **[Required]** Flag used to indicate whether we need to restrict creation of multiple credentials in same authenticator
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :exclude_credentials

    # Number of domain levels Oracle Identity Cloud Service should use for origin comparision
    #
    # **Added In:** 2109020413
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsMaxValue: 2
    #  - idcsMinValue: 0
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :domain_validation_level

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'attestation': :'attestation',
        'authenticator_selection_attachment': :'authenticatorSelectionAttachment',
        'authenticator_selection_user_verification': :'authenticatorSelectionUserVerification',
        'authenticator_selection_resident_key': :'authenticatorSelectionResidentKey',
        'timeout': :'timeout',
        'authenticator_selection_require_resident_key': :'authenticatorSelectionRequireResidentKey',
        'public_key_types': :'publicKeyTypes',
        'exclude_credentials': :'excludeCredentials',
        'domain_validation_level': :'domainValidationLevel'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'attestation': :'String',
        'authenticator_selection_attachment': :'String',
        'authenticator_selection_user_verification': :'String',
        'authenticator_selection_resident_key': :'String',
        'timeout': :'Integer',
        'authenticator_selection_require_resident_key': :'BOOLEAN',
        'public_key_types': :'Array<String>',
        'exclude_credentials': :'BOOLEAN',
        'domain_validation_level': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :attestation The value to assign to the {#attestation} property
    # @option attributes [String] :authenticator_selection_attachment The value to assign to the {#authenticator_selection_attachment} property
    # @option attributes [String] :authenticator_selection_user_verification The value to assign to the {#authenticator_selection_user_verification} property
    # @option attributes [String] :authenticator_selection_resident_key The value to assign to the {#authenticator_selection_resident_key} property
    # @option attributes [Integer] :timeout The value to assign to the {#timeout} property
    # @option attributes [BOOLEAN] :authenticator_selection_require_resident_key The value to assign to the {#authenticator_selection_require_resident_key} property
    # @option attributes [Array<String>] :public_key_types The value to assign to the {#public_key_types} property
    # @option attributes [BOOLEAN] :exclude_credentials The value to assign to the {#exclude_credentials} property
    # @option attributes [Integer] :domain_validation_level The value to assign to the {#domain_validation_level} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.attestation = attributes[:'attestation'] if attributes[:'attestation']

      self.authenticator_selection_attachment = attributes[:'authenticatorSelectionAttachment'] if attributes[:'authenticatorSelectionAttachment']

      raise 'You cannot provide both :authenticatorSelectionAttachment and :authenticator_selection_attachment' if attributes.key?(:'authenticatorSelectionAttachment') && attributes.key?(:'authenticator_selection_attachment')

      self.authenticator_selection_attachment = attributes[:'authenticator_selection_attachment'] if attributes[:'authenticator_selection_attachment']

      self.authenticator_selection_user_verification = attributes[:'authenticatorSelectionUserVerification'] if attributes[:'authenticatorSelectionUserVerification']

      raise 'You cannot provide both :authenticatorSelectionUserVerification and :authenticator_selection_user_verification' if attributes.key?(:'authenticatorSelectionUserVerification') && attributes.key?(:'authenticator_selection_user_verification')

      self.authenticator_selection_user_verification = attributes[:'authenticator_selection_user_verification'] if attributes[:'authenticator_selection_user_verification']

      self.authenticator_selection_resident_key = attributes[:'authenticatorSelectionResidentKey'] if attributes[:'authenticatorSelectionResidentKey']

      raise 'You cannot provide both :authenticatorSelectionResidentKey and :authenticator_selection_resident_key' if attributes.key?(:'authenticatorSelectionResidentKey') && attributes.key?(:'authenticator_selection_resident_key')

      self.authenticator_selection_resident_key = attributes[:'authenticator_selection_resident_key'] if attributes[:'authenticator_selection_resident_key']

      self.timeout = attributes[:'timeout'] if attributes[:'timeout']

      self.authenticator_selection_require_resident_key = attributes[:'authenticatorSelectionRequireResidentKey'] unless attributes[:'authenticatorSelectionRequireResidentKey'].nil?

      raise 'You cannot provide both :authenticatorSelectionRequireResidentKey and :authenticator_selection_require_resident_key' if attributes.key?(:'authenticatorSelectionRequireResidentKey') && attributes.key?(:'authenticator_selection_require_resident_key')

      self.authenticator_selection_require_resident_key = attributes[:'authenticator_selection_require_resident_key'] unless attributes[:'authenticator_selection_require_resident_key'].nil?

      self.public_key_types = attributes[:'publicKeyTypes'] if attributes[:'publicKeyTypes']

      raise 'You cannot provide both :publicKeyTypes and :public_key_types' if attributes.key?(:'publicKeyTypes') && attributes.key?(:'public_key_types')

      self.public_key_types = attributes[:'public_key_types'] if attributes[:'public_key_types']

      self.exclude_credentials = attributes[:'excludeCredentials'] unless attributes[:'excludeCredentials'].nil?

      raise 'You cannot provide both :excludeCredentials and :exclude_credentials' if attributes.key?(:'excludeCredentials') && attributes.key?(:'exclude_credentials')

      self.exclude_credentials = attributes[:'exclude_credentials'] unless attributes[:'exclude_credentials'].nil?

      self.domain_validation_level = attributes[:'domainValidationLevel'] if attributes[:'domainValidationLevel']

      raise 'You cannot provide both :domainValidationLevel and :domain_validation_level' if attributes.key?(:'domainValidationLevel') && attributes.key?(:'domain_validation_level')

      self.domain_validation_level = attributes[:'domain_validation_level'] if attributes[:'domain_validation_level']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attestation Object to be assigned
    def attestation=(attestation)
      # rubocop:disable Style/ConditionalAssignment
      if attestation && !ATTESTATION_ENUM.include?(attestation)
        OCI.logger.debug("Unknown value for 'attestation' [" + attestation + "]. Mapping to 'ATTESTATION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @attestation = ATTESTATION_UNKNOWN_ENUM_VALUE
      else
        @attestation = attestation
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authenticator_selection_attachment Object to be assigned
    def authenticator_selection_attachment=(authenticator_selection_attachment)
      # rubocop:disable Style/ConditionalAssignment
      if authenticator_selection_attachment && !AUTHENTICATOR_SELECTION_ATTACHMENT_ENUM.include?(authenticator_selection_attachment)
        OCI.logger.debug("Unknown value for 'authenticator_selection_attachment' [" + authenticator_selection_attachment + "]. Mapping to 'AUTHENTICATOR_SELECTION_ATTACHMENT_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @authenticator_selection_attachment = AUTHENTICATOR_SELECTION_ATTACHMENT_UNKNOWN_ENUM_VALUE
      else
        @authenticator_selection_attachment = authenticator_selection_attachment
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authenticator_selection_user_verification Object to be assigned
    def authenticator_selection_user_verification=(authenticator_selection_user_verification)
      # rubocop:disable Style/ConditionalAssignment
      if authenticator_selection_user_verification && !AUTHENTICATOR_SELECTION_USER_VERIFICATION_ENUM.include?(authenticator_selection_user_verification)
        OCI.logger.debug("Unknown value for 'authenticator_selection_user_verification' [" + authenticator_selection_user_verification + "]. Mapping to 'AUTHENTICATOR_SELECTION_USER_VERIFICATION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @authenticator_selection_user_verification = AUTHENTICATOR_SELECTION_USER_VERIFICATION_UNKNOWN_ENUM_VALUE
      else
        @authenticator_selection_user_verification = authenticator_selection_user_verification
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authenticator_selection_resident_key Object to be assigned
    def authenticator_selection_resident_key=(authenticator_selection_resident_key)
      # rubocop:disable Style/ConditionalAssignment
      if authenticator_selection_resident_key && !AUTHENTICATOR_SELECTION_RESIDENT_KEY_ENUM.include?(authenticator_selection_resident_key)
        OCI.logger.debug("Unknown value for 'authenticator_selection_resident_key' [" + authenticator_selection_resident_key + "]. Mapping to 'AUTHENTICATOR_SELECTION_RESIDENT_KEY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @authenticator_selection_resident_key = AUTHENTICATOR_SELECTION_RESIDENT_KEY_UNKNOWN_ENUM_VALUE
      else
        @authenticator_selection_resident_key = authenticator_selection_resident_key
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] public_key_types Object to be assigned
    def public_key_types=(public_key_types)
      # rubocop:disable Style/ConditionalAssignment
      if public_key_types.nil?
        @public_key_types = nil
      else
        @public_key_types =
          public_key_types.collect do |item|
            if PUBLIC_KEY_TYPES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'public_key_types' [#{item}]. Mapping to 'PUBLIC_KEY_TYPES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              PUBLIC_KEY_TYPES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        attestation == other.attestation &&
        authenticator_selection_attachment == other.authenticator_selection_attachment &&
        authenticator_selection_user_verification == other.authenticator_selection_user_verification &&
        authenticator_selection_resident_key == other.authenticator_selection_resident_key &&
        timeout == other.timeout &&
        authenticator_selection_require_resident_key == other.authenticator_selection_require_resident_key &&
        public_key_types == other.public_key_types &&
        exclude_credentials == other.exclude_credentials &&
        domain_validation_level == other.domain_validation_level
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [attestation, authenticator_selection_attachment, authenticator_selection_user_verification, authenticator_selection_resident_key, timeout, authenticator_selection_require_resident_key, public_key_types, exclude_credentials, domain_validation_level].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
