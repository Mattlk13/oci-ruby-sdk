# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Oracle Identity Cloud Service Group
  class IdentityDomains::Models::ExtensionGroupGroup
    CREATION_MECHANISM_ENUM = [
      CREATION_MECHANISM_BULK = 'bulk'.freeze,
      CREATION_MECHANISM_API = 'api'.freeze,
      CREATION_MECHANISM_ADSYNC = 'adsync'.freeze,
      CREATION_MECHANISM_AUTHSYNC = 'authsync'.freeze,
      CREATION_MECHANISM_IDCSUI = 'idcsui'.freeze,
      CREATION_MECHANISM_IMPORT = 'import'.freeze,
      CREATION_MECHANISM_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Group description
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsCsvAttributeName: Description
    #  - idcsCsvAttributeNameMappings: [[columnHeaderName:Description]]
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :description

    # Source from which this group got created.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsCsvAttributeNameMappings: [[defaultValue:import]]
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :creation_mechanism

    # @return [OCI::IdentityDomains::Models::GroupExtPasswordPolicy]
    attr_accessor :password_policy

    # @return [OCI::IdentityDomains::Models::GroupExtSyncedFromApp]
    attr_accessor :synced_from_app

    # Grants assigned to group
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::GroupExtGrants>]
    attr_accessor :grants

    # Group owners
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsCompositeKey: [value, type]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::GroupExtOwners>]
    attr_accessor :owners

    # A list of appRoles that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsCompositeKey: [value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::GroupExtAppRoles>]
    attr_accessor :app_roles

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'description': :'description',
        'creation_mechanism': :'creationMechanism',
        'password_policy': :'passwordPolicy',
        'synced_from_app': :'syncedFromApp',
        'grants': :'grants',
        'owners': :'owners',
        'app_roles': :'appRoles'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'description': :'String',
        'creation_mechanism': :'String',
        'password_policy': :'OCI::IdentityDomains::Models::GroupExtPasswordPolicy',
        'synced_from_app': :'OCI::IdentityDomains::Models::GroupExtSyncedFromApp',
        'grants': :'Array<OCI::IdentityDomains::Models::GroupExtGrants>',
        'owners': :'Array<OCI::IdentityDomains::Models::GroupExtOwners>',
        'app_roles': :'Array<OCI::IdentityDomains::Models::GroupExtAppRoles>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :creation_mechanism The value to assign to the {#creation_mechanism} property
    # @option attributes [OCI::IdentityDomains::Models::GroupExtPasswordPolicy] :password_policy The value to assign to the {#password_policy} property
    # @option attributes [OCI::IdentityDomains::Models::GroupExtSyncedFromApp] :synced_from_app The value to assign to the {#synced_from_app} property
    # @option attributes [Array<OCI::IdentityDomains::Models::GroupExtGrants>] :grants The value to assign to the {#grants} property
    # @option attributes [Array<OCI::IdentityDomains::Models::GroupExtOwners>] :owners The value to assign to the {#owners} property
    # @option attributes [Array<OCI::IdentityDomains::Models::GroupExtAppRoles>] :app_roles The value to assign to the {#app_roles} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.description = attributes[:'description'] if attributes[:'description']

      self.creation_mechanism = attributes[:'creationMechanism'] if attributes[:'creationMechanism']

      raise 'You cannot provide both :creationMechanism and :creation_mechanism' if attributes.key?(:'creationMechanism') && attributes.key?(:'creation_mechanism')

      self.creation_mechanism = attributes[:'creation_mechanism'] if attributes[:'creation_mechanism']

      self.password_policy = attributes[:'passwordPolicy'] if attributes[:'passwordPolicy']

      raise 'You cannot provide both :passwordPolicy and :password_policy' if attributes.key?(:'passwordPolicy') && attributes.key?(:'password_policy')

      self.password_policy = attributes[:'password_policy'] if attributes[:'password_policy']

      self.synced_from_app = attributes[:'syncedFromApp'] if attributes[:'syncedFromApp']

      raise 'You cannot provide both :syncedFromApp and :synced_from_app' if attributes.key?(:'syncedFromApp') && attributes.key?(:'synced_from_app')

      self.synced_from_app = attributes[:'synced_from_app'] if attributes[:'synced_from_app']

      self.grants = attributes[:'grants'] if attributes[:'grants']

      self.owners = attributes[:'owners'] if attributes[:'owners']

      self.app_roles = attributes[:'appRoles'] if attributes[:'appRoles']

      raise 'You cannot provide both :appRoles and :app_roles' if attributes.key?(:'appRoles') && attributes.key?(:'app_roles')

      self.app_roles = attributes[:'app_roles'] if attributes[:'app_roles']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] creation_mechanism Object to be assigned
    def creation_mechanism=(creation_mechanism)
      # rubocop:disable Style/ConditionalAssignment
      if creation_mechanism && !CREATION_MECHANISM_ENUM.include?(creation_mechanism)
        OCI.logger.debug("Unknown value for 'creation_mechanism' [" + creation_mechanism + "]. Mapping to 'CREATION_MECHANISM_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @creation_mechanism = CREATION_MECHANISM_UNKNOWN_ENUM_VALUE
      else
        @creation_mechanism = creation_mechanism
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        description == other.description &&
        creation_mechanism == other.creation_mechanism &&
        password_policy == other.password_policy &&
        synced_from_app == other.synced_from_app &&
        grants == other.grants &&
        owners == other.owners &&
        app_roles == other.app_roles
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [description, creation_mechanism, password_policy, synced_from_app, grants, owners, app_roles].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
