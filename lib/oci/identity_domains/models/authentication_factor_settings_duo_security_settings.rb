# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Settings related to Duo Security
  #
  # **Added In:** 19.2.1
  #
  # **SCIM++ Properties:**
  #  - idcsSearchable: false
  #  - multiValued: false
  #  - mutability: readWrite
  #  - required: false
  #  - returned: default
  #  - type: complex
  #  - uniqueness: none
  class IdentityDomains::Models::AuthenticationFactorSettingsDuoSecuritySettings
    USER_MAPPING_ATTRIBUTE_ENUM = [
      USER_MAPPING_ATTRIBUTE_PRIMARY_EMAIL = 'primaryEmail'.freeze,
      USER_MAPPING_ATTRIBUTE_USER_NAME = 'userName'.freeze,
      USER_MAPPING_ATTRIBUTE_GIVEN_NAME = 'givenName'.freeze,
      USER_MAPPING_ATTRIBUTE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Integration key from Duo Security authenticator
    #
    # **Added In:** 19.2.1
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :integration_key

    # **[Required]** Secret key from Duo Security authenticator
    #
    # **Added In:** 19.2.1
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :secret_key

    # Attestation key to attest the request and response between Duo Security
    #
    # **Added In:** 19.2.1
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: never
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :attestation_key

    # **[Required]** Hostname to access the Duo security account
    #
    # **Added In:** 19.2.1
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :api_hostname

    # **[Required]** User attribute mapping value
    #
    # **Added In:** 19.2.1
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :user_mapping_attribute

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'integration_key': :'integrationKey',
        'secret_key': :'secretKey',
        'attestation_key': :'attestationKey',
        'api_hostname': :'apiHostname',
        'user_mapping_attribute': :'userMappingAttribute'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'integration_key': :'String',
        'secret_key': :'String',
        'attestation_key': :'String',
        'api_hostname': :'String',
        'user_mapping_attribute': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :integration_key The value to assign to the {#integration_key} property
    # @option attributes [String] :secret_key The value to assign to the {#secret_key} property
    # @option attributes [String] :attestation_key The value to assign to the {#attestation_key} property
    # @option attributes [String] :api_hostname The value to assign to the {#api_hostname} property
    # @option attributes [String] :user_mapping_attribute The value to assign to the {#user_mapping_attribute} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.integration_key = attributes[:'integrationKey'] if attributes[:'integrationKey']

      raise 'You cannot provide both :integrationKey and :integration_key' if attributes.key?(:'integrationKey') && attributes.key?(:'integration_key')

      self.integration_key = attributes[:'integration_key'] if attributes[:'integration_key']

      self.secret_key = attributes[:'secretKey'] if attributes[:'secretKey']

      raise 'You cannot provide both :secretKey and :secret_key' if attributes.key?(:'secretKey') && attributes.key?(:'secret_key')

      self.secret_key = attributes[:'secret_key'] if attributes[:'secret_key']

      self.attestation_key = attributes[:'attestationKey'] if attributes[:'attestationKey']

      raise 'You cannot provide both :attestationKey and :attestation_key' if attributes.key?(:'attestationKey') && attributes.key?(:'attestation_key')

      self.attestation_key = attributes[:'attestation_key'] if attributes[:'attestation_key']

      self.api_hostname = attributes[:'apiHostname'] if attributes[:'apiHostname']

      raise 'You cannot provide both :apiHostname and :api_hostname' if attributes.key?(:'apiHostname') && attributes.key?(:'api_hostname')

      self.api_hostname = attributes[:'api_hostname'] if attributes[:'api_hostname']

      self.user_mapping_attribute = attributes[:'userMappingAttribute'] if attributes[:'userMappingAttribute']

      raise 'You cannot provide both :userMappingAttribute and :user_mapping_attribute' if attributes.key?(:'userMappingAttribute') && attributes.key?(:'user_mapping_attribute')

      self.user_mapping_attribute = attributes[:'user_mapping_attribute'] if attributes[:'user_mapping_attribute']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_mapping_attribute Object to be assigned
    def user_mapping_attribute=(user_mapping_attribute)
      # rubocop:disable Style/ConditionalAssignment
      if user_mapping_attribute && !USER_MAPPING_ATTRIBUTE_ENUM.include?(user_mapping_attribute)
        OCI.logger.debug("Unknown value for 'user_mapping_attribute' [" + user_mapping_attribute + "]. Mapping to 'USER_MAPPING_ATTRIBUTE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @user_mapping_attribute = USER_MAPPING_ATTRIBUTE_UNKNOWN_ENUM_VALUE
      else
        @user_mapping_attribute = user_mapping_attribute
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        integration_key == other.integration_key &&
        secret_key == other.secret_key &&
        attestation_key == other.attestation_key &&
        api_hostname == other.api_hostname &&
        user_mapping_attribute == other.user_mapping_attribute
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [integration_key, secret_key, attestation_key, api_hostname, user_mapping_attribute].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
