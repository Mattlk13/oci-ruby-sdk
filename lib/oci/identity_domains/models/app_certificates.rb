# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Each value of this attribute represent a certificate that this App uses when it acts as an OAuthClient.
  class IdentityDomains::Models::AppCertificates
    # **[Required]** Certificate alias
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: always
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :cert_alias

    # sha1Thumbprint
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :sha1_thumbprint

    # Certificate kid
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :kid

    # Certificate x5t
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :x5t

    # Base-64-encoded certificate.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: binary
    #  - uniqueness: none
    # @return [Object]
    attr_accessor :x509_base64_certificate

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'cert_alias': :'certAlias',
        'sha1_thumbprint': :'sha1Thumbprint',
        'kid': :'kid',
        'x5t': :'x5t',
        'x509_base64_certificate': :'x509Base64Certificate'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'cert_alias': :'String',
        'sha1_thumbprint': :'String',
        'kid': :'String',
        'x5t': :'String',
        'x509_base64_certificate': :'Object'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :cert_alias The value to assign to the {#cert_alias} property
    # @option attributes [String] :sha1_thumbprint The value to assign to the {#sha1_thumbprint} property
    # @option attributes [String] :kid The value to assign to the {#kid} property
    # @option attributes [String] :x5t The value to assign to the {#x5t} property
    # @option attributes [Object] :x509_base64_certificate The value to assign to the {#x509_base64_certificate} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.cert_alias = attributes[:'certAlias'] if attributes[:'certAlias']

      raise 'You cannot provide both :certAlias and :cert_alias' if attributes.key?(:'certAlias') && attributes.key?(:'cert_alias')

      self.cert_alias = attributes[:'cert_alias'] if attributes[:'cert_alias']

      self.sha1_thumbprint = attributes[:'sha1Thumbprint'] if attributes[:'sha1Thumbprint']

      raise 'You cannot provide both :sha1Thumbprint and :sha1_thumbprint' if attributes.key?(:'sha1Thumbprint') && attributes.key?(:'sha1_thumbprint')

      self.sha1_thumbprint = attributes[:'sha1_thumbprint'] if attributes[:'sha1_thumbprint']

      self.kid = attributes[:'kid'] if attributes[:'kid']

      self.x5t = attributes[:'x5t'] if attributes[:'x5t']

      self.x509_base64_certificate = attributes[:'x509Base64Certificate'] if attributes[:'x509Base64Certificate']

      raise 'You cannot provide both :x509Base64Certificate and :x509_base64_certificate' if attributes.key?(:'x509Base64Certificate') && attributes.key?(:'x509_base64_certificate')

      self.x509_base64_certificate = attributes[:'x509_base64_certificate'] if attributes[:'x509_base64_certificate']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        cert_alias == other.cert_alias &&
        sha1_thumbprint == other.sha1_thumbprint &&
        kid == other.kid &&
        x5t == other.x5t &&
        x509_base64_certificate == other.x509_base64_certificate
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cert_alias, sha1_thumbprint, kid, x5t, x509_base64_certificate].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
