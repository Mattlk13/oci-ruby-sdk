# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Certificate Validation Config
  #
  # **Added In:** 2010242156
  #
  # **SCIM++ Properties:**
  #  - caseExact: false
  #  - multiValued: false
  #  - mutability: readWrite
  #  - required: false
  #  - returned: default
  #  - type: complex
  #  - uniqueness: none
  class IdentityDomains::Models::SettingsCertificateValidation
    # CRL is enabled Configuration
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :crl_enabled

    # Use CRL as Fallback.
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :crl_check_on_ocsp_failure_enabled

    # CRL Location.
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :crl_location

    # The CRL refresh interval in minutes
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :crl_refresh_interval

    # OCSP is enabled Configuration
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :ocsp_enabled

    # OCSP Accept unknown response status from ocsp responder.
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :ocsp_unknown_response_status_allowed

    # OCSP Responder URL
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ocsp_responder_url

    # This setting says, OCSP Responder URL present in the issued certificate must be used. Otherwise, OCSP Responder URL from IDP or Settings.
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :ocsp_settings_responder_url_preferred

    # The OCSP Timeout duration in minutes
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - idcsMaxValue: 10
    #  - idcsMinValue: 1
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :ocsp_timeout_duration

    # OCSP Signing Certificate Alias
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ocsp_signing_certificate_alias

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'crl_enabled': :'crlEnabled',
        'crl_check_on_ocsp_failure_enabled': :'crlCheckOnOCSPFailureEnabled',
        'crl_location': :'crlLocation',
        'crl_refresh_interval': :'crlRefreshInterval',
        'ocsp_enabled': :'ocspEnabled',
        'ocsp_unknown_response_status_allowed': :'ocspUnknownResponseStatusAllowed',
        'ocsp_responder_url': :'ocspResponderURL',
        'ocsp_settings_responder_url_preferred': :'ocspSettingsResponderURLPreferred',
        'ocsp_timeout_duration': :'ocspTimeoutDuration',
        'ocsp_signing_certificate_alias': :'ocspSigningCertificateAlias'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'crl_enabled': :'BOOLEAN',
        'crl_check_on_ocsp_failure_enabled': :'BOOLEAN',
        'crl_location': :'String',
        'crl_refresh_interval': :'Integer',
        'ocsp_enabled': :'BOOLEAN',
        'ocsp_unknown_response_status_allowed': :'BOOLEAN',
        'ocsp_responder_url': :'String',
        'ocsp_settings_responder_url_preferred': :'BOOLEAN',
        'ocsp_timeout_duration': :'Integer',
        'ocsp_signing_certificate_alias': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :crl_enabled The value to assign to the {#crl_enabled} property
    # @option attributes [BOOLEAN] :crl_check_on_ocsp_failure_enabled The value to assign to the {#crl_check_on_ocsp_failure_enabled} property
    # @option attributes [String] :crl_location The value to assign to the {#crl_location} property
    # @option attributes [Integer] :crl_refresh_interval The value to assign to the {#crl_refresh_interval} property
    # @option attributes [BOOLEAN] :ocsp_enabled The value to assign to the {#ocsp_enabled} property
    # @option attributes [BOOLEAN] :ocsp_unknown_response_status_allowed The value to assign to the {#ocsp_unknown_response_status_allowed} property
    # @option attributes [String] :ocsp_responder_url The value to assign to the {#ocsp_responder_url} property
    # @option attributes [BOOLEAN] :ocsp_settings_responder_url_preferred The value to assign to the {#ocsp_settings_responder_url_preferred} property
    # @option attributes [Integer] :ocsp_timeout_duration The value to assign to the {#ocsp_timeout_duration} property
    # @option attributes [String] :ocsp_signing_certificate_alias The value to assign to the {#ocsp_signing_certificate_alias} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.crl_enabled = attributes[:'crlEnabled'] unless attributes[:'crlEnabled'].nil?

      raise 'You cannot provide both :crlEnabled and :crl_enabled' if attributes.key?(:'crlEnabled') && attributes.key?(:'crl_enabled')

      self.crl_enabled = attributes[:'crl_enabled'] unless attributes[:'crl_enabled'].nil?

      self.crl_check_on_ocsp_failure_enabled = attributes[:'crlCheckOnOCSPFailureEnabled'] unless attributes[:'crlCheckOnOCSPFailureEnabled'].nil?

      raise 'You cannot provide both :crlCheckOnOCSPFailureEnabled and :crl_check_on_ocsp_failure_enabled' if attributes.key?(:'crlCheckOnOCSPFailureEnabled') && attributes.key?(:'crl_check_on_ocsp_failure_enabled')

      self.crl_check_on_ocsp_failure_enabled = attributes[:'crl_check_on_ocsp_failure_enabled'] unless attributes[:'crl_check_on_ocsp_failure_enabled'].nil?

      self.crl_location = attributes[:'crlLocation'] if attributes[:'crlLocation']

      raise 'You cannot provide both :crlLocation and :crl_location' if attributes.key?(:'crlLocation') && attributes.key?(:'crl_location')

      self.crl_location = attributes[:'crl_location'] if attributes[:'crl_location']

      self.crl_refresh_interval = attributes[:'crlRefreshInterval'] if attributes[:'crlRefreshInterval']

      raise 'You cannot provide both :crlRefreshInterval and :crl_refresh_interval' if attributes.key?(:'crlRefreshInterval') && attributes.key?(:'crl_refresh_interval')

      self.crl_refresh_interval = attributes[:'crl_refresh_interval'] if attributes[:'crl_refresh_interval']

      self.ocsp_enabled = attributes[:'ocspEnabled'] unless attributes[:'ocspEnabled'].nil?

      raise 'You cannot provide both :ocspEnabled and :ocsp_enabled' if attributes.key?(:'ocspEnabled') && attributes.key?(:'ocsp_enabled')

      self.ocsp_enabled = attributes[:'ocsp_enabled'] unless attributes[:'ocsp_enabled'].nil?

      self.ocsp_unknown_response_status_allowed = attributes[:'ocspUnknownResponseStatusAllowed'] unless attributes[:'ocspUnknownResponseStatusAllowed'].nil?

      raise 'You cannot provide both :ocspUnknownResponseStatusAllowed and :ocsp_unknown_response_status_allowed' if attributes.key?(:'ocspUnknownResponseStatusAllowed') && attributes.key?(:'ocsp_unknown_response_status_allowed')

      self.ocsp_unknown_response_status_allowed = attributes[:'ocsp_unknown_response_status_allowed'] unless attributes[:'ocsp_unknown_response_status_allowed'].nil?

      self.ocsp_responder_url = attributes[:'ocspResponderURL'] if attributes[:'ocspResponderURL']

      raise 'You cannot provide both :ocspResponderURL and :ocsp_responder_url' if attributes.key?(:'ocspResponderURL') && attributes.key?(:'ocsp_responder_url')

      self.ocsp_responder_url = attributes[:'ocsp_responder_url'] if attributes[:'ocsp_responder_url']

      self.ocsp_settings_responder_url_preferred = attributes[:'ocspSettingsResponderURLPreferred'] unless attributes[:'ocspSettingsResponderURLPreferred'].nil?

      raise 'You cannot provide both :ocspSettingsResponderURLPreferred and :ocsp_settings_responder_url_preferred' if attributes.key?(:'ocspSettingsResponderURLPreferred') && attributes.key?(:'ocsp_settings_responder_url_preferred')

      self.ocsp_settings_responder_url_preferred = attributes[:'ocsp_settings_responder_url_preferred'] unless attributes[:'ocsp_settings_responder_url_preferred'].nil?

      self.ocsp_timeout_duration = attributes[:'ocspTimeoutDuration'] if attributes[:'ocspTimeoutDuration']

      raise 'You cannot provide both :ocspTimeoutDuration and :ocsp_timeout_duration' if attributes.key?(:'ocspTimeoutDuration') && attributes.key?(:'ocsp_timeout_duration')

      self.ocsp_timeout_duration = attributes[:'ocsp_timeout_duration'] if attributes[:'ocsp_timeout_duration']

      self.ocsp_signing_certificate_alias = attributes[:'ocspSigningCertificateAlias'] if attributes[:'ocspSigningCertificateAlias']

      raise 'You cannot provide both :ocspSigningCertificateAlias and :ocsp_signing_certificate_alias' if attributes.key?(:'ocspSigningCertificateAlias') && attributes.key?(:'ocsp_signing_certificate_alias')

      self.ocsp_signing_certificate_alias = attributes[:'ocsp_signing_certificate_alias'] if attributes[:'ocsp_signing_certificate_alias']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        crl_enabled == other.crl_enabled &&
        crl_check_on_ocsp_failure_enabled == other.crl_check_on_ocsp_failure_enabled &&
        crl_location == other.crl_location &&
        crl_refresh_interval == other.crl_refresh_interval &&
        ocsp_enabled == other.ocsp_enabled &&
        ocsp_unknown_response_status_allowed == other.ocsp_unknown_response_status_allowed &&
        ocsp_responder_url == other.ocsp_responder_url &&
        ocsp_settings_responder_url_preferred == other.ocsp_settings_responder_url_preferred &&
        ocsp_timeout_duration == other.ocsp_timeout_duration &&
        ocsp_signing_certificate_alias == other.ocsp_signing_certificate_alias
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [crl_enabled, crl_check_on_ocsp_failure_enabled, crl_location, crl_refresh_interval, ocsp_enabled, ocsp_unknown_response_status_allowed, ocsp_responder_url, ocsp_settings_responder_url_preferred, ocsp_timeout_duration, ocsp_signing_certificate_alias].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
