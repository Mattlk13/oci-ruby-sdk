# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A complex attribute that specifies the Cloud Gate cross origin resource sharing settings.
  #
  # **Added In:** 2011192329
  #
  # **SCIM++ Properties:**
  #  - caseExact: false
  #  - idcsSearchable: false
  #  - multiValued: false
  #  - mutability: readWrite
  #  - required: false
  #  - returned: default
  #  - type: complex
  #  - uniqueness: none
  class IdentityDomains::Models::SettingsCloudGateCorsSettings
    # Allow Null Origin (CORS) for this tenant.
    #
    # **Added In:** 2011192329
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :cloud_gate_cors_allow_null_origin

    # Enable Cloud Gate Cross-Origin Resource Sharing (CORS) for this tenant.
    #
    # **Added In:** 2011192329
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :cloud_gate_cors_enabled

    # Cloud Gate Allowed Cross-Origin Resource Sharing (CORS) Origins for this tenant.
    #
    # **Added In:** 2011192329
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :cloud_gate_cors_allowed_origins

    # Maximum number of seconds a CORS Pre-flight Response may be cached by client.
    #
    # **Added In:** 2205182039
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :cloud_gate_cors_max_age

    # List of Response Headers Cloud Gate is allowed to expose in the CORS Response Header: Access-Control-Expose-Headers.
    #
    # **Added In:** 2205182039
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :cloud_gate_cors_exposed_headers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'cloud_gate_cors_allow_null_origin': :'cloudGateCorsAllowNullOrigin',
        'cloud_gate_cors_enabled': :'cloudGateCorsEnabled',
        'cloud_gate_cors_allowed_origins': :'cloudGateCorsAllowedOrigins',
        'cloud_gate_cors_max_age': :'cloudGateCorsMaxAge',
        'cloud_gate_cors_exposed_headers': :'cloudGateCorsExposedHeaders'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'cloud_gate_cors_allow_null_origin': :'BOOLEAN',
        'cloud_gate_cors_enabled': :'BOOLEAN',
        'cloud_gate_cors_allowed_origins': :'Array<String>',
        'cloud_gate_cors_max_age': :'Integer',
        'cloud_gate_cors_exposed_headers': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :cloud_gate_cors_allow_null_origin The value to assign to the {#cloud_gate_cors_allow_null_origin} property
    # @option attributes [BOOLEAN] :cloud_gate_cors_enabled The value to assign to the {#cloud_gate_cors_enabled} property
    # @option attributes [Array<String>] :cloud_gate_cors_allowed_origins The value to assign to the {#cloud_gate_cors_allowed_origins} property
    # @option attributes [Integer] :cloud_gate_cors_max_age The value to assign to the {#cloud_gate_cors_max_age} property
    # @option attributes [Array<String>] :cloud_gate_cors_exposed_headers The value to assign to the {#cloud_gate_cors_exposed_headers} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.cloud_gate_cors_allow_null_origin = attributes[:'cloudGateCorsAllowNullOrigin'] unless attributes[:'cloudGateCorsAllowNullOrigin'].nil?

      raise 'You cannot provide both :cloudGateCorsAllowNullOrigin and :cloud_gate_cors_allow_null_origin' if attributes.key?(:'cloudGateCorsAllowNullOrigin') && attributes.key?(:'cloud_gate_cors_allow_null_origin')

      self.cloud_gate_cors_allow_null_origin = attributes[:'cloud_gate_cors_allow_null_origin'] unless attributes[:'cloud_gate_cors_allow_null_origin'].nil?

      self.cloud_gate_cors_enabled = attributes[:'cloudGateCorsEnabled'] unless attributes[:'cloudGateCorsEnabled'].nil?

      raise 'You cannot provide both :cloudGateCorsEnabled and :cloud_gate_cors_enabled' if attributes.key?(:'cloudGateCorsEnabled') && attributes.key?(:'cloud_gate_cors_enabled')

      self.cloud_gate_cors_enabled = attributes[:'cloud_gate_cors_enabled'] unless attributes[:'cloud_gate_cors_enabled'].nil?

      self.cloud_gate_cors_allowed_origins = attributes[:'cloudGateCorsAllowedOrigins'] if attributes[:'cloudGateCorsAllowedOrigins']

      raise 'You cannot provide both :cloudGateCorsAllowedOrigins and :cloud_gate_cors_allowed_origins' if attributes.key?(:'cloudGateCorsAllowedOrigins') && attributes.key?(:'cloud_gate_cors_allowed_origins')

      self.cloud_gate_cors_allowed_origins = attributes[:'cloud_gate_cors_allowed_origins'] if attributes[:'cloud_gate_cors_allowed_origins']

      self.cloud_gate_cors_max_age = attributes[:'cloudGateCorsMaxAge'] if attributes[:'cloudGateCorsMaxAge']

      raise 'You cannot provide both :cloudGateCorsMaxAge and :cloud_gate_cors_max_age' if attributes.key?(:'cloudGateCorsMaxAge') && attributes.key?(:'cloud_gate_cors_max_age')

      self.cloud_gate_cors_max_age = attributes[:'cloud_gate_cors_max_age'] if attributes[:'cloud_gate_cors_max_age']

      self.cloud_gate_cors_exposed_headers = attributes[:'cloudGateCorsExposedHeaders'] if attributes[:'cloudGateCorsExposedHeaders']

      raise 'You cannot provide both :cloudGateCorsExposedHeaders and :cloud_gate_cors_exposed_headers' if attributes.key?(:'cloudGateCorsExposedHeaders') && attributes.key?(:'cloud_gate_cors_exposed_headers')

      self.cloud_gate_cors_exposed_headers = attributes[:'cloud_gate_cors_exposed_headers'] if attributes[:'cloud_gate_cors_exposed_headers']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        cloud_gate_cors_allow_null_origin == other.cloud_gate_cors_allow_null_origin &&
        cloud_gate_cors_enabled == other.cloud_gate_cors_enabled &&
        cloud_gate_cors_allowed_origins == other.cloud_gate_cors_allowed_origins &&
        cloud_gate_cors_max_age == other.cloud_gate_cors_max_age &&
        cloud_gate_cors_exposed_headers == other.cloud_gate_cors_exposed_headers
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cloud_gate_cors_allow_null_origin, cloud_gate_cors_enabled, cloud_gate_cors_allowed_origins, cloud_gate_cors_max_age, cloud_gate_cors_exposed_headers].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
