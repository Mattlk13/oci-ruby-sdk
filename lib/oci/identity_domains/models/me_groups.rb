# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A list of groups that the user belongs to, either thorough direct membership, nested groups, or dynamically calculated
  class IdentityDomains::Models::MeGroups
    TYPE_ENUM = [
      TYPE_DIRECT = 'direct'.freeze,
      TYPE_INDIRECT = 'indirect'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The identifier of the User's group.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: true
    #  - returned: always
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :value

    # The OCID of the User's group.
    #
    # **Added In:** 2102181953
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ocid

    # The URI of the corresponding Group resource to which the user belongs
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: reference
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ref

    # A human readable name, primarily used for display purposes. READ-ONLY.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :display

    # A human readable name for Group as defined by the Service Consumer. READ-ONLY.
    #
    # **Added In:** 2011192329
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :non_unique_display

    # An identifier for the Resource as defined by the Service Consumer. READ-ONLY.
    #
    # **Added In:** 2011192329
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :external_id

    # A label indicating the attribute's function; e.g., 'direct' or 'indirect'.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :type

    # The membership OCID.
    #
    # **Added In:** 2103141444
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :membership_ocid

    # Date when the member is Added to the group
    #
    # **Added In:** 2105200541
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: dateTime
    #  - uniqueness: none
    # @return [String]
    attr_accessor :date_added

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'value': :'value',
        'ocid': :'ocid',
        'ref': :'$ref',
        'display': :'display',
        'non_unique_display': :'nonUniqueDisplay',
        'external_id': :'externalId',
        'type': :'type',
        'membership_ocid': :'membershipOcid',
        'date_added': :'dateAdded'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'value': :'String',
        'ocid': :'String',
        'ref': :'String',
        'display': :'String',
        'non_unique_display': :'String',
        'external_id': :'String',
        'type': :'String',
        'membership_ocid': :'String',
        'date_added': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :value The value to assign to the {#value} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [String] :ref The value to assign to the {#ref} property
    # @option attributes [String] :display The value to assign to the {#display} property
    # @option attributes [String] :non_unique_display The value to assign to the {#non_unique_display} property
    # @option attributes [String] :external_id The value to assign to the {#external_id} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :membership_ocid The value to assign to the {#membership_ocid} property
    # @option attributes [String] :date_added The value to assign to the {#date_added} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.value = attributes[:'value'] if attributes[:'value']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.ref = attributes[:'$ref'] if attributes[:'$ref']

      self.display = attributes[:'display'] if attributes[:'display']

      self.non_unique_display = attributes[:'nonUniqueDisplay'] if attributes[:'nonUniqueDisplay']

      raise 'You cannot provide both :nonUniqueDisplay and :non_unique_display' if attributes.key?(:'nonUniqueDisplay') && attributes.key?(:'non_unique_display')

      self.non_unique_display = attributes[:'non_unique_display'] if attributes[:'non_unique_display']

      self.external_id = attributes[:'externalId'] if attributes[:'externalId']

      raise 'You cannot provide both :externalId and :external_id' if attributes.key?(:'externalId') && attributes.key?(:'external_id')

      self.external_id = attributes[:'external_id'] if attributes[:'external_id']

      self.type = attributes[:'type'] if attributes[:'type']

      self.membership_ocid = attributes[:'membershipOcid'] if attributes[:'membershipOcid']

      raise 'You cannot provide both :membershipOcid and :membership_ocid' if attributes.key?(:'membershipOcid') && attributes.key?(:'membership_ocid')

      self.membership_ocid = attributes[:'membership_ocid'] if attributes[:'membership_ocid']

      self.date_added = attributes[:'dateAdded'] if attributes[:'dateAdded']

      raise 'You cannot provide both :dateAdded and :date_added' if attributes.key?(:'dateAdded') && attributes.key?(:'date_added')

      self.date_added = attributes[:'date_added'] if attributes[:'date_added']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        value == other.value &&
        ocid == other.ocid &&
        ref == other.ref &&
        display == other.display &&
        non_unique_display == other.non_unique_display &&
        external_id == other.external_id &&
        type == other.type &&
        membership_ocid == other.membership_ocid &&
        date_added == other.date_added
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [value, ocid, ref, display, non_unique_display, external_id, type, membership_ocid, date_added].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
