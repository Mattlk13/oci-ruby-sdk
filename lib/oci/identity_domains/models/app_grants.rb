# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Grants assigned to the app
  class IdentityDomains::Models::AppGrants
    GRANTEE_TYPE_ENUM = [
      GRANTEE_TYPE_USER = 'User'.freeze,
      GRANTEE_TYPE_GROUP = 'Group'.freeze,
      GRANTEE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    GRANT_MECHANISM_ENUM = [
      GRANT_MECHANISM_IMPORT_APPROLE_MEMBERS = 'IMPORT_APPROLE_MEMBERS'.freeze,
      GRANT_MECHANISM_ADMINISTRATOR_TO_USER = 'ADMINISTRATOR_TO_USER'.freeze,
      GRANT_MECHANISM_ADMINISTRATOR_TO_GROUP = 'ADMINISTRATOR_TO_GROUP'.freeze,
      GRANT_MECHANISM_SERVICE_MANAGER_TO_USER = 'SERVICE_MANAGER_TO_USER'.freeze,
      GRANT_MECHANISM_ADMINISTRATOR_TO_APP = 'ADMINISTRATOR_TO_APP'.freeze,
      GRANT_MECHANISM_SERVICE_MANAGER_TO_APP = 'SERVICE_MANAGER_TO_APP'.freeze,
      GRANT_MECHANISM_OPC_INFRA_TO_APP = 'OPC_INFRA_TO_APP'.freeze,
      GRANT_MECHANISM_GROUP_MEMBERSHIP = 'GROUP_MEMBERSHIP'.freeze,
      GRANT_MECHANISM_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Grant identifier
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :value

    # Grant URI
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: reference
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ref

    # Grantee identifier
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :grantee_id

    # Grantee resource type. Allowed values are User and Group.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :grantee_type

    # Each value of grantMechanism indicates how (or by what component) some App (or App-Entitlement) was granted.
    # A customer or the UI should use only grantMechanism values that start with 'ADMINISTRATOR':
    #   - 'ADMINISTRATOR_TO_USER' is for a direct grant to a specific User.
    #   - 'ADMINISTRATOR_TO_GROUP' is for a grant to a specific Group, which results in indirect grants to Users who are members of that Group.
    #   - 'ADMINISTRATOR_TO_APP' is for a grant to a specific App.  The grantee (client) App gains access to the granted (server) App.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :grant_mechanism

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'value': :'value',
        'ref': :'$ref',
        'grantee_id': :'granteeId',
        'grantee_type': :'granteeType',
        'grant_mechanism': :'grantMechanism'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'value': :'String',
        'ref': :'String',
        'grantee_id': :'String',
        'grantee_type': :'String',
        'grant_mechanism': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :value The value to assign to the {#value} property
    # @option attributes [String] :ref The value to assign to the {#ref} property
    # @option attributes [String] :grantee_id The value to assign to the {#grantee_id} property
    # @option attributes [String] :grantee_type The value to assign to the {#grantee_type} property
    # @option attributes [String] :grant_mechanism The value to assign to the {#grant_mechanism} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.value = attributes[:'value'] if attributes[:'value']

      self.ref = attributes[:'$ref'] if attributes[:'$ref']

      self.grantee_id = attributes[:'granteeId'] if attributes[:'granteeId']

      raise 'You cannot provide both :granteeId and :grantee_id' if attributes.key?(:'granteeId') && attributes.key?(:'grantee_id')

      self.grantee_id = attributes[:'grantee_id'] if attributes[:'grantee_id']

      self.grantee_type = attributes[:'granteeType'] if attributes[:'granteeType']

      raise 'You cannot provide both :granteeType and :grantee_type' if attributes.key?(:'granteeType') && attributes.key?(:'grantee_type')

      self.grantee_type = attributes[:'grantee_type'] if attributes[:'grantee_type']

      self.grant_mechanism = attributes[:'grantMechanism'] if attributes[:'grantMechanism']

      raise 'You cannot provide both :grantMechanism and :grant_mechanism' if attributes.key?(:'grantMechanism') && attributes.key?(:'grant_mechanism')

      self.grant_mechanism = attributes[:'grant_mechanism'] if attributes[:'grant_mechanism']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grantee_type Object to be assigned
    def grantee_type=(grantee_type)
      # rubocop:disable Style/ConditionalAssignment
      if grantee_type && !GRANTEE_TYPE_ENUM.include?(grantee_type)
        OCI.logger.debug("Unknown value for 'grantee_type' [" + grantee_type + "]. Mapping to 'GRANTEE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @grantee_type = GRANTEE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @grantee_type = grantee_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grant_mechanism Object to be assigned
    def grant_mechanism=(grant_mechanism)
      # rubocop:disable Style/ConditionalAssignment
      if grant_mechanism && !GRANT_MECHANISM_ENUM.include?(grant_mechanism)
        OCI.logger.debug("Unknown value for 'grant_mechanism' [" + grant_mechanism + "]. Mapping to 'GRANT_MECHANISM_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @grant_mechanism = GRANT_MECHANISM_UNKNOWN_ENUM_VALUE
      else
        @grant_mechanism = grant_mechanism
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        value == other.value &&
        ref == other.ref &&
        grantee_id == other.grantee_id &&
        grantee_type == other.grantee_type &&
        grant_mechanism == other.grant_mechanism
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [value, ref, grantee_id, grantee_type, grant_mechanism].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
