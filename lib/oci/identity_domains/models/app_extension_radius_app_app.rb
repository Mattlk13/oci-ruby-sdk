# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This extension defines attributes specific to Apps that represent instances of Radius App.
  class IdentityDomains::Models::AppExtensionRadiusAppApp
    # **[Required]** This is the IP address of the RADIUS Client like Oracle Database server. It can be only IP address and not hostname.
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :client_ip

    # **[Required]** This is the port of RADIUS Proxy which RADIUS client will connect to.
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :port

    # **[Required]** Secret key used to secure communication between RADIUS Proxy and RADIUS client
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :secret_key

    # Secret key used to secure communication between RADIUS Proxy and RADIUS client. This will be available only for few releases for an internal migration requirement. Use secretKey attribute instead of this attribute for all other requirements.
    #
    # **Added In:** 2306131901
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - idcsSensitive: encrypt
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: never
    #  - type: string
    # @return [String]
    attr_accessor :secret_key_temporary

    # **[Required]** Indicates to include groups in RADIUS response
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :include_group_in_response

    # If true, capture the client IP address from the RADIUS request packet. IP Address is used for auditing, policy-evaluation and country-code calculation.
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :capture_client_ip

    # Value consists of type of RADIUS App. Type can be Oracle Database, VPN etc
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :type_of_radius_app

    # The name of the attribute that contains the Internet Protocol address of the end-user.
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :end_user_ip_attribute

    # ID used to identify a particular vendor.
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :radius_vendor_specific_id

    # Vendor-specific identifier of the attribute in the RADIUS response that will contain the end-user's country code. This is an integer-value in the range 1 to 255
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :country_code_response_attribute_id

    # RADIUS attribute that RADIUS-enabled system uses to pass the group membership
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :group_membership_radius_attribute

    # Configure the responseFormat based on vendor in order to pass it to RADIUS infra
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :response_format

    # The delimiter used if group membership responseFormat is a delimited list instead of repeating attributes
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :response_format_delimiter

    # Configure the groupNameFormat based on vendor in order to pass it to RADIUS infra
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :group_name_format

    # Indicates if password and OTP are passed in the same sign-in request or not.
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :password_and_otp_together

    # In a successful authentication response, Oracle Identity Cloud Service will pass user's group information restricted to groups persisted in this attribute, in the specified RADIUS attribute.
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::AppGroupMembershipToReturn>]
    attr_accessor :group_membership_to_return

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'client_ip': :'clientIP',
        'port': :'port',
        'secret_key': :'secretKey',
        'secret_key_temporary': :'secretKeyTemporary',
        'include_group_in_response': :'includeGroupInResponse',
        'capture_client_ip': :'captureClientIp',
        'type_of_radius_app': :'typeOfRadiusApp',
        'end_user_ip_attribute': :'endUserIPAttribute',
        'radius_vendor_specific_id': :'radiusVendorSpecificId',
        'country_code_response_attribute_id': :'countryCodeResponseAttributeId',
        'group_membership_radius_attribute': :'groupMembershipRadiusAttribute',
        'response_format': :'responseFormat',
        'response_format_delimiter': :'responseFormatDelimiter',
        'group_name_format': :'groupNameFormat',
        'password_and_otp_together': :'passwordAndOtpTogether',
        'group_membership_to_return': :'groupMembershipToReturn'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'client_ip': :'String',
        'port': :'String',
        'secret_key': :'String',
        'secret_key_temporary': :'String',
        'include_group_in_response': :'BOOLEAN',
        'capture_client_ip': :'BOOLEAN',
        'type_of_radius_app': :'String',
        'end_user_ip_attribute': :'String',
        'radius_vendor_specific_id': :'String',
        'country_code_response_attribute_id': :'String',
        'group_membership_radius_attribute': :'String',
        'response_format': :'String',
        'response_format_delimiter': :'String',
        'group_name_format': :'String',
        'password_and_otp_together': :'BOOLEAN',
        'group_membership_to_return': :'Array<OCI::IdentityDomains::Models::AppGroupMembershipToReturn>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :client_ip The value to assign to the {#client_ip} property
    # @option attributes [String] :port The value to assign to the {#port} property
    # @option attributes [String] :secret_key The value to assign to the {#secret_key} property
    # @option attributes [String] :secret_key_temporary The value to assign to the {#secret_key_temporary} property
    # @option attributes [BOOLEAN] :include_group_in_response The value to assign to the {#include_group_in_response} property
    # @option attributes [BOOLEAN] :capture_client_ip The value to assign to the {#capture_client_ip} property
    # @option attributes [String] :type_of_radius_app The value to assign to the {#type_of_radius_app} property
    # @option attributes [String] :end_user_ip_attribute The value to assign to the {#end_user_ip_attribute} property
    # @option attributes [String] :radius_vendor_specific_id The value to assign to the {#radius_vendor_specific_id} property
    # @option attributes [String] :country_code_response_attribute_id The value to assign to the {#country_code_response_attribute_id} property
    # @option attributes [String] :group_membership_radius_attribute The value to assign to the {#group_membership_radius_attribute} property
    # @option attributes [String] :response_format The value to assign to the {#response_format} property
    # @option attributes [String] :response_format_delimiter The value to assign to the {#response_format_delimiter} property
    # @option attributes [String] :group_name_format The value to assign to the {#group_name_format} property
    # @option attributes [BOOLEAN] :password_and_otp_together The value to assign to the {#password_and_otp_together} property
    # @option attributes [Array<OCI::IdentityDomains::Models::AppGroupMembershipToReturn>] :group_membership_to_return The value to assign to the {#group_membership_to_return} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.client_ip = attributes[:'clientIP'] if attributes[:'clientIP']

      raise 'You cannot provide both :clientIP and :client_ip' if attributes.key?(:'clientIP') && attributes.key?(:'client_ip')

      self.client_ip = attributes[:'client_ip'] if attributes[:'client_ip']

      self.port = attributes[:'port'] if attributes[:'port']

      self.secret_key = attributes[:'secretKey'] if attributes[:'secretKey']

      raise 'You cannot provide both :secretKey and :secret_key' if attributes.key?(:'secretKey') && attributes.key?(:'secret_key')

      self.secret_key = attributes[:'secret_key'] if attributes[:'secret_key']

      self.secret_key_temporary = attributes[:'secretKeyTemporary'] if attributes[:'secretKeyTemporary']

      raise 'You cannot provide both :secretKeyTemporary and :secret_key_temporary' if attributes.key?(:'secretKeyTemporary') && attributes.key?(:'secret_key_temporary')

      self.secret_key_temporary = attributes[:'secret_key_temporary'] if attributes[:'secret_key_temporary']

      self.include_group_in_response = attributes[:'includeGroupInResponse'] unless attributes[:'includeGroupInResponse'].nil?

      raise 'You cannot provide both :includeGroupInResponse and :include_group_in_response' if attributes.key?(:'includeGroupInResponse') && attributes.key?(:'include_group_in_response')

      self.include_group_in_response = attributes[:'include_group_in_response'] unless attributes[:'include_group_in_response'].nil?

      self.capture_client_ip = attributes[:'captureClientIp'] unless attributes[:'captureClientIp'].nil?

      raise 'You cannot provide both :captureClientIp and :capture_client_ip' if attributes.key?(:'captureClientIp') && attributes.key?(:'capture_client_ip')

      self.capture_client_ip = attributes[:'capture_client_ip'] unless attributes[:'capture_client_ip'].nil?

      self.type_of_radius_app = attributes[:'typeOfRadiusApp'] if attributes[:'typeOfRadiusApp']

      raise 'You cannot provide both :typeOfRadiusApp and :type_of_radius_app' if attributes.key?(:'typeOfRadiusApp') && attributes.key?(:'type_of_radius_app')

      self.type_of_radius_app = attributes[:'type_of_radius_app'] if attributes[:'type_of_radius_app']

      self.end_user_ip_attribute = attributes[:'endUserIPAttribute'] if attributes[:'endUserIPAttribute']

      raise 'You cannot provide both :endUserIPAttribute and :end_user_ip_attribute' if attributes.key?(:'endUserIPAttribute') && attributes.key?(:'end_user_ip_attribute')

      self.end_user_ip_attribute = attributes[:'end_user_ip_attribute'] if attributes[:'end_user_ip_attribute']

      self.radius_vendor_specific_id = attributes[:'radiusVendorSpecificId'] if attributes[:'radiusVendorSpecificId']

      raise 'You cannot provide both :radiusVendorSpecificId and :radius_vendor_specific_id' if attributes.key?(:'radiusVendorSpecificId') && attributes.key?(:'radius_vendor_specific_id')

      self.radius_vendor_specific_id = attributes[:'radius_vendor_specific_id'] if attributes[:'radius_vendor_specific_id']

      self.country_code_response_attribute_id = attributes[:'countryCodeResponseAttributeId'] if attributes[:'countryCodeResponseAttributeId']

      raise 'You cannot provide both :countryCodeResponseAttributeId and :country_code_response_attribute_id' if attributes.key?(:'countryCodeResponseAttributeId') && attributes.key?(:'country_code_response_attribute_id')

      self.country_code_response_attribute_id = attributes[:'country_code_response_attribute_id'] if attributes[:'country_code_response_attribute_id']

      self.group_membership_radius_attribute = attributes[:'groupMembershipRadiusAttribute'] if attributes[:'groupMembershipRadiusAttribute']

      raise 'You cannot provide both :groupMembershipRadiusAttribute and :group_membership_radius_attribute' if attributes.key?(:'groupMembershipRadiusAttribute') && attributes.key?(:'group_membership_radius_attribute')

      self.group_membership_radius_attribute = attributes[:'group_membership_radius_attribute'] if attributes[:'group_membership_radius_attribute']

      self.response_format = attributes[:'responseFormat'] if attributes[:'responseFormat']

      raise 'You cannot provide both :responseFormat and :response_format' if attributes.key?(:'responseFormat') && attributes.key?(:'response_format')

      self.response_format = attributes[:'response_format'] if attributes[:'response_format']

      self.response_format_delimiter = attributes[:'responseFormatDelimiter'] if attributes[:'responseFormatDelimiter']

      raise 'You cannot provide both :responseFormatDelimiter and :response_format_delimiter' if attributes.key?(:'responseFormatDelimiter') && attributes.key?(:'response_format_delimiter')

      self.response_format_delimiter = attributes[:'response_format_delimiter'] if attributes[:'response_format_delimiter']

      self.group_name_format = attributes[:'groupNameFormat'] if attributes[:'groupNameFormat']

      raise 'You cannot provide both :groupNameFormat and :group_name_format' if attributes.key?(:'groupNameFormat') && attributes.key?(:'group_name_format')

      self.group_name_format = attributes[:'group_name_format'] if attributes[:'group_name_format']

      self.password_and_otp_together = attributes[:'passwordAndOtpTogether'] unless attributes[:'passwordAndOtpTogether'].nil?

      raise 'You cannot provide both :passwordAndOtpTogether and :password_and_otp_together' if attributes.key?(:'passwordAndOtpTogether') && attributes.key?(:'password_and_otp_together')

      self.password_and_otp_together = attributes[:'password_and_otp_together'] unless attributes[:'password_and_otp_together'].nil?

      self.group_membership_to_return = attributes[:'groupMembershipToReturn'] if attributes[:'groupMembershipToReturn']

      raise 'You cannot provide both :groupMembershipToReturn and :group_membership_to_return' if attributes.key?(:'groupMembershipToReturn') && attributes.key?(:'group_membership_to_return')

      self.group_membership_to_return = attributes[:'group_membership_to_return'] if attributes[:'group_membership_to_return']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        client_ip == other.client_ip &&
        port == other.port &&
        secret_key == other.secret_key &&
        secret_key_temporary == other.secret_key_temporary &&
        include_group_in_response == other.include_group_in_response &&
        capture_client_ip == other.capture_client_ip &&
        type_of_radius_app == other.type_of_radius_app &&
        end_user_ip_attribute == other.end_user_ip_attribute &&
        radius_vendor_specific_id == other.radius_vendor_specific_id &&
        country_code_response_attribute_id == other.country_code_response_attribute_id &&
        group_membership_radius_attribute == other.group_membership_radius_attribute &&
        response_format == other.response_format &&
        response_format_delimiter == other.response_format_delimiter &&
        group_name_format == other.group_name_format &&
        password_and_otp_together == other.password_and_otp_together &&
        group_membership_to_return == other.group_membership_to_return
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [client_ip, port, secret_key, secret_key_temporary, include_group_in_response, capture_client_ip, type_of_radius_app, end_user_ip_attribute, radius_vendor_specific_id, country_code_response_attribute_id, group_membership_radius_attribute, response_format, response_format_delimiter, group_name_format, password_and_otp_together, group_membership_to_return].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
