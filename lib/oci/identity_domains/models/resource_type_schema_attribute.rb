# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # ResourceTypeSchemaAttribute Schema Definition
  class IdentityDomains::Models::ResourceTypeSchemaAttribute
    IDCS_PREVENTED_OPERATIONS_ENUM = [
      IDCS_PREVENTED_OPERATIONS_REPLACE = 'replace'.freeze,
      IDCS_PREVENTED_OPERATIONS_UPDATE = 'update'.freeze,
      IDCS_PREVENTED_OPERATIONS_DELETE = 'delete'.freeze,
      IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TYPE_ENUM = [
      TYPE_STRING = 'string'.freeze,
      TYPE_COMPLEX = 'complex'.freeze,
      TYPE_BOOLEAN = 'boolean'.freeze,
      TYPE_DECIMAL = 'decimal'.freeze,
      TYPE_INTEGER = 'integer'.freeze,
      TYPE_DATE_TIME = 'dateTime'.freeze,
      TYPE_REFERENCE = 'reference'.freeze,
      TYPE_BINARY = 'binary'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MUTABILITY_ENUM = [
      MUTABILITY_READ_ONLY = 'readOnly'.freeze,
      MUTABILITY_READ_WRITE = 'readWrite'.freeze,
      MUTABILITY_IMMUTABLE = 'immutable'.freeze,
      MUTABILITY_WRITE_ONLY = 'writeOnly'.freeze,
      MUTABILITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    END_USER_MUTABILITY_ENUM = [
      END_USER_MUTABILITY_READ_ONLY = 'readOnly'.freeze,
      END_USER_MUTABILITY_READ_WRITE = 'readWrite'.freeze,
      END_USER_MUTABILITY_IMMUTABLE = 'immutable'.freeze,
      END_USER_MUTABILITY_HIDDEN = 'hidden'.freeze,
      END_USER_MUTABILITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    END_USER_MUTABILITY_ALLOWED_VALUES_ENUM = [
      END_USER_MUTABILITY_ALLOWED_VALUES_READ_ONLY = 'readOnly'.freeze,
      END_USER_MUTABILITY_ALLOWED_VALUES_READ_WRITE = 'readWrite'.freeze,
      END_USER_MUTABILITY_ALLOWED_VALUES_IMMUTABLE = 'immutable'.freeze,
      END_USER_MUTABILITY_ALLOWED_VALUES_HIDDEN = 'hidden'.freeze,
      END_USER_MUTABILITY_ALLOWED_VALUES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    RETURNED_ENUM = [
      RETURNED_ALWAYS = 'always'.freeze,
      RETURNED_NEVER = 'never'.freeze,
      RETURNED_DEFAULT = 'default'.freeze,
      RETURNED_REQUEST = 'request'.freeze,
      RETURNED_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    UNIQUENESS_ENUM = [
      UNIQUENESS_NONE = 'none'.freeze,
      UNIQUENESS_SERVER = 'server'.freeze,
      UNIQUENESS_GLOBAL = 'global'.freeze,
      UNIQUENESS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    IDCS_ICF_ATTRIBUTE_TYPE_ENUM = [
      IDCS_ICF_ATTRIBUTE_TYPE_STRING = 'string'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_LONG = 'long'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_CHAR = 'char'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_DOUBLE = 'double'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_FLOAT = 'float'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_INTEGER = 'integer'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_BOOLEAN = 'boolean'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_BYTES = 'bytes'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_BIGDECIMAL = 'bigdecimal'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_BIGINTEGER = 'biginteger'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_GUARDEDBYTES = 'guardedbytes'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_GUARDEDSTRING = 'guardedstring'.freeze,
      IDCS_ICF_ATTRIBUTE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    IDCS_SENSITIVE_ENUM = [
      IDCS_SENSITIVE_ENCRYPT = 'encrypt'.freeze,
      IDCS_SENSITIVE_HASH = 'hash'.freeze,
      IDCS_SENSITIVE_HASH_SC = 'hash_sc'.freeze,
      IDCS_SENSITIVE_CHECKSUM = 'checksum'.freeze,
      IDCS_SENSITIVE_NONE = 'none'.freeze,
      IDCS_SENSITIVE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :id

    # Unique OCI identifier for the SCIM Resource.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :ocid

    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # @return [OCI::IdentityDomains::Models::Meta]
    attr_accessor :meta

    # @return [OCI::IdentityDomains::Models::IdcsCreatedBy]
    attr_accessor :idcs_created_by

    # @return [OCI::IdentityDomains::Models::IdcsLastModifiedBy]
    attr_accessor :idcs_last_modified_by

    # Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :idcs_prevented_operations

    # A list of tags on this resource.
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::Tags>]
    attr_accessor :tags

    # A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :delete_in_progress

    # The release number when the resource was upgraded.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_last_upgraded_in_release

    # OCI Domain Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_ocid

    # OCI Compartment Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :compartment_ocid

    # OCI Tenant Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenancy_ocid

    # Attribute's name
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - idcsSearchable: true
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :name

    # Localized schema attribute display name for use by UI client  for displaying attribute labels
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - idcsSearchable: true
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_display_name_message_id

    # ResourceType this attribute belongs to.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - idcsSearchable: true
    #  - uniqueness: none
    # @return [String]
    attr_accessor :resource_type

    # Schema URN string that this attribute belongs to
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - idcsSearchable: true
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_schema_urn

    # Fully qualified name of this attribute
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - idcsSearchable: true
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_fully_qualified_name

    # custom attribute flag.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - idcsSearchable: true
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :idcs_custom_attribute

    # The attribute's data type--for example, String
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :type

    # Indicates the attribute's plurality
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :multi_valued

    # The attribute's human-readable description
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - idcsSearchable: true
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :description

    # Specifies if the attribute is required
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :required

    # A collection of canonical values. Applicable Service Providers MUST specify the canonical types specified in the core schema specification--for example, \\\"work\\\", \\\"home\\\".
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :canonical_values

    # Specifies if the String attribute is case-sensitive
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :case_exact

    # Specifies if the attribute is mutable
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - idcsSearchable: true
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :mutability

    # Specifies User mutability for this attribute
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :end_user_mutability

    # Specifies the list of User mutabilities allowed
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :end_user_mutability_allowed_values

    # A single keyword that indicates when an attribute and associated values are returned in response to a GET request or in response to a PUT, POST, or PATCH request
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - idcsSearchable: true
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :returned

    # A single keyword value that specifies how the Service Provider enforces uniqueness of attribute values. A server MAY reject an invalid value based on uniqueness by returning an HTTP response code of 400 (Bad Request). A client MAY enforce uniqueness on the client side to a greater degree than the Service Provider enforces. For example, a client could make a value unique while the server has the uniqueness of \\\"none\\\".
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - required: false
    #  - returned: default
    #  - idcsSearchable: true
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :uniqueness

    # The attribute defining the CSV column header name for import/export
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_csv_column_header_name

    # Maps to ICF target attribute name
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_icf_bundle_attribute_name

    # Metadata to identify the ICF required attribute
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :idcs_icf_required

    # Maps to ICF data type
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :idcs_icf_attribute_type

    # The names of the Resource types that may be referenced--for example, User. This is only applicable for attributes that are of the \\\"reference\\\" data type.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :reference_types

    # Indicates that the schema has been deprecated since version
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: integer
    # @return [Integer]
    attr_accessor :idcs_deprecated_since_version

    # Indicates that the schema has been added since version
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: integer
    # @return [Integer]
    attr_accessor :idcs_added_since_version

    # Indicates that the schema has been deprecated since this release number
    #
    # **Added In:** 17.3.4
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :idcs_deprecated_since_release_number

    # Indicates that the schema has been added since this release number
    #
    # **Added In:** 17.3.4
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :idcs_added_since_release_number

    # Specifies the minimum length of the attribute
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: integer
    # @return [Integer]
    attr_accessor :idcs_min_length

    # Specifies the maximum length of the attribute
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: integer
    # @return [Integer]
    attr_accessor :idcs_max_length

    # Specifies the minimum value of the integer attribute
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: integer
    # @return [Integer]
    attr_accessor :idcs_min_value

    # Specifies the maximum value of the integer attribute
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readOnly
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: integer
    # @return [Integer]
    attr_accessor :idcs_max_value

    # If true, specifies that the attribute can have multiple language values set for the attribute on which this is set.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :idcs_multi_language

    # Specifies the directly referenced Resources
    #
    # **SCIM++ Properties:**
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    # @return [Array<String>]
    attr_accessor :idcs_ref_resource_attributes

    # Specifies the indirectly referenced Resources
    #
    # **SCIM++ Properties:**
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    # @return [Array<String>]
    attr_accessor :idcs_indirect_ref_resource_attributes

    # Sequence tracking ID name for the attribute
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :idcs_auto_increment_seq_name

    # Specifies whether the value of the Resource attribute is persisted
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_value_persisted

    # Flag to specify if the attribute should be encrypted or hashed
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :idcs_sensitive

    # Specifies whether the schema attribute is for internal use only. Internal attributes are not exposed via REST. This attribute overrides mutability for create/update if the request is internal and the attribute internalflag is set to True. This attribute overrides the return attribute while building SCIM response attributes when both the request is internal and the schema attribute is internal.
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_internal

    # Trims any leading and trailing blanks from String values. Default is True.
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_trim_string_value

    # Specifies whether this attribute can be included in a search filter
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_searchable

    # Specifies whether this attribute value was generated
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_generated

    # Specifies whether changes to this attribute value are audited
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_auditable

    # Target attribute name that this attribute gets mapped to for persistence
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_target_attribute_name

    # Target index name created for this attribute for performance
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_target_unique_constraint_name

    # Target normalized attribute name that this normalized value of attribute gets mapped to for persistence. Only set for caseExact=false & searchable attributes. Do not use by default.
    #
    # **Added In:** 19.1.4
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_target_norm_attribute_name

    # Old Target attribute name from child table for CSVA attribute prior to migration. This maintains this attribute used to get mapped to for persistence
    #
    # **Added In:** 19.1.4
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_target_attribute_name_to_migrate_from

    # Specifies the mapper to use when mapping this attribute value to DataProvider-specific semantics
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_to_target_mapper

    # Specifies the mapper to use when mapping this attribute value from DataProvider-specific semantics
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_from_target_mapper

    # Specifies the user-friendly displayable attribute name or catalog key used for localization
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - idcsSearchable: true
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_display_name

    # Specifies the Resource type to read from for dynamic canonical values
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_canonical_value_source_resource_type

    # Filter to use when getting canonical values for this schema attribute
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_canonical_value_source_filter

    # Validate payload reference value during create, replace, and update. Default is True.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :idcs_validate_reference

    # The set of one or more sub attributes' names of a CMVA, whose values uniquely identify an instance of a CMVA
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :idcs_composite_key

    # **SCIM++ Properties:**
    # - caseExact: false
    # - multiValued: false
    # - mutability: readOnly
    # - required: false
    # - idcsSearchable: true
    # - returned: default
    # - type: boolean
    # - uniqueness: none
    # Whether the CMVA attribute will be fetched or not for current resource in AbstractResourceManager update operation before calling data provider update. Default is true.
    # @return [BOOLEAN]
    attr_accessor :idcs_fetch_complex_attribute_values

    # Indicates if the attribute is scim compliant, default is true
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readOnly
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_scim_compliant

    # Specifies if the attribute can be used for mapping with external identity sources such as AD or LDAP. If isSchemaMappable: false for the schema in which this attribute is defined, then this flag is ignored
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - idcsSearchable: true
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_attribute_mappable

    # Specifies the referenced Resource attribute
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: string
    # @return [String]
    attr_accessor :idcs_ref_resource_attribute

    # Specifies whether the attribute is cacheable. True by default for all attributes. If attribute with idcsAttributeCachable = false, is present \\\"attributesToGet\\\" while executing GET/SEARCH on cacheable resource, Cache is missed and data is fetched from Data Provider.
    #
    # **Added In:** 17.3.4
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsSearchable: true
    #  - required: false
    #  - returned: default
    #  - type: boolean
    # @return [BOOLEAN]
    attr_accessor :idcs_attribute_cacheable

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ocid': :'ocid',
        'schemas': :'schemas',
        'meta': :'meta',
        'idcs_created_by': :'idcsCreatedBy',
        'idcs_last_modified_by': :'idcsLastModifiedBy',
        'idcs_prevented_operations': :'idcsPreventedOperations',
        'tags': :'tags',
        'delete_in_progress': :'deleteInProgress',
        'idcs_last_upgraded_in_release': :'idcsLastUpgradedInRelease',
        'domain_ocid': :'domainOcid',
        'compartment_ocid': :'compartmentOcid',
        'tenancy_ocid': :'tenancyOcid',
        'name': :'name',
        'idcs_display_name_message_id': :'idcsDisplayNameMessageId',
        'resource_type': :'resourceType',
        'idcs_schema_urn': :'idcsSchemaUrn',
        'idcs_fully_qualified_name': :'idcsFullyQualifiedName',
        'idcs_custom_attribute': :'idcsCustomAttribute',
        'type': :'type',
        'multi_valued': :'multiValued',
        'description': :'description',
        'required': :'required',
        'canonical_values': :'canonicalValues',
        'case_exact': :'caseExact',
        'mutability': :'mutability',
        'end_user_mutability': :'endUserMutability',
        'end_user_mutability_allowed_values': :'endUserMutabilityAllowedValues',
        'returned': :'returned',
        'uniqueness': :'uniqueness',
        'idcs_csv_column_header_name': :'idcsCsvColumnHeaderName',
        'idcs_icf_bundle_attribute_name': :'idcsICFBundleAttributeName',
        'idcs_icf_required': :'idcsICFRequired',
        'idcs_icf_attribute_type': :'idcsICFAttributeType',
        'reference_types': :'referenceTypes',
        'idcs_deprecated_since_version': :'idcsDeprecatedSinceVersion',
        'idcs_added_since_version': :'idcsAddedSinceVersion',
        'idcs_deprecated_since_release_number': :'idcsDeprecatedSinceReleaseNumber',
        'idcs_added_since_release_number': :'idcsAddedSinceReleaseNumber',
        'idcs_min_length': :'idcsMinLength',
        'idcs_max_length': :'idcsMaxLength',
        'idcs_min_value': :'idcsMinValue',
        'idcs_max_value': :'idcsMaxValue',
        'idcs_multi_language': :'idcsMultiLanguage',
        'idcs_ref_resource_attributes': :'idcsRefResourceAttributes',
        'idcs_indirect_ref_resource_attributes': :'idcsIndirectRefResourceAttributes',
        'idcs_auto_increment_seq_name': :'idcsAutoIncrementSeqName',
        'idcs_value_persisted': :'idcsValuePersisted',
        'idcs_sensitive': :'idcsSensitive',
        'idcs_internal': :'idcsInternal',
        'idcs_trim_string_value': :'idcsTrimStringValue',
        'idcs_searchable': :'idcsSearchable',
        'idcs_generated': :'idcsGenerated',
        'idcs_auditable': :'idcsAuditable',
        'idcs_target_attribute_name': :'idcsTargetAttributeName',
        'idcs_target_unique_constraint_name': :'idcsTargetUniqueConstraintName',
        'idcs_target_norm_attribute_name': :'idcsTargetNormAttributeName',
        'idcs_target_attribute_name_to_migrate_from': :'idcsTargetAttributeNameToMigrateFrom',
        'idcs_to_target_mapper': :'idcsToTargetMapper',
        'idcs_from_target_mapper': :'idcsFromTargetMapper',
        'idcs_display_name': :'idcsDisplayName',
        'idcs_canonical_value_source_resource_type': :'idcsCanonicalValueSourceResourceType',
        'idcs_canonical_value_source_filter': :'idcsCanonicalValueSourceFilter',
        'idcs_validate_reference': :'idcsValidateReference',
        'idcs_composite_key': :'idcsCompositeKey',
        'idcs_fetch_complex_attribute_values': :'idcsFetchComplexAttributeValues',
        'idcs_scim_compliant': :'idcsScimCompliant',
        'idcs_attribute_mappable': :'idcsAttributeMappable',
        'idcs_ref_resource_attribute': :'idcsRefResourceAttribute',
        'idcs_attribute_cacheable': :'idcsAttributeCacheable'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ocid': :'String',
        'schemas': :'Array<String>',
        'meta': :'OCI::IdentityDomains::Models::Meta',
        'idcs_created_by': :'OCI::IdentityDomains::Models::IdcsCreatedBy',
        'idcs_last_modified_by': :'OCI::IdentityDomains::Models::IdcsLastModifiedBy',
        'idcs_prevented_operations': :'Array<String>',
        'tags': :'Array<OCI::IdentityDomains::Models::Tags>',
        'delete_in_progress': :'BOOLEAN',
        'idcs_last_upgraded_in_release': :'String',
        'domain_ocid': :'String',
        'compartment_ocid': :'String',
        'tenancy_ocid': :'String',
        'name': :'String',
        'idcs_display_name_message_id': :'String',
        'resource_type': :'String',
        'idcs_schema_urn': :'String',
        'idcs_fully_qualified_name': :'String',
        'idcs_custom_attribute': :'BOOLEAN',
        'type': :'String',
        'multi_valued': :'BOOLEAN',
        'description': :'String',
        'required': :'BOOLEAN',
        'canonical_values': :'Array<String>',
        'case_exact': :'BOOLEAN',
        'mutability': :'String',
        'end_user_mutability': :'String',
        'end_user_mutability_allowed_values': :'Array<String>',
        'returned': :'String',
        'uniqueness': :'String',
        'idcs_csv_column_header_name': :'String',
        'idcs_icf_bundle_attribute_name': :'String',
        'idcs_icf_required': :'BOOLEAN',
        'idcs_icf_attribute_type': :'String',
        'reference_types': :'Array<String>',
        'idcs_deprecated_since_version': :'Integer',
        'idcs_added_since_version': :'Integer',
        'idcs_deprecated_since_release_number': :'String',
        'idcs_added_since_release_number': :'String',
        'idcs_min_length': :'Integer',
        'idcs_max_length': :'Integer',
        'idcs_min_value': :'Integer',
        'idcs_max_value': :'Integer',
        'idcs_multi_language': :'BOOLEAN',
        'idcs_ref_resource_attributes': :'Array<String>',
        'idcs_indirect_ref_resource_attributes': :'Array<String>',
        'idcs_auto_increment_seq_name': :'String',
        'idcs_value_persisted': :'BOOLEAN',
        'idcs_sensitive': :'String',
        'idcs_internal': :'BOOLEAN',
        'idcs_trim_string_value': :'BOOLEAN',
        'idcs_searchable': :'BOOLEAN',
        'idcs_generated': :'BOOLEAN',
        'idcs_auditable': :'BOOLEAN',
        'idcs_target_attribute_name': :'String',
        'idcs_target_unique_constraint_name': :'String',
        'idcs_target_norm_attribute_name': :'String',
        'idcs_target_attribute_name_to_migrate_from': :'String',
        'idcs_to_target_mapper': :'String',
        'idcs_from_target_mapper': :'String',
        'idcs_display_name': :'String',
        'idcs_canonical_value_source_resource_type': :'String',
        'idcs_canonical_value_source_filter': :'String',
        'idcs_validate_reference': :'BOOLEAN',
        'idcs_composite_key': :'Array<String>',
        'idcs_fetch_complex_attribute_values': :'BOOLEAN',
        'idcs_scim_compliant': :'BOOLEAN',
        'idcs_attribute_mappable': :'BOOLEAN',
        'idcs_ref_resource_attribute': :'String',
        'idcs_attribute_cacheable': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [OCI::IdentityDomains::Models::Meta] :meta The value to assign to the {#meta} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsCreatedBy] :idcs_created_by The value to assign to the {#idcs_created_by} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsLastModifiedBy] :idcs_last_modified_by The value to assign to the {#idcs_last_modified_by} property
    # @option attributes [Array<String>] :idcs_prevented_operations The value to assign to the {#idcs_prevented_operations} property
    # @option attributes [Array<OCI::IdentityDomains::Models::Tags>] :tags The value to assign to the {#tags} property
    # @option attributes [BOOLEAN] :delete_in_progress The value to assign to the {#delete_in_progress} property
    # @option attributes [String] :idcs_last_upgraded_in_release The value to assign to the {#idcs_last_upgraded_in_release} property
    # @option attributes [String] :domain_ocid The value to assign to the {#domain_ocid} property
    # @option attributes [String] :compartment_ocid The value to assign to the {#compartment_ocid} property
    # @option attributes [String] :tenancy_ocid The value to assign to the {#tenancy_ocid} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :idcs_display_name_message_id The value to assign to the {#idcs_display_name_message_id} property
    # @option attributes [String] :resource_type The value to assign to the {#resource_type} property
    # @option attributes [String] :idcs_schema_urn The value to assign to the {#idcs_schema_urn} property
    # @option attributes [String] :idcs_fully_qualified_name The value to assign to the {#idcs_fully_qualified_name} property
    # @option attributes [BOOLEAN] :idcs_custom_attribute The value to assign to the {#idcs_custom_attribute} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [BOOLEAN] :multi_valued The value to assign to the {#multi_valued} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [BOOLEAN] :required The value to assign to the {#required} property
    # @option attributes [Array<String>] :canonical_values The value to assign to the {#canonical_values} property
    # @option attributes [BOOLEAN] :case_exact The value to assign to the {#case_exact} property
    # @option attributes [String] :mutability The value to assign to the {#mutability} property
    # @option attributes [String] :end_user_mutability The value to assign to the {#end_user_mutability} property
    # @option attributes [Array<String>] :end_user_mutability_allowed_values The value to assign to the {#end_user_mutability_allowed_values} property
    # @option attributes [String] :returned The value to assign to the {#returned} property
    # @option attributes [String] :uniqueness The value to assign to the {#uniqueness} property
    # @option attributes [String] :idcs_csv_column_header_name The value to assign to the {#idcs_csv_column_header_name} property
    # @option attributes [String] :idcs_icf_bundle_attribute_name The value to assign to the {#idcs_icf_bundle_attribute_name} property
    # @option attributes [BOOLEAN] :idcs_icf_required The value to assign to the {#idcs_icf_required} property
    # @option attributes [String] :idcs_icf_attribute_type The value to assign to the {#idcs_icf_attribute_type} property
    # @option attributes [Array<String>] :reference_types The value to assign to the {#reference_types} property
    # @option attributes [Integer] :idcs_deprecated_since_version The value to assign to the {#idcs_deprecated_since_version} property
    # @option attributes [Integer] :idcs_added_since_version The value to assign to the {#idcs_added_since_version} property
    # @option attributes [String] :idcs_deprecated_since_release_number The value to assign to the {#idcs_deprecated_since_release_number} property
    # @option attributes [String] :idcs_added_since_release_number The value to assign to the {#idcs_added_since_release_number} property
    # @option attributes [Integer] :idcs_min_length The value to assign to the {#idcs_min_length} property
    # @option attributes [Integer] :idcs_max_length The value to assign to the {#idcs_max_length} property
    # @option attributes [Integer] :idcs_min_value The value to assign to the {#idcs_min_value} property
    # @option attributes [Integer] :idcs_max_value The value to assign to the {#idcs_max_value} property
    # @option attributes [BOOLEAN] :idcs_multi_language The value to assign to the {#idcs_multi_language} property
    # @option attributes [Array<String>] :idcs_ref_resource_attributes The value to assign to the {#idcs_ref_resource_attributes} property
    # @option attributes [Array<String>] :idcs_indirect_ref_resource_attributes The value to assign to the {#idcs_indirect_ref_resource_attributes} property
    # @option attributes [String] :idcs_auto_increment_seq_name The value to assign to the {#idcs_auto_increment_seq_name} property
    # @option attributes [BOOLEAN] :idcs_value_persisted The value to assign to the {#idcs_value_persisted} property
    # @option attributes [String] :idcs_sensitive The value to assign to the {#idcs_sensitive} property
    # @option attributes [BOOLEAN] :idcs_internal The value to assign to the {#idcs_internal} property
    # @option attributes [BOOLEAN] :idcs_trim_string_value The value to assign to the {#idcs_trim_string_value} property
    # @option attributes [BOOLEAN] :idcs_searchable The value to assign to the {#idcs_searchable} property
    # @option attributes [BOOLEAN] :idcs_generated The value to assign to the {#idcs_generated} property
    # @option attributes [BOOLEAN] :idcs_auditable The value to assign to the {#idcs_auditable} property
    # @option attributes [String] :idcs_target_attribute_name The value to assign to the {#idcs_target_attribute_name} property
    # @option attributes [String] :idcs_target_unique_constraint_name The value to assign to the {#idcs_target_unique_constraint_name} property
    # @option attributes [String] :idcs_target_norm_attribute_name The value to assign to the {#idcs_target_norm_attribute_name} property
    # @option attributes [String] :idcs_target_attribute_name_to_migrate_from The value to assign to the {#idcs_target_attribute_name_to_migrate_from} property
    # @option attributes [String] :idcs_to_target_mapper The value to assign to the {#idcs_to_target_mapper} property
    # @option attributes [String] :idcs_from_target_mapper The value to assign to the {#idcs_from_target_mapper} property
    # @option attributes [String] :idcs_display_name The value to assign to the {#idcs_display_name} property
    # @option attributes [String] :idcs_canonical_value_source_resource_type The value to assign to the {#idcs_canonical_value_source_resource_type} property
    # @option attributes [String] :idcs_canonical_value_source_filter The value to assign to the {#idcs_canonical_value_source_filter} property
    # @option attributes [BOOLEAN] :idcs_validate_reference The value to assign to the {#idcs_validate_reference} property
    # @option attributes [Array<String>] :idcs_composite_key The value to assign to the {#idcs_composite_key} property
    # @option attributes [BOOLEAN] :idcs_fetch_complex_attribute_values The value to assign to the {#idcs_fetch_complex_attribute_values} property
    # @option attributes [BOOLEAN] :idcs_scim_compliant The value to assign to the {#idcs_scim_compliant} property
    # @option attributes [BOOLEAN] :idcs_attribute_mappable The value to assign to the {#idcs_attribute_mappable} property
    # @option attributes [String] :idcs_ref_resource_attribute The value to assign to the {#idcs_ref_resource_attribute} property
    # @option attributes [BOOLEAN] :idcs_attribute_cacheable The value to assign to the {#idcs_attribute_cacheable} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.meta = attributes[:'meta'] if attributes[:'meta']

      self.idcs_created_by = attributes[:'idcsCreatedBy'] if attributes[:'idcsCreatedBy']

      raise 'You cannot provide both :idcsCreatedBy and :idcs_created_by' if attributes.key?(:'idcsCreatedBy') && attributes.key?(:'idcs_created_by')

      self.idcs_created_by = attributes[:'idcs_created_by'] if attributes[:'idcs_created_by']

      self.idcs_last_modified_by = attributes[:'idcsLastModifiedBy'] if attributes[:'idcsLastModifiedBy']

      raise 'You cannot provide both :idcsLastModifiedBy and :idcs_last_modified_by' if attributes.key?(:'idcsLastModifiedBy') && attributes.key?(:'idcs_last_modified_by')

      self.idcs_last_modified_by = attributes[:'idcs_last_modified_by'] if attributes[:'idcs_last_modified_by']

      self.idcs_prevented_operations = attributes[:'idcsPreventedOperations'] if attributes[:'idcsPreventedOperations']

      raise 'You cannot provide both :idcsPreventedOperations and :idcs_prevented_operations' if attributes.key?(:'idcsPreventedOperations') && attributes.key?(:'idcs_prevented_operations')

      self.idcs_prevented_operations = attributes[:'idcs_prevented_operations'] if attributes[:'idcs_prevented_operations']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.delete_in_progress = attributes[:'deleteInProgress'] unless attributes[:'deleteInProgress'].nil?

      raise 'You cannot provide both :deleteInProgress and :delete_in_progress' if attributes.key?(:'deleteInProgress') && attributes.key?(:'delete_in_progress')

      self.delete_in_progress = attributes[:'delete_in_progress'] unless attributes[:'delete_in_progress'].nil?

      self.idcs_last_upgraded_in_release = attributes[:'idcsLastUpgradedInRelease'] if attributes[:'idcsLastUpgradedInRelease']

      raise 'You cannot provide both :idcsLastUpgradedInRelease and :idcs_last_upgraded_in_release' if attributes.key?(:'idcsLastUpgradedInRelease') && attributes.key?(:'idcs_last_upgraded_in_release')

      self.idcs_last_upgraded_in_release = attributes[:'idcs_last_upgraded_in_release'] if attributes[:'idcs_last_upgraded_in_release']

      self.domain_ocid = attributes[:'domainOcid'] if attributes[:'domainOcid']

      raise 'You cannot provide both :domainOcid and :domain_ocid' if attributes.key?(:'domainOcid') && attributes.key?(:'domain_ocid')

      self.domain_ocid = attributes[:'domain_ocid'] if attributes[:'domain_ocid']

      self.compartment_ocid = attributes[:'compartmentOcid'] if attributes[:'compartmentOcid']

      raise 'You cannot provide both :compartmentOcid and :compartment_ocid' if attributes.key?(:'compartmentOcid') && attributes.key?(:'compartment_ocid')

      self.compartment_ocid = attributes[:'compartment_ocid'] if attributes[:'compartment_ocid']

      self.tenancy_ocid = attributes[:'tenancyOcid'] if attributes[:'tenancyOcid']

      raise 'You cannot provide both :tenancyOcid and :tenancy_ocid' if attributes.key?(:'tenancyOcid') && attributes.key?(:'tenancy_ocid')

      self.tenancy_ocid = attributes[:'tenancy_ocid'] if attributes[:'tenancy_ocid']

      self.name = attributes[:'name'] if attributes[:'name']

      self.idcs_display_name_message_id = attributes[:'idcsDisplayNameMessageId'] if attributes[:'idcsDisplayNameMessageId']

      raise 'You cannot provide both :idcsDisplayNameMessageId and :idcs_display_name_message_id' if attributes.key?(:'idcsDisplayNameMessageId') && attributes.key?(:'idcs_display_name_message_id')

      self.idcs_display_name_message_id = attributes[:'idcs_display_name_message_id'] if attributes[:'idcs_display_name_message_id']

      self.resource_type = attributes[:'resourceType'] if attributes[:'resourceType']

      raise 'You cannot provide both :resourceType and :resource_type' if attributes.key?(:'resourceType') && attributes.key?(:'resource_type')

      self.resource_type = attributes[:'resource_type'] if attributes[:'resource_type']

      self.idcs_schema_urn = attributes[:'idcsSchemaUrn'] if attributes[:'idcsSchemaUrn']

      raise 'You cannot provide both :idcsSchemaUrn and :idcs_schema_urn' if attributes.key?(:'idcsSchemaUrn') && attributes.key?(:'idcs_schema_urn')

      self.idcs_schema_urn = attributes[:'idcs_schema_urn'] if attributes[:'idcs_schema_urn']

      self.idcs_fully_qualified_name = attributes[:'idcsFullyQualifiedName'] if attributes[:'idcsFullyQualifiedName']

      raise 'You cannot provide both :idcsFullyQualifiedName and :idcs_fully_qualified_name' if attributes.key?(:'idcsFullyQualifiedName') && attributes.key?(:'idcs_fully_qualified_name')

      self.idcs_fully_qualified_name = attributes[:'idcs_fully_qualified_name'] if attributes[:'idcs_fully_qualified_name']

      self.idcs_custom_attribute = attributes[:'idcsCustomAttribute'] unless attributes[:'idcsCustomAttribute'].nil?

      raise 'You cannot provide both :idcsCustomAttribute and :idcs_custom_attribute' if attributes.key?(:'idcsCustomAttribute') && attributes.key?(:'idcs_custom_attribute')

      self.idcs_custom_attribute = attributes[:'idcs_custom_attribute'] unless attributes[:'idcs_custom_attribute'].nil?

      self.type = attributes[:'type'] if attributes[:'type']

      self.multi_valued = attributes[:'multiValued'] unless attributes[:'multiValued'].nil?

      raise 'You cannot provide both :multiValued and :multi_valued' if attributes.key?(:'multiValued') && attributes.key?(:'multi_valued')

      self.multi_valued = attributes[:'multi_valued'] unless attributes[:'multi_valued'].nil?

      self.description = attributes[:'description'] if attributes[:'description']

      self.required = attributes[:'required'] unless attributes[:'required'].nil?

      self.canonical_values = attributes[:'canonicalValues'] if attributes[:'canonicalValues']

      raise 'You cannot provide both :canonicalValues and :canonical_values' if attributes.key?(:'canonicalValues') && attributes.key?(:'canonical_values')

      self.canonical_values = attributes[:'canonical_values'] if attributes[:'canonical_values']

      self.case_exact = attributes[:'caseExact'] unless attributes[:'caseExact'].nil?

      raise 'You cannot provide both :caseExact and :case_exact' if attributes.key?(:'caseExact') && attributes.key?(:'case_exact')

      self.case_exact = attributes[:'case_exact'] unless attributes[:'case_exact'].nil?

      self.mutability = attributes[:'mutability'] if attributes[:'mutability']

      self.end_user_mutability = attributes[:'endUserMutability'] if attributes[:'endUserMutability']

      raise 'You cannot provide both :endUserMutability and :end_user_mutability' if attributes.key?(:'endUserMutability') && attributes.key?(:'end_user_mutability')

      self.end_user_mutability = attributes[:'end_user_mutability'] if attributes[:'end_user_mutability']

      self.end_user_mutability_allowed_values = attributes[:'endUserMutabilityAllowedValues'] if attributes[:'endUserMutabilityAllowedValues']

      raise 'You cannot provide both :endUserMutabilityAllowedValues and :end_user_mutability_allowed_values' if attributes.key?(:'endUserMutabilityAllowedValues') && attributes.key?(:'end_user_mutability_allowed_values')

      self.end_user_mutability_allowed_values = attributes[:'end_user_mutability_allowed_values'] if attributes[:'end_user_mutability_allowed_values']

      self.returned = attributes[:'returned'] if attributes[:'returned']

      self.uniqueness = attributes[:'uniqueness'] if attributes[:'uniqueness']

      self.idcs_csv_column_header_name = attributes[:'idcsCsvColumnHeaderName'] if attributes[:'idcsCsvColumnHeaderName']

      raise 'You cannot provide both :idcsCsvColumnHeaderName and :idcs_csv_column_header_name' if attributes.key?(:'idcsCsvColumnHeaderName') && attributes.key?(:'idcs_csv_column_header_name')

      self.idcs_csv_column_header_name = attributes[:'idcs_csv_column_header_name'] if attributes[:'idcs_csv_column_header_name']

      self.idcs_icf_bundle_attribute_name = attributes[:'idcsICFBundleAttributeName'] if attributes[:'idcsICFBundleAttributeName']

      raise 'You cannot provide both :idcsICFBundleAttributeName and :idcs_icf_bundle_attribute_name' if attributes.key?(:'idcsICFBundleAttributeName') && attributes.key?(:'idcs_icf_bundle_attribute_name')

      self.idcs_icf_bundle_attribute_name = attributes[:'idcs_icf_bundle_attribute_name'] if attributes[:'idcs_icf_bundle_attribute_name']

      self.idcs_icf_required = attributes[:'idcsICFRequired'] unless attributes[:'idcsICFRequired'].nil?

      raise 'You cannot provide both :idcsICFRequired and :idcs_icf_required' if attributes.key?(:'idcsICFRequired') && attributes.key?(:'idcs_icf_required')

      self.idcs_icf_required = attributes[:'idcs_icf_required'] unless attributes[:'idcs_icf_required'].nil?

      self.idcs_icf_attribute_type = attributes[:'idcsICFAttributeType'] if attributes[:'idcsICFAttributeType']

      raise 'You cannot provide both :idcsICFAttributeType and :idcs_icf_attribute_type' if attributes.key?(:'idcsICFAttributeType') && attributes.key?(:'idcs_icf_attribute_type')

      self.idcs_icf_attribute_type = attributes[:'idcs_icf_attribute_type'] if attributes[:'idcs_icf_attribute_type']

      self.reference_types = attributes[:'referenceTypes'] if attributes[:'referenceTypes']

      raise 'You cannot provide both :referenceTypes and :reference_types' if attributes.key?(:'referenceTypes') && attributes.key?(:'reference_types')

      self.reference_types = attributes[:'reference_types'] if attributes[:'reference_types']

      self.idcs_deprecated_since_version = attributes[:'idcsDeprecatedSinceVersion'] if attributes[:'idcsDeprecatedSinceVersion']

      raise 'You cannot provide both :idcsDeprecatedSinceVersion and :idcs_deprecated_since_version' if attributes.key?(:'idcsDeprecatedSinceVersion') && attributes.key?(:'idcs_deprecated_since_version')

      self.idcs_deprecated_since_version = attributes[:'idcs_deprecated_since_version'] if attributes[:'idcs_deprecated_since_version']

      self.idcs_added_since_version = attributes[:'idcsAddedSinceVersion'] if attributes[:'idcsAddedSinceVersion']

      raise 'You cannot provide both :idcsAddedSinceVersion and :idcs_added_since_version' if attributes.key?(:'idcsAddedSinceVersion') && attributes.key?(:'idcs_added_since_version')

      self.idcs_added_since_version = attributes[:'idcs_added_since_version'] if attributes[:'idcs_added_since_version']

      self.idcs_deprecated_since_release_number = attributes[:'idcsDeprecatedSinceReleaseNumber'] if attributes[:'idcsDeprecatedSinceReleaseNumber']

      raise 'You cannot provide both :idcsDeprecatedSinceReleaseNumber and :idcs_deprecated_since_release_number' if attributes.key?(:'idcsDeprecatedSinceReleaseNumber') && attributes.key?(:'idcs_deprecated_since_release_number')

      self.idcs_deprecated_since_release_number = attributes[:'idcs_deprecated_since_release_number'] if attributes[:'idcs_deprecated_since_release_number']

      self.idcs_added_since_release_number = attributes[:'idcsAddedSinceReleaseNumber'] if attributes[:'idcsAddedSinceReleaseNumber']

      raise 'You cannot provide both :idcsAddedSinceReleaseNumber and :idcs_added_since_release_number' if attributes.key?(:'idcsAddedSinceReleaseNumber') && attributes.key?(:'idcs_added_since_release_number')

      self.idcs_added_since_release_number = attributes[:'idcs_added_since_release_number'] if attributes[:'idcs_added_since_release_number']

      self.idcs_min_length = attributes[:'idcsMinLength'] if attributes[:'idcsMinLength']

      raise 'You cannot provide both :idcsMinLength and :idcs_min_length' if attributes.key?(:'idcsMinLength') && attributes.key?(:'idcs_min_length')

      self.idcs_min_length = attributes[:'idcs_min_length'] if attributes[:'idcs_min_length']

      self.idcs_max_length = attributes[:'idcsMaxLength'] if attributes[:'idcsMaxLength']

      raise 'You cannot provide both :idcsMaxLength and :idcs_max_length' if attributes.key?(:'idcsMaxLength') && attributes.key?(:'idcs_max_length')

      self.idcs_max_length = attributes[:'idcs_max_length'] if attributes[:'idcs_max_length']

      self.idcs_min_value = attributes[:'idcsMinValue'] if attributes[:'idcsMinValue']

      raise 'You cannot provide both :idcsMinValue and :idcs_min_value' if attributes.key?(:'idcsMinValue') && attributes.key?(:'idcs_min_value')

      self.idcs_min_value = attributes[:'idcs_min_value'] if attributes[:'idcs_min_value']

      self.idcs_max_value = attributes[:'idcsMaxValue'] if attributes[:'idcsMaxValue']

      raise 'You cannot provide both :idcsMaxValue and :idcs_max_value' if attributes.key?(:'idcsMaxValue') && attributes.key?(:'idcs_max_value')

      self.idcs_max_value = attributes[:'idcs_max_value'] if attributes[:'idcs_max_value']

      self.idcs_multi_language = attributes[:'idcsMultiLanguage'] unless attributes[:'idcsMultiLanguage'].nil?

      raise 'You cannot provide both :idcsMultiLanguage and :idcs_multi_language' if attributes.key?(:'idcsMultiLanguage') && attributes.key?(:'idcs_multi_language')

      self.idcs_multi_language = attributes[:'idcs_multi_language'] unless attributes[:'idcs_multi_language'].nil?

      self.idcs_ref_resource_attributes = attributes[:'idcsRefResourceAttributes'] if attributes[:'idcsRefResourceAttributes']

      raise 'You cannot provide both :idcsRefResourceAttributes and :idcs_ref_resource_attributes' if attributes.key?(:'idcsRefResourceAttributes') && attributes.key?(:'idcs_ref_resource_attributes')

      self.idcs_ref_resource_attributes = attributes[:'idcs_ref_resource_attributes'] if attributes[:'idcs_ref_resource_attributes']

      self.idcs_indirect_ref_resource_attributes = attributes[:'idcsIndirectRefResourceAttributes'] if attributes[:'idcsIndirectRefResourceAttributes']

      raise 'You cannot provide both :idcsIndirectRefResourceAttributes and :idcs_indirect_ref_resource_attributes' if attributes.key?(:'idcsIndirectRefResourceAttributes') && attributes.key?(:'idcs_indirect_ref_resource_attributes')

      self.idcs_indirect_ref_resource_attributes = attributes[:'idcs_indirect_ref_resource_attributes'] if attributes[:'idcs_indirect_ref_resource_attributes']

      self.idcs_auto_increment_seq_name = attributes[:'idcsAutoIncrementSeqName'] if attributes[:'idcsAutoIncrementSeqName']

      raise 'You cannot provide both :idcsAutoIncrementSeqName and :idcs_auto_increment_seq_name' if attributes.key?(:'idcsAutoIncrementSeqName') && attributes.key?(:'idcs_auto_increment_seq_name')

      self.idcs_auto_increment_seq_name = attributes[:'idcs_auto_increment_seq_name'] if attributes[:'idcs_auto_increment_seq_name']

      self.idcs_value_persisted = attributes[:'idcsValuePersisted'] unless attributes[:'idcsValuePersisted'].nil?

      raise 'You cannot provide both :idcsValuePersisted and :idcs_value_persisted' if attributes.key?(:'idcsValuePersisted') && attributes.key?(:'idcs_value_persisted')

      self.idcs_value_persisted = attributes[:'idcs_value_persisted'] unless attributes[:'idcs_value_persisted'].nil?

      self.idcs_sensitive = attributes[:'idcsSensitive'] if attributes[:'idcsSensitive']

      raise 'You cannot provide both :idcsSensitive and :idcs_sensitive' if attributes.key?(:'idcsSensitive') && attributes.key?(:'idcs_sensitive')

      self.idcs_sensitive = attributes[:'idcs_sensitive'] if attributes[:'idcs_sensitive']

      self.idcs_internal = attributes[:'idcsInternal'] unless attributes[:'idcsInternal'].nil?

      raise 'You cannot provide both :idcsInternal and :idcs_internal' if attributes.key?(:'idcsInternal') && attributes.key?(:'idcs_internal')

      self.idcs_internal = attributes[:'idcs_internal'] unless attributes[:'idcs_internal'].nil?

      self.idcs_trim_string_value = attributes[:'idcsTrimStringValue'] unless attributes[:'idcsTrimStringValue'].nil?

      raise 'You cannot provide both :idcsTrimStringValue and :idcs_trim_string_value' if attributes.key?(:'idcsTrimStringValue') && attributes.key?(:'idcs_trim_string_value')

      self.idcs_trim_string_value = attributes[:'idcs_trim_string_value'] unless attributes[:'idcs_trim_string_value'].nil?

      self.idcs_searchable = attributes[:'idcsSearchable'] unless attributes[:'idcsSearchable'].nil?

      raise 'You cannot provide both :idcsSearchable and :idcs_searchable' if attributes.key?(:'idcsSearchable') && attributes.key?(:'idcs_searchable')

      self.idcs_searchable = attributes[:'idcs_searchable'] unless attributes[:'idcs_searchable'].nil?

      self.idcs_generated = attributes[:'idcsGenerated'] unless attributes[:'idcsGenerated'].nil?

      raise 'You cannot provide both :idcsGenerated and :idcs_generated' if attributes.key?(:'idcsGenerated') && attributes.key?(:'idcs_generated')

      self.idcs_generated = attributes[:'idcs_generated'] unless attributes[:'idcs_generated'].nil?

      self.idcs_auditable = attributes[:'idcsAuditable'] unless attributes[:'idcsAuditable'].nil?

      raise 'You cannot provide both :idcsAuditable and :idcs_auditable' if attributes.key?(:'idcsAuditable') && attributes.key?(:'idcs_auditable')

      self.idcs_auditable = attributes[:'idcs_auditable'] unless attributes[:'idcs_auditable'].nil?

      self.idcs_target_attribute_name = attributes[:'idcsTargetAttributeName'] if attributes[:'idcsTargetAttributeName']

      raise 'You cannot provide both :idcsTargetAttributeName and :idcs_target_attribute_name' if attributes.key?(:'idcsTargetAttributeName') && attributes.key?(:'idcs_target_attribute_name')

      self.idcs_target_attribute_name = attributes[:'idcs_target_attribute_name'] if attributes[:'idcs_target_attribute_name']

      self.idcs_target_unique_constraint_name = attributes[:'idcsTargetUniqueConstraintName'] if attributes[:'idcsTargetUniqueConstraintName']

      raise 'You cannot provide both :idcsTargetUniqueConstraintName and :idcs_target_unique_constraint_name' if attributes.key?(:'idcsTargetUniqueConstraintName') && attributes.key?(:'idcs_target_unique_constraint_name')

      self.idcs_target_unique_constraint_name = attributes[:'idcs_target_unique_constraint_name'] if attributes[:'idcs_target_unique_constraint_name']

      self.idcs_target_norm_attribute_name = attributes[:'idcsTargetNormAttributeName'] if attributes[:'idcsTargetNormAttributeName']

      raise 'You cannot provide both :idcsTargetNormAttributeName and :idcs_target_norm_attribute_name' if attributes.key?(:'idcsTargetNormAttributeName') && attributes.key?(:'idcs_target_norm_attribute_name')

      self.idcs_target_norm_attribute_name = attributes[:'idcs_target_norm_attribute_name'] if attributes[:'idcs_target_norm_attribute_name']

      self.idcs_target_attribute_name_to_migrate_from = attributes[:'idcsTargetAttributeNameToMigrateFrom'] if attributes[:'idcsTargetAttributeNameToMigrateFrom']

      raise 'You cannot provide both :idcsTargetAttributeNameToMigrateFrom and :idcs_target_attribute_name_to_migrate_from' if attributes.key?(:'idcsTargetAttributeNameToMigrateFrom') && attributes.key?(:'idcs_target_attribute_name_to_migrate_from')

      self.idcs_target_attribute_name_to_migrate_from = attributes[:'idcs_target_attribute_name_to_migrate_from'] if attributes[:'idcs_target_attribute_name_to_migrate_from']

      self.idcs_to_target_mapper = attributes[:'idcsToTargetMapper'] if attributes[:'idcsToTargetMapper']

      raise 'You cannot provide both :idcsToTargetMapper and :idcs_to_target_mapper' if attributes.key?(:'idcsToTargetMapper') && attributes.key?(:'idcs_to_target_mapper')

      self.idcs_to_target_mapper = attributes[:'idcs_to_target_mapper'] if attributes[:'idcs_to_target_mapper']

      self.idcs_from_target_mapper = attributes[:'idcsFromTargetMapper'] if attributes[:'idcsFromTargetMapper']

      raise 'You cannot provide both :idcsFromTargetMapper and :idcs_from_target_mapper' if attributes.key?(:'idcsFromTargetMapper') && attributes.key?(:'idcs_from_target_mapper')

      self.idcs_from_target_mapper = attributes[:'idcs_from_target_mapper'] if attributes[:'idcs_from_target_mapper']

      self.idcs_display_name = attributes[:'idcsDisplayName'] if attributes[:'idcsDisplayName']

      raise 'You cannot provide both :idcsDisplayName and :idcs_display_name' if attributes.key?(:'idcsDisplayName') && attributes.key?(:'idcs_display_name')

      self.idcs_display_name = attributes[:'idcs_display_name'] if attributes[:'idcs_display_name']

      self.idcs_canonical_value_source_resource_type = attributes[:'idcsCanonicalValueSourceResourceType'] if attributes[:'idcsCanonicalValueSourceResourceType']

      raise 'You cannot provide both :idcsCanonicalValueSourceResourceType and :idcs_canonical_value_source_resource_type' if attributes.key?(:'idcsCanonicalValueSourceResourceType') && attributes.key?(:'idcs_canonical_value_source_resource_type')

      self.idcs_canonical_value_source_resource_type = attributes[:'idcs_canonical_value_source_resource_type'] if attributes[:'idcs_canonical_value_source_resource_type']

      self.idcs_canonical_value_source_filter = attributes[:'idcsCanonicalValueSourceFilter'] if attributes[:'idcsCanonicalValueSourceFilter']

      raise 'You cannot provide both :idcsCanonicalValueSourceFilter and :idcs_canonical_value_source_filter' if attributes.key?(:'idcsCanonicalValueSourceFilter') && attributes.key?(:'idcs_canonical_value_source_filter')

      self.idcs_canonical_value_source_filter = attributes[:'idcs_canonical_value_source_filter'] if attributes[:'idcs_canonical_value_source_filter']

      self.idcs_validate_reference = attributes[:'idcsValidateReference'] unless attributes[:'idcsValidateReference'].nil?

      raise 'You cannot provide both :idcsValidateReference and :idcs_validate_reference' if attributes.key?(:'idcsValidateReference') && attributes.key?(:'idcs_validate_reference')

      self.idcs_validate_reference = attributes[:'idcs_validate_reference'] unless attributes[:'idcs_validate_reference'].nil?

      self.idcs_composite_key = attributes[:'idcsCompositeKey'] if attributes[:'idcsCompositeKey']

      raise 'You cannot provide both :idcsCompositeKey and :idcs_composite_key' if attributes.key?(:'idcsCompositeKey') && attributes.key?(:'idcs_composite_key')

      self.idcs_composite_key = attributes[:'idcs_composite_key'] if attributes[:'idcs_composite_key']

      self.idcs_fetch_complex_attribute_values = attributes[:'idcsFetchComplexAttributeValues'] unless attributes[:'idcsFetchComplexAttributeValues'].nil?

      raise 'You cannot provide both :idcsFetchComplexAttributeValues and :idcs_fetch_complex_attribute_values' if attributes.key?(:'idcsFetchComplexAttributeValues') && attributes.key?(:'idcs_fetch_complex_attribute_values')

      self.idcs_fetch_complex_attribute_values = attributes[:'idcs_fetch_complex_attribute_values'] unless attributes[:'idcs_fetch_complex_attribute_values'].nil?

      self.idcs_scim_compliant = attributes[:'idcsScimCompliant'] unless attributes[:'idcsScimCompliant'].nil?

      raise 'You cannot provide both :idcsScimCompliant and :idcs_scim_compliant' if attributes.key?(:'idcsScimCompliant') && attributes.key?(:'idcs_scim_compliant')

      self.idcs_scim_compliant = attributes[:'idcs_scim_compliant'] unless attributes[:'idcs_scim_compliant'].nil?

      self.idcs_attribute_mappable = attributes[:'idcsAttributeMappable'] unless attributes[:'idcsAttributeMappable'].nil?

      raise 'You cannot provide both :idcsAttributeMappable and :idcs_attribute_mappable' if attributes.key?(:'idcsAttributeMappable') && attributes.key?(:'idcs_attribute_mappable')

      self.idcs_attribute_mappable = attributes[:'idcs_attribute_mappable'] unless attributes[:'idcs_attribute_mappable'].nil?

      self.idcs_ref_resource_attribute = attributes[:'idcsRefResourceAttribute'] if attributes[:'idcsRefResourceAttribute']

      raise 'You cannot provide both :idcsRefResourceAttribute and :idcs_ref_resource_attribute' if attributes.key?(:'idcsRefResourceAttribute') && attributes.key?(:'idcs_ref_resource_attribute')

      self.idcs_ref_resource_attribute = attributes[:'idcs_ref_resource_attribute'] if attributes[:'idcs_ref_resource_attribute']

      self.idcs_attribute_cacheable = attributes[:'idcsAttributeCacheable'] unless attributes[:'idcsAttributeCacheable'].nil?

      raise 'You cannot provide both :idcsAttributeCacheable and :idcs_attribute_cacheable' if attributes.key?(:'idcsAttributeCacheable') && attributes.key?(:'idcs_attribute_cacheable')

      self.idcs_attribute_cacheable = attributes[:'idcs_attribute_cacheable'] unless attributes[:'idcs_attribute_cacheable'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_prevented_operations Object to be assigned
    def idcs_prevented_operations=(idcs_prevented_operations)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_prevented_operations.nil?
        @idcs_prevented_operations = nil
      else
        @idcs_prevented_operations =
          idcs_prevented_operations.collect do |item|
            if IDCS_PREVENTED_OPERATIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'idcs_prevented_operations' [#{item}]. Mapping to 'IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mutability Object to be assigned
    def mutability=(mutability)
      # rubocop:disable Style/ConditionalAssignment
      if mutability && !MUTABILITY_ENUM.include?(mutability)
        OCI.logger.debug("Unknown value for 'mutability' [" + mutability + "]. Mapping to 'MUTABILITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @mutability = MUTABILITY_UNKNOWN_ENUM_VALUE
      else
        @mutability = mutability
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_user_mutability Object to be assigned
    def end_user_mutability=(end_user_mutability)
      # rubocop:disable Style/ConditionalAssignment
      if end_user_mutability && !END_USER_MUTABILITY_ENUM.include?(end_user_mutability)
        OCI.logger.debug("Unknown value for 'end_user_mutability' [" + end_user_mutability + "]. Mapping to 'END_USER_MUTABILITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @end_user_mutability = END_USER_MUTABILITY_UNKNOWN_ENUM_VALUE
      else
        @end_user_mutability = end_user_mutability
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] end_user_mutability_allowed_values Object to be assigned
    def end_user_mutability_allowed_values=(end_user_mutability_allowed_values)
      # rubocop:disable Style/ConditionalAssignment
      if end_user_mutability_allowed_values.nil?
        @end_user_mutability_allowed_values = nil
      else
        @end_user_mutability_allowed_values =
          end_user_mutability_allowed_values.collect do |item|
            if END_USER_MUTABILITY_ALLOWED_VALUES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'end_user_mutability_allowed_values' [#{item}]. Mapping to 'END_USER_MUTABILITY_ALLOWED_VALUES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              END_USER_MUTABILITY_ALLOWED_VALUES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] returned Object to be assigned
    def returned=(returned)
      # rubocop:disable Style/ConditionalAssignment
      if returned && !RETURNED_ENUM.include?(returned)
        OCI.logger.debug("Unknown value for 'returned' [" + returned + "]. Mapping to 'RETURNED_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @returned = RETURNED_UNKNOWN_ENUM_VALUE
      else
        @returned = returned
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] uniqueness Object to be assigned
    def uniqueness=(uniqueness)
      # rubocop:disable Style/ConditionalAssignment
      if uniqueness && !UNIQUENESS_ENUM.include?(uniqueness)
        OCI.logger.debug("Unknown value for 'uniqueness' [" + uniqueness + "]. Mapping to 'UNIQUENESS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @uniqueness = UNIQUENESS_UNKNOWN_ENUM_VALUE
      else
        @uniqueness = uniqueness
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_icf_attribute_type Object to be assigned
    def idcs_icf_attribute_type=(idcs_icf_attribute_type)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_icf_attribute_type && !IDCS_ICF_ATTRIBUTE_TYPE_ENUM.include?(idcs_icf_attribute_type)
        OCI.logger.debug("Unknown value for 'idcs_icf_attribute_type' [" + idcs_icf_attribute_type + "]. Mapping to 'IDCS_ICF_ATTRIBUTE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @idcs_icf_attribute_type = IDCS_ICF_ATTRIBUTE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @idcs_icf_attribute_type = idcs_icf_attribute_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_sensitive Object to be assigned
    def idcs_sensitive=(idcs_sensitive)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_sensitive && !IDCS_SENSITIVE_ENUM.include?(idcs_sensitive)
        OCI.logger.debug("Unknown value for 'idcs_sensitive' [" + idcs_sensitive + "]. Mapping to 'IDCS_SENSITIVE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @idcs_sensitive = IDCS_SENSITIVE_UNKNOWN_ENUM_VALUE
      else
        @idcs_sensitive = idcs_sensitive
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ocid == other.ocid &&
        schemas == other.schemas &&
        meta == other.meta &&
        idcs_created_by == other.idcs_created_by &&
        idcs_last_modified_by == other.idcs_last_modified_by &&
        idcs_prevented_operations == other.idcs_prevented_operations &&
        tags == other.tags &&
        delete_in_progress == other.delete_in_progress &&
        idcs_last_upgraded_in_release == other.idcs_last_upgraded_in_release &&
        domain_ocid == other.domain_ocid &&
        compartment_ocid == other.compartment_ocid &&
        tenancy_ocid == other.tenancy_ocid &&
        name == other.name &&
        idcs_display_name_message_id == other.idcs_display_name_message_id &&
        resource_type == other.resource_type &&
        idcs_schema_urn == other.idcs_schema_urn &&
        idcs_fully_qualified_name == other.idcs_fully_qualified_name &&
        idcs_custom_attribute == other.idcs_custom_attribute &&
        type == other.type &&
        multi_valued == other.multi_valued &&
        description == other.description &&
        required == other.required &&
        canonical_values == other.canonical_values &&
        case_exact == other.case_exact &&
        mutability == other.mutability &&
        end_user_mutability == other.end_user_mutability &&
        end_user_mutability_allowed_values == other.end_user_mutability_allowed_values &&
        returned == other.returned &&
        uniqueness == other.uniqueness &&
        idcs_csv_column_header_name == other.idcs_csv_column_header_name &&
        idcs_icf_bundle_attribute_name == other.idcs_icf_bundle_attribute_name &&
        idcs_icf_required == other.idcs_icf_required &&
        idcs_icf_attribute_type == other.idcs_icf_attribute_type &&
        reference_types == other.reference_types &&
        idcs_deprecated_since_version == other.idcs_deprecated_since_version &&
        idcs_added_since_version == other.idcs_added_since_version &&
        idcs_deprecated_since_release_number == other.idcs_deprecated_since_release_number &&
        idcs_added_since_release_number == other.idcs_added_since_release_number &&
        idcs_min_length == other.idcs_min_length &&
        idcs_max_length == other.idcs_max_length &&
        idcs_min_value == other.idcs_min_value &&
        idcs_max_value == other.idcs_max_value &&
        idcs_multi_language == other.idcs_multi_language &&
        idcs_ref_resource_attributes == other.idcs_ref_resource_attributes &&
        idcs_indirect_ref_resource_attributes == other.idcs_indirect_ref_resource_attributes &&
        idcs_auto_increment_seq_name == other.idcs_auto_increment_seq_name &&
        idcs_value_persisted == other.idcs_value_persisted &&
        idcs_sensitive == other.idcs_sensitive &&
        idcs_internal == other.idcs_internal &&
        idcs_trim_string_value == other.idcs_trim_string_value &&
        idcs_searchable == other.idcs_searchable &&
        idcs_generated == other.idcs_generated &&
        idcs_auditable == other.idcs_auditable &&
        idcs_target_attribute_name == other.idcs_target_attribute_name &&
        idcs_target_unique_constraint_name == other.idcs_target_unique_constraint_name &&
        idcs_target_norm_attribute_name == other.idcs_target_norm_attribute_name &&
        idcs_target_attribute_name_to_migrate_from == other.idcs_target_attribute_name_to_migrate_from &&
        idcs_to_target_mapper == other.idcs_to_target_mapper &&
        idcs_from_target_mapper == other.idcs_from_target_mapper &&
        idcs_display_name == other.idcs_display_name &&
        idcs_canonical_value_source_resource_type == other.idcs_canonical_value_source_resource_type &&
        idcs_canonical_value_source_filter == other.idcs_canonical_value_source_filter &&
        idcs_validate_reference == other.idcs_validate_reference &&
        idcs_composite_key == other.idcs_composite_key &&
        idcs_fetch_complex_attribute_values == other.idcs_fetch_complex_attribute_values &&
        idcs_scim_compliant == other.idcs_scim_compliant &&
        idcs_attribute_mappable == other.idcs_attribute_mappable &&
        idcs_ref_resource_attribute == other.idcs_ref_resource_attribute &&
        idcs_attribute_cacheable == other.idcs_attribute_cacheable
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ocid, schemas, meta, idcs_created_by, idcs_last_modified_by, idcs_prevented_operations, tags, delete_in_progress, idcs_last_upgraded_in_release, domain_ocid, compartment_ocid, tenancy_ocid, name, idcs_display_name_message_id, resource_type, idcs_schema_urn, idcs_fully_qualified_name, idcs_custom_attribute, type, multi_valued, description, required, canonical_values, case_exact, mutability, end_user_mutability, end_user_mutability_allowed_values, returned, uniqueness, idcs_csv_column_header_name, idcs_icf_bundle_attribute_name, idcs_icf_required, idcs_icf_attribute_type, reference_types, idcs_deprecated_since_version, idcs_added_since_version, idcs_deprecated_since_release_number, idcs_added_since_release_number, idcs_min_length, idcs_max_length, idcs_min_value, idcs_max_value, idcs_multi_language, idcs_ref_resource_attributes, idcs_indirect_ref_resource_attributes, idcs_auto_increment_seq_name, idcs_value_persisted, idcs_sensitive, idcs_internal, idcs_trim_string_value, idcs_searchable, idcs_generated, idcs_auditable, idcs_target_attribute_name, idcs_target_unique_constraint_name, idcs_target_norm_attribute_name, idcs_target_attribute_name_to_migrate_from, idcs_to_target_mapper, idcs_from_target_mapper, idcs_display_name, idcs_canonical_value_source_resource_type, idcs_canonical_value_source_filter, idcs_validate_reference, idcs_composite_key, idcs_fetch_complex_attribute_values, idcs_scim_compliant, idcs_attribute_mappable, idcs_ref_resource_attribute, idcs_attribute_cacheable].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
