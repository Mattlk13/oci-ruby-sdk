# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # PasswordPolicy resource.
  class IdentityDomains::Models::PasswordPolicy
    IDCS_PREVENTED_OPERATIONS_ENUM = [
      IDCS_PREVENTED_OPERATIONS_REPLACE = 'replace'.freeze,
      IDCS_PREVENTED_OPERATIONS_UPDATE = 'update'.freeze,
      IDCS_PREVENTED_OPERATIONS_DELETE = 'delete'.freeze,
      IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PASSWORD_STRENGTH_ENUM = [
      PASSWORD_STRENGTH_SIMPLE = 'Simple'.freeze,
      PASSWORD_STRENGTH_STANDARD = 'Standard'.freeze,
      PASSWORD_STRENGTH_CUSTOM = 'Custom'.freeze,
      PASSWORD_STRENGTH_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :id

    # Unique OCI identifier for the SCIM Resource.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :ocid

    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # @return [OCI::IdentityDomains::Models::Meta]
    attr_accessor :meta

    # @return [OCI::IdentityDomains::Models::IdcsCreatedBy]
    attr_accessor :idcs_created_by

    # @return [OCI::IdentityDomains::Models::IdcsLastModifiedBy]
    attr_accessor :idcs_last_modified_by

    # Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :idcs_prevented_operations

    # A list of tags on this resource.
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::Tags>]
    attr_accessor :tags

    # A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :delete_in_progress

    # The release number when the resource was upgraded.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_last_upgraded_in_release

    # OCI Domain Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_ocid

    # OCI Compartment Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :compartment_ocid

    # OCI Tenant Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenancy_ocid

    # An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :external_id

    # **[Required]** A String that is the name of the policy to display to the user. This is the only mandatory attribute for a password policy.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: true
    #  - returned: always
    #  - type: string
    #  - uniqueness: server
    # @return [String]
    attr_accessor :name

    # A String that describes the password policy
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :description

    # The maximum password length (in characters). A value of 0 or no value indicates no maximum length restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_length

    # The minimum password length (in characters). A value of 0 or no value indicates no minimum length restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_length

    # The minimum number of alphabetic characters in a password.  A value of 0 or no value indicates no minimum alphas restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_alphas

    # The minimum number of numeric characters in a password.  A value of 0 or no value indicates no minimum numeric character restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_numerals

    # The minimum number of a combination of alphabetic and numeric characters in a password.  A value of 0 or no value indicates no minimum alphanumeric character restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_alpha_numerals

    # The minimum number of special characters in a password. A value of 0 or no value indicates no minimum special characters restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_special_chars

    # The maximum number of special characters in a password.  A value of 0 or no value indicates no maximum special characters restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_special_chars

    # The minimum number of lowercase alphabetic characters in a password.  A value of 0 or no value indicates no minimum lowercase restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_lower_case

    # The minimum number of uppercase alphabetic characters in a password. A value of 0 or no value indicates no minimum uppercase restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_upper_case

    # The minimum number of unique characters in a password.  A value of 0 or no value indicates no minimum unique characters restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_unique_chars

    # The maximum number of repeated characters allowed in a password.  A value of 0 or no value indicates no such restriction.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_repeated_chars

    # Indicates that the password must begin with an alphabetic character
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :starts_with_alphabet

    # Indicates a sequence of characters that match the user's first name of given name cannot be the password. Password validation against policy will be ignored if length of first name is less than or equal to 3 characters.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :first_name_disallowed

    # Indicates a sequence of characters that match the user's last name of given name cannot be the password. Password validation against policy will be ignored if length of last name is less than or equal to 3 characters.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :last_name_disallowed

    # Indicates a sequence of characters that match the username cannot be the password. Password validation against policy will be ignored if length of user name is less than or equal to 3 characters.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :user_name_disallowed

    # List of User attributes whose values are not allowed in the password.
    #
    # **Added In:** 2303212224
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :disallowed_user_attribute_values

    # Minimum time after which the user can resubmit the reset password request
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :min_password_age

    # The number of days after which the password expires automatically
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :password_expires_after

    # An integer indicating the number of days before which the user should be warned about password expiry.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :password_expire_warning

    # A String value whose contents indicate a set of characters that must appear, in any sequence, in a password value
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :required_chars

    # A String value whose contents indicate a set of characters that cannot appear, in any sequence, in a password value
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :disallowed_chars

    # A String value whose contents indicate a set of characters that can appear, in any sequence, in a password value
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :allowed_chars

    # A String value whose contents indicate a set of substrings that cannot appear, in any sequence, in a password value
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :disallowed_substrings

    # Indicates whether the password can match a dictionary word
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :dictionary_word_disallowed

    # A Reference value that contains the URI of a dictionary of words not allowed to appear within a password value
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :dictionary_location

    # A delimiter used to separate characters in the dictionary file
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :dictionary_delimiter

    # An integer that represents the maximum number of failed logins before an account is locked
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :max_incorrect_attempts

    # The time period in minutes to lock out a user account when the threshold of invalid login attempts is reached. The available range is from 5 through 1440 minutes (24 hours).
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :lockout_duration

    # The number of passwords that will be kept in history that may not be used as a password
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :num_passwords_in_history

    # Indicates whether the password policy is configured as Simple, Standard, or Custom.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :password_strength

    # Indicates whether all of the users should be forced to reset their password on the next login (to comply with new password policy changes)
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: writeOnly
    #  - required: false
    #  - returned: never
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :force_password_reset

    # The number of distinct characters between old password and new password
    #
    # **Added In:** 2303212224
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :distinct_characters

    # Password policy priority
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - idcsMinValue: 1
    #  - uniqueness: server
    # @return [Integer]
    attr_accessor :priority

    # A list of groups that the password policy belongs to.
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsCompositeKey: [value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::PasswordPolicyGroups>]
    attr_accessor :groups

    # List of password policy rules that have values set. This map of stringKey:stringValue pairs can be used to aid users while setting/resetting password
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsCompositeKey: [key]
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::PasswordPolicyConfiguredPasswordPolicyRules>]
    attr_accessor :configured_password_policy_rules

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ocid': :'ocid',
        'schemas': :'schemas',
        'meta': :'meta',
        'idcs_created_by': :'idcsCreatedBy',
        'idcs_last_modified_by': :'idcsLastModifiedBy',
        'idcs_prevented_operations': :'idcsPreventedOperations',
        'tags': :'tags',
        'delete_in_progress': :'deleteInProgress',
        'idcs_last_upgraded_in_release': :'idcsLastUpgradedInRelease',
        'domain_ocid': :'domainOcid',
        'compartment_ocid': :'compartmentOcid',
        'tenancy_ocid': :'tenancyOcid',
        'external_id': :'externalId',
        'name': :'name',
        'description': :'description',
        'max_length': :'maxLength',
        'min_length': :'minLength',
        'min_alphas': :'minAlphas',
        'min_numerals': :'minNumerals',
        'min_alpha_numerals': :'minAlphaNumerals',
        'min_special_chars': :'minSpecialChars',
        'max_special_chars': :'maxSpecialChars',
        'min_lower_case': :'minLowerCase',
        'min_upper_case': :'minUpperCase',
        'min_unique_chars': :'minUniqueChars',
        'max_repeated_chars': :'maxRepeatedChars',
        'starts_with_alphabet': :'startsWithAlphabet',
        'first_name_disallowed': :'firstNameDisallowed',
        'last_name_disallowed': :'lastNameDisallowed',
        'user_name_disallowed': :'userNameDisallowed',
        'disallowed_user_attribute_values': :'disallowedUserAttributeValues',
        'min_password_age': :'minPasswordAge',
        'password_expires_after': :'passwordExpiresAfter',
        'password_expire_warning': :'passwordExpireWarning',
        'required_chars': :'requiredChars',
        'disallowed_chars': :'disallowedChars',
        'allowed_chars': :'allowedChars',
        'disallowed_substrings': :'disallowedSubstrings',
        'dictionary_word_disallowed': :'dictionaryWordDisallowed',
        'dictionary_location': :'dictionaryLocation',
        'dictionary_delimiter': :'dictionaryDelimiter',
        'max_incorrect_attempts': :'maxIncorrectAttempts',
        'lockout_duration': :'lockoutDuration',
        'num_passwords_in_history': :'numPasswordsInHistory',
        'password_strength': :'passwordStrength',
        'force_password_reset': :'forcePasswordReset',
        'distinct_characters': :'distinctCharacters',
        'priority': :'priority',
        'groups': :'groups',
        'configured_password_policy_rules': :'configuredPasswordPolicyRules'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ocid': :'String',
        'schemas': :'Array<String>',
        'meta': :'OCI::IdentityDomains::Models::Meta',
        'idcs_created_by': :'OCI::IdentityDomains::Models::IdcsCreatedBy',
        'idcs_last_modified_by': :'OCI::IdentityDomains::Models::IdcsLastModifiedBy',
        'idcs_prevented_operations': :'Array<String>',
        'tags': :'Array<OCI::IdentityDomains::Models::Tags>',
        'delete_in_progress': :'BOOLEAN',
        'idcs_last_upgraded_in_release': :'String',
        'domain_ocid': :'String',
        'compartment_ocid': :'String',
        'tenancy_ocid': :'String',
        'external_id': :'String',
        'name': :'String',
        'description': :'String',
        'max_length': :'Integer',
        'min_length': :'Integer',
        'min_alphas': :'Integer',
        'min_numerals': :'Integer',
        'min_alpha_numerals': :'Integer',
        'min_special_chars': :'Integer',
        'max_special_chars': :'Integer',
        'min_lower_case': :'Integer',
        'min_upper_case': :'Integer',
        'min_unique_chars': :'Integer',
        'max_repeated_chars': :'Integer',
        'starts_with_alphabet': :'BOOLEAN',
        'first_name_disallowed': :'BOOLEAN',
        'last_name_disallowed': :'BOOLEAN',
        'user_name_disallowed': :'BOOLEAN',
        'disallowed_user_attribute_values': :'Array<String>',
        'min_password_age': :'Integer',
        'password_expires_after': :'Integer',
        'password_expire_warning': :'Integer',
        'required_chars': :'String',
        'disallowed_chars': :'String',
        'allowed_chars': :'String',
        'disallowed_substrings': :'Array<String>',
        'dictionary_word_disallowed': :'BOOLEAN',
        'dictionary_location': :'String',
        'dictionary_delimiter': :'String',
        'max_incorrect_attempts': :'Integer',
        'lockout_duration': :'Integer',
        'num_passwords_in_history': :'Integer',
        'password_strength': :'String',
        'force_password_reset': :'BOOLEAN',
        'distinct_characters': :'Integer',
        'priority': :'Integer',
        'groups': :'Array<OCI::IdentityDomains::Models::PasswordPolicyGroups>',
        'configured_password_policy_rules': :'Array<OCI::IdentityDomains::Models::PasswordPolicyConfiguredPasswordPolicyRules>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [OCI::IdentityDomains::Models::Meta] :meta The value to assign to the {#meta} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsCreatedBy] :idcs_created_by The value to assign to the {#idcs_created_by} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsLastModifiedBy] :idcs_last_modified_by The value to assign to the {#idcs_last_modified_by} property
    # @option attributes [Array<String>] :idcs_prevented_operations The value to assign to the {#idcs_prevented_operations} property
    # @option attributes [Array<OCI::IdentityDomains::Models::Tags>] :tags The value to assign to the {#tags} property
    # @option attributes [BOOLEAN] :delete_in_progress The value to assign to the {#delete_in_progress} property
    # @option attributes [String] :idcs_last_upgraded_in_release The value to assign to the {#idcs_last_upgraded_in_release} property
    # @option attributes [String] :domain_ocid The value to assign to the {#domain_ocid} property
    # @option attributes [String] :compartment_ocid The value to assign to the {#compartment_ocid} property
    # @option attributes [String] :tenancy_ocid The value to assign to the {#tenancy_ocid} property
    # @option attributes [String] :external_id The value to assign to the {#external_id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Integer] :max_length The value to assign to the {#max_length} property
    # @option attributes [Integer] :min_length The value to assign to the {#min_length} property
    # @option attributes [Integer] :min_alphas The value to assign to the {#min_alphas} property
    # @option attributes [Integer] :min_numerals The value to assign to the {#min_numerals} property
    # @option attributes [Integer] :min_alpha_numerals The value to assign to the {#min_alpha_numerals} property
    # @option attributes [Integer] :min_special_chars The value to assign to the {#min_special_chars} property
    # @option attributes [Integer] :max_special_chars The value to assign to the {#max_special_chars} property
    # @option attributes [Integer] :min_lower_case The value to assign to the {#min_lower_case} property
    # @option attributes [Integer] :min_upper_case The value to assign to the {#min_upper_case} property
    # @option attributes [Integer] :min_unique_chars The value to assign to the {#min_unique_chars} property
    # @option attributes [Integer] :max_repeated_chars The value to assign to the {#max_repeated_chars} property
    # @option attributes [BOOLEAN] :starts_with_alphabet The value to assign to the {#starts_with_alphabet} property
    # @option attributes [BOOLEAN] :first_name_disallowed The value to assign to the {#first_name_disallowed} property
    # @option attributes [BOOLEAN] :last_name_disallowed The value to assign to the {#last_name_disallowed} property
    # @option attributes [BOOLEAN] :user_name_disallowed The value to assign to the {#user_name_disallowed} property
    # @option attributes [Array<String>] :disallowed_user_attribute_values The value to assign to the {#disallowed_user_attribute_values} property
    # @option attributes [Integer] :min_password_age The value to assign to the {#min_password_age} property
    # @option attributes [Integer] :password_expires_after The value to assign to the {#password_expires_after} property
    # @option attributes [Integer] :password_expire_warning The value to assign to the {#password_expire_warning} property
    # @option attributes [String] :required_chars The value to assign to the {#required_chars} property
    # @option attributes [String] :disallowed_chars The value to assign to the {#disallowed_chars} property
    # @option attributes [String] :allowed_chars The value to assign to the {#allowed_chars} property
    # @option attributes [Array<String>] :disallowed_substrings The value to assign to the {#disallowed_substrings} property
    # @option attributes [BOOLEAN] :dictionary_word_disallowed The value to assign to the {#dictionary_word_disallowed} property
    # @option attributes [String] :dictionary_location The value to assign to the {#dictionary_location} property
    # @option attributes [String] :dictionary_delimiter The value to assign to the {#dictionary_delimiter} property
    # @option attributes [Integer] :max_incorrect_attempts The value to assign to the {#max_incorrect_attempts} property
    # @option attributes [Integer] :lockout_duration The value to assign to the {#lockout_duration} property
    # @option attributes [Integer] :num_passwords_in_history The value to assign to the {#num_passwords_in_history} property
    # @option attributes [String] :password_strength The value to assign to the {#password_strength} property
    # @option attributes [BOOLEAN] :force_password_reset The value to assign to the {#force_password_reset} property
    # @option attributes [Integer] :distinct_characters The value to assign to the {#distinct_characters} property
    # @option attributes [Integer] :priority The value to assign to the {#priority} property
    # @option attributes [Array<OCI::IdentityDomains::Models::PasswordPolicyGroups>] :groups The value to assign to the {#groups} property
    # @option attributes [Array<OCI::IdentityDomains::Models::PasswordPolicyConfiguredPasswordPolicyRules>] :configured_password_policy_rules The value to assign to the {#configured_password_policy_rules} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.meta = attributes[:'meta'] if attributes[:'meta']

      self.idcs_created_by = attributes[:'idcsCreatedBy'] if attributes[:'idcsCreatedBy']

      raise 'You cannot provide both :idcsCreatedBy and :idcs_created_by' if attributes.key?(:'idcsCreatedBy') && attributes.key?(:'idcs_created_by')

      self.idcs_created_by = attributes[:'idcs_created_by'] if attributes[:'idcs_created_by']

      self.idcs_last_modified_by = attributes[:'idcsLastModifiedBy'] if attributes[:'idcsLastModifiedBy']

      raise 'You cannot provide both :idcsLastModifiedBy and :idcs_last_modified_by' if attributes.key?(:'idcsLastModifiedBy') && attributes.key?(:'idcs_last_modified_by')

      self.idcs_last_modified_by = attributes[:'idcs_last_modified_by'] if attributes[:'idcs_last_modified_by']

      self.idcs_prevented_operations = attributes[:'idcsPreventedOperations'] if attributes[:'idcsPreventedOperations']

      raise 'You cannot provide both :idcsPreventedOperations and :idcs_prevented_operations' if attributes.key?(:'idcsPreventedOperations') && attributes.key?(:'idcs_prevented_operations')

      self.idcs_prevented_operations = attributes[:'idcs_prevented_operations'] if attributes[:'idcs_prevented_operations']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.delete_in_progress = attributes[:'deleteInProgress'] unless attributes[:'deleteInProgress'].nil?

      raise 'You cannot provide both :deleteInProgress and :delete_in_progress' if attributes.key?(:'deleteInProgress') && attributes.key?(:'delete_in_progress')

      self.delete_in_progress = attributes[:'delete_in_progress'] unless attributes[:'delete_in_progress'].nil?

      self.idcs_last_upgraded_in_release = attributes[:'idcsLastUpgradedInRelease'] if attributes[:'idcsLastUpgradedInRelease']

      raise 'You cannot provide both :idcsLastUpgradedInRelease and :idcs_last_upgraded_in_release' if attributes.key?(:'idcsLastUpgradedInRelease') && attributes.key?(:'idcs_last_upgraded_in_release')

      self.idcs_last_upgraded_in_release = attributes[:'idcs_last_upgraded_in_release'] if attributes[:'idcs_last_upgraded_in_release']

      self.domain_ocid = attributes[:'domainOcid'] if attributes[:'domainOcid']

      raise 'You cannot provide both :domainOcid and :domain_ocid' if attributes.key?(:'domainOcid') && attributes.key?(:'domain_ocid')

      self.domain_ocid = attributes[:'domain_ocid'] if attributes[:'domain_ocid']

      self.compartment_ocid = attributes[:'compartmentOcid'] if attributes[:'compartmentOcid']

      raise 'You cannot provide both :compartmentOcid and :compartment_ocid' if attributes.key?(:'compartmentOcid') && attributes.key?(:'compartment_ocid')

      self.compartment_ocid = attributes[:'compartment_ocid'] if attributes[:'compartment_ocid']

      self.tenancy_ocid = attributes[:'tenancyOcid'] if attributes[:'tenancyOcid']

      raise 'You cannot provide both :tenancyOcid and :tenancy_ocid' if attributes.key?(:'tenancyOcid') && attributes.key?(:'tenancy_ocid')

      self.tenancy_ocid = attributes[:'tenancy_ocid'] if attributes[:'tenancy_ocid']

      self.external_id = attributes[:'externalId'] if attributes[:'externalId']

      raise 'You cannot provide both :externalId and :external_id' if attributes.key?(:'externalId') && attributes.key?(:'external_id')

      self.external_id = attributes[:'external_id'] if attributes[:'external_id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.max_length = attributes[:'maxLength'] if attributes[:'maxLength']

      raise 'You cannot provide both :maxLength and :max_length' if attributes.key?(:'maxLength') && attributes.key?(:'max_length')

      self.max_length = attributes[:'max_length'] if attributes[:'max_length']

      self.min_length = attributes[:'minLength'] if attributes[:'minLength']

      raise 'You cannot provide both :minLength and :min_length' if attributes.key?(:'minLength') && attributes.key?(:'min_length')

      self.min_length = attributes[:'min_length'] if attributes[:'min_length']

      self.min_alphas = attributes[:'minAlphas'] if attributes[:'minAlphas']

      raise 'You cannot provide both :minAlphas and :min_alphas' if attributes.key?(:'minAlphas') && attributes.key?(:'min_alphas')

      self.min_alphas = attributes[:'min_alphas'] if attributes[:'min_alphas']

      self.min_numerals = attributes[:'minNumerals'] if attributes[:'minNumerals']

      raise 'You cannot provide both :minNumerals and :min_numerals' if attributes.key?(:'minNumerals') && attributes.key?(:'min_numerals')

      self.min_numerals = attributes[:'min_numerals'] if attributes[:'min_numerals']

      self.min_alpha_numerals = attributes[:'minAlphaNumerals'] if attributes[:'minAlphaNumerals']

      raise 'You cannot provide both :minAlphaNumerals and :min_alpha_numerals' if attributes.key?(:'minAlphaNumerals') && attributes.key?(:'min_alpha_numerals')

      self.min_alpha_numerals = attributes[:'min_alpha_numerals'] if attributes[:'min_alpha_numerals']

      self.min_special_chars = attributes[:'minSpecialChars'] if attributes[:'minSpecialChars']

      raise 'You cannot provide both :minSpecialChars and :min_special_chars' if attributes.key?(:'minSpecialChars') && attributes.key?(:'min_special_chars')

      self.min_special_chars = attributes[:'min_special_chars'] if attributes[:'min_special_chars']

      self.max_special_chars = attributes[:'maxSpecialChars'] if attributes[:'maxSpecialChars']

      raise 'You cannot provide both :maxSpecialChars and :max_special_chars' if attributes.key?(:'maxSpecialChars') && attributes.key?(:'max_special_chars')

      self.max_special_chars = attributes[:'max_special_chars'] if attributes[:'max_special_chars']

      self.min_lower_case = attributes[:'minLowerCase'] if attributes[:'minLowerCase']

      raise 'You cannot provide both :minLowerCase and :min_lower_case' if attributes.key?(:'minLowerCase') && attributes.key?(:'min_lower_case')

      self.min_lower_case = attributes[:'min_lower_case'] if attributes[:'min_lower_case']

      self.min_upper_case = attributes[:'minUpperCase'] if attributes[:'minUpperCase']

      raise 'You cannot provide both :minUpperCase and :min_upper_case' if attributes.key?(:'minUpperCase') && attributes.key?(:'min_upper_case')

      self.min_upper_case = attributes[:'min_upper_case'] if attributes[:'min_upper_case']

      self.min_unique_chars = attributes[:'minUniqueChars'] if attributes[:'minUniqueChars']

      raise 'You cannot provide both :minUniqueChars and :min_unique_chars' if attributes.key?(:'minUniqueChars') && attributes.key?(:'min_unique_chars')

      self.min_unique_chars = attributes[:'min_unique_chars'] if attributes[:'min_unique_chars']

      self.max_repeated_chars = attributes[:'maxRepeatedChars'] if attributes[:'maxRepeatedChars']

      raise 'You cannot provide both :maxRepeatedChars and :max_repeated_chars' if attributes.key?(:'maxRepeatedChars') && attributes.key?(:'max_repeated_chars')

      self.max_repeated_chars = attributes[:'max_repeated_chars'] if attributes[:'max_repeated_chars']

      self.starts_with_alphabet = attributes[:'startsWithAlphabet'] unless attributes[:'startsWithAlphabet'].nil?

      raise 'You cannot provide both :startsWithAlphabet and :starts_with_alphabet' if attributes.key?(:'startsWithAlphabet') && attributes.key?(:'starts_with_alphabet')

      self.starts_with_alphabet = attributes[:'starts_with_alphabet'] unless attributes[:'starts_with_alphabet'].nil?

      self.first_name_disallowed = attributes[:'firstNameDisallowed'] unless attributes[:'firstNameDisallowed'].nil?

      raise 'You cannot provide both :firstNameDisallowed and :first_name_disallowed' if attributes.key?(:'firstNameDisallowed') && attributes.key?(:'first_name_disallowed')

      self.first_name_disallowed = attributes[:'first_name_disallowed'] unless attributes[:'first_name_disallowed'].nil?

      self.last_name_disallowed = attributes[:'lastNameDisallowed'] unless attributes[:'lastNameDisallowed'].nil?

      raise 'You cannot provide both :lastNameDisallowed and :last_name_disallowed' if attributes.key?(:'lastNameDisallowed') && attributes.key?(:'last_name_disallowed')

      self.last_name_disallowed = attributes[:'last_name_disallowed'] unless attributes[:'last_name_disallowed'].nil?

      self.user_name_disallowed = attributes[:'userNameDisallowed'] unless attributes[:'userNameDisallowed'].nil?

      raise 'You cannot provide both :userNameDisallowed and :user_name_disallowed' if attributes.key?(:'userNameDisallowed') && attributes.key?(:'user_name_disallowed')

      self.user_name_disallowed = attributes[:'user_name_disallowed'] unless attributes[:'user_name_disallowed'].nil?

      self.disallowed_user_attribute_values = attributes[:'disallowedUserAttributeValues'] if attributes[:'disallowedUserAttributeValues']

      raise 'You cannot provide both :disallowedUserAttributeValues and :disallowed_user_attribute_values' if attributes.key?(:'disallowedUserAttributeValues') && attributes.key?(:'disallowed_user_attribute_values')

      self.disallowed_user_attribute_values = attributes[:'disallowed_user_attribute_values'] if attributes[:'disallowed_user_attribute_values']

      self.min_password_age = attributes[:'minPasswordAge'] if attributes[:'minPasswordAge']

      raise 'You cannot provide both :minPasswordAge and :min_password_age' if attributes.key?(:'minPasswordAge') && attributes.key?(:'min_password_age')

      self.min_password_age = attributes[:'min_password_age'] if attributes[:'min_password_age']

      self.password_expires_after = attributes[:'passwordExpiresAfter'] if attributes[:'passwordExpiresAfter']

      raise 'You cannot provide both :passwordExpiresAfter and :password_expires_after' if attributes.key?(:'passwordExpiresAfter') && attributes.key?(:'password_expires_after')

      self.password_expires_after = attributes[:'password_expires_after'] if attributes[:'password_expires_after']

      self.password_expire_warning = attributes[:'passwordExpireWarning'] if attributes[:'passwordExpireWarning']

      raise 'You cannot provide both :passwordExpireWarning and :password_expire_warning' if attributes.key?(:'passwordExpireWarning') && attributes.key?(:'password_expire_warning')

      self.password_expire_warning = attributes[:'password_expire_warning'] if attributes[:'password_expire_warning']

      self.required_chars = attributes[:'requiredChars'] if attributes[:'requiredChars']

      raise 'You cannot provide both :requiredChars and :required_chars' if attributes.key?(:'requiredChars') && attributes.key?(:'required_chars')

      self.required_chars = attributes[:'required_chars'] if attributes[:'required_chars']

      self.disallowed_chars = attributes[:'disallowedChars'] if attributes[:'disallowedChars']

      raise 'You cannot provide both :disallowedChars and :disallowed_chars' if attributes.key?(:'disallowedChars') && attributes.key?(:'disallowed_chars')

      self.disallowed_chars = attributes[:'disallowed_chars'] if attributes[:'disallowed_chars']

      self.allowed_chars = attributes[:'allowedChars'] if attributes[:'allowedChars']

      raise 'You cannot provide both :allowedChars and :allowed_chars' if attributes.key?(:'allowedChars') && attributes.key?(:'allowed_chars')

      self.allowed_chars = attributes[:'allowed_chars'] if attributes[:'allowed_chars']

      self.disallowed_substrings = attributes[:'disallowedSubstrings'] if attributes[:'disallowedSubstrings']

      raise 'You cannot provide both :disallowedSubstrings and :disallowed_substrings' if attributes.key?(:'disallowedSubstrings') && attributes.key?(:'disallowed_substrings')

      self.disallowed_substrings = attributes[:'disallowed_substrings'] if attributes[:'disallowed_substrings']

      self.dictionary_word_disallowed = attributes[:'dictionaryWordDisallowed'] unless attributes[:'dictionaryWordDisallowed'].nil?

      raise 'You cannot provide both :dictionaryWordDisallowed and :dictionary_word_disallowed' if attributes.key?(:'dictionaryWordDisallowed') && attributes.key?(:'dictionary_word_disallowed')

      self.dictionary_word_disallowed = attributes[:'dictionary_word_disallowed'] unless attributes[:'dictionary_word_disallowed'].nil?

      self.dictionary_location = attributes[:'dictionaryLocation'] if attributes[:'dictionaryLocation']

      raise 'You cannot provide both :dictionaryLocation and :dictionary_location' if attributes.key?(:'dictionaryLocation') && attributes.key?(:'dictionary_location')

      self.dictionary_location = attributes[:'dictionary_location'] if attributes[:'dictionary_location']

      self.dictionary_delimiter = attributes[:'dictionaryDelimiter'] if attributes[:'dictionaryDelimiter']

      raise 'You cannot provide both :dictionaryDelimiter and :dictionary_delimiter' if attributes.key?(:'dictionaryDelimiter') && attributes.key?(:'dictionary_delimiter')

      self.dictionary_delimiter = attributes[:'dictionary_delimiter'] if attributes[:'dictionary_delimiter']

      self.max_incorrect_attempts = attributes[:'maxIncorrectAttempts'] if attributes[:'maxIncorrectAttempts']

      raise 'You cannot provide both :maxIncorrectAttempts and :max_incorrect_attempts' if attributes.key?(:'maxIncorrectAttempts') && attributes.key?(:'max_incorrect_attempts')

      self.max_incorrect_attempts = attributes[:'max_incorrect_attempts'] if attributes[:'max_incorrect_attempts']

      self.lockout_duration = attributes[:'lockoutDuration'] if attributes[:'lockoutDuration']

      raise 'You cannot provide both :lockoutDuration and :lockout_duration' if attributes.key?(:'lockoutDuration') && attributes.key?(:'lockout_duration')

      self.lockout_duration = attributes[:'lockout_duration'] if attributes[:'lockout_duration']

      self.num_passwords_in_history = attributes[:'numPasswordsInHistory'] if attributes[:'numPasswordsInHistory']

      raise 'You cannot provide both :numPasswordsInHistory and :num_passwords_in_history' if attributes.key?(:'numPasswordsInHistory') && attributes.key?(:'num_passwords_in_history')

      self.num_passwords_in_history = attributes[:'num_passwords_in_history'] if attributes[:'num_passwords_in_history']

      self.password_strength = attributes[:'passwordStrength'] if attributes[:'passwordStrength']

      raise 'You cannot provide both :passwordStrength and :password_strength' if attributes.key?(:'passwordStrength') && attributes.key?(:'password_strength')

      self.password_strength = attributes[:'password_strength'] if attributes[:'password_strength']

      self.force_password_reset = attributes[:'forcePasswordReset'] unless attributes[:'forcePasswordReset'].nil?

      raise 'You cannot provide both :forcePasswordReset and :force_password_reset' if attributes.key?(:'forcePasswordReset') && attributes.key?(:'force_password_reset')

      self.force_password_reset = attributes[:'force_password_reset'] unless attributes[:'force_password_reset'].nil?

      self.distinct_characters = attributes[:'distinctCharacters'] if attributes[:'distinctCharacters']

      raise 'You cannot provide both :distinctCharacters and :distinct_characters' if attributes.key?(:'distinctCharacters') && attributes.key?(:'distinct_characters')

      self.distinct_characters = attributes[:'distinct_characters'] if attributes[:'distinct_characters']

      self.priority = attributes[:'priority'] if attributes[:'priority']

      self.groups = attributes[:'groups'] if attributes[:'groups']

      self.configured_password_policy_rules = attributes[:'configuredPasswordPolicyRules'] if attributes[:'configuredPasswordPolicyRules']

      raise 'You cannot provide both :configuredPasswordPolicyRules and :configured_password_policy_rules' if attributes.key?(:'configuredPasswordPolicyRules') && attributes.key?(:'configured_password_policy_rules')

      self.configured_password_policy_rules = attributes[:'configured_password_policy_rules'] if attributes[:'configured_password_policy_rules']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_prevented_operations Object to be assigned
    def idcs_prevented_operations=(idcs_prevented_operations)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_prevented_operations.nil?
        @idcs_prevented_operations = nil
      else
        @idcs_prevented_operations =
          idcs_prevented_operations.collect do |item|
            if IDCS_PREVENTED_OPERATIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'idcs_prevented_operations' [#{item}]. Mapping to 'IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] password_strength Object to be assigned
    def password_strength=(password_strength)
      # rubocop:disable Style/ConditionalAssignment
      if password_strength && !PASSWORD_STRENGTH_ENUM.include?(password_strength)
        OCI.logger.debug("Unknown value for 'password_strength' [" + password_strength + "]. Mapping to 'PASSWORD_STRENGTH_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @password_strength = PASSWORD_STRENGTH_UNKNOWN_ENUM_VALUE
      else
        @password_strength = password_strength
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ocid == other.ocid &&
        schemas == other.schemas &&
        meta == other.meta &&
        idcs_created_by == other.idcs_created_by &&
        idcs_last_modified_by == other.idcs_last_modified_by &&
        idcs_prevented_operations == other.idcs_prevented_operations &&
        tags == other.tags &&
        delete_in_progress == other.delete_in_progress &&
        idcs_last_upgraded_in_release == other.idcs_last_upgraded_in_release &&
        domain_ocid == other.domain_ocid &&
        compartment_ocid == other.compartment_ocid &&
        tenancy_ocid == other.tenancy_ocid &&
        external_id == other.external_id &&
        name == other.name &&
        description == other.description &&
        max_length == other.max_length &&
        min_length == other.min_length &&
        min_alphas == other.min_alphas &&
        min_numerals == other.min_numerals &&
        min_alpha_numerals == other.min_alpha_numerals &&
        min_special_chars == other.min_special_chars &&
        max_special_chars == other.max_special_chars &&
        min_lower_case == other.min_lower_case &&
        min_upper_case == other.min_upper_case &&
        min_unique_chars == other.min_unique_chars &&
        max_repeated_chars == other.max_repeated_chars &&
        starts_with_alphabet == other.starts_with_alphabet &&
        first_name_disallowed == other.first_name_disallowed &&
        last_name_disallowed == other.last_name_disallowed &&
        user_name_disallowed == other.user_name_disallowed &&
        disallowed_user_attribute_values == other.disallowed_user_attribute_values &&
        min_password_age == other.min_password_age &&
        password_expires_after == other.password_expires_after &&
        password_expire_warning == other.password_expire_warning &&
        required_chars == other.required_chars &&
        disallowed_chars == other.disallowed_chars &&
        allowed_chars == other.allowed_chars &&
        disallowed_substrings == other.disallowed_substrings &&
        dictionary_word_disallowed == other.dictionary_word_disallowed &&
        dictionary_location == other.dictionary_location &&
        dictionary_delimiter == other.dictionary_delimiter &&
        max_incorrect_attempts == other.max_incorrect_attempts &&
        lockout_duration == other.lockout_duration &&
        num_passwords_in_history == other.num_passwords_in_history &&
        password_strength == other.password_strength &&
        force_password_reset == other.force_password_reset &&
        distinct_characters == other.distinct_characters &&
        priority == other.priority &&
        groups == other.groups &&
        configured_password_policy_rules == other.configured_password_policy_rules
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ocid, schemas, meta, idcs_created_by, idcs_last_modified_by, idcs_prevented_operations, tags, delete_in_progress, idcs_last_upgraded_in_release, domain_ocid, compartment_ocid, tenancy_ocid, external_id, name, description, max_length, min_length, min_alphas, min_numerals, min_alpha_numerals, min_special_chars, max_special_chars, min_lower_case, min_upper_case, min_unique_chars, max_repeated_chars, starts_with_alphabet, first_name_disallowed, last_name_disallowed, user_name_disallowed, disallowed_user_attribute_values, min_password_age, password_expires_after, password_expire_warning, required_chars, disallowed_chars, allowed_chars, disallowed_substrings, dictionary_word_disallowed, dictionary_location, dictionary_delimiter, max_incorrect_attempts, lockout_duration, num_passwords_in_history, password_strength, force_password_reset, distinct_characters, priority, groups, configured_password_policy_rules].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
