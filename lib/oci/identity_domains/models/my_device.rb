# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Device Resource.
  class IdentityDomains::Models::MyDevice
    IDCS_PREVENTED_OPERATIONS_ENUM = [
      IDCS_PREVENTED_OPERATIONS_REPLACE = 'replace'.freeze,
      IDCS_PREVENTED_OPERATIONS_UPDATE = 'update'.freeze,
      IDCS_PREVENTED_OPERATIONS_DELETE = 'delete'.freeze,
      IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PLATFORM_ENUM = [
      PLATFORM_IOS = 'IOS'.freeze,
      PLATFORM_ANDROID = 'ANDROID'.freeze,
      PLATFORM_WINDOWS = 'WINDOWS'.freeze,
      PLATFORM_CELLULAR = 'CELLULAR'.freeze,
      PLATFORM_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_INITIATED = 'INITIATED'.freeze,
      STATUS_INPROGRESS = 'INPROGRESS'.freeze,
      STATUS_INACTIVE = 'INACTIVE'.freeze,
      STATUS_ENROLLED = 'ENROLLED'.freeze,
      STATUS_LOCKED = 'LOCKED'.freeze,
      STATUS_BLOCKED = 'BLOCKED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :id

    # Unique OCI identifier for the SCIM Resource.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :ocid

    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # @return [OCI::IdentityDomains::Models::Meta]
    attr_accessor :meta

    # @return [OCI::IdentityDomains::Models::IdcsCreatedBy]
    attr_accessor :idcs_created_by

    # @return [OCI::IdentityDomains::Models::IdcsLastModifiedBy]
    attr_accessor :idcs_last_modified_by

    # Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :idcs_prevented_operations

    # A list of tags on this resource.
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::Tags>]
    attr_accessor :tags

    # A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :delete_in_progress

    # The release number when the resource was upgraded.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_last_upgraded_in_release

    # OCI Domain Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_ocid

    # OCI Compartment Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :compartment_ocid

    # OCI Tenant Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenancy_ocid

    # An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued be the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :external_id

    # Device friendly display name
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :display_name

    # Device Platform
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: immutable
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :platform

    # Device Status
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_reader :status

    # Additional comments/reasons for the change in device status
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :reason

    # Device hardware name/model
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :device_type

    # Mobile Authenticator App Version
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :app_version

    # Mobile Authenticator App Package Id
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :package_id

    # Last Sync time for device
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    #  - required: false
    #  - returned: default
    #  - type: dateTime
    #  - uniqueness: none
    # @return [String]
    attr_accessor :last_sync_time

    # The most recent timestamp when the device was successfully validated using one time passcode
    #
    # **Added In:** 17.3.6
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - idcsAllowUpdatesInReadOnlyMode: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    #  - required: false
    #  - returned: default
    #  - type: dateTime
    #  - uniqueness: none
    # @return [String]
    attr_accessor :last_validated_time

    # Device Compliance Status
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :is_compliant

    # Country code of user's Phone Number
    #
    # **Added In:** 19.1.4
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :country_code

    # User's Phone Number
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :phone_number

    # Flag that indicates whether the device is enrolled for account recovery
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [BOOLEAN]
    attr_accessor :is_acc_rec_enabled

    # Unique id sent from device
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :device_uuid

    # Device base public Key
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :base_public_key

    # Authentication method used in device. For FIDO, it will contain SECURITY_KEY/WINDOWS_HELLO etc
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsRequiresWriteForAccessFlows: true
    #  - idcsRequiresImmediateReadAfterWriteForAccessFlows: true
    # @return [String]
    attr_accessor :authentication_method

    # Attribute added for replication log, it is not used by IDCS, just added as place holder
    #
    # **Added In:** 2111040242
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :expires_on

    # Attribute added for replication log, it is not used by IDCS, the DEK that encrypts the specific seed for that user
    #
    # **Added In:** 2111040242
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :seed_dek_id

    # Attribute added for replication log, it is not used by IDCS, it is actual encrypted TOTP seed for the user
    #
    # **Added In:** 2111040242
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :seed

    # @return [OCI::IdentityDomains::Models::MyDeviceThirdPartyFactor]
    attr_accessor :third_party_factor

    # This attribute is required.
    # @return [OCI::IdentityDomains::Models::MyDeviceUser]
    attr_accessor :user

    # @return [OCI::IdentityDomains::Models::MyDevicePushNotificationTarget]
    attr_accessor :push_notification_target

    # Device additional attributes
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: complex
    # @return [Array<OCI::IdentityDomains::Models::MyDeviceAdditionalAttributes>]
    attr_accessor :additional_attributes

    # **[Required]** Authentication Factors
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsCompositeKey: [type]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: complex
    # @return [Array<OCI::IdentityDomains::Models::MyDeviceAuthenticationFactors>]
    attr_accessor :authentication_factors

    # Device Non Compliances
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [name, value]
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: complex
    # @return [Array<OCI::IdentityDomains::Models::MyDeviceNonCompliances>]
    attr_accessor :non_compliances

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ocid': :'ocid',
        'schemas': :'schemas',
        'meta': :'meta',
        'idcs_created_by': :'idcsCreatedBy',
        'idcs_last_modified_by': :'idcsLastModifiedBy',
        'idcs_prevented_operations': :'idcsPreventedOperations',
        'tags': :'tags',
        'delete_in_progress': :'deleteInProgress',
        'idcs_last_upgraded_in_release': :'idcsLastUpgradedInRelease',
        'domain_ocid': :'domainOcid',
        'compartment_ocid': :'compartmentOcid',
        'tenancy_ocid': :'tenancyOcid',
        'external_id': :'externalId',
        'display_name': :'displayName',
        'platform': :'platform',
        'status': :'status',
        'reason': :'reason',
        'device_type': :'deviceType',
        'app_version': :'appVersion',
        'package_id': :'packageId',
        'last_sync_time': :'lastSyncTime',
        'last_validated_time': :'lastValidatedTime',
        'is_compliant': :'isCompliant',
        'country_code': :'countryCode',
        'phone_number': :'phoneNumber',
        'is_acc_rec_enabled': :'isAccRecEnabled',
        'device_uuid': :'deviceUUID',
        'base_public_key': :'basePublicKey',
        'authentication_method': :'authenticationMethod',
        'expires_on': :'expiresOn',
        'seed_dek_id': :'seedDekId',
        'seed': :'seed',
        'third_party_factor': :'thirdPartyFactor',
        'user': :'user',
        'push_notification_target': :'pushNotificationTarget',
        'additional_attributes': :'additionalAttributes',
        'authentication_factors': :'authenticationFactors',
        'non_compliances': :'nonCompliances'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ocid': :'String',
        'schemas': :'Array<String>',
        'meta': :'OCI::IdentityDomains::Models::Meta',
        'idcs_created_by': :'OCI::IdentityDomains::Models::IdcsCreatedBy',
        'idcs_last_modified_by': :'OCI::IdentityDomains::Models::IdcsLastModifiedBy',
        'idcs_prevented_operations': :'Array<String>',
        'tags': :'Array<OCI::IdentityDomains::Models::Tags>',
        'delete_in_progress': :'BOOLEAN',
        'idcs_last_upgraded_in_release': :'String',
        'domain_ocid': :'String',
        'compartment_ocid': :'String',
        'tenancy_ocid': :'String',
        'external_id': :'String',
        'display_name': :'String',
        'platform': :'String',
        'status': :'String',
        'reason': :'String',
        'device_type': :'String',
        'app_version': :'String',
        'package_id': :'String',
        'last_sync_time': :'String',
        'last_validated_time': :'String',
        'is_compliant': :'BOOLEAN',
        'country_code': :'String',
        'phone_number': :'String',
        'is_acc_rec_enabled': :'BOOLEAN',
        'device_uuid': :'String',
        'base_public_key': :'String',
        'authentication_method': :'String',
        'expires_on': :'Integer',
        'seed_dek_id': :'String',
        'seed': :'String',
        'third_party_factor': :'OCI::IdentityDomains::Models::MyDeviceThirdPartyFactor',
        'user': :'OCI::IdentityDomains::Models::MyDeviceUser',
        'push_notification_target': :'OCI::IdentityDomains::Models::MyDevicePushNotificationTarget',
        'additional_attributes': :'Array<OCI::IdentityDomains::Models::MyDeviceAdditionalAttributes>',
        'authentication_factors': :'Array<OCI::IdentityDomains::Models::MyDeviceAuthenticationFactors>',
        'non_compliances': :'Array<OCI::IdentityDomains::Models::MyDeviceNonCompliances>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [OCI::IdentityDomains::Models::Meta] :meta The value to assign to the {#meta} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsCreatedBy] :idcs_created_by The value to assign to the {#idcs_created_by} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsLastModifiedBy] :idcs_last_modified_by The value to assign to the {#idcs_last_modified_by} property
    # @option attributes [Array<String>] :idcs_prevented_operations The value to assign to the {#idcs_prevented_operations} property
    # @option attributes [Array<OCI::IdentityDomains::Models::Tags>] :tags The value to assign to the {#tags} property
    # @option attributes [BOOLEAN] :delete_in_progress The value to assign to the {#delete_in_progress} property
    # @option attributes [String] :idcs_last_upgraded_in_release The value to assign to the {#idcs_last_upgraded_in_release} property
    # @option attributes [String] :domain_ocid The value to assign to the {#domain_ocid} property
    # @option attributes [String] :compartment_ocid The value to assign to the {#compartment_ocid} property
    # @option attributes [String] :tenancy_ocid The value to assign to the {#tenancy_ocid} property
    # @option attributes [String] :external_id The value to assign to the {#external_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :platform The value to assign to the {#platform} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :reason The value to assign to the {#reason} property
    # @option attributes [String] :device_type The value to assign to the {#device_type} property
    # @option attributes [String] :app_version The value to assign to the {#app_version} property
    # @option attributes [String] :package_id The value to assign to the {#package_id} property
    # @option attributes [String] :last_sync_time The value to assign to the {#last_sync_time} property
    # @option attributes [String] :last_validated_time The value to assign to the {#last_validated_time} property
    # @option attributes [BOOLEAN] :is_compliant The value to assign to the {#is_compliant} property
    # @option attributes [String] :country_code The value to assign to the {#country_code} property
    # @option attributes [String] :phone_number The value to assign to the {#phone_number} property
    # @option attributes [BOOLEAN] :is_acc_rec_enabled The value to assign to the {#is_acc_rec_enabled} property
    # @option attributes [String] :device_uuid The value to assign to the {#device_uuid} property
    # @option attributes [String] :base_public_key The value to assign to the {#base_public_key} property
    # @option attributes [String] :authentication_method The value to assign to the {#authentication_method} property
    # @option attributes [Integer] :expires_on The value to assign to the {#expires_on} property
    # @option attributes [String] :seed_dek_id The value to assign to the {#seed_dek_id} property
    # @option attributes [String] :seed The value to assign to the {#seed} property
    # @option attributes [OCI::IdentityDomains::Models::MyDeviceThirdPartyFactor] :third_party_factor The value to assign to the {#third_party_factor} property
    # @option attributes [OCI::IdentityDomains::Models::MyDeviceUser] :user The value to assign to the {#user} property
    # @option attributes [OCI::IdentityDomains::Models::MyDevicePushNotificationTarget] :push_notification_target The value to assign to the {#push_notification_target} property
    # @option attributes [Array<OCI::IdentityDomains::Models::MyDeviceAdditionalAttributes>] :additional_attributes The value to assign to the {#additional_attributes} property
    # @option attributes [Array<OCI::IdentityDomains::Models::MyDeviceAuthenticationFactors>] :authentication_factors The value to assign to the {#authentication_factors} property
    # @option attributes [Array<OCI::IdentityDomains::Models::MyDeviceNonCompliances>] :non_compliances The value to assign to the {#non_compliances} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.meta = attributes[:'meta'] if attributes[:'meta']

      self.idcs_created_by = attributes[:'idcsCreatedBy'] if attributes[:'idcsCreatedBy']

      raise 'You cannot provide both :idcsCreatedBy and :idcs_created_by' if attributes.key?(:'idcsCreatedBy') && attributes.key?(:'idcs_created_by')

      self.idcs_created_by = attributes[:'idcs_created_by'] if attributes[:'idcs_created_by']

      self.idcs_last_modified_by = attributes[:'idcsLastModifiedBy'] if attributes[:'idcsLastModifiedBy']

      raise 'You cannot provide both :idcsLastModifiedBy and :idcs_last_modified_by' if attributes.key?(:'idcsLastModifiedBy') && attributes.key?(:'idcs_last_modified_by')

      self.idcs_last_modified_by = attributes[:'idcs_last_modified_by'] if attributes[:'idcs_last_modified_by']

      self.idcs_prevented_operations = attributes[:'idcsPreventedOperations'] if attributes[:'idcsPreventedOperations']

      raise 'You cannot provide both :idcsPreventedOperations and :idcs_prevented_operations' if attributes.key?(:'idcsPreventedOperations') && attributes.key?(:'idcs_prevented_operations')

      self.idcs_prevented_operations = attributes[:'idcs_prevented_operations'] if attributes[:'idcs_prevented_operations']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.delete_in_progress = attributes[:'deleteInProgress'] unless attributes[:'deleteInProgress'].nil?

      raise 'You cannot provide both :deleteInProgress and :delete_in_progress' if attributes.key?(:'deleteInProgress') && attributes.key?(:'delete_in_progress')

      self.delete_in_progress = attributes[:'delete_in_progress'] unless attributes[:'delete_in_progress'].nil?

      self.idcs_last_upgraded_in_release = attributes[:'idcsLastUpgradedInRelease'] if attributes[:'idcsLastUpgradedInRelease']

      raise 'You cannot provide both :idcsLastUpgradedInRelease and :idcs_last_upgraded_in_release' if attributes.key?(:'idcsLastUpgradedInRelease') && attributes.key?(:'idcs_last_upgraded_in_release')

      self.idcs_last_upgraded_in_release = attributes[:'idcs_last_upgraded_in_release'] if attributes[:'idcs_last_upgraded_in_release']

      self.domain_ocid = attributes[:'domainOcid'] if attributes[:'domainOcid']

      raise 'You cannot provide both :domainOcid and :domain_ocid' if attributes.key?(:'domainOcid') && attributes.key?(:'domain_ocid')

      self.domain_ocid = attributes[:'domain_ocid'] if attributes[:'domain_ocid']

      self.compartment_ocid = attributes[:'compartmentOcid'] if attributes[:'compartmentOcid']

      raise 'You cannot provide both :compartmentOcid and :compartment_ocid' if attributes.key?(:'compartmentOcid') && attributes.key?(:'compartment_ocid')

      self.compartment_ocid = attributes[:'compartment_ocid'] if attributes[:'compartment_ocid']

      self.tenancy_ocid = attributes[:'tenancyOcid'] if attributes[:'tenancyOcid']

      raise 'You cannot provide both :tenancyOcid and :tenancy_ocid' if attributes.key?(:'tenancyOcid') && attributes.key?(:'tenancy_ocid')

      self.tenancy_ocid = attributes[:'tenancy_ocid'] if attributes[:'tenancy_ocid']

      self.external_id = attributes[:'externalId'] if attributes[:'externalId']

      raise 'You cannot provide both :externalId and :external_id' if attributes.key?(:'externalId') && attributes.key?(:'external_id')

      self.external_id = attributes[:'external_id'] if attributes[:'external_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.platform = attributes[:'platform'] if attributes[:'platform']

      self.status = attributes[:'status'] if attributes[:'status']

      self.reason = attributes[:'reason'] if attributes[:'reason']

      self.device_type = attributes[:'deviceType'] if attributes[:'deviceType']

      raise 'You cannot provide both :deviceType and :device_type' if attributes.key?(:'deviceType') && attributes.key?(:'device_type')

      self.device_type = attributes[:'device_type'] if attributes[:'device_type']

      self.app_version = attributes[:'appVersion'] if attributes[:'appVersion']

      raise 'You cannot provide both :appVersion and :app_version' if attributes.key?(:'appVersion') && attributes.key?(:'app_version')

      self.app_version = attributes[:'app_version'] if attributes[:'app_version']

      self.package_id = attributes[:'packageId'] if attributes[:'packageId']

      raise 'You cannot provide both :packageId and :package_id' if attributes.key?(:'packageId') && attributes.key?(:'package_id')

      self.package_id = attributes[:'package_id'] if attributes[:'package_id']

      self.last_sync_time = attributes[:'lastSyncTime'] if attributes[:'lastSyncTime']

      raise 'You cannot provide both :lastSyncTime and :last_sync_time' if attributes.key?(:'lastSyncTime') && attributes.key?(:'last_sync_time')

      self.last_sync_time = attributes[:'last_sync_time'] if attributes[:'last_sync_time']

      self.last_validated_time = attributes[:'lastValidatedTime'] if attributes[:'lastValidatedTime']

      raise 'You cannot provide both :lastValidatedTime and :last_validated_time' if attributes.key?(:'lastValidatedTime') && attributes.key?(:'last_validated_time')

      self.last_validated_time = attributes[:'last_validated_time'] if attributes[:'last_validated_time']

      self.is_compliant = attributes[:'isCompliant'] unless attributes[:'isCompliant'].nil?

      raise 'You cannot provide both :isCompliant and :is_compliant' if attributes.key?(:'isCompliant') && attributes.key?(:'is_compliant')

      self.is_compliant = attributes[:'is_compliant'] unless attributes[:'is_compliant'].nil?

      self.country_code = attributes[:'countryCode'] if attributes[:'countryCode']

      raise 'You cannot provide both :countryCode and :country_code' if attributes.key?(:'countryCode') && attributes.key?(:'country_code')

      self.country_code = attributes[:'country_code'] if attributes[:'country_code']

      self.phone_number = attributes[:'phoneNumber'] if attributes[:'phoneNumber']

      raise 'You cannot provide both :phoneNumber and :phone_number' if attributes.key?(:'phoneNumber') && attributes.key?(:'phone_number')

      self.phone_number = attributes[:'phone_number'] if attributes[:'phone_number']

      self.is_acc_rec_enabled = attributes[:'isAccRecEnabled'] unless attributes[:'isAccRecEnabled'].nil?

      raise 'You cannot provide both :isAccRecEnabled and :is_acc_rec_enabled' if attributes.key?(:'isAccRecEnabled') && attributes.key?(:'is_acc_rec_enabled')

      self.is_acc_rec_enabled = attributes[:'is_acc_rec_enabled'] unless attributes[:'is_acc_rec_enabled'].nil?

      self.device_uuid = attributes[:'deviceUUID'] if attributes[:'deviceUUID']

      raise 'You cannot provide both :deviceUUID and :device_uuid' if attributes.key?(:'deviceUUID') && attributes.key?(:'device_uuid')

      self.device_uuid = attributes[:'device_uuid'] if attributes[:'device_uuid']

      self.base_public_key = attributes[:'basePublicKey'] if attributes[:'basePublicKey']

      raise 'You cannot provide both :basePublicKey and :base_public_key' if attributes.key?(:'basePublicKey') && attributes.key?(:'base_public_key')

      self.base_public_key = attributes[:'base_public_key'] if attributes[:'base_public_key']

      self.authentication_method = attributes[:'authenticationMethod'] if attributes[:'authenticationMethod']

      raise 'You cannot provide both :authenticationMethod and :authentication_method' if attributes.key?(:'authenticationMethod') && attributes.key?(:'authentication_method')

      self.authentication_method = attributes[:'authentication_method'] if attributes[:'authentication_method']

      self.expires_on = attributes[:'expiresOn'] if attributes[:'expiresOn']

      raise 'You cannot provide both :expiresOn and :expires_on' if attributes.key?(:'expiresOn') && attributes.key?(:'expires_on')

      self.expires_on = attributes[:'expires_on'] if attributes[:'expires_on']

      self.seed_dek_id = attributes[:'seedDekId'] if attributes[:'seedDekId']

      raise 'You cannot provide both :seedDekId and :seed_dek_id' if attributes.key?(:'seedDekId') && attributes.key?(:'seed_dek_id')

      self.seed_dek_id = attributes[:'seed_dek_id'] if attributes[:'seed_dek_id']

      self.seed = attributes[:'seed'] if attributes[:'seed']

      self.third_party_factor = attributes[:'thirdPartyFactor'] if attributes[:'thirdPartyFactor']

      raise 'You cannot provide both :thirdPartyFactor and :third_party_factor' if attributes.key?(:'thirdPartyFactor') && attributes.key?(:'third_party_factor')

      self.third_party_factor = attributes[:'third_party_factor'] if attributes[:'third_party_factor']

      self.user = attributes[:'user'] if attributes[:'user']

      self.push_notification_target = attributes[:'pushNotificationTarget'] if attributes[:'pushNotificationTarget']

      raise 'You cannot provide both :pushNotificationTarget and :push_notification_target' if attributes.key?(:'pushNotificationTarget') && attributes.key?(:'push_notification_target')

      self.push_notification_target = attributes[:'push_notification_target'] if attributes[:'push_notification_target']

      self.additional_attributes = attributes[:'additionalAttributes'] if attributes[:'additionalAttributes']

      raise 'You cannot provide both :additionalAttributes and :additional_attributes' if attributes.key?(:'additionalAttributes') && attributes.key?(:'additional_attributes')

      self.additional_attributes = attributes[:'additional_attributes'] if attributes[:'additional_attributes']

      self.authentication_factors = attributes[:'authenticationFactors'] if attributes[:'authenticationFactors']

      raise 'You cannot provide both :authenticationFactors and :authentication_factors' if attributes.key?(:'authenticationFactors') && attributes.key?(:'authentication_factors')

      self.authentication_factors = attributes[:'authentication_factors'] if attributes[:'authentication_factors']

      self.non_compliances = attributes[:'nonCompliances'] if attributes[:'nonCompliances']

      raise 'You cannot provide both :nonCompliances and :non_compliances' if attributes.key?(:'nonCompliances') && attributes.key?(:'non_compliances')

      self.non_compliances = attributes[:'non_compliances'] if attributes[:'non_compliances']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_prevented_operations Object to be assigned
    def idcs_prevented_operations=(idcs_prevented_operations)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_prevented_operations.nil?
        @idcs_prevented_operations = nil
      else
        @idcs_prevented_operations =
          idcs_prevented_operations.collect do |item|
            if IDCS_PREVENTED_OPERATIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'idcs_prevented_operations' [#{item}]. Mapping to 'IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform Object to be assigned
    def platform=(platform)
      # rubocop:disable Style/ConditionalAssignment
      if platform && !PLATFORM_ENUM.include?(platform)
        OCI.logger.debug("Unknown value for 'platform' [" + platform + "]. Mapping to 'PLATFORM_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @platform = PLATFORM_UNKNOWN_ENUM_VALUE
      else
        @platform = platform
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ocid == other.ocid &&
        schemas == other.schemas &&
        meta == other.meta &&
        idcs_created_by == other.idcs_created_by &&
        idcs_last_modified_by == other.idcs_last_modified_by &&
        idcs_prevented_operations == other.idcs_prevented_operations &&
        tags == other.tags &&
        delete_in_progress == other.delete_in_progress &&
        idcs_last_upgraded_in_release == other.idcs_last_upgraded_in_release &&
        domain_ocid == other.domain_ocid &&
        compartment_ocid == other.compartment_ocid &&
        tenancy_ocid == other.tenancy_ocid &&
        external_id == other.external_id &&
        display_name == other.display_name &&
        platform == other.platform &&
        status == other.status &&
        reason == other.reason &&
        device_type == other.device_type &&
        app_version == other.app_version &&
        package_id == other.package_id &&
        last_sync_time == other.last_sync_time &&
        last_validated_time == other.last_validated_time &&
        is_compliant == other.is_compliant &&
        country_code == other.country_code &&
        phone_number == other.phone_number &&
        is_acc_rec_enabled == other.is_acc_rec_enabled &&
        device_uuid == other.device_uuid &&
        base_public_key == other.base_public_key &&
        authentication_method == other.authentication_method &&
        expires_on == other.expires_on &&
        seed_dek_id == other.seed_dek_id &&
        seed == other.seed &&
        third_party_factor == other.third_party_factor &&
        user == other.user &&
        push_notification_target == other.push_notification_target &&
        additional_attributes == other.additional_attributes &&
        authentication_factors == other.authentication_factors &&
        non_compliances == other.non_compliances
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ocid, schemas, meta, idcs_created_by, idcs_last_modified_by, idcs_prevented_operations, tags, delete_in_progress, idcs_last_upgraded_in_release, domain_ocid, compartment_ocid, tenancy_ocid, external_id, display_name, platform, status, reason, device_type, app_version, package_id, last_sync_time, last_validated_time, is_compliant, country_code, phone_number, is_acc_rec_enabled, device_uuid, base_public_key, authentication_method, expires_on, seed_dek_id, seed, third_party_factor, user, push_notification_target, additional_attributes, authentication_factors, non_compliances].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
