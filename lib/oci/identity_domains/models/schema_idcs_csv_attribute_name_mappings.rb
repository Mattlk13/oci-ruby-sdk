# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Csv meta data for those resource type attributes which can be imported / exported from / to csv.
  class IdentityDomains::Models::SchemaIdcsCsvAttributeNameMappings
    # The CSV column header name that maps to this attribute.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :column_header_name

    # The deprecated CSV column header name that maps to this attribute.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :deprecated_column_header_name

    # The attribute path that the CSV column header name maps to for complex multi-valued attributes.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :maps_to

    # The default value to be used during import processing in case the CSV column header is not present or value is not given in the import CSV.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :default_value

    # If values of the CSV column header name can contain multiple values, this attribute specifies the delimiter to be used. For example, Group's \\\"User Members\\\" CSV column header is multi-valued and it's delimiter is a semi-colon (\\\";\\\").
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :multi_value_delimiter

    # This specifies the Csv Header for resolving Resource Type for this Column Header
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :csv_column_for_resolving_resource_type

    # This attribute gives a maps for resolving Resource Type after reading it's value from \\\"csvColumnForResolvingResourceType\\\" attribute
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SchemaResolveValueUsingResourceType>]
    attr_accessor :resolve_value_using_resource_type

    # This attribute specifies the mapping of \\\"uniqueAttributeNameForDisplay\\\" attributes(s) of the referenced resource with the columnHeaderName(s). This attribute should be given in the idcsCsvAttributeNameMappings when uniqueAttributeNameForDisplay contains more than one attribute.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SchemaReferencedResourceTypeUniqueAttributeNameMappings>]
    attr_accessor :referenced_resource_type_unique_attribute_name_mappings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'column_header_name': :'columnHeaderName',
        'deprecated_column_header_name': :'deprecatedColumnHeaderName',
        'maps_to': :'mapsTo',
        'default_value': :'defaultValue',
        'multi_value_delimiter': :'multiValueDelimiter',
        'csv_column_for_resolving_resource_type': :'csvColumnForResolvingResourceType',
        'resolve_value_using_resource_type': :'resolveValueUsingResourceType',
        'referenced_resource_type_unique_attribute_name_mappings': :'referencedResourceTypeUniqueAttributeNameMappings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'column_header_name': :'String',
        'deprecated_column_header_name': :'String',
        'maps_to': :'String',
        'default_value': :'String',
        'multi_value_delimiter': :'String',
        'csv_column_for_resolving_resource_type': :'String',
        'resolve_value_using_resource_type': :'Array<OCI::IdentityDomains::Models::SchemaResolveValueUsingResourceType>',
        'referenced_resource_type_unique_attribute_name_mappings': :'Array<OCI::IdentityDomains::Models::SchemaReferencedResourceTypeUniqueAttributeNameMappings>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :column_header_name The value to assign to the {#column_header_name} property
    # @option attributes [String] :deprecated_column_header_name The value to assign to the {#deprecated_column_header_name} property
    # @option attributes [String] :maps_to The value to assign to the {#maps_to} property
    # @option attributes [String] :default_value The value to assign to the {#default_value} property
    # @option attributes [String] :multi_value_delimiter The value to assign to the {#multi_value_delimiter} property
    # @option attributes [String] :csv_column_for_resolving_resource_type The value to assign to the {#csv_column_for_resolving_resource_type} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SchemaResolveValueUsingResourceType>] :resolve_value_using_resource_type The value to assign to the {#resolve_value_using_resource_type} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SchemaReferencedResourceTypeUniqueAttributeNameMappings>] :referenced_resource_type_unique_attribute_name_mappings The value to assign to the {#referenced_resource_type_unique_attribute_name_mappings} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.column_header_name = attributes[:'columnHeaderName'] if attributes[:'columnHeaderName']

      raise 'You cannot provide both :columnHeaderName and :column_header_name' if attributes.key?(:'columnHeaderName') && attributes.key?(:'column_header_name')

      self.column_header_name = attributes[:'column_header_name'] if attributes[:'column_header_name']

      self.deprecated_column_header_name = attributes[:'deprecatedColumnHeaderName'] if attributes[:'deprecatedColumnHeaderName']

      raise 'You cannot provide both :deprecatedColumnHeaderName and :deprecated_column_header_name' if attributes.key?(:'deprecatedColumnHeaderName') && attributes.key?(:'deprecated_column_header_name')

      self.deprecated_column_header_name = attributes[:'deprecated_column_header_name'] if attributes[:'deprecated_column_header_name']

      self.maps_to = attributes[:'mapsTo'] if attributes[:'mapsTo']

      raise 'You cannot provide both :mapsTo and :maps_to' if attributes.key?(:'mapsTo') && attributes.key?(:'maps_to')

      self.maps_to = attributes[:'maps_to'] if attributes[:'maps_to']

      self.default_value = attributes[:'defaultValue'] if attributes[:'defaultValue']

      raise 'You cannot provide both :defaultValue and :default_value' if attributes.key?(:'defaultValue') && attributes.key?(:'default_value')

      self.default_value = attributes[:'default_value'] if attributes[:'default_value']

      self.multi_value_delimiter = attributes[:'multiValueDelimiter'] if attributes[:'multiValueDelimiter']

      raise 'You cannot provide both :multiValueDelimiter and :multi_value_delimiter' if attributes.key?(:'multiValueDelimiter') && attributes.key?(:'multi_value_delimiter')

      self.multi_value_delimiter = attributes[:'multi_value_delimiter'] if attributes[:'multi_value_delimiter']

      self.csv_column_for_resolving_resource_type = attributes[:'csvColumnForResolvingResourceType'] if attributes[:'csvColumnForResolvingResourceType']

      raise 'You cannot provide both :csvColumnForResolvingResourceType and :csv_column_for_resolving_resource_type' if attributes.key?(:'csvColumnForResolvingResourceType') && attributes.key?(:'csv_column_for_resolving_resource_type')

      self.csv_column_for_resolving_resource_type = attributes[:'csv_column_for_resolving_resource_type'] if attributes[:'csv_column_for_resolving_resource_type']

      self.resolve_value_using_resource_type = attributes[:'resolveValueUsingResourceType'] if attributes[:'resolveValueUsingResourceType']

      raise 'You cannot provide both :resolveValueUsingResourceType and :resolve_value_using_resource_type' if attributes.key?(:'resolveValueUsingResourceType') && attributes.key?(:'resolve_value_using_resource_type')

      self.resolve_value_using_resource_type = attributes[:'resolve_value_using_resource_type'] if attributes[:'resolve_value_using_resource_type']

      self.referenced_resource_type_unique_attribute_name_mappings = attributes[:'referencedResourceTypeUniqueAttributeNameMappings'] if attributes[:'referencedResourceTypeUniqueAttributeNameMappings']

      raise 'You cannot provide both :referencedResourceTypeUniqueAttributeNameMappings and :referenced_resource_type_unique_attribute_name_mappings' if attributes.key?(:'referencedResourceTypeUniqueAttributeNameMappings') && attributes.key?(:'referenced_resource_type_unique_attribute_name_mappings')

      self.referenced_resource_type_unique_attribute_name_mappings = attributes[:'referenced_resource_type_unique_attribute_name_mappings'] if attributes[:'referenced_resource_type_unique_attribute_name_mappings']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        column_header_name == other.column_header_name &&
        deprecated_column_header_name == other.deprecated_column_header_name &&
        maps_to == other.maps_to &&
        default_value == other.default_value &&
        multi_value_delimiter == other.multi_value_delimiter &&
        csv_column_for_resolving_resource_type == other.csv_column_for_resolving_resource_type &&
        resolve_value_using_resource_type == other.resolve_value_using_resource_type &&
        referenced_resource_type_unique_attribute_name_mappings == other.referenced_resource_type_unique_attribute_name_mappings
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [column_header_name, deprecated_column_header_name, maps_to, default_value, multi_value_delimiter, csv_column_for_resolving_resource_type, resolve_value_using_resource_type, referenced_resource_type_unique_attribute_name_mappings].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
