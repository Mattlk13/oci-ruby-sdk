# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # X509 Identity Provider Extension Schema
  class IdentityDomains::Models::ExtensionX509IdentityProvider
    EKU_VALUES_ENUM = [
      EKU_VALUES_SERVER_AUTH = 'SERVER_AUTH'.freeze,
      EKU_VALUES_CLIENT_AUTH = 'CLIENT_AUTH'.freeze,
      EKU_VALUES_CODE_SIGNING = 'CODE_SIGNING'.freeze,
      EKU_VALUES_EMAIL_PROTECTION = 'EMAIL_PROTECTION'.freeze,
      EKU_VALUES_TIME_STAMPING = 'TIME_STAMPING'.freeze,
      EKU_VALUES_OCSP_SIGNING = 'OCSP_SIGNING'.freeze,
      EKU_VALUES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** X509 Certificate Matching Attribute
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :cert_match_attribute

    # **[Required]** This property specifies the userstore attribute value that must match the incoming certificate attribute.
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :user_match_attribute

    # Check for specific conditions of other certificate attributes
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :other_cert_match_attribute

    # **[Required]** Certificate alias list to create a chain for the incoming client certificate
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :signing_certificate_chain

    # Set to true to enable OCSP Validation
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :ocsp_enabled

    # This property specifies the OCSP Server alias name
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ocsp_server_name

    # This property specifies OCSP Responder URL.
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :ocsp_responder_url

    # Allow access if OCSP response is UNKNOWN or OCSP Responder does not respond within the timeout duration
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :ocsp_allow_unknown_response_status

    # Revalidate OCSP status for user after X hours
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - idcsMaxValue: 24
    #  - idcsMinValue: 0
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :ocsp_revalidate_time

    # Describes if the OCSP response is signed
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :ocsp_enable_signed_response

    # OCSP Trusted Certificate Chain
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :ocsp_trust_cert_chain

    # Set to true to enable CRL Validation
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :crl_enabled

    # Fallback on CRL Validation if OCSP fails.
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :crl_check_on_ocsp_failure_enabled

    # CRL Location URL
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :crl_location

    # Fetch the CRL contents every X minutes
    #
    # **Added In:** 2010242156
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :crl_reload_duration

    # Set to true to enable EKU Validation
    #
    # **Added In:** 2304270343
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :eku_validation_enabled

    # List of EKU which needs to be validated
    #
    # **Added In:** 2304270343
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :eku_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'cert_match_attribute': :'certMatchAttribute',
        'user_match_attribute': :'userMatchAttribute',
        'other_cert_match_attribute': :'otherCertMatchAttribute',
        'signing_certificate_chain': :'signingCertificateChain',
        'ocsp_enabled': :'ocspEnabled',
        'ocsp_server_name': :'ocspServerName',
        'ocsp_responder_url': :'ocspResponderURL',
        'ocsp_allow_unknown_response_status': :'ocspAllowUnknownResponseStatus',
        'ocsp_revalidate_time': :'ocspRevalidateTime',
        'ocsp_enable_signed_response': :'ocspEnableSignedResponse',
        'ocsp_trust_cert_chain': :'ocspTrustCertChain',
        'crl_enabled': :'crlEnabled',
        'crl_check_on_ocsp_failure_enabled': :'crlCheckOnOCSPFailureEnabled',
        'crl_location': :'crlLocation',
        'crl_reload_duration': :'crlReloadDuration',
        'eku_validation_enabled': :'ekuValidationEnabled',
        'eku_values': :'ekuValues'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'cert_match_attribute': :'String',
        'user_match_attribute': :'String',
        'other_cert_match_attribute': :'String',
        'signing_certificate_chain': :'Array<String>',
        'ocsp_enabled': :'BOOLEAN',
        'ocsp_server_name': :'String',
        'ocsp_responder_url': :'String',
        'ocsp_allow_unknown_response_status': :'BOOLEAN',
        'ocsp_revalidate_time': :'Integer',
        'ocsp_enable_signed_response': :'BOOLEAN',
        'ocsp_trust_cert_chain': :'Array<String>',
        'crl_enabled': :'BOOLEAN',
        'crl_check_on_ocsp_failure_enabled': :'BOOLEAN',
        'crl_location': :'String',
        'crl_reload_duration': :'Integer',
        'eku_validation_enabled': :'BOOLEAN',
        'eku_values': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :cert_match_attribute The value to assign to the {#cert_match_attribute} property
    # @option attributes [String] :user_match_attribute The value to assign to the {#user_match_attribute} property
    # @option attributes [String] :other_cert_match_attribute The value to assign to the {#other_cert_match_attribute} property
    # @option attributes [Array<String>] :signing_certificate_chain The value to assign to the {#signing_certificate_chain} property
    # @option attributes [BOOLEAN] :ocsp_enabled The value to assign to the {#ocsp_enabled} property
    # @option attributes [String] :ocsp_server_name The value to assign to the {#ocsp_server_name} property
    # @option attributes [String] :ocsp_responder_url The value to assign to the {#ocsp_responder_url} property
    # @option attributes [BOOLEAN] :ocsp_allow_unknown_response_status The value to assign to the {#ocsp_allow_unknown_response_status} property
    # @option attributes [Integer] :ocsp_revalidate_time The value to assign to the {#ocsp_revalidate_time} property
    # @option attributes [BOOLEAN] :ocsp_enable_signed_response The value to assign to the {#ocsp_enable_signed_response} property
    # @option attributes [Array<String>] :ocsp_trust_cert_chain The value to assign to the {#ocsp_trust_cert_chain} property
    # @option attributes [BOOLEAN] :crl_enabled The value to assign to the {#crl_enabled} property
    # @option attributes [BOOLEAN] :crl_check_on_ocsp_failure_enabled The value to assign to the {#crl_check_on_ocsp_failure_enabled} property
    # @option attributes [String] :crl_location The value to assign to the {#crl_location} property
    # @option attributes [Integer] :crl_reload_duration The value to assign to the {#crl_reload_duration} property
    # @option attributes [BOOLEAN] :eku_validation_enabled The value to assign to the {#eku_validation_enabled} property
    # @option attributes [Array<String>] :eku_values The value to assign to the {#eku_values} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.cert_match_attribute = attributes[:'certMatchAttribute'] if attributes[:'certMatchAttribute']

      raise 'You cannot provide both :certMatchAttribute and :cert_match_attribute' if attributes.key?(:'certMatchAttribute') && attributes.key?(:'cert_match_attribute')

      self.cert_match_attribute = attributes[:'cert_match_attribute'] if attributes[:'cert_match_attribute']

      self.user_match_attribute = attributes[:'userMatchAttribute'] if attributes[:'userMatchAttribute']

      raise 'You cannot provide both :userMatchAttribute and :user_match_attribute' if attributes.key?(:'userMatchAttribute') && attributes.key?(:'user_match_attribute')

      self.user_match_attribute = attributes[:'user_match_attribute'] if attributes[:'user_match_attribute']

      self.other_cert_match_attribute = attributes[:'otherCertMatchAttribute'] if attributes[:'otherCertMatchAttribute']

      raise 'You cannot provide both :otherCertMatchAttribute and :other_cert_match_attribute' if attributes.key?(:'otherCertMatchAttribute') && attributes.key?(:'other_cert_match_attribute')

      self.other_cert_match_attribute = attributes[:'other_cert_match_attribute'] if attributes[:'other_cert_match_attribute']

      self.signing_certificate_chain = attributes[:'signingCertificateChain'] if attributes[:'signingCertificateChain']

      raise 'You cannot provide both :signingCertificateChain and :signing_certificate_chain' if attributes.key?(:'signingCertificateChain') && attributes.key?(:'signing_certificate_chain')

      self.signing_certificate_chain = attributes[:'signing_certificate_chain'] if attributes[:'signing_certificate_chain']

      self.ocsp_enabled = attributes[:'ocspEnabled'] unless attributes[:'ocspEnabled'].nil?

      raise 'You cannot provide both :ocspEnabled and :ocsp_enabled' if attributes.key?(:'ocspEnabled') && attributes.key?(:'ocsp_enabled')

      self.ocsp_enabled = attributes[:'ocsp_enabled'] unless attributes[:'ocsp_enabled'].nil?

      self.ocsp_server_name = attributes[:'ocspServerName'] if attributes[:'ocspServerName']

      raise 'You cannot provide both :ocspServerName and :ocsp_server_name' if attributes.key?(:'ocspServerName') && attributes.key?(:'ocsp_server_name')

      self.ocsp_server_name = attributes[:'ocsp_server_name'] if attributes[:'ocsp_server_name']

      self.ocsp_responder_url = attributes[:'ocspResponderURL'] if attributes[:'ocspResponderURL']

      raise 'You cannot provide both :ocspResponderURL and :ocsp_responder_url' if attributes.key?(:'ocspResponderURL') && attributes.key?(:'ocsp_responder_url')

      self.ocsp_responder_url = attributes[:'ocsp_responder_url'] if attributes[:'ocsp_responder_url']

      self.ocsp_allow_unknown_response_status = attributes[:'ocspAllowUnknownResponseStatus'] unless attributes[:'ocspAllowUnknownResponseStatus'].nil?

      raise 'You cannot provide both :ocspAllowUnknownResponseStatus and :ocsp_allow_unknown_response_status' if attributes.key?(:'ocspAllowUnknownResponseStatus') && attributes.key?(:'ocsp_allow_unknown_response_status')

      self.ocsp_allow_unknown_response_status = attributes[:'ocsp_allow_unknown_response_status'] unless attributes[:'ocsp_allow_unknown_response_status'].nil?

      self.ocsp_revalidate_time = attributes[:'ocspRevalidateTime'] if attributes[:'ocspRevalidateTime']

      raise 'You cannot provide both :ocspRevalidateTime and :ocsp_revalidate_time' if attributes.key?(:'ocspRevalidateTime') && attributes.key?(:'ocsp_revalidate_time')

      self.ocsp_revalidate_time = attributes[:'ocsp_revalidate_time'] if attributes[:'ocsp_revalidate_time']

      self.ocsp_enable_signed_response = attributes[:'ocspEnableSignedResponse'] unless attributes[:'ocspEnableSignedResponse'].nil?

      raise 'You cannot provide both :ocspEnableSignedResponse and :ocsp_enable_signed_response' if attributes.key?(:'ocspEnableSignedResponse') && attributes.key?(:'ocsp_enable_signed_response')

      self.ocsp_enable_signed_response = attributes[:'ocsp_enable_signed_response'] unless attributes[:'ocsp_enable_signed_response'].nil?

      self.ocsp_trust_cert_chain = attributes[:'ocspTrustCertChain'] if attributes[:'ocspTrustCertChain']

      raise 'You cannot provide both :ocspTrustCertChain and :ocsp_trust_cert_chain' if attributes.key?(:'ocspTrustCertChain') && attributes.key?(:'ocsp_trust_cert_chain')

      self.ocsp_trust_cert_chain = attributes[:'ocsp_trust_cert_chain'] if attributes[:'ocsp_trust_cert_chain']

      self.crl_enabled = attributes[:'crlEnabled'] unless attributes[:'crlEnabled'].nil?

      raise 'You cannot provide both :crlEnabled and :crl_enabled' if attributes.key?(:'crlEnabled') && attributes.key?(:'crl_enabled')

      self.crl_enabled = attributes[:'crl_enabled'] unless attributes[:'crl_enabled'].nil?

      self.crl_check_on_ocsp_failure_enabled = attributes[:'crlCheckOnOCSPFailureEnabled'] unless attributes[:'crlCheckOnOCSPFailureEnabled'].nil?

      raise 'You cannot provide both :crlCheckOnOCSPFailureEnabled and :crl_check_on_ocsp_failure_enabled' if attributes.key?(:'crlCheckOnOCSPFailureEnabled') && attributes.key?(:'crl_check_on_ocsp_failure_enabled')

      self.crl_check_on_ocsp_failure_enabled = attributes[:'crl_check_on_ocsp_failure_enabled'] unless attributes[:'crl_check_on_ocsp_failure_enabled'].nil?

      self.crl_location = attributes[:'crlLocation'] if attributes[:'crlLocation']

      raise 'You cannot provide both :crlLocation and :crl_location' if attributes.key?(:'crlLocation') && attributes.key?(:'crl_location')

      self.crl_location = attributes[:'crl_location'] if attributes[:'crl_location']

      self.crl_reload_duration = attributes[:'crlReloadDuration'] if attributes[:'crlReloadDuration']

      raise 'You cannot provide both :crlReloadDuration and :crl_reload_duration' if attributes.key?(:'crlReloadDuration') && attributes.key?(:'crl_reload_duration')

      self.crl_reload_duration = attributes[:'crl_reload_duration'] if attributes[:'crl_reload_duration']

      self.eku_validation_enabled = attributes[:'ekuValidationEnabled'] unless attributes[:'ekuValidationEnabled'].nil?

      raise 'You cannot provide both :ekuValidationEnabled and :eku_validation_enabled' if attributes.key?(:'ekuValidationEnabled') && attributes.key?(:'eku_validation_enabled')

      self.eku_validation_enabled = attributes[:'eku_validation_enabled'] unless attributes[:'eku_validation_enabled'].nil?

      self.eku_values = attributes[:'ekuValues'] if attributes[:'ekuValues']

      raise 'You cannot provide both :ekuValues and :eku_values' if attributes.key?(:'ekuValues') && attributes.key?(:'eku_values')

      self.eku_values = attributes[:'eku_values'] if attributes[:'eku_values']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] eku_values Object to be assigned
    def eku_values=(eku_values)
      # rubocop:disable Style/ConditionalAssignment
      if eku_values.nil?
        @eku_values = nil
      else
        @eku_values =
          eku_values.collect do |item|
            if EKU_VALUES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'eku_values' [#{item}]. Mapping to 'EKU_VALUES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              EKU_VALUES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        cert_match_attribute == other.cert_match_attribute &&
        user_match_attribute == other.user_match_attribute &&
        other_cert_match_attribute == other.other_cert_match_attribute &&
        signing_certificate_chain == other.signing_certificate_chain &&
        ocsp_enabled == other.ocsp_enabled &&
        ocsp_server_name == other.ocsp_server_name &&
        ocsp_responder_url == other.ocsp_responder_url &&
        ocsp_allow_unknown_response_status == other.ocsp_allow_unknown_response_status &&
        ocsp_revalidate_time == other.ocsp_revalidate_time &&
        ocsp_enable_signed_response == other.ocsp_enable_signed_response &&
        ocsp_trust_cert_chain == other.ocsp_trust_cert_chain &&
        crl_enabled == other.crl_enabled &&
        crl_check_on_ocsp_failure_enabled == other.crl_check_on_ocsp_failure_enabled &&
        crl_location == other.crl_location &&
        crl_reload_duration == other.crl_reload_duration &&
        eku_validation_enabled == other.eku_validation_enabled &&
        eku_values == other.eku_values
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cert_match_attribute, user_match_attribute, other_cert_match_attribute, signing_certificate_chain, ocsp_enabled, ocsp_server_name, ocsp_responder_url, ocsp_allow_unknown_response_status, ocsp_revalidate_time, ocsp_enable_signed_response, ocsp_trust_cert_chain, crl_enabled, crl_check_on_ocsp_failure_enabled, crl_location, crl_reload_duration, eku_validation_enabled, eku_values].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
