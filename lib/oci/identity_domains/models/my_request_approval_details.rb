# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Approvals created for this request.
  class IdentityDomains::Models::MyRequestApprovalDetails
    # Approver Id
    #
    # **Added In:** 2307071836
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - mutability: readOnly
    # @return [String]
    attr_accessor :approver_id

    # Approver display name
    #
    # **Added In:** 2307071836
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - mutability: readOnly
    # @return [String]
    attr_accessor :approver_display_name

    # Approval Justification
    #
    # **Added In:** 2307071836
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - idcsSearchable: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - mutability: readOnly
    # @return [String]
    attr_accessor :justification

    # Approval Status
    #
    # **Added In:** 2307071836
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - mutability: readOnly
    # @return [String]
    attr_accessor :status

    # Approval Order
    #
    # **Added In:** 2307071836
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    #  - mutability: readOnly
    # @return [Integer]
    attr_accessor :order

    # Approval Type (Escalation or Regular)
    #
    # **Added In:** 2307071836
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - mutability: readOnly
    # @return [String]
    attr_accessor :approval_type

    # Approval Update Time
    #
    # **Added In:** 2307071836
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - idcsSearchable: false
    #  - returned: default
    #  - type: dateTime
    #  - uniqueness: none
    #  - mutability: readOnly
    # @return [String]
    attr_accessor :time_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'approver_id': :'approverId',
        'approver_display_name': :'approverDisplayName',
        'justification': :'justification',
        'status': :'status',
        'order': :'order',
        'approval_type': :'approvalType',
        'time_updated': :'timeUpdated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'approver_id': :'String',
        'approver_display_name': :'String',
        'justification': :'String',
        'status': :'String',
        'order': :'Integer',
        'approval_type': :'String',
        'time_updated': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :approver_id The value to assign to the {#approver_id} property
    # @option attributes [String] :approver_display_name The value to assign to the {#approver_display_name} property
    # @option attributes [String] :justification The value to assign to the {#justification} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [Integer] :order The value to assign to the {#order} property
    # @option attributes [String] :approval_type The value to assign to the {#approval_type} property
    # @option attributes [String] :time_updated The value to assign to the {#time_updated} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.approver_id = attributes[:'approverId'] if attributes[:'approverId']

      raise 'You cannot provide both :approverId and :approver_id' if attributes.key?(:'approverId') && attributes.key?(:'approver_id')

      self.approver_id = attributes[:'approver_id'] if attributes[:'approver_id']

      self.approver_display_name = attributes[:'approverDisplayName'] if attributes[:'approverDisplayName']

      raise 'You cannot provide both :approverDisplayName and :approver_display_name' if attributes.key?(:'approverDisplayName') && attributes.key?(:'approver_display_name')

      self.approver_display_name = attributes[:'approver_display_name'] if attributes[:'approver_display_name']

      self.justification = attributes[:'justification'] if attributes[:'justification']

      self.status = attributes[:'status'] if attributes[:'status']

      self.order = attributes[:'order'] if attributes[:'order']

      self.approval_type = attributes[:'approvalType'] if attributes[:'approvalType']

      raise 'You cannot provide both :approvalType and :approval_type' if attributes.key?(:'approvalType') && attributes.key?(:'approval_type')

      self.approval_type = attributes[:'approval_type'] if attributes[:'approval_type']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        approver_id == other.approver_id &&
        approver_display_name == other.approver_display_name &&
        justification == other.justification &&
        status == other.status &&
        order == other.order &&
        approval_type == other.approval_type &&
        time_updated == other.time_updated
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [approver_id, approver_display_name, justification, status, order, approval_type, time_updated].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
