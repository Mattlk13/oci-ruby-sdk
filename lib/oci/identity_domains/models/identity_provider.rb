# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Federation trusted partner Identity Provider
  class IdentityDomains::Models::IdentityProvider
    IDCS_PREVENTED_OPERATIONS_ENUM = [
      IDCS_PREVENTED_OPERATIONS_REPLACE = 'replace'.freeze,
      IDCS_PREVENTED_OPERATIONS_UPDATE = 'update'.freeze,
      IDCS_PREVENTED_OPERATIONS_DELETE = 'delete'.freeze,
      IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUTHN_REQUEST_BINDING_ENUM = [
      AUTHN_REQUEST_BINDING_REDIRECT = 'Redirect'.freeze,
      AUTHN_REQUEST_BINDING_POST = 'Post'.freeze,
      AUTHN_REQUEST_BINDING_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LOGOUT_BINDING_ENUM = [
      LOGOUT_BINDING_REDIRECT = 'Redirect'.freeze,
      LOGOUT_BINDING_POST = 'Post'.freeze,
      LOGOUT_BINDING_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SIGNATURE_HASH_ALGORITHM_ENUM = [
      SIGNATURE_HASH_ALGORITHM_SHA_1 = 'SHA-1'.freeze,
      SIGNATURE_HASH_ALGORITHM_SHA_256 = 'SHA-256'.freeze,
      SIGNATURE_HASH_ALGORITHM_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    JIT_USER_PROV_GROUP_ASSIGNMENT_METHOD_ENUM = [
      JIT_USER_PROV_GROUP_ASSIGNMENT_METHOD_OVERWRITE = 'Overwrite'.freeze,
      JIT_USER_PROV_GROUP_ASSIGNMENT_METHOD_MERGE = 'Merge'.freeze,
      JIT_USER_PROV_GROUP_ASSIGNMENT_METHOD_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    JIT_USER_PROV_GROUP_MAPPING_MODE_ENUM = [
      JIT_USER_PROV_GROUP_MAPPING_MODE_IMPLICIT = 'implicit'.freeze,
      JIT_USER_PROV_GROUP_MAPPING_MODE_EXPLICIT = 'explicit'.freeze,
      JIT_USER_PROV_GROUP_MAPPING_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    USER_MAPPING_METHOD_ENUM = [
      USER_MAPPING_METHOD_NAME_ID_TO_USER_ATTRIBUTE = 'NameIDToUserAttribute'.freeze,
      USER_MAPPING_METHOD_ASSERTION_ATTRIBUTE_TO_USER_ATTRIBUTE = 'AssertionAttributeToUserAttribute'.freeze,
      USER_MAPPING_METHOD_CORRELATION_POLICY_RULE = 'CorrelationPolicyRule'.freeze,
      USER_MAPPING_METHOD_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TYPE_ENUM = [
      TYPE_SAML = 'SAML'.freeze,
      TYPE_SOCIAL = 'SOCIAL'.freeze,
      TYPE_IWA = 'IWA'.freeze,
      TYPE_X509 = 'X509'.freeze,
      TYPE_LOCAL = 'LOCAL'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :id

    # Unique OCI identifier for the SCIM Resource.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :ocid

    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # @return [OCI::IdentityDomains::Models::Meta]
    attr_accessor :meta

    # @return [OCI::IdentityDomains::Models::IdcsCreatedBy]
    attr_accessor :idcs_created_by

    # @return [OCI::IdentityDomains::Models::IdcsLastModifiedBy]
    attr_accessor :idcs_last_modified_by

    # Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :idcs_prevented_operations

    # A list of tags on this resource.
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::Tags>]
    attr_accessor :tags

    # A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :delete_in_progress

    # The release number when the resource was upgraded.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_last_upgraded_in_release

    # OCI Domain Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_ocid

    # OCI Compartment Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :compartment_ocid

    # OCI Tenant Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenancy_ocid

    # An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :external_id

    # **[Required]** Unique name of the trusted Identity Provider.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: always
    #  - type: string
    #  - uniqueness: server
    # @return [String]
    attr_accessor :partner_name

    # Description
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :description

    # Metadata
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :metadata

    # Provider ID
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: server
    # @return [String]
    attr_accessor :partner_provider_id

    # The alternate Provider ID to be used as the Oracle Identity Cloud Service providerID (instead of the one in SamlSettings) when interacting with this IdP.
    #
    # **Added In:** 19.2.1
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenant_provider_id

    # Succinct ID
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: server
    # @return [String]
    attr_accessor :succinct_id

    # Identity Provider SSO URL
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idp_sso_url

    # Logout request URL
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :logout_request_url

    # Logout response URL
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :logout_response_url

    # Signing certificate
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :signing_certificate

    # Encryption certificate
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :encryption_certificate

    # Default authentication request name ID format.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :name_id_format

    # Set to true to include the signing certificate in the signature.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :include_signing_cert_in_signature

    # HTTP binding to use for authentication requests.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :authn_request_binding

    # HTTP binding to use for logout.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :logout_binding

    # Set to true to enable logout.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :logout_enabled

    # Signature hash algorithm.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :signature_hash_algorithm

    # **[Required]** Set to true to indicate Partner enabled.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :enabled

    # Identity Provider Icon URL.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :icon_url

    # Set to true to indicate whether to show IdP in login page or not.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :shown_on_login_page

    # Set to true to indicate JIT User Provisioning is enabled
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :jit_user_prov_enabled

    # Set to true to indicate JIT User Provisioning Groups should be assigned based on assertion attribute
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :jit_user_prov_group_assertion_attribute_enabled

    # Set to true to indicate JIT User Provisioning Groups should be assigned from a static list
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :jit_user_prov_group_static_list_enabled

    # Set to true to indicate JIT User Creation is enabled
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :jit_user_prov_create_user_enabled

    # Set to true to indicate JIT User Creation is enabled
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :jit_user_prov_attribute_update_enabled

    # The default value is 'Overwrite', which tells Just-In-Time user-provisioning to replace any current group-assignments for a User with those assigned by assertions and/or those assigned statically. Specify 'Merge' if you want Just-In-Time user-provisioning to combine its group-assignments with those the user already has.
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :jit_user_prov_group_assignment_method

    # Property to indicate the mode of group mapping
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :jit_user_prov_group_mapping_mode

    # Name of the assertion attribute containing the users groups
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :jit_user_prov_group_saml_attribute_name

    # The serviceInstanceIdentifier of the App that hosts this IdP. This value will match the opcServiceInstanceGUID of any service-instance that the IdP represents.
    #
    # **Added In:** 18.2.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: never
    #  - type: string
    #  - uniqueness: server
    # @return [String]
    attr_accessor :service_instance_identifier

    # User mapping method.
    #
    # **Deprecated Since: 20.1.3**
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsValuePersistedInOtherAttribute: true
    # @return [String]
    attr_reader :user_mapping_method

    # This property specifies the userstore attribute value that must match the incoming assertion attribute value or the incoming nameid attribute value in order to identify the user during SSO.<br>You can construct the userMappingStoreAttribute value by specifying attributes from the Oracle Identity Cloud Service Core Users schema. For examples of how to construct the userMappingStoreAttribute value, see the <b>Example of a Request Body</b> section of the Examples tab for the <a href='./op-admin-v1-identityproviders-post.html'>POST</a> and <a href='./op-admin-v1-identityproviders-id-put.html'>PUT</a> methods of the /IdentityProviders endpoint.
    #
    # **Deprecated Since: 20.1.3**
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsValuePersistedInOtherAttribute: true
    # @return [String]
    attr_accessor :user_mapping_store_attribute

    # Assertion attribute name.
    #
    # **Deprecated Since: 20.1.3**
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    #  - idcsValuePersistedInOtherAttribute: true
    # @return [String]
    attr_accessor :assertion_attribute

    # Identity Provider Type
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :type

    # This SP requires requests SAML IdP to enforce re-authentication.
    #
    # **Added In:** 2102181953
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :require_force_authn

    # SAML SP must accept encrypted assertion only.
    #
    # **Added In:** 2102181953
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :requires_encrypted_assertion

    # SAML SP HoK Enabled.
    #
    # **Added In:** 2102181953
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :saml_ho_k_required

    # SAML SP authentication type.
    #
    # **Added In:** 2102181953
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :requested_authentication_context

    # Set to true to indicate ignoring absence of group while provisioning
    #
    # **Added In:** 2111112015
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsAddedSinceVersion: 30
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :jit_user_prov_ignore_error_on_absent_groups

    # Records the notification timestamp for the IdP whose signing certificate is about to expire
    #
    # **Added In:** 2302092332
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: dateTime
    #  - uniqueness: none
    # @return [String]
    attr_accessor :last_notification_sent_time

    # The list of mappings between the Identity Domain Group and the IDP group.
    #
    # **Added In:** 2205120021
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [idpGroup]
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::IdentityProviderJitUserProvGroupMappings>]
    attr_accessor :jit_user_prov_group_mappings

    # @return [OCI::IdentityDomains::Models::IdentityProviderJitUserProvAttributes]
    attr_accessor :jit_user_prov_attributes

    # Refers to every group of which a JIT-provisioned User should be a member.  Just-in-Time user-provisioning applies this static list when jitUserProvGroupStaticListEnabled:true.
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [value]
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::IdentityProviderJitUserProvAssignedGroups>]
    attr_accessor :jit_user_prov_assigned_groups

    # @return [OCI::IdentityDomains::Models::IdentityProviderCorrelationPolicy]
    attr_accessor :correlation_policy

    # @return [OCI::IdentityDomains::Models::ExtensionSocialIdentityProvider]
    attr_accessor :urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider

    # @return [OCI::IdentityDomains::Models::ExtensionX509IdentityProvider]
    attr_accessor :urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ocid': :'ocid',
        'schemas': :'schemas',
        'meta': :'meta',
        'idcs_created_by': :'idcsCreatedBy',
        'idcs_last_modified_by': :'idcsLastModifiedBy',
        'idcs_prevented_operations': :'idcsPreventedOperations',
        'tags': :'tags',
        'delete_in_progress': :'deleteInProgress',
        'idcs_last_upgraded_in_release': :'idcsLastUpgradedInRelease',
        'domain_ocid': :'domainOcid',
        'compartment_ocid': :'compartmentOcid',
        'tenancy_ocid': :'tenancyOcid',
        'external_id': :'externalId',
        'partner_name': :'partnerName',
        'description': :'description',
        'metadata': :'metadata',
        'partner_provider_id': :'partnerProviderId',
        'tenant_provider_id': :'tenantProviderId',
        'succinct_id': :'succinctId',
        'idp_sso_url': :'idpSsoUrl',
        'logout_request_url': :'logoutRequestUrl',
        'logout_response_url': :'logoutResponseUrl',
        'signing_certificate': :'signingCertificate',
        'encryption_certificate': :'encryptionCertificate',
        'name_id_format': :'nameIdFormat',
        'include_signing_cert_in_signature': :'includeSigningCertInSignature',
        'authn_request_binding': :'authnRequestBinding',
        'logout_binding': :'logoutBinding',
        'logout_enabled': :'logoutEnabled',
        'signature_hash_algorithm': :'signatureHashAlgorithm',
        'enabled': :'enabled',
        'icon_url': :'iconUrl',
        'shown_on_login_page': :'shownOnLoginPage',
        'jit_user_prov_enabled': :'jitUserProvEnabled',
        'jit_user_prov_group_assertion_attribute_enabled': :'jitUserProvGroupAssertionAttributeEnabled',
        'jit_user_prov_group_static_list_enabled': :'jitUserProvGroupStaticListEnabled',
        'jit_user_prov_create_user_enabled': :'jitUserProvCreateUserEnabled',
        'jit_user_prov_attribute_update_enabled': :'jitUserProvAttributeUpdateEnabled',
        'jit_user_prov_group_assignment_method': :'jitUserProvGroupAssignmentMethod',
        'jit_user_prov_group_mapping_mode': :'jitUserProvGroupMappingMode',
        'jit_user_prov_group_saml_attribute_name': :'jitUserProvGroupSAMLAttributeName',
        'service_instance_identifier': :'serviceInstanceIdentifier',
        'user_mapping_method': :'userMappingMethod',
        'user_mapping_store_attribute': :'userMappingStoreAttribute',
        'assertion_attribute': :'assertionAttribute',
        'type': :'type',
        'require_force_authn': :'requireForceAuthn',
        'requires_encrypted_assertion': :'requiresEncryptedAssertion',
        'saml_ho_k_required': :'samlHoKRequired',
        'requested_authentication_context': :'requestedAuthenticationContext',
        'jit_user_prov_ignore_error_on_absent_groups': :'jitUserProvIgnoreErrorOnAbsentGroups',
        'last_notification_sent_time': :'lastNotificationSentTime',
        'jit_user_prov_group_mappings': :'jitUserProvGroupMappings',
        'jit_user_prov_attributes': :'jitUserProvAttributes',
        'jit_user_prov_assigned_groups': :'jitUserProvAssignedGroups',
        'correlation_policy': :'correlationPolicy',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider': :'urn:ietf:params:scim:schemas:oracle:idcs:extension:social:IdentityProvider',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider': :'urn:ietf:params:scim:schemas:oracle:idcs:extension:x509:IdentityProvider'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ocid': :'String',
        'schemas': :'Array<String>',
        'meta': :'OCI::IdentityDomains::Models::Meta',
        'idcs_created_by': :'OCI::IdentityDomains::Models::IdcsCreatedBy',
        'idcs_last_modified_by': :'OCI::IdentityDomains::Models::IdcsLastModifiedBy',
        'idcs_prevented_operations': :'Array<String>',
        'tags': :'Array<OCI::IdentityDomains::Models::Tags>',
        'delete_in_progress': :'BOOLEAN',
        'idcs_last_upgraded_in_release': :'String',
        'domain_ocid': :'String',
        'compartment_ocid': :'String',
        'tenancy_ocid': :'String',
        'external_id': :'String',
        'partner_name': :'String',
        'description': :'String',
        'metadata': :'String',
        'partner_provider_id': :'String',
        'tenant_provider_id': :'String',
        'succinct_id': :'String',
        'idp_sso_url': :'String',
        'logout_request_url': :'String',
        'logout_response_url': :'String',
        'signing_certificate': :'String',
        'encryption_certificate': :'String',
        'name_id_format': :'String',
        'include_signing_cert_in_signature': :'BOOLEAN',
        'authn_request_binding': :'String',
        'logout_binding': :'String',
        'logout_enabled': :'BOOLEAN',
        'signature_hash_algorithm': :'String',
        'enabled': :'BOOLEAN',
        'icon_url': :'String',
        'shown_on_login_page': :'BOOLEAN',
        'jit_user_prov_enabled': :'BOOLEAN',
        'jit_user_prov_group_assertion_attribute_enabled': :'BOOLEAN',
        'jit_user_prov_group_static_list_enabled': :'BOOLEAN',
        'jit_user_prov_create_user_enabled': :'BOOLEAN',
        'jit_user_prov_attribute_update_enabled': :'BOOLEAN',
        'jit_user_prov_group_assignment_method': :'String',
        'jit_user_prov_group_mapping_mode': :'String',
        'jit_user_prov_group_saml_attribute_name': :'String',
        'service_instance_identifier': :'String',
        'user_mapping_method': :'String',
        'user_mapping_store_attribute': :'String',
        'assertion_attribute': :'String',
        'type': :'String',
        'require_force_authn': :'BOOLEAN',
        'requires_encrypted_assertion': :'BOOLEAN',
        'saml_ho_k_required': :'BOOLEAN',
        'requested_authentication_context': :'Array<String>',
        'jit_user_prov_ignore_error_on_absent_groups': :'BOOLEAN',
        'last_notification_sent_time': :'String',
        'jit_user_prov_group_mappings': :'Array<OCI::IdentityDomains::Models::IdentityProviderJitUserProvGroupMappings>',
        'jit_user_prov_attributes': :'OCI::IdentityDomains::Models::IdentityProviderJitUserProvAttributes',
        'jit_user_prov_assigned_groups': :'Array<OCI::IdentityDomains::Models::IdentityProviderJitUserProvAssignedGroups>',
        'correlation_policy': :'OCI::IdentityDomains::Models::IdentityProviderCorrelationPolicy',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider': :'OCI::IdentityDomains::Models::ExtensionSocialIdentityProvider',
        'urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider': :'OCI::IdentityDomains::Models::ExtensionX509IdentityProvider'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [OCI::IdentityDomains::Models::Meta] :meta The value to assign to the {#meta} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsCreatedBy] :idcs_created_by The value to assign to the {#idcs_created_by} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsLastModifiedBy] :idcs_last_modified_by The value to assign to the {#idcs_last_modified_by} property
    # @option attributes [Array<String>] :idcs_prevented_operations The value to assign to the {#idcs_prevented_operations} property
    # @option attributes [Array<OCI::IdentityDomains::Models::Tags>] :tags The value to assign to the {#tags} property
    # @option attributes [BOOLEAN] :delete_in_progress The value to assign to the {#delete_in_progress} property
    # @option attributes [String] :idcs_last_upgraded_in_release The value to assign to the {#idcs_last_upgraded_in_release} property
    # @option attributes [String] :domain_ocid The value to assign to the {#domain_ocid} property
    # @option attributes [String] :compartment_ocid The value to assign to the {#compartment_ocid} property
    # @option attributes [String] :tenancy_ocid The value to assign to the {#tenancy_ocid} property
    # @option attributes [String] :external_id The value to assign to the {#external_id} property
    # @option attributes [String] :partner_name The value to assign to the {#partner_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :metadata The value to assign to the {#metadata} property
    # @option attributes [String] :partner_provider_id The value to assign to the {#partner_provider_id} property
    # @option attributes [String] :tenant_provider_id The value to assign to the {#tenant_provider_id} property
    # @option attributes [String] :succinct_id The value to assign to the {#succinct_id} property
    # @option attributes [String] :idp_sso_url The value to assign to the {#idp_sso_url} property
    # @option attributes [String] :logout_request_url The value to assign to the {#logout_request_url} property
    # @option attributes [String] :logout_response_url The value to assign to the {#logout_response_url} property
    # @option attributes [String] :signing_certificate The value to assign to the {#signing_certificate} property
    # @option attributes [String] :encryption_certificate The value to assign to the {#encryption_certificate} property
    # @option attributes [String] :name_id_format The value to assign to the {#name_id_format} property
    # @option attributes [BOOLEAN] :include_signing_cert_in_signature The value to assign to the {#include_signing_cert_in_signature} property
    # @option attributes [String] :authn_request_binding The value to assign to the {#authn_request_binding} property
    # @option attributes [String] :logout_binding The value to assign to the {#logout_binding} property
    # @option attributes [BOOLEAN] :logout_enabled The value to assign to the {#logout_enabled} property
    # @option attributes [String] :signature_hash_algorithm The value to assign to the {#signature_hash_algorithm} property
    # @option attributes [BOOLEAN] :enabled The value to assign to the {#enabled} property
    # @option attributes [String] :icon_url The value to assign to the {#icon_url} property
    # @option attributes [BOOLEAN] :shown_on_login_page The value to assign to the {#shown_on_login_page} property
    # @option attributes [BOOLEAN] :jit_user_prov_enabled The value to assign to the {#jit_user_prov_enabled} property
    # @option attributes [BOOLEAN] :jit_user_prov_group_assertion_attribute_enabled The value to assign to the {#jit_user_prov_group_assertion_attribute_enabled} property
    # @option attributes [BOOLEAN] :jit_user_prov_group_static_list_enabled The value to assign to the {#jit_user_prov_group_static_list_enabled} property
    # @option attributes [BOOLEAN] :jit_user_prov_create_user_enabled The value to assign to the {#jit_user_prov_create_user_enabled} property
    # @option attributes [BOOLEAN] :jit_user_prov_attribute_update_enabled The value to assign to the {#jit_user_prov_attribute_update_enabled} property
    # @option attributes [String] :jit_user_prov_group_assignment_method The value to assign to the {#jit_user_prov_group_assignment_method} property
    # @option attributes [String] :jit_user_prov_group_mapping_mode The value to assign to the {#jit_user_prov_group_mapping_mode} property
    # @option attributes [String] :jit_user_prov_group_saml_attribute_name The value to assign to the {#jit_user_prov_group_saml_attribute_name} property
    # @option attributes [String] :service_instance_identifier The value to assign to the {#service_instance_identifier} property
    # @option attributes [String] :user_mapping_method The value to assign to the {#user_mapping_method} property
    # @option attributes [String] :user_mapping_store_attribute The value to assign to the {#user_mapping_store_attribute} property
    # @option attributes [String] :assertion_attribute The value to assign to the {#assertion_attribute} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [BOOLEAN] :require_force_authn The value to assign to the {#require_force_authn} property
    # @option attributes [BOOLEAN] :requires_encrypted_assertion The value to assign to the {#requires_encrypted_assertion} property
    # @option attributes [BOOLEAN] :saml_ho_k_required The value to assign to the {#saml_ho_k_required} property
    # @option attributes [Array<String>] :requested_authentication_context The value to assign to the {#requested_authentication_context} property
    # @option attributes [BOOLEAN] :jit_user_prov_ignore_error_on_absent_groups The value to assign to the {#jit_user_prov_ignore_error_on_absent_groups} property
    # @option attributes [String] :last_notification_sent_time The value to assign to the {#last_notification_sent_time} property
    # @option attributes [Array<OCI::IdentityDomains::Models::IdentityProviderJitUserProvGroupMappings>] :jit_user_prov_group_mappings The value to assign to the {#jit_user_prov_group_mappings} property
    # @option attributes [OCI::IdentityDomains::Models::IdentityProviderJitUserProvAttributes] :jit_user_prov_attributes The value to assign to the {#jit_user_prov_attributes} property
    # @option attributes [Array<OCI::IdentityDomains::Models::IdentityProviderJitUserProvAssignedGroups>] :jit_user_prov_assigned_groups The value to assign to the {#jit_user_prov_assigned_groups} property
    # @option attributes [OCI::IdentityDomains::Models::IdentityProviderCorrelationPolicy] :correlation_policy The value to assign to the {#correlation_policy} property
    # @option attributes [OCI::IdentityDomains::Models::ExtensionSocialIdentityProvider] :urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider The value to assign to the {#urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider} property
    # @option attributes [OCI::IdentityDomains::Models::ExtensionX509IdentityProvider] :urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider The value to assign to the {#urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.meta = attributes[:'meta'] if attributes[:'meta']

      self.idcs_created_by = attributes[:'idcsCreatedBy'] if attributes[:'idcsCreatedBy']

      raise 'You cannot provide both :idcsCreatedBy and :idcs_created_by' if attributes.key?(:'idcsCreatedBy') && attributes.key?(:'idcs_created_by')

      self.idcs_created_by = attributes[:'idcs_created_by'] if attributes[:'idcs_created_by']

      self.idcs_last_modified_by = attributes[:'idcsLastModifiedBy'] if attributes[:'idcsLastModifiedBy']

      raise 'You cannot provide both :idcsLastModifiedBy and :idcs_last_modified_by' if attributes.key?(:'idcsLastModifiedBy') && attributes.key?(:'idcs_last_modified_by')

      self.idcs_last_modified_by = attributes[:'idcs_last_modified_by'] if attributes[:'idcs_last_modified_by']

      self.idcs_prevented_operations = attributes[:'idcsPreventedOperations'] if attributes[:'idcsPreventedOperations']

      raise 'You cannot provide both :idcsPreventedOperations and :idcs_prevented_operations' if attributes.key?(:'idcsPreventedOperations') && attributes.key?(:'idcs_prevented_operations')

      self.idcs_prevented_operations = attributes[:'idcs_prevented_operations'] if attributes[:'idcs_prevented_operations']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.delete_in_progress = attributes[:'deleteInProgress'] unless attributes[:'deleteInProgress'].nil?

      raise 'You cannot provide both :deleteInProgress and :delete_in_progress' if attributes.key?(:'deleteInProgress') && attributes.key?(:'delete_in_progress')

      self.delete_in_progress = attributes[:'delete_in_progress'] unless attributes[:'delete_in_progress'].nil?

      self.idcs_last_upgraded_in_release = attributes[:'idcsLastUpgradedInRelease'] if attributes[:'idcsLastUpgradedInRelease']

      raise 'You cannot provide both :idcsLastUpgradedInRelease and :idcs_last_upgraded_in_release' if attributes.key?(:'idcsLastUpgradedInRelease') && attributes.key?(:'idcs_last_upgraded_in_release')

      self.idcs_last_upgraded_in_release = attributes[:'idcs_last_upgraded_in_release'] if attributes[:'idcs_last_upgraded_in_release']

      self.domain_ocid = attributes[:'domainOcid'] if attributes[:'domainOcid']

      raise 'You cannot provide both :domainOcid and :domain_ocid' if attributes.key?(:'domainOcid') && attributes.key?(:'domain_ocid')

      self.domain_ocid = attributes[:'domain_ocid'] if attributes[:'domain_ocid']

      self.compartment_ocid = attributes[:'compartmentOcid'] if attributes[:'compartmentOcid']

      raise 'You cannot provide both :compartmentOcid and :compartment_ocid' if attributes.key?(:'compartmentOcid') && attributes.key?(:'compartment_ocid')

      self.compartment_ocid = attributes[:'compartment_ocid'] if attributes[:'compartment_ocid']

      self.tenancy_ocid = attributes[:'tenancyOcid'] if attributes[:'tenancyOcid']

      raise 'You cannot provide both :tenancyOcid and :tenancy_ocid' if attributes.key?(:'tenancyOcid') && attributes.key?(:'tenancy_ocid')

      self.tenancy_ocid = attributes[:'tenancy_ocid'] if attributes[:'tenancy_ocid']

      self.external_id = attributes[:'externalId'] if attributes[:'externalId']

      raise 'You cannot provide both :externalId and :external_id' if attributes.key?(:'externalId') && attributes.key?(:'external_id')

      self.external_id = attributes[:'external_id'] if attributes[:'external_id']

      self.partner_name = attributes[:'partnerName'] if attributes[:'partnerName']

      raise 'You cannot provide both :partnerName and :partner_name' if attributes.key?(:'partnerName') && attributes.key?(:'partner_name')

      self.partner_name = attributes[:'partner_name'] if attributes[:'partner_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']

      self.partner_provider_id = attributes[:'partnerProviderId'] if attributes[:'partnerProviderId']

      raise 'You cannot provide both :partnerProviderId and :partner_provider_id' if attributes.key?(:'partnerProviderId') && attributes.key?(:'partner_provider_id')

      self.partner_provider_id = attributes[:'partner_provider_id'] if attributes[:'partner_provider_id']

      self.tenant_provider_id = attributes[:'tenantProviderId'] if attributes[:'tenantProviderId']

      raise 'You cannot provide both :tenantProviderId and :tenant_provider_id' if attributes.key?(:'tenantProviderId') && attributes.key?(:'tenant_provider_id')

      self.tenant_provider_id = attributes[:'tenant_provider_id'] if attributes[:'tenant_provider_id']

      self.succinct_id = attributes[:'succinctId'] if attributes[:'succinctId']

      raise 'You cannot provide both :succinctId and :succinct_id' if attributes.key?(:'succinctId') && attributes.key?(:'succinct_id')

      self.succinct_id = attributes[:'succinct_id'] if attributes[:'succinct_id']

      self.idp_sso_url = attributes[:'idpSsoUrl'] if attributes[:'idpSsoUrl']

      raise 'You cannot provide both :idpSsoUrl and :idp_sso_url' if attributes.key?(:'idpSsoUrl') && attributes.key?(:'idp_sso_url')

      self.idp_sso_url = attributes[:'idp_sso_url'] if attributes[:'idp_sso_url']

      self.logout_request_url = attributes[:'logoutRequestUrl'] if attributes[:'logoutRequestUrl']

      raise 'You cannot provide both :logoutRequestUrl and :logout_request_url' if attributes.key?(:'logoutRequestUrl') && attributes.key?(:'logout_request_url')

      self.logout_request_url = attributes[:'logout_request_url'] if attributes[:'logout_request_url']

      self.logout_response_url = attributes[:'logoutResponseUrl'] if attributes[:'logoutResponseUrl']

      raise 'You cannot provide both :logoutResponseUrl and :logout_response_url' if attributes.key?(:'logoutResponseUrl') && attributes.key?(:'logout_response_url')

      self.logout_response_url = attributes[:'logout_response_url'] if attributes[:'logout_response_url']

      self.signing_certificate = attributes[:'signingCertificate'] if attributes[:'signingCertificate']

      raise 'You cannot provide both :signingCertificate and :signing_certificate' if attributes.key?(:'signingCertificate') && attributes.key?(:'signing_certificate')

      self.signing_certificate = attributes[:'signing_certificate'] if attributes[:'signing_certificate']

      self.encryption_certificate = attributes[:'encryptionCertificate'] if attributes[:'encryptionCertificate']

      raise 'You cannot provide both :encryptionCertificate and :encryption_certificate' if attributes.key?(:'encryptionCertificate') && attributes.key?(:'encryption_certificate')

      self.encryption_certificate = attributes[:'encryption_certificate'] if attributes[:'encryption_certificate']

      self.name_id_format = attributes[:'nameIdFormat'] if attributes[:'nameIdFormat']

      raise 'You cannot provide both :nameIdFormat and :name_id_format' if attributes.key?(:'nameIdFormat') && attributes.key?(:'name_id_format')

      self.name_id_format = attributes[:'name_id_format'] if attributes[:'name_id_format']

      self.include_signing_cert_in_signature = attributes[:'includeSigningCertInSignature'] unless attributes[:'includeSigningCertInSignature'].nil?

      raise 'You cannot provide both :includeSigningCertInSignature and :include_signing_cert_in_signature' if attributes.key?(:'includeSigningCertInSignature') && attributes.key?(:'include_signing_cert_in_signature')

      self.include_signing_cert_in_signature = attributes[:'include_signing_cert_in_signature'] unless attributes[:'include_signing_cert_in_signature'].nil?

      self.authn_request_binding = attributes[:'authnRequestBinding'] if attributes[:'authnRequestBinding']

      raise 'You cannot provide both :authnRequestBinding and :authn_request_binding' if attributes.key?(:'authnRequestBinding') && attributes.key?(:'authn_request_binding')

      self.authn_request_binding = attributes[:'authn_request_binding'] if attributes[:'authn_request_binding']

      self.logout_binding = attributes[:'logoutBinding'] if attributes[:'logoutBinding']

      raise 'You cannot provide both :logoutBinding and :logout_binding' if attributes.key?(:'logoutBinding') && attributes.key?(:'logout_binding')

      self.logout_binding = attributes[:'logout_binding'] if attributes[:'logout_binding']

      self.logout_enabled = attributes[:'logoutEnabled'] unless attributes[:'logoutEnabled'].nil?

      raise 'You cannot provide both :logoutEnabled and :logout_enabled' if attributes.key?(:'logoutEnabled') && attributes.key?(:'logout_enabled')

      self.logout_enabled = attributes[:'logout_enabled'] unless attributes[:'logout_enabled'].nil?

      self.signature_hash_algorithm = attributes[:'signatureHashAlgorithm'] if attributes[:'signatureHashAlgorithm']

      raise 'You cannot provide both :signatureHashAlgorithm and :signature_hash_algorithm' if attributes.key?(:'signatureHashAlgorithm') && attributes.key?(:'signature_hash_algorithm')

      self.signature_hash_algorithm = attributes[:'signature_hash_algorithm'] if attributes[:'signature_hash_algorithm']

      self.enabled = attributes[:'enabled'] unless attributes[:'enabled'].nil?

      self.icon_url = attributes[:'iconUrl'] if attributes[:'iconUrl']

      raise 'You cannot provide both :iconUrl and :icon_url' if attributes.key?(:'iconUrl') && attributes.key?(:'icon_url')

      self.icon_url = attributes[:'icon_url'] if attributes[:'icon_url']

      self.shown_on_login_page = attributes[:'shownOnLoginPage'] unless attributes[:'shownOnLoginPage'].nil?

      raise 'You cannot provide both :shownOnLoginPage and :shown_on_login_page' if attributes.key?(:'shownOnLoginPage') && attributes.key?(:'shown_on_login_page')

      self.shown_on_login_page = attributes[:'shown_on_login_page'] unless attributes[:'shown_on_login_page'].nil?

      self.jit_user_prov_enabled = attributes[:'jitUserProvEnabled'] unless attributes[:'jitUserProvEnabled'].nil?

      raise 'You cannot provide both :jitUserProvEnabled and :jit_user_prov_enabled' if attributes.key?(:'jitUserProvEnabled') && attributes.key?(:'jit_user_prov_enabled')

      self.jit_user_prov_enabled = attributes[:'jit_user_prov_enabled'] unless attributes[:'jit_user_prov_enabled'].nil?

      self.jit_user_prov_group_assertion_attribute_enabled = attributes[:'jitUserProvGroupAssertionAttributeEnabled'] unless attributes[:'jitUserProvGroupAssertionAttributeEnabled'].nil?

      raise 'You cannot provide both :jitUserProvGroupAssertionAttributeEnabled and :jit_user_prov_group_assertion_attribute_enabled' if attributes.key?(:'jitUserProvGroupAssertionAttributeEnabled') && attributes.key?(:'jit_user_prov_group_assertion_attribute_enabled')

      self.jit_user_prov_group_assertion_attribute_enabled = attributes[:'jit_user_prov_group_assertion_attribute_enabled'] unless attributes[:'jit_user_prov_group_assertion_attribute_enabled'].nil?

      self.jit_user_prov_group_static_list_enabled = attributes[:'jitUserProvGroupStaticListEnabled'] unless attributes[:'jitUserProvGroupStaticListEnabled'].nil?

      raise 'You cannot provide both :jitUserProvGroupStaticListEnabled and :jit_user_prov_group_static_list_enabled' if attributes.key?(:'jitUserProvGroupStaticListEnabled') && attributes.key?(:'jit_user_prov_group_static_list_enabled')

      self.jit_user_prov_group_static_list_enabled = attributes[:'jit_user_prov_group_static_list_enabled'] unless attributes[:'jit_user_prov_group_static_list_enabled'].nil?

      self.jit_user_prov_create_user_enabled = attributes[:'jitUserProvCreateUserEnabled'] unless attributes[:'jitUserProvCreateUserEnabled'].nil?

      raise 'You cannot provide both :jitUserProvCreateUserEnabled and :jit_user_prov_create_user_enabled' if attributes.key?(:'jitUserProvCreateUserEnabled') && attributes.key?(:'jit_user_prov_create_user_enabled')

      self.jit_user_prov_create_user_enabled = attributes[:'jit_user_prov_create_user_enabled'] unless attributes[:'jit_user_prov_create_user_enabled'].nil?

      self.jit_user_prov_attribute_update_enabled = attributes[:'jitUserProvAttributeUpdateEnabled'] unless attributes[:'jitUserProvAttributeUpdateEnabled'].nil?

      raise 'You cannot provide both :jitUserProvAttributeUpdateEnabled and :jit_user_prov_attribute_update_enabled' if attributes.key?(:'jitUserProvAttributeUpdateEnabled') && attributes.key?(:'jit_user_prov_attribute_update_enabled')

      self.jit_user_prov_attribute_update_enabled = attributes[:'jit_user_prov_attribute_update_enabled'] unless attributes[:'jit_user_prov_attribute_update_enabled'].nil?

      self.jit_user_prov_group_assignment_method = attributes[:'jitUserProvGroupAssignmentMethod'] if attributes[:'jitUserProvGroupAssignmentMethod']

      raise 'You cannot provide both :jitUserProvGroupAssignmentMethod and :jit_user_prov_group_assignment_method' if attributes.key?(:'jitUserProvGroupAssignmentMethod') && attributes.key?(:'jit_user_prov_group_assignment_method')

      self.jit_user_prov_group_assignment_method = attributes[:'jit_user_prov_group_assignment_method'] if attributes[:'jit_user_prov_group_assignment_method']

      self.jit_user_prov_group_mapping_mode = attributes[:'jitUserProvGroupMappingMode'] if attributes[:'jitUserProvGroupMappingMode']

      raise 'You cannot provide both :jitUserProvGroupMappingMode and :jit_user_prov_group_mapping_mode' if attributes.key?(:'jitUserProvGroupMappingMode') && attributes.key?(:'jit_user_prov_group_mapping_mode')

      self.jit_user_prov_group_mapping_mode = attributes[:'jit_user_prov_group_mapping_mode'] if attributes[:'jit_user_prov_group_mapping_mode']

      self.jit_user_prov_group_saml_attribute_name = attributes[:'jitUserProvGroupSAMLAttributeName'] if attributes[:'jitUserProvGroupSAMLAttributeName']

      raise 'You cannot provide both :jitUserProvGroupSAMLAttributeName and :jit_user_prov_group_saml_attribute_name' if attributes.key?(:'jitUserProvGroupSAMLAttributeName') && attributes.key?(:'jit_user_prov_group_saml_attribute_name')

      self.jit_user_prov_group_saml_attribute_name = attributes[:'jit_user_prov_group_saml_attribute_name'] if attributes[:'jit_user_prov_group_saml_attribute_name']

      self.service_instance_identifier = attributes[:'serviceInstanceIdentifier'] if attributes[:'serviceInstanceIdentifier']

      raise 'You cannot provide both :serviceInstanceIdentifier and :service_instance_identifier' if attributes.key?(:'serviceInstanceIdentifier') && attributes.key?(:'service_instance_identifier')

      self.service_instance_identifier = attributes[:'service_instance_identifier'] if attributes[:'service_instance_identifier']

      self.user_mapping_method = attributes[:'userMappingMethod'] if attributes[:'userMappingMethod']

      raise 'You cannot provide both :userMappingMethod and :user_mapping_method' if attributes.key?(:'userMappingMethod') && attributes.key?(:'user_mapping_method')

      self.user_mapping_method = attributes[:'user_mapping_method'] if attributes[:'user_mapping_method']

      self.user_mapping_store_attribute = attributes[:'userMappingStoreAttribute'] if attributes[:'userMappingStoreAttribute']

      raise 'You cannot provide both :userMappingStoreAttribute and :user_mapping_store_attribute' if attributes.key?(:'userMappingStoreAttribute') && attributes.key?(:'user_mapping_store_attribute')

      self.user_mapping_store_attribute = attributes[:'user_mapping_store_attribute'] if attributes[:'user_mapping_store_attribute']

      self.assertion_attribute = attributes[:'assertionAttribute'] if attributes[:'assertionAttribute']

      raise 'You cannot provide both :assertionAttribute and :assertion_attribute' if attributes.key?(:'assertionAttribute') && attributes.key?(:'assertion_attribute')

      self.assertion_attribute = attributes[:'assertion_attribute'] if attributes[:'assertion_attribute']

      self.type = attributes[:'type'] if attributes[:'type']

      self.require_force_authn = attributes[:'requireForceAuthn'] unless attributes[:'requireForceAuthn'].nil?

      raise 'You cannot provide both :requireForceAuthn and :require_force_authn' if attributes.key?(:'requireForceAuthn') && attributes.key?(:'require_force_authn')

      self.require_force_authn = attributes[:'require_force_authn'] unless attributes[:'require_force_authn'].nil?

      self.requires_encrypted_assertion = attributes[:'requiresEncryptedAssertion'] unless attributes[:'requiresEncryptedAssertion'].nil?

      raise 'You cannot provide both :requiresEncryptedAssertion and :requires_encrypted_assertion' if attributes.key?(:'requiresEncryptedAssertion') && attributes.key?(:'requires_encrypted_assertion')

      self.requires_encrypted_assertion = attributes[:'requires_encrypted_assertion'] unless attributes[:'requires_encrypted_assertion'].nil?

      self.saml_ho_k_required = attributes[:'samlHoKRequired'] unless attributes[:'samlHoKRequired'].nil?

      raise 'You cannot provide both :samlHoKRequired and :saml_ho_k_required' if attributes.key?(:'samlHoKRequired') && attributes.key?(:'saml_ho_k_required')

      self.saml_ho_k_required = attributes[:'saml_ho_k_required'] unless attributes[:'saml_ho_k_required'].nil?

      self.requested_authentication_context = attributes[:'requestedAuthenticationContext'] if attributes[:'requestedAuthenticationContext']

      raise 'You cannot provide both :requestedAuthenticationContext and :requested_authentication_context' if attributes.key?(:'requestedAuthenticationContext') && attributes.key?(:'requested_authentication_context')

      self.requested_authentication_context = attributes[:'requested_authentication_context'] if attributes[:'requested_authentication_context']

      self.jit_user_prov_ignore_error_on_absent_groups = attributes[:'jitUserProvIgnoreErrorOnAbsentGroups'] unless attributes[:'jitUserProvIgnoreErrorOnAbsentGroups'].nil?

      raise 'You cannot provide both :jitUserProvIgnoreErrorOnAbsentGroups and :jit_user_prov_ignore_error_on_absent_groups' if attributes.key?(:'jitUserProvIgnoreErrorOnAbsentGroups') && attributes.key?(:'jit_user_prov_ignore_error_on_absent_groups')

      self.jit_user_prov_ignore_error_on_absent_groups = attributes[:'jit_user_prov_ignore_error_on_absent_groups'] unless attributes[:'jit_user_prov_ignore_error_on_absent_groups'].nil?

      self.last_notification_sent_time = attributes[:'lastNotificationSentTime'] if attributes[:'lastNotificationSentTime']

      raise 'You cannot provide both :lastNotificationSentTime and :last_notification_sent_time' if attributes.key?(:'lastNotificationSentTime') && attributes.key?(:'last_notification_sent_time')

      self.last_notification_sent_time = attributes[:'last_notification_sent_time'] if attributes[:'last_notification_sent_time']

      self.jit_user_prov_group_mappings = attributes[:'jitUserProvGroupMappings'] if attributes[:'jitUserProvGroupMappings']

      raise 'You cannot provide both :jitUserProvGroupMappings and :jit_user_prov_group_mappings' if attributes.key?(:'jitUserProvGroupMappings') && attributes.key?(:'jit_user_prov_group_mappings')

      self.jit_user_prov_group_mappings = attributes[:'jit_user_prov_group_mappings'] if attributes[:'jit_user_prov_group_mappings']

      self.jit_user_prov_attributes = attributes[:'jitUserProvAttributes'] if attributes[:'jitUserProvAttributes']

      raise 'You cannot provide both :jitUserProvAttributes and :jit_user_prov_attributes' if attributes.key?(:'jitUserProvAttributes') && attributes.key?(:'jit_user_prov_attributes')

      self.jit_user_prov_attributes = attributes[:'jit_user_prov_attributes'] if attributes[:'jit_user_prov_attributes']

      self.jit_user_prov_assigned_groups = attributes[:'jitUserProvAssignedGroups'] if attributes[:'jitUserProvAssignedGroups']

      raise 'You cannot provide both :jitUserProvAssignedGroups and :jit_user_prov_assigned_groups' if attributes.key?(:'jitUserProvAssignedGroups') && attributes.key?(:'jit_user_prov_assigned_groups')

      self.jit_user_prov_assigned_groups = attributes[:'jit_user_prov_assigned_groups'] if attributes[:'jit_user_prov_assigned_groups']

      self.correlation_policy = attributes[:'correlationPolicy'] if attributes[:'correlationPolicy']

      raise 'You cannot provide both :correlationPolicy and :correlation_policy' if attributes.key?(:'correlationPolicy') && attributes.key?(:'correlation_policy')

      self.correlation_policy = attributes[:'correlation_policy'] if attributes[:'correlation_policy']

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider = attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:social:IdentityProvider'] if attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:social:IdentityProvider']

      raise 'You cannot provide both :urn:ietf:params:scim:schemas:oracle:idcs:extension:social:IdentityProvider and :urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider' if attributes.key?(:'urn:ietf:params:scim:schemas:oracle:idcs:extension:social:IdentityProvider') && attributes.key?(:'urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider')

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider = attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider'] if attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider']

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider = attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:x509:IdentityProvider'] if attributes[:'urn:ietf:params:scim:schemas:oracle:idcs:extension:x509:IdentityProvider']

      raise 'You cannot provide both :urn:ietf:params:scim:schemas:oracle:idcs:extension:x509:IdentityProvider and :urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider' if attributes.key?(:'urn:ietf:params:scim:schemas:oracle:idcs:extension:x509:IdentityProvider') && attributes.key?(:'urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider')

      self.urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider = attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider'] if attributes[:'urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_prevented_operations Object to be assigned
    def idcs_prevented_operations=(idcs_prevented_operations)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_prevented_operations.nil?
        @idcs_prevented_operations = nil
      else
        @idcs_prevented_operations =
          idcs_prevented_operations.collect do |item|
            if IDCS_PREVENTED_OPERATIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'idcs_prevented_operations' [#{item}]. Mapping to 'IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authn_request_binding Object to be assigned
    def authn_request_binding=(authn_request_binding)
      # rubocop:disable Style/ConditionalAssignment
      if authn_request_binding && !AUTHN_REQUEST_BINDING_ENUM.include?(authn_request_binding)
        OCI.logger.debug("Unknown value for 'authn_request_binding' [" + authn_request_binding + "]. Mapping to 'AUTHN_REQUEST_BINDING_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @authn_request_binding = AUTHN_REQUEST_BINDING_UNKNOWN_ENUM_VALUE
      else
        @authn_request_binding = authn_request_binding
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logout_binding Object to be assigned
    def logout_binding=(logout_binding)
      # rubocop:disable Style/ConditionalAssignment
      if logout_binding && !LOGOUT_BINDING_ENUM.include?(logout_binding)
        OCI.logger.debug("Unknown value for 'logout_binding' [" + logout_binding + "]. Mapping to 'LOGOUT_BINDING_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @logout_binding = LOGOUT_BINDING_UNKNOWN_ENUM_VALUE
      else
        @logout_binding = logout_binding
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] signature_hash_algorithm Object to be assigned
    def signature_hash_algorithm=(signature_hash_algorithm)
      # rubocop:disable Style/ConditionalAssignment
      if signature_hash_algorithm && !SIGNATURE_HASH_ALGORITHM_ENUM.include?(signature_hash_algorithm)
        OCI.logger.debug("Unknown value for 'signature_hash_algorithm' [" + signature_hash_algorithm + "]. Mapping to 'SIGNATURE_HASH_ALGORITHM_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @signature_hash_algorithm = SIGNATURE_HASH_ALGORITHM_UNKNOWN_ENUM_VALUE
      else
        @signature_hash_algorithm = signature_hash_algorithm
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jit_user_prov_group_assignment_method Object to be assigned
    def jit_user_prov_group_assignment_method=(jit_user_prov_group_assignment_method)
      # rubocop:disable Style/ConditionalAssignment
      if jit_user_prov_group_assignment_method && !JIT_USER_PROV_GROUP_ASSIGNMENT_METHOD_ENUM.include?(jit_user_prov_group_assignment_method)
        OCI.logger.debug("Unknown value for 'jit_user_prov_group_assignment_method' [" + jit_user_prov_group_assignment_method + "]. Mapping to 'JIT_USER_PROV_GROUP_ASSIGNMENT_METHOD_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @jit_user_prov_group_assignment_method = JIT_USER_PROV_GROUP_ASSIGNMENT_METHOD_UNKNOWN_ENUM_VALUE
      else
        @jit_user_prov_group_assignment_method = jit_user_prov_group_assignment_method
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jit_user_prov_group_mapping_mode Object to be assigned
    def jit_user_prov_group_mapping_mode=(jit_user_prov_group_mapping_mode)
      # rubocop:disable Style/ConditionalAssignment
      if jit_user_prov_group_mapping_mode && !JIT_USER_PROV_GROUP_MAPPING_MODE_ENUM.include?(jit_user_prov_group_mapping_mode)
        OCI.logger.debug("Unknown value for 'jit_user_prov_group_mapping_mode' [" + jit_user_prov_group_mapping_mode + "]. Mapping to 'JIT_USER_PROV_GROUP_MAPPING_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @jit_user_prov_group_mapping_mode = JIT_USER_PROV_GROUP_MAPPING_MODE_UNKNOWN_ENUM_VALUE
      else
        @jit_user_prov_group_mapping_mode = jit_user_prov_group_mapping_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_mapping_method Object to be assigned
    def user_mapping_method=(user_mapping_method)
      # rubocop:disable Style/ConditionalAssignment
      if user_mapping_method && !USER_MAPPING_METHOD_ENUM.include?(user_mapping_method)
        OCI.logger.debug("Unknown value for 'user_mapping_method' [" + user_mapping_method + "]. Mapping to 'USER_MAPPING_METHOD_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @user_mapping_method = USER_MAPPING_METHOD_UNKNOWN_ENUM_VALUE
      else
        @user_mapping_method = user_mapping_method
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ocid == other.ocid &&
        schemas == other.schemas &&
        meta == other.meta &&
        idcs_created_by == other.idcs_created_by &&
        idcs_last_modified_by == other.idcs_last_modified_by &&
        idcs_prevented_operations == other.idcs_prevented_operations &&
        tags == other.tags &&
        delete_in_progress == other.delete_in_progress &&
        idcs_last_upgraded_in_release == other.idcs_last_upgraded_in_release &&
        domain_ocid == other.domain_ocid &&
        compartment_ocid == other.compartment_ocid &&
        tenancy_ocid == other.tenancy_ocid &&
        external_id == other.external_id &&
        partner_name == other.partner_name &&
        description == other.description &&
        metadata == other.metadata &&
        partner_provider_id == other.partner_provider_id &&
        tenant_provider_id == other.tenant_provider_id &&
        succinct_id == other.succinct_id &&
        idp_sso_url == other.idp_sso_url &&
        logout_request_url == other.logout_request_url &&
        logout_response_url == other.logout_response_url &&
        signing_certificate == other.signing_certificate &&
        encryption_certificate == other.encryption_certificate &&
        name_id_format == other.name_id_format &&
        include_signing_cert_in_signature == other.include_signing_cert_in_signature &&
        authn_request_binding == other.authn_request_binding &&
        logout_binding == other.logout_binding &&
        logout_enabled == other.logout_enabled &&
        signature_hash_algorithm == other.signature_hash_algorithm &&
        enabled == other.enabled &&
        icon_url == other.icon_url &&
        shown_on_login_page == other.shown_on_login_page &&
        jit_user_prov_enabled == other.jit_user_prov_enabled &&
        jit_user_prov_group_assertion_attribute_enabled == other.jit_user_prov_group_assertion_attribute_enabled &&
        jit_user_prov_group_static_list_enabled == other.jit_user_prov_group_static_list_enabled &&
        jit_user_prov_create_user_enabled == other.jit_user_prov_create_user_enabled &&
        jit_user_prov_attribute_update_enabled == other.jit_user_prov_attribute_update_enabled &&
        jit_user_prov_group_assignment_method == other.jit_user_prov_group_assignment_method &&
        jit_user_prov_group_mapping_mode == other.jit_user_prov_group_mapping_mode &&
        jit_user_prov_group_saml_attribute_name == other.jit_user_prov_group_saml_attribute_name &&
        service_instance_identifier == other.service_instance_identifier &&
        user_mapping_method == other.user_mapping_method &&
        user_mapping_store_attribute == other.user_mapping_store_attribute &&
        assertion_attribute == other.assertion_attribute &&
        type == other.type &&
        require_force_authn == other.require_force_authn &&
        requires_encrypted_assertion == other.requires_encrypted_assertion &&
        saml_ho_k_required == other.saml_ho_k_required &&
        requested_authentication_context == other.requested_authentication_context &&
        jit_user_prov_ignore_error_on_absent_groups == other.jit_user_prov_ignore_error_on_absent_groups &&
        last_notification_sent_time == other.last_notification_sent_time &&
        jit_user_prov_group_mappings == other.jit_user_prov_group_mappings &&
        jit_user_prov_attributes == other.jit_user_prov_attributes &&
        jit_user_prov_assigned_groups == other.jit_user_prov_assigned_groups &&
        correlation_policy == other.correlation_policy &&
        urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider == other.urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider &&
        urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider == other.urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ocid, schemas, meta, idcs_created_by, idcs_last_modified_by, idcs_prevented_operations, tags, delete_in_progress, idcs_last_upgraded_in_release, domain_ocid, compartment_ocid, tenancy_ocid, external_id, partner_name, description, metadata, partner_provider_id, tenant_provider_id, succinct_id, idp_sso_url, logout_request_url, logout_response_url, signing_certificate, encryption_certificate, name_id_format, include_signing_cert_in_signature, authn_request_binding, logout_binding, logout_enabled, signature_hash_algorithm, enabled, icon_url, shown_on_login_page, jit_user_prov_enabled, jit_user_prov_group_assertion_attribute_enabled, jit_user_prov_group_static_list_enabled, jit_user_prov_create_user_enabled, jit_user_prov_attribute_update_enabled, jit_user_prov_group_assignment_method, jit_user_prov_group_mapping_mode, jit_user_prov_group_saml_attribute_name, service_instance_identifier, user_mapping_method, user_mapping_store_attribute, assertion_attribute, type, require_force_authn, requires_encrypted_assertion, saml_ho_k_required, requested_authentication_context, jit_user_prov_ignore_error_on_absent_groups, last_notification_sent_time, jit_user_prov_group_mappings, jit_user_prov_attributes, jit_user_prov_assigned_groups, correlation_policy, urn_ietf_params_scim_schemas_oracle_idcs_extension_social_identity_provider, urn_ietf_params_scim_schemas_oracle_idcs_extension_x509_identity_provider].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
