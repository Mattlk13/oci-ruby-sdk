# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Schema for Database Service  Resource
  class IdentityDomains::Models::ExtensionDbcsGroup
    # DBCS instance-level schema-names. Each schema-name is specific to a DB Instance.
    #
    # **Added In:** 18.2.4
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [dbInstanceId, schemaName]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: complex
    # @return [Array<OCI::IdentityDomains::Models::GroupExtInstanceLevelSchemaNames>]
    attr_accessor :instance_level_schema_names

    # DBCS Domain-level schema-names. Each value is specific to a DB Domain.
    #
    # **Added In:** 18.2.4
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [domainName, schemaName]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: complex
    # @return [Array<OCI::IdentityDomains::Models::GroupExtDomainLevelSchemaNames>]
    attr_accessor :domain_level_schema_names

    # DBCS Domain-level schema-name.  This attribute refers implicitly to a value of 'domainLevelSchemaNames' for a particular DB Domain.
    #
    # **Added In:** 18.2.4
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - idcsSensitive: none
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_level_schema

    # DBCS instance-level schema-name. This attribute refers implicitly to a value of 'instanceLevelSchemaNames' for a particular DB Instance.
    #
    # **Added In:** 18.2.4
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - idcsSensitive: none
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :instance_level_schema

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'instance_level_schema_names': :'instanceLevelSchemaNames',
        'domain_level_schema_names': :'domainLevelSchemaNames',
        'domain_level_schema': :'domainLevelSchema',
        'instance_level_schema': :'instanceLevelSchema'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'instance_level_schema_names': :'Array<OCI::IdentityDomains::Models::GroupExtInstanceLevelSchemaNames>',
        'domain_level_schema_names': :'Array<OCI::IdentityDomains::Models::GroupExtDomainLevelSchemaNames>',
        'domain_level_schema': :'String',
        'instance_level_schema': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<OCI::IdentityDomains::Models::GroupExtInstanceLevelSchemaNames>] :instance_level_schema_names The value to assign to the {#instance_level_schema_names} property
    # @option attributes [Array<OCI::IdentityDomains::Models::GroupExtDomainLevelSchemaNames>] :domain_level_schema_names The value to assign to the {#domain_level_schema_names} property
    # @option attributes [String] :domain_level_schema The value to assign to the {#domain_level_schema} property
    # @option attributes [String] :instance_level_schema The value to assign to the {#instance_level_schema} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.instance_level_schema_names = attributes[:'instanceLevelSchemaNames'] if attributes[:'instanceLevelSchemaNames']

      raise 'You cannot provide both :instanceLevelSchemaNames and :instance_level_schema_names' if attributes.key?(:'instanceLevelSchemaNames') && attributes.key?(:'instance_level_schema_names')

      self.instance_level_schema_names = attributes[:'instance_level_schema_names'] if attributes[:'instance_level_schema_names']

      self.domain_level_schema_names = attributes[:'domainLevelSchemaNames'] if attributes[:'domainLevelSchemaNames']

      raise 'You cannot provide both :domainLevelSchemaNames and :domain_level_schema_names' if attributes.key?(:'domainLevelSchemaNames') && attributes.key?(:'domain_level_schema_names')

      self.domain_level_schema_names = attributes[:'domain_level_schema_names'] if attributes[:'domain_level_schema_names']

      self.domain_level_schema = attributes[:'domainLevelSchema'] if attributes[:'domainLevelSchema']

      raise 'You cannot provide both :domainLevelSchema and :domain_level_schema' if attributes.key?(:'domainLevelSchema') && attributes.key?(:'domain_level_schema')

      self.domain_level_schema = attributes[:'domain_level_schema'] if attributes[:'domain_level_schema']

      self.instance_level_schema = attributes[:'instanceLevelSchema'] if attributes[:'instanceLevelSchema']

      raise 'You cannot provide both :instanceLevelSchema and :instance_level_schema' if attributes.key?(:'instanceLevelSchema') && attributes.key?(:'instance_level_schema')

      self.instance_level_schema = attributes[:'instance_level_schema'] if attributes[:'instance_level_schema']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        instance_level_schema_names == other.instance_level_schema_names &&
        domain_level_schema_names == other.domain_level_schema_names &&
        domain_level_schema == other.domain_level_schema &&
        instance_level_schema == other.instance_level_schema
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [instance_level_schema_names, domain_level_schema_names, domain_level_schema, instance_level_schema].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
