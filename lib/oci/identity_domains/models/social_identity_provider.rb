# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Social Identity Provider
  class IdentityDomains::Models::SocialIdentityProvider
    IDCS_PREVENTED_OPERATIONS_ENUM = [
      IDCS_PREVENTED_OPERATIONS_REPLACE = 'replace'.freeze,
      IDCS_PREVENTED_OPERATIONS_UPDATE = 'update'.freeze,
      IDCS_PREVENTED_OPERATIONS_DELETE = 'delete'.freeze,
      IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_CREATED = 'created'.freeze,
      STATUS_DELETED = 'deleted'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :id

    # Unique OCI identifier for the SCIM Resource.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :ocid

    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # @return [OCI::IdentityDomains::Models::Meta]
    attr_accessor :meta

    # @return [OCI::IdentityDomains::Models::IdcsCreatedBy]
    attr_accessor :idcs_created_by

    # @return [OCI::IdentityDomains::Models::IdcsLastModifiedBy]
    attr_accessor :idcs_last_modified_by

    # Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :idcs_prevented_operations

    # A list of tags on this resource.
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::Tags>]
    attr_accessor :tags

    # A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :delete_in_progress

    # The release number when the resource was upgraded.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_last_upgraded_in_release

    # OCI Domain Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_ocid

    # OCI Compartment Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :compartment_ocid

    # OCI Tenant Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenancy_ocid

    # **[Required]** Social provider name
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :name

    # Social IDP description
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :description

    # **[Required]** Whether the IDP is enabled or not
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :enabled

    # **[Required]** Whether account linking is enabled
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :account_linking_enabled

    # Whether Social JIT Provisioning is enabled
    #
    # **Added In:** 2307282043
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :social_jit_provisioning_enabled

    # Set to true to indicate Social JIT User Provisioning Groups should be assigned from a static list
    #
    # **Added In:** 2309290043
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :jit_prov_group_static_list_enabled

    # Lists the groups each social JIT-provisioned user is a member. Just-in-Time user-provisioning applies this static list when jitProvGroupStaticListEnabled:true.
    #
    # **Added In:** 2309290043
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [value]
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SocialIdentityProviderJitProvAssignedGroups>]
    attr_accessor :jit_prov_assigned_groups

    # **[Required]** Whether registration is enabled
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :registration_enabled

    # Whether social auto redirect is enabled. The IDP policy should be configured with only one Social IDP, and without username/password selected.
    #
    # **Added In:** 2310202314
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :auto_redirect_enabled

    # **[Required]** Whether show on login
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :show_on_login

    # Status
    #
    # **Added In:** 17.4.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :status

    # Id attribute used for account linking
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :id_attribute

    # Social IDP Authorization URL
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :authz_url

    # Social IDP Access token URL
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :access_token_url

    # Social IDP User profile URL
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :profile_url

    # Scope to request
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :scope

    # Admin scope to request
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :admin_scope

    # **[Required]** Social IDP Client Application Client ID
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :consumer_key

    # **[Required]** Social IDP Client Application Client Secret
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - idcsSensitive: encrypt
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :consumer_secret

    # **[Required]** Service Provider Name
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :service_provider_name

    # Social IDP allowed clock skew time
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :clock_skew_in_seconds

    # redirect URL for social idp
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :redirect_url

    # ICON URL for social idp
    #
    # **Added In:** 17.4.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :icon_url

    # Discovery URL
    #
    # **Added In:** 17.4.6
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :discovery_url

    # Whether the client credential is contained in payload
    #
    # **Added In:** 18.4.2
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :client_credential_in_payload

    # Social IDP Refresh token URL
    #
    # **Added In:** 19.1.4
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :refresh_token_url

    # Relay Param variable for Social IDP
    #
    # **Added In:** 2305190132
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [relayParamKey]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SocialIdentityProviderRelayIdpParamMappings>]
    attr_accessor :relay_idp_param_mappings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ocid': :'ocid',
        'schemas': :'schemas',
        'meta': :'meta',
        'idcs_created_by': :'idcsCreatedBy',
        'idcs_last_modified_by': :'idcsLastModifiedBy',
        'idcs_prevented_operations': :'idcsPreventedOperations',
        'tags': :'tags',
        'delete_in_progress': :'deleteInProgress',
        'idcs_last_upgraded_in_release': :'idcsLastUpgradedInRelease',
        'domain_ocid': :'domainOcid',
        'compartment_ocid': :'compartmentOcid',
        'tenancy_ocid': :'tenancyOcid',
        'name': :'name',
        'description': :'description',
        'enabled': :'enabled',
        'account_linking_enabled': :'accountLinkingEnabled',
        'social_jit_provisioning_enabled': :'socialJitProvisioningEnabled',
        'jit_prov_group_static_list_enabled': :'jitProvGroupStaticListEnabled',
        'jit_prov_assigned_groups': :'jitProvAssignedGroups',
        'registration_enabled': :'registrationEnabled',
        'auto_redirect_enabled': :'autoRedirectEnabled',
        'show_on_login': :'showOnLogin',
        'status': :'status',
        'id_attribute': :'idAttribute',
        'authz_url': :'authzUrl',
        'access_token_url': :'accessTokenUrl',
        'profile_url': :'profileUrl',
        'scope': :'scope',
        'admin_scope': :'adminScope',
        'consumer_key': :'consumerKey',
        'consumer_secret': :'consumerSecret',
        'service_provider_name': :'serviceProviderName',
        'clock_skew_in_seconds': :'clockSkewInSeconds',
        'redirect_url': :'redirectUrl',
        'icon_url': :'iconUrl',
        'discovery_url': :'discoveryUrl',
        'client_credential_in_payload': :'clientCredentialInPayload',
        'refresh_token_url': :'refreshTokenUrl',
        'relay_idp_param_mappings': :'relayIdpParamMappings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ocid': :'String',
        'schemas': :'Array<String>',
        'meta': :'OCI::IdentityDomains::Models::Meta',
        'idcs_created_by': :'OCI::IdentityDomains::Models::IdcsCreatedBy',
        'idcs_last_modified_by': :'OCI::IdentityDomains::Models::IdcsLastModifiedBy',
        'idcs_prevented_operations': :'Array<String>',
        'tags': :'Array<OCI::IdentityDomains::Models::Tags>',
        'delete_in_progress': :'BOOLEAN',
        'idcs_last_upgraded_in_release': :'String',
        'domain_ocid': :'String',
        'compartment_ocid': :'String',
        'tenancy_ocid': :'String',
        'name': :'String',
        'description': :'String',
        'enabled': :'BOOLEAN',
        'account_linking_enabled': :'BOOLEAN',
        'social_jit_provisioning_enabled': :'BOOLEAN',
        'jit_prov_group_static_list_enabled': :'BOOLEAN',
        'jit_prov_assigned_groups': :'Array<OCI::IdentityDomains::Models::SocialIdentityProviderJitProvAssignedGroups>',
        'registration_enabled': :'BOOLEAN',
        'auto_redirect_enabled': :'BOOLEAN',
        'show_on_login': :'BOOLEAN',
        'status': :'String',
        'id_attribute': :'String',
        'authz_url': :'String',
        'access_token_url': :'String',
        'profile_url': :'String',
        'scope': :'Array<String>',
        'admin_scope': :'Array<String>',
        'consumer_key': :'String',
        'consumer_secret': :'String',
        'service_provider_name': :'String',
        'clock_skew_in_seconds': :'Integer',
        'redirect_url': :'String',
        'icon_url': :'String',
        'discovery_url': :'String',
        'client_credential_in_payload': :'BOOLEAN',
        'refresh_token_url': :'String',
        'relay_idp_param_mappings': :'Array<OCI::IdentityDomains::Models::SocialIdentityProviderRelayIdpParamMappings>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [OCI::IdentityDomains::Models::Meta] :meta The value to assign to the {#meta} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsCreatedBy] :idcs_created_by The value to assign to the {#idcs_created_by} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsLastModifiedBy] :idcs_last_modified_by The value to assign to the {#idcs_last_modified_by} property
    # @option attributes [Array<String>] :idcs_prevented_operations The value to assign to the {#idcs_prevented_operations} property
    # @option attributes [Array<OCI::IdentityDomains::Models::Tags>] :tags The value to assign to the {#tags} property
    # @option attributes [BOOLEAN] :delete_in_progress The value to assign to the {#delete_in_progress} property
    # @option attributes [String] :idcs_last_upgraded_in_release The value to assign to the {#idcs_last_upgraded_in_release} property
    # @option attributes [String] :domain_ocid The value to assign to the {#domain_ocid} property
    # @option attributes [String] :compartment_ocid The value to assign to the {#compartment_ocid} property
    # @option attributes [String] :tenancy_ocid The value to assign to the {#tenancy_ocid} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [BOOLEAN] :enabled The value to assign to the {#enabled} property
    # @option attributes [BOOLEAN] :account_linking_enabled The value to assign to the {#account_linking_enabled} property
    # @option attributes [BOOLEAN] :social_jit_provisioning_enabled The value to assign to the {#social_jit_provisioning_enabled} property
    # @option attributes [BOOLEAN] :jit_prov_group_static_list_enabled The value to assign to the {#jit_prov_group_static_list_enabled} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SocialIdentityProviderJitProvAssignedGroups>] :jit_prov_assigned_groups The value to assign to the {#jit_prov_assigned_groups} property
    # @option attributes [BOOLEAN] :registration_enabled The value to assign to the {#registration_enabled} property
    # @option attributes [BOOLEAN] :auto_redirect_enabled The value to assign to the {#auto_redirect_enabled} property
    # @option attributes [BOOLEAN] :show_on_login The value to assign to the {#show_on_login} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :id_attribute The value to assign to the {#id_attribute} property
    # @option attributes [String] :authz_url The value to assign to the {#authz_url} property
    # @option attributes [String] :access_token_url The value to assign to the {#access_token_url} property
    # @option attributes [String] :profile_url The value to assign to the {#profile_url} property
    # @option attributes [Array<String>] :scope The value to assign to the {#scope} property
    # @option attributes [Array<String>] :admin_scope The value to assign to the {#admin_scope} property
    # @option attributes [String] :consumer_key The value to assign to the {#consumer_key} property
    # @option attributes [String] :consumer_secret The value to assign to the {#consumer_secret} property
    # @option attributes [String] :service_provider_name The value to assign to the {#service_provider_name} property
    # @option attributes [Integer] :clock_skew_in_seconds The value to assign to the {#clock_skew_in_seconds} property
    # @option attributes [String] :redirect_url The value to assign to the {#redirect_url} property
    # @option attributes [String] :icon_url The value to assign to the {#icon_url} property
    # @option attributes [String] :discovery_url The value to assign to the {#discovery_url} property
    # @option attributes [BOOLEAN] :client_credential_in_payload The value to assign to the {#client_credential_in_payload} property
    # @option attributes [String] :refresh_token_url The value to assign to the {#refresh_token_url} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SocialIdentityProviderRelayIdpParamMappings>] :relay_idp_param_mappings The value to assign to the {#relay_idp_param_mappings} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.meta = attributes[:'meta'] if attributes[:'meta']

      self.idcs_created_by = attributes[:'idcsCreatedBy'] if attributes[:'idcsCreatedBy']

      raise 'You cannot provide both :idcsCreatedBy and :idcs_created_by' if attributes.key?(:'idcsCreatedBy') && attributes.key?(:'idcs_created_by')

      self.idcs_created_by = attributes[:'idcs_created_by'] if attributes[:'idcs_created_by']

      self.idcs_last_modified_by = attributes[:'idcsLastModifiedBy'] if attributes[:'idcsLastModifiedBy']

      raise 'You cannot provide both :idcsLastModifiedBy and :idcs_last_modified_by' if attributes.key?(:'idcsLastModifiedBy') && attributes.key?(:'idcs_last_modified_by')

      self.idcs_last_modified_by = attributes[:'idcs_last_modified_by'] if attributes[:'idcs_last_modified_by']

      self.idcs_prevented_operations = attributes[:'idcsPreventedOperations'] if attributes[:'idcsPreventedOperations']

      raise 'You cannot provide both :idcsPreventedOperations and :idcs_prevented_operations' if attributes.key?(:'idcsPreventedOperations') && attributes.key?(:'idcs_prevented_operations')

      self.idcs_prevented_operations = attributes[:'idcs_prevented_operations'] if attributes[:'idcs_prevented_operations']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.delete_in_progress = attributes[:'deleteInProgress'] unless attributes[:'deleteInProgress'].nil?

      raise 'You cannot provide both :deleteInProgress and :delete_in_progress' if attributes.key?(:'deleteInProgress') && attributes.key?(:'delete_in_progress')

      self.delete_in_progress = attributes[:'delete_in_progress'] unless attributes[:'delete_in_progress'].nil?

      self.idcs_last_upgraded_in_release = attributes[:'idcsLastUpgradedInRelease'] if attributes[:'idcsLastUpgradedInRelease']

      raise 'You cannot provide both :idcsLastUpgradedInRelease and :idcs_last_upgraded_in_release' if attributes.key?(:'idcsLastUpgradedInRelease') && attributes.key?(:'idcs_last_upgraded_in_release')

      self.idcs_last_upgraded_in_release = attributes[:'idcs_last_upgraded_in_release'] if attributes[:'idcs_last_upgraded_in_release']

      self.domain_ocid = attributes[:'domainOcid'] if attributes[:'domainOcid']

      raise 'You cannot provide both :domainOcid and :domain_ocid' if attributes.key?(:'domainOcid') && attributes.key?(:'domain_ocid')

      self.domain_ocid = attributes[:'domain_ocid'] if attributes[:'domain_ocid']

      self.compartment_ocid = attributes[:'compartmentOcid'] if attributes[:'compartmentOcid']

      raise 'You cannot provide both :compartmentOcid and :compartment_ocid' if attributes.key?(:'compartmentOcid') && attributes.key?(:'compartment_ocid')

      self.compartment_ocid = attributes[:'compartment_ocid'] if attributes[:'compartment_ocid']

      self.tenancy_ocid = attributes[:'tenancyOcid'] if attributes[:'tenancyOcid']

      raise 'You cannot provide both :tenancyOcid and :tenancy_ocid' if attributes.key?(:'tenancyOcid') && attributes.key?(:'tenancy_ocid')

      self.tenancy_ocid = attributes[:'tenancy_ocid'] if attributes[:'tenancy_ocid']

      self.name = attributes[:'name'] if attributes[:'name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.enabled = attributes[:'enabled'] unless attributes[:'enabled'].nil?

      self.account_linking_enabled = attributes[:'accountLinkingEnabled'] unless attributes[:'accountLinkingEnabled'].nil?

      raise 'You cannot provide both :accountLinkingEnabled and :account_linking_enabled' if attributes.key?(:'accountLinkingEnabled') && attributes.key?(:'account_linking_enabled')

      self.account_linking_enabled = attributes[:'account_linking_enabled'] unless attributes[:'account_linking_enabled'].nil?

      self.social_jit_provisioning_enabled = attributes[:'socialJitProvisioningEnabled'] unless attributes[:'socialJitProvisioningEnabled'].nil?

      raise 'You cannot provide both :socialJitProvisioningEnabled and :social_jit_provisioning_enabled' if attributes.key?(:'socialJitProvisioningEnabled') && attributes.key?(:'social_jit_provisioning_enabled')

      self.social_jit_provisioning_enabled = attributes[:'social_jit_provisioning_enabled'] unless attributes[:'social_jit_provisioning_enabled'].nil?

      self.jit_prov_group_static_list_enabled = attributes[:'jitProvGroupStaticListEnabled'] unless attributes[:'jitProvGroupStaticListEnabled'].nil?

      raise 'You cannot provide both :jitProvGroupStaticListEnabled and :jit_prov_group_static_list_enabled' if attributes.key?(:'jitProvGroupStaticListEnabled') && attributes.key?(:'jit_prov_group_static_list_enabled')

      self.jit_prov_group_static_list_enabled = attributes[:'jit_prov_group_static_list_enabled'] unless attributes[:'jit_prov_group_static_list_enabled'].nil?

      self.jit_prov_assigned_groups = attributes[:'jitProvAssignedGroups'] if attributes[:'jitProvAssignedGroups']

      raise 'You cannot provide both :jitProvAssignedGroups and :jit_prov_assigned_groups' if attributes.key?(:'jitProvAssignedGroups') && attributes.key?(:'jit_prov_assigned_groups')

      self.jit_prov_assigned_groups = attributes[:'jit_prov_assigned_groups'] if attributes[:'jit_prov_assigned_groups']

      self.registration_enabled = attributes[:'registrationEnabled'] unless attributes[:'registrationEnabled'].nil?

      raise 'You cannot provide both :registrationEnabled and :registration_enabled' if attributes.key?(:'registrationEnabled') && attributes.key?(:'registration_enabled')

      self.registration_enabled = attributes[:'registration_enabled'] unless attributes[:'registration_enabled'].nil?

      self.auto_redirect_enabled = attributes[:'autoRedirectEnabled'] unless attributes[:'autoRedirectEnabled'].nil?

      raise 'You cannot provide both :autoRedirectEnabled and :auto_redirect_enabled' if attributes.key?(:'autoRedirectEnabled') && attributes.key?(:'auto_redirect_enabled')

      self.auto_redirect_enabled = attributes[:'auto_redirect_enabled'] unless attributes[:'auto_redirect_enabled'].nil?

      self.show_on_login = attributes[:'showOnLogin'] unless attributes[:'showOnLogin'].nil?

      raise 'You cannot provide both :showOnLogin and :show_on_login' if attributes.key?(:'showOnLogin') && attributes.key?(:'show_on_login')

      self.show_on_login = attributes[:'show_on_login'] unless attributes[:'show_on_login'].nil?

      self.status = attributes[:'status'] if attributes[:'status']

      self.id_attribute = attributes[:'idAttribute'] if attributes[:'idAttribute']

      raise 'You cannot provide both :idAttribute and :id_attribute' if attributes.key?(:'idAttribute') && attributes.key?(:'id_attribute')

      self.id_attribute = attributes[:'id_attribute'] if attributes[:'id_attribute']

      self.authz_url = attributes[:'authzUrl'] if attributes[:'authzUrl']

      raise 'You cannot provide both :authzUrl and :authz_url' if attributes.key?(:'authzUrl') && attributes.key?(:'authz_url')

      self.authz_url = attributes[:'authz_url'] if attributes[:'authz_url']

      self.access_token_url = attributes[:'accessTokenUrl'] if attributes[:'accessTokenUrl']

      raise 'You cannot provide both :accessTokenUrl and :access_token_url' if attributes.key?(:'accessTokenUrl') && attributes.key?(:'access_token_url')

      self.access_token_url = attributes[:'access_token_url'] if attributes[:'access_token_url']

      self.profile_url = attributes[:'profileUrl'] if attributes[:'profileUrl']

      raise 'You cannot provide both :profileUrl and :profile_url' if attributes.key?(:'profileUrl') && attributes.key?(:'profile_url')

      self.profile_url = attributes[:'profile_url'] if attributes[:'profile_url']

      self.scope = attributes[:'scope'] if attributes[:'scope']

      self.admin_scope = attributes[:'adminScope'] if attributes[:'adminScope']

      raise 'You cannot provide both :adminScope and :admin_scope' if attributes.key?(:'adminScope') && attributes.key?(:'admin_scope')

      self.admin_scope = attributes[:'admin_scope'] if attributes[:'admin_scope']

      self.consumer_key = attributes[:'consumerKey'] if attributes[:'consumerKey']

      raise 'You cannot provide both :consumerKey and :consumer_key' if attributes.key?(:'consumerKey') && attributes.key?(:'consumer_key')

      self.consumer_key = attributes[:'consumer_key'] if attributes[:'consumer_key']

      self.consumer_secret = attributes[:'consumerSecret'] if attributes[:'consumerSecret']

      raise 'You cannot provide both :consumerSecret and :consumer_secret' if attributes.key?(:'consumerSecret') && attributes.key?(:'consumer_secret')

      self.consumer_secret = attributes[:'consumer_secret'] if attributes[:'consumer_secret']

      self.service_provider_name = attributes[:'serviceProviderName'] if attributes[:'serviceProviderName']

      raise 'You cannot provide both :serviceProviderName and :service_provider_name' if attributes.key?(:'serviceProviderName') && attributes.key?(:'service_provider_name')

      self.service_provider_name = attributes[:'service_provider_name'] if attributes[:'service_provider_name']

      self.clock_skew_in_seconds = attributes[:'clockSkewInSeconds'] if attributes[:'clockSkewInSeconds']

      raise 'You cannot provide both :clockSkewInSeconds and :clock_skew_in_seconds' if attributes.key?(:'clockSkewInSeconds') && attributes.key?(:'clock_skew_in_seconds')

      self.clock_skew_in_seconds = attributes[:'clock_skew_in_seconds'] if attributes[:'clock_skew_in_seconds']

      self.redirect_url = attributes[:'redirectUrl'] if attributes[:'redirectUrl']

      raise 'You cannot provide both :redirectUrl and :redirect_url' if attributes.key?(:'redirectUrl') && attributes.key?(:'redirect_url')

      self.redirect_url = attributes[:'redirect_url'] if attributes[:'redirect_url']

      self.icon_url = attributes[:'iconUrl'] if attributes[:'iconUrl']

      raise 'You cannot provide both :iconUrl and :icon_url' if attributes.key?(:'iconUrl') && attributes.key?(:'icon_url')

      self.icon_url = attributes[:'icon_url'] if attributes[:'icon_url']

      self.discovery_url = attributes[:'discoveryUrl'] if attributes[:'discoveryUrl']

      raise 'You cannot provide both :discoveryUrl and :discovery_url' if attributes.key?(:'discoveryUrl') && attributes.key?(:'discovery_url')

      self.discovery_url = attributes[:'discovery_url'] if attributes[:'discovery_url']

      self.client_credential_in_payload = attributes[:'clientCredentialInPayload'] unless attributes[:'clientCredentialInPayload'].nil?

      raise 'You cannot provide both :clientCredentialInPayload and :client_credential_in_payload' if attributes.key?(:'clientCredentialInPayload') && attributes.key?(:'client_credential_in_payload')

      self.client_credential_in_payload = attributes[:'client_credential_in_payload'] unless attributes[:'client_credential_in_payload'].nil?

      self.refresh_token_url = attributes[:'refreshTokenUrl'] if attributes[:'refreshTokenUrl']

      raise 'You cannot provide both :refreshTokenUrl and :refresh_token_url' if attributes.key?(:'refreshTokenUrl') && attributes.key?(:'refresh_token_url')

      self.refresh_token_url = attributes[:'refresh_token_url'] if attributes[:'refresh_token_url']

      self.relay_idp_param_mappings = attributes[:'relayIdpParamMappings'] if attributes[:'relayIdpParamMappings']

      raise 'You cannot provide both :relayIdpParamMappings and :relay_idp_param_mappings' if attributes.key?(:'relayIdpParamMappings') && attributes.key?(:'relay_idp_param_mappings')

      self.relay_idp_param_mappings = attributes[:'relay_idp_param_mappings'] if attributes[:'relay_idp_param_mappings']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_prevented_operations Object to be assigned
    def idcs_prevented_operations=(idcs_prevented_operations)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_prevented_operations.nil?
        @idcs_prevented_operations = nil
      else
        @idcs_prevented_operations =
          idcs_prevented_operations.collect do |item|
            if IDCS_PREVENTED_OPERATIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'idcs_prevented_operations' [#{item}]. Mapping to 'IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ocid == other.ocid &&
        schemas == other.schemas &&
        meta == other.meta &&
        idcs_created_by == other.idcs_created_by &&
        idcs_last_modified_by == other.idcs_last_modified_by &&
        idcs_prevented_operations == other.idcs_prevented_operations &&
        tags == other.tags &&
        delete_in_progress == other.delete_in_progress &&
        idcs_last_upgraded_in_release == other.idcs_last_upgraded_in_release &&
        domain_ocid == other.domain_ocid &&
        compartment_ocid == other.compartment_ocid &&
        tenancy_ocid == other.tenancy_ocid &&
        name == other.name &&
        description == other.description &&
        enabled == other.enabled &&
        account_linking_enabled == other.account_linking_enabled &&
        social_jit_provisioning_enabled == other.social_jit_provisioning_enabled &&
        jit_prov_group_static_list_enabled == other.jit_prov_group_static_list_enabled &&
        jit_prov_assigned_groups == other.jit_prov_assigned_groups &&
        registration_enabled == other.registration_enabled &&
        auto_redirect_enabled == other.auto_redirect_enabled &&
        show_on_login == other.show_on_login &&
        status == other.status &&
        id_attribute == other.id_attribute &&
        authz_url == other.authz_url &&
        access_token_url == other.access_token_url &&
        profile_url == other.profile_url &&
        scope == other.scope &&
        admin_scope == other.admin_scope &&
        consumer_key == other.consumer_key &&
        consumer_secret == other.consumer_secret &&
        service_provider_name == other.service_provider_name &&
        clock_skew_in_seconds == other.clock_skew_in_seconds &&
        redirect_url == other.redirect_url &&
        icon_url == other.icon_url &&
        discovery_url == other.discovery_url &&
        client_credential_in_payload == other.client_credential_in_payload &&
        refresh_token_url == other.refresh_token_url &&
        relay_idp_param_mappings == other.relay_idp_param_mappings
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ocid, schemas, meta, idcs_created_by, idcs_last_modified_by, idcs_prevented_operations, tags, delete_in_progress, idcs_last_upgraded_in_release, domain_ocid, compartment_ocid, tenancy_ocid, name, description, enabled, account_linking_enabled, social_jit_provisioning_enabled, jit_prov_group_static_list_enabled, jit_prov_assigned_groups, registration_enabled, auto_redirect_enabled, show_on_login, status, id_attribute, authz_url, access_token_url, profile_url, scope, admin_scope, consumer_key, consumer_secret, service_provider_name, clock_skew_in_seconds, redirect_url, icon_url, discovery_url, client_credential_in_payload, refresh_token_url, relay_idp_param_mappings].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
