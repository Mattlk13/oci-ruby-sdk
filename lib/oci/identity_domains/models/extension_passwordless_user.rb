# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This extension defines attributes used to manage Passwordless-Factor Authentication within a service provider. The extension is typically applied to a User resource, but MAY be applied to other resources that use MFA.
  class IdentityDomains::Models::ExtensionPasswordlessUser
    FACTOR_TYPE_ENUM = [
      FACTOR_TYPE_EMAIL = 'EMAIL'.freeze,
      FACTOR_TYPE_SMS = 'SMS'.freeze,
      FACTOR_TYPE_PHONE_CALL = 'PHONE_CALL'.freeze,
      FACTOR_TYPE_TOTP = 'TOTP'.freeze,
      FACTOR_TYPE_PUSH = 'PUSH'.freeze,
      FACTOR_TYPE_OFFLINETOTP = 'OFFLINETOTP'.freeze,
      FACTOR_TYPE_SECURITY_QUESTIONS = 'SECURITY_QUESTIONS'.freeze,
      FACTOR_TYPE_VOICE = 'VOICE'.freeze,
      FACTOR_TYPE_USERNAME_PASSWORD = 'USERNAME_PASSWORD'.freeze,
      FACTOR_TYPE_THIRDPARTY = 'THIRDPARTY'.freeze,
      FACTOR_TYPE_FIDO_AUTHENTICATOR = 'FIDO_AUTHENTICATOR'.freeze,
      FACTOR_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Authentication Factor Type
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :factor_type

    # Authentication Factor Method
    #
    # **Added In:** 2009232244
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :factor_method

    # @return [OCI::IdentityDomains::Models::UserExtFactorIdentifier]
    attr_accessor :factor_identifier

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'factor_type': :'factorType',
        'factor_method': :'factorMethod',
        'factor_identifier': :'factorIdentifier'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'factor_type': :'String',
        'factor_method': :'String',
        'factor_identifier': :'OCI::IdentityDomains::Models::UserExtFactorIdentifier'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :factor_type The value to assign to the {#factor_type} property
    # @option attributes [String] :factor_method The value to assign to the {#factor_method} property
    # @option attributes [OCI::IdentityDomains::Models::UserExtFactorIdentifier] :factor_identifier The value to assign to the {#factor_identifier} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.factor_type = attributes[:'factorType'] if attributes[:'factorType']

      raise 'You cannot provide both :factorType and :factor_type' if attributes.key?(:'factorType') && attributes.key?(:'factor_type')

      self.factor_type = attributes[:'factor_type'] if attributes[:'factor_type']

      self.factor_method = attributes[:'factorMethod'] if attributes[:'factorMethod']

      raise 'You cannot provide both :factorMethod and :factor_method' if attributes.key?(:'factorMethod') && attributes.key?(:'factor_method')

      self.factor_method = attributes[:'factor_method'] if attributes[:'factor_method']

      self.factor_identifier = attributes[:'factorIdentifier'] if attributes[:'factorIdentifier']

      raise 'You cannot provide both :factorIdentifier and :factor_identifier' if attributes.key?(:'factorIdentifier') && attributes.key?(:'factor_identifier')

      self.factor_identifier = attributes[:'factor_identifier'] if attributes[:'factor_identifier']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] factor_type Object to be assigned
    def factor_type=(factor_type)
      # rubocop:disable Style/ConditionalAssignment
      if factor_type && !FACTOR_TYPE_ENUM.include?(factor_type)
        OCI.logger.debug("Unknown value for 'factor_type' [" + factor_type + "]. Mapping to 'FACTOR_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @factor_type = FACTOR_TYPE_UNKNOWN_ENUM_VALUE
      else
        @factor_type = factor_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        factor_type == other.factor_type &&
        factor_method == other.factor_method &&
        factor_identifier == other.factor_identifier
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [factor_type, factor_method, factor_identifier].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
