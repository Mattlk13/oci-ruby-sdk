# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Self Registration Profile
  class IdentityDomains::Models::SelfRegistrationProfile
    IDCS_PREVENTED_OPERATIONS_ENUM = [
      IDCS_PREVENTED_OPERATIONS_REPLACE = 'replace'.freeze,
      IDCS_PREVENTED_OPERATIONS_UPDATE = 'update'.freeze,
      IDCS_PREVENTED_OPERATIONS_DELETE = 'delete'.freeze,
      IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Unique identifier for the SCIM Resource as defined by the Service Provider. Each representation of the Resource MUST include a non-empty id value. This identifier MUST be unique across the Service Provider's entire set of Resources. It MUST be a stable, non-reassignable identifier that does not change when the same Resource is returned in subsequent requests. The value of the id attribute is always issued by the Service Provider and MUST never be specified by the Service Consumer. bulkId: is a reserved keyword and MUST NOT be used in the unique identifier.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :id

    # Unique OCI identifier for the SCIM Resource.
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :ocid

    # **[Required]** REQUIRED. The schemas attribute is an array of Strings which allows introspection of the supported schema version for a SCIM representation as well any schema extensions supported by that representation. Each String value must be a unique URI. This specification defines URIs for User, Group, and a standard \\\"enterprise\\\" extension. All representations of SCIM schema MUST include a non-zero value array with value(s) of the URIs supported by that representation. Duplicate values MUST NOT be included. Value order is not specified and MUST not impact behavior.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :schemas

    # @return [OCI::IdentityDomains::Models::Meta]
    attr_accessor :meta

    # @return [OCI::IdentityDomains::Models::IdcsCreatedBy]
    attr_accessor :idcs_created_by

    # @return [OCI::IdentityDomains::Models::IdcsLastModifiedBy]
    attr_accessor :idcs_last_modified_by

    # Each value of this attribute specifies an operation that only an internal client may perform on this particular resource.
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_reader :idcs_prevented_operations

    # A list of tags on this resource.
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [key, value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::Tags>]
    attr_accessor :tags

    # A boolean flag indicating this resource in the process of being deleted. Usually set to true when synchronous deletion of the resource would take too long.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :delete_in_progress

    # The release number when the resource was upgraded.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: request
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :idcs_last_upgraded_in_release

    # OCI Domain Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :domain_ocid

    # OCI Compartment Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :compartment_ocid

    # OCI Tenant Id (ocid) in which the resource lives.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readOnly
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :tenancy_ocid

    # An identifier for the Resource as defined by the Service Consumer. The externalId may simplify identification of the Resource between Service Consumer and Service Provider by allowing the Consumer to refer to the Resource with its own identifier, obviating the need to store a local mapping between the local identifier of the Resource and the identifier used by the Service Provider. Each Resource MAY include a non-empty externalId value. The value of the externalId attribute is always issued by the Service Consumer and can never be specified by the Service Provider. The Service Provider MUST always interpret the externalId as scoped to the Service Consumer's tenant.
    #
    # **SCIM++ Properties:**
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :external_id

    # **[Required]** Name of the profile
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: always
    #  - type: string
    #  - uniqueness: global
    # @return [String]
    attr_accessor :name

    # **[Required]** **SCIM++ Properties:**
    # - caseExact: false
    # - idcsSearchable: true
    # - multiValued: false
    # - mutability: readWrite
    # - required: true
    # - returned: default
    # - type: boolean
    # - uniqueness: none
    # A Boolean value that indicates whether Account verification email is required to be sent before login or not
    # @return [BOOLEAN]
    attr_accessor :activation_email_required

    # **[Required]** Number of days redirect URL is valid
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :number_of_days_redirect_url_is_valid

    # A Boolean value that indicates whether the profile is enabled or not
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :active

    # **[Required]** A Boolean value that indicates whether the profile should be displayed on login page
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :show_on_login_page

    # A Multivalue String value for Email domains which are valid for this profile
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :allowed_email_domains

    # A Multivalue String Value for Email domains to be handled as exceptions
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :disallowed_email_domains

    # Reference to header logo
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: reference
    # @return [String]
    attr_accessor :header_logo

    # References to footer logo
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: reference
    # @return [String]
    attr_accessor :footer_logo

    # **[Required]** This URL will be replaced in email notification sent to user. When activation email required is set to true, user is created in \\\"pending verification\\\" state, upon clicking this link user will be able to activate himself. When activation email required is set to false, user is created in \\\"verified\\\" state, this link will be used to verify user's email.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :redirect_url

    # **[Required]** A boolean value that indicates whether the consent text is present.
    #
    # **SCIM++ Properties:**
    #  - caseExact: false
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :consent_text_present

    # **[Required]** Registration page name
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [locale]
    #  - idcsMultiLanguage: true
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileDisplayName>]
    attr_accessor :display_name

    # Text to be displayed on UI after doing self registration
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [locale]
    #  - idcsMultiLanguage: true
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileAfterSubmitText>]
    attr_accessor :after_submit_text

    # **SCIM++ Properties:**
    # - idcsCompositeKey: [value]
    # - idcsSearchable: true
    # - multiValued: true
    # - mutability: readWrite
    # - required: false
    # - returned: default
    # - type: complex
    # - uniqueness: none
    # User Attributes
    # @return [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileUserAttributes>]
    attr_accessor :user_attributes

    # This attribute is required.
    # @return [OCI::IdentityDomains::Models::SelfRegistrationProfileEmailTemplate]
    attr_accessor :email_template

    # Default groups assigned to the user
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [value]
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: request
    #  - type: complex
    # @return [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileDefaultGroups>]
    attr_accessor :default_groups

    # Header text
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [locale]
    #  - idcsMultiLanguage: true
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileHeaderText>]
    attr_accessor :header_text

    # Footer text
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [locale]
    #  - idcsMultiLanguage: true
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileFooterText>]
    attr_accessor :footer_text

    # Consent text
    #
    # **SCIM++ Properties:**
    #  - idcsCompositeKey: [locale]
    #  - idcsMultiLanguage: true
    #  - idcsSearchable: true
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: complex
    #  - uniqueness: none
    # @return [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileConsentText>]
    attr_accessor :consent_text

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ocid': :'ocid',
        'schemas': :'schemas',
        'meta': :'meta',
        'idcs_created_by': :'idcsCreatedBy',
        'idcs_last_modified_by': :'idcsLastModifiedBy',
        'idcs_prevented_operations': :'idcsPreventedOperations',
        'tags': :'tags',
        'delete_in_progress': :'deleteInProgress',
        'idcs_last_upgraded_in_release': :'idcsLastUpgradedInRelease',
        'domain_ocid': :'domainOcid',
        'compartment_ocid': :'compartmentOcid',
        'tenancy_ocid': :'tenancyOcid',
        'external_id': :'externalId',
        'name': :'name',
        'activation_email_required': :'activationEmailRequired',
        'number_of_days_redirect_url_is_valid': :'numberOfDaysRedirectUrlIsValid',
        'active': :'active',
        'show_on_login_page': :'showOnLoginPage',
        'allowed_email_domains': :'allowedEmailDomains',
        'disallowed_email_domains': :'disallowedEmailDomains',
        'header_logo': :'headerLogo',
        'footer_logo': :'footerLogo',
        'redirect_url': :'redirectUrl',
        'consent_text_present': :'consentTextPresent',
        'display_name': :'displayName',
        'after_submit_text': :'afterSubmitText',
        'user_attributes': :'userAttributes',
        'email_template': :'emailTemplate',
        'default_groups': :'defaultGroups',
        'header_text': :'headerText',
        'footer_text': :'footerText',
        'consent_text': :'consentText'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ocid': :'String',
        'schemas': :'Array<String>',
        'meta': :'OCI::IdentityDomains::Models::Meta',
        'idcs_created_by': :'OCI::IdentityDomains::Models::IdcsCreatedBy',
        'idcs_last_modified_by': :'OCI::IdentityDomains::Models::IdcsLastModifiedBy',
        'idcs_prevented_operations': :'Array<String>',
        'tags': :'Array<OCI::IdentityDomains::Models::Tags>',
        'delete_in_progress': :'BOOLEAN',
        'idcs_last_upgraded_in_release': :'String',
        'domain_ocid': :'String',
        'compartment_ocid': :'String',
        'tenancy_ocid': :'String',
        'external_id': :'String',
        'name': :'String',
        'activation_email_required': :'BOOLEAN',
        'number_of_days_redirect_url_is_valid': :'Integer',
        'active': :'BOOLEAN',
        'show_on_login_page': :'BOOLEAN',
        'allowed_email_domains': :'Array<String>',
        'disallowed_email_domains': :'Array<String>',
        'header_logo': :'String',
        'footer_logo': :'String',
        'redirect_url': :'String',
        'consent_text_present': :'BOOLEAN',
        'display_name': :'Array<OCI::IdentityDomains::Models::SelfRegistrationProfileDisplayName>',
        'after_submit_text': :'Array<OCI::IdentityDomains::Models::SelfRegistrationProfileAfterSubmitText>',
        'user_attributes': :'Array<OCI::IdentityDomains::Models::SelfRegistrationProfileUserAttributes>',
        'email_template': :'OCI::IdentityDomains::Models::SelfRegistrationProfileEmailTemplate',
        'default_groups': :'Array<OCI::IdentityDomains::Models::SelfRegistrationProfileDefaultGroups>',
        'header_text': :'Array<OCI::IdentityDomains::Models::SelfRegistrationProfileHeaderText>',
        'footer_text': :'Array<OCI::IdentityDomains::Models::SelfRegistrationProfileFooterText>',
        'consent_text': :'Array<OCI::IdentityDomains::Models::SelfRegistrationProfileConsentText>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ocid The value to assign to the {#ocid} property
    # @option attributes [Array<String>] :schemas The value to assign to the {#schemas} property
    # @option attributes [OCI::IdentityDomains::Models::Meta] :meta The value to assign to the {#meta} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsCreatedBy] :idcs_created_by The value to assign to the {#idcs_created_by} property
    # @option attributes [OCI::IdentityDomains::Models::IdcsLastModifiedBy] :idcs_last_modified_by The value to assign to the {#idcs_last_modified_by} property
    # @option attributes [Array<String>] :idcs_prevented_operations The value to assign to the {#idcs_prevented_operations} property
    # @option attributes [Array<OCI::IdentityDomains::Models::Tags>] :tags The value to assign to the {#tags} property
    # @option attributes [BOOLEAN] :delete_in_progress The value to assign to the {#delete_in_progress} property
    # @option attributes [String] :idcs_last_upgraded_in_release The value to assign to the {#idcs_last_upgraded_in_release} property
    # @option attributes [String] :domain_ocid The value to assign to the {#domain_ocid} property
    # @option attributes [String] :compartment_ocid The value to assign to the {#compartment_ocid} property
    # @option attributes [String] :tenancy_ocid The value to assign to the {#tenancy_ocid} property
    # @option attributes [String] :external_id The value to assign to the {#external_id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [BOOLEAN] :activation_email_required The value to assign to the {#activation_email_required} property
    # @option attributes [Integer] :number_of_days_redirect_url_is_valid The value to assign to the {#number_of_days_redirect_url_is_valid} property
    # @option attributes [BOOLEAN] :active The value to assign to the {#active} property
    # @option attributes [BOOLEAN] :show_on_login_page The value to assign to the {#show_on_login_page} property
    # @option attributes [Array<String>] :allowed_email_domains The value to assign to the {#allowed_email_domains} property
    # @option attributes [Array<String>] :disallowed_email_domains The value to assign to the {#disallowed_email_domains} property
    # @option attributes [String] :header_logo The value to assign to the {#header_logo} property
    # @option attributes [String] :footer_logo The value to assign to the {#footer_logo} property
    # @option attributes [String] :redirect_url The value to assign to the {#redirect_url} property
    # @option attributes [BOOLEAN] :consent_text_present The value to assign to the {#consent_text_present} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileDisplayName>] :display_name The value to assign to the {#display_name} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileAfterSubmitText>] :after_submit_text The value to assign to the {#after_submit_text} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileUserAttributes>] :user_attributes The value to assign to the {#user_attributes} property
    # @option attributes [OCI::IdentityDomains::Models::SelfRegistrationProfileEmailTemplate] :email_template The value to assign to the {#email_template} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileDefaultGroups>] :default_groups The value to assign to the {#default_groups} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileHeaderText>] :header_text The value to assign to the {#header_text} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileFooterText>] :footer_text The value to assign to the {#footer_text} property
    # @option attributes [Array<OCI::IdentityDomains::Models::SelfRegistrationProfileConsentText>] :consent_text The value to assign to the {#consent_text} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ocid = attributes[:'ocid'] if attributes[:'ocid']

      self.schemas = attributes[:'schemas'] if attributes[:'schemas']

      self.meta = attributes[:'meta'] if attributes[:'meta']

      self.idcs_created_by = attributes[:'idcsCreatedBy'] if attributes[:'idcsCreatedBy']

      raise 'You cannot provide both :idcsCreatedBy and :idcs_created_by' if attributes.key?(:'idcsCreatedBy') && attributes.key?(:'idcs_created_by')

      self.idcs_created_by = attributes[:'idcs_created_by'] if attributes[:'idcs_created_by']

      self.idcs_last_modified_by = attributes[:'idcsLastModifiedBy'] if attributes[:'idcsLastModifiedBy']

      raise 'You cannot provide both :idcsLastModifiedBy and :idcs_last_modified_by' if attributes.key?(:'idcsLastModifiedBy') && attributes.key?(:'idcs_last_modified_by')

      self.idcs_last_modified_by = attributes[:'idcs_last_modified_by'] if attributes[:'idcs_last_modified_by']

      self.idcs_prevented_operations = attributes[:'idcsPreventedOperations'] if attributes[:'idcsPreventedOperations']

      raise 'You cannot provide both :idcsPreventedOperations and :idcs_prevented_operations' if attributes.key?(:'idcsPreventedOperations') && attributes.key?(:'idcs_prevented_operations')

      self.idcs_prevented_operations = attributes[:'idcs_prevented_operations'] if attributes[:'idcs_prevented_operations']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.delete_in_progress = attributes[:'deleteInProgress'] unless attributes[:'deleteInProgress'].nil?

      raise 'You cannot provide both :deleteInProgress and :delete_in_progress' if attributes.key?(:'deleteInProgress') && attributes.key?(:'delete_in_progress')

      self.delete_in_progress = attributes[:'delete_in_progress'] unless attributes[:'delete_in_progress'].nil?

      self.idcs_last_upgraded_in_release = attributes[:'idcsLastUpgradedInRelease'] if attributes[:'idcsLastUpgradedInRelease']

      raise 'You cannot provide both :idcsLastUpgradedInRelease and :idcs_last_upgraded_in_release' if attributes.key?(:'idcsLastUpgradedInRelease') && attributes.key?(:'idcs_last_upgraded_in_release')

      self.idcs_last_upgraded_in_release = attributes[:'idcs_last_upgraded_in_release'] if attributes[:'idcs_last_upgraded_in_release']

      self.domain_ocid = attributes[:'domainOcid'] if attributes[:'domainOcid']

      raise 'You cannot provide both :domainOcid and :domain_ocid' if attributes.key?(:'domainOcid') && attributes.key?(:'domain_ocid')

      self.domain_ocid = attributes[:'domain_ocid'] if attributes[:'domain_ocid']

      self.compartment_ocid = attributes[:'compartmentOcid'] if attributes[:'compartmentOcid']

      raise 'You cannot provide both :compartmentOcid and :compartment_ocid' if attributes.key?(:'compartmentOcid') && attributes.key?(:'compartment_ocid')

      self.compartment_ocid = attributes[:'compartment_ocid'] if attributes[:'compartment_ocid']

      self.tenancy_ocid = attributes[:'tenancyOcid'] if attributes[:'tenancyOcid']

      raise 'You cannot provide both :tenancyOcid and :tenancy_ocid' if attributes.key?(:'tenancyOcid') && attributes.key?(:'tenancy_ocid')

      self.tenancy_ocid = attributes[:'tenancy_ocid'] if attributes[:'tenancy_ocid']

      self.external_id = attributes[:'externalId'] if attributes[:'externalId']

      raise 'You cannot provide both :externalId and :external_id' if attributes.key?(:'externalId') && attributes.key?(:'external_id')

      self.external_id = attributes[:'external_id'] if attributes[:'external_id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.activation_email_required = attributes[:'activationEmailRequired'] unless attributes[:'activationEmailRequired'].nil?

      raise 'You cannot provide both :activationEmailRequired and :activation_email_required' if attributes.key?(:'activationEmailRequired') && attributes.key?(:'activation_email_required')

      self.activation_email_required = attributes[:'activation_email_required'] unless attributes[:'activation_email_required'].nil?

      self.number_of_days_redirect_url_is_valid = attributes[:'numberOfDaysRedirectUrlIsValid'] if attributes[:'numberOfDaysRedirectUrlIsValid']

      raise 'You cannot provide both :numberOfDaysRedirectUrlIsValid and :number_of_days_redirect_url_is_valid' if attributes.key?(:'numberOfDaysRedirectUrlIsValid') && attributes.key?(:'number_of_days_redirect_url_is_valid')

      self.number_of_days_redirect_url_is_valid = attributes[:'number_of_days_redirect_url_is_valid'] if attributes[:'number_of_days_redirect_url_is_valid']

      self.active = attributes[:'active'] unless attributes[:'active'].nil?

      self.show_on_login_page = attributes[:'showOnLoginPage'] unless attributes[:'showOnLoginPage'].nil?

      raise 'You cannot provide both :showOnLoginPage and :show_on_login_page' if attributes.key?(:'showOnLoginPage') && attributes.key?(:'show_on_login_page')

      self.show_on_login_page = attributes[:'show_on_login_page'] unless attributes[:'show_on_login_page'].nil?

      self.allowed_email_domains = attributes[:'allowedEmailDomains'] if attributes[:'allowedEmailDomains']

      raise 'You cannot provide both :allowedEmailDomains and :allowed_email_domains' if attributes.key?(:'allowedEmailDomains') && attributes.key?(:'allowed_email_domains')

      self.allowed_email_domains = attributes[:'allowed_email_domains'] if attributes[:'allowed_email_domains']

      self.disallowed_email_domains = attributes[:'disallowedEmailDomains'] if attributes[:'disallowedEmailDomains']

      raise 'You cannot provide both :disallowedEmailDomains and :disallowed_email_domains' if attributes.key?(:'disallowedEmailDomains') && attributes.key?(:'disallowed_email_domains')

      self.disallowed_email_domains = attributes[:'disallowed_email_domains'] if attributes[:'disallowed_email_domains']

      self.header_logo = attributes[:'headerLogo'] if attributes[:'headerLogo']

      raise 'You cannot provide both :headerLogo and :header_logo' if attributes.key?(:'headerLogo') && attributes.key?(:'header_logo')

      self.header_logo = attributes[:'header_logo'] if attributes[:'header_logo']

      self.footer_logo = attributes[:'footerLogo'] if attributes[:'footerLogo']

      raise 'You cannot provide both :footerLogo and :footer_logo' if attributes.key?(:'footerLogo') && attributes.key?(:'footer_logo')

      self.footer_logo = attributes[:'footer_logo'] if attributes[:'footer_logo']

      self.redirect_url = attributes[:'redirectUrl'] if attributes[:'redirectUrl']

      raise 'You cannot provide both :redirectUrl and :redirect_url' if attributes.key?(:'redirectUrl') && attributes.key?(:'redirect_url')

      self.redirect_url = attributes[:'redirect_url'] if attributes[:'redirect_url']

      self.consent_text_present = attributes[:'consentTextPresent'] unless attributes[:'consentTextPresent'].nil?

      raise 'You cannot provide both :consentTextPresent and :consent_text_present' if attributes.key?(:'consentTextPresent') && attributes.key?(:'consent_text_present')

      self.consent_text_present = attributes[:'consent_text_present'] unless attributes[:'consent_text_present'].nil?

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.after_submit_text = attributes[:'afterSubmitText'] if attributes[:'afterSubmitText']

      raise 'You cannot provide both :afterSubmitText and :after_submit_text' if attributes.key?(:'afterSubmitText') && attributes.key?(:'after_submit_text')

      self.after_submit_text = attributes[:'after_submit_text'] if attributes[:'after_submit_text']

      self.user_attributes = attributes[:'userAttributes'] if attributes[:'userAttributes']

      raise 'You cannot provide both :userAttributes and :user_attributes' if attributes.key?(:'userAttributes') && attributes.key?(:'user_attributes')

      self.user_attributes = attributes[:'user_attributes'] if attributes[:'user_attributes']

      self.email_template = attributes[:'emailTemplate'] if attributes[:'emailTemplate']

      raise 'You cannot provide both :emailTemplate and :email_template' if attributes.key?(:'emailTemplate') && attributes.key?(:'email_template')

      self.email_template = attributes[:'email_template'] if attributes[:'email_template']

      self.default_groups = attributes[:'defaultGroups'] if attributes[:'defaultGroups']

      raise 'You cannot provide both :defaultGroups and :default_groups' if attributes.key?(:'defaultGroups') && attributes.key?(:'default_groups')

      self.default_groups = attributes[:'default_groups'] if attributes[:'default_groups']

      self.header_text = attributes[:'headerText'] if attributes[:'headerText']

      raise 'You cannot provide both :headerText and :header_text' if attributes.key?(:'headerText') && attributes.key?(:'header_text')

      self.header_text = attributes[:'header_text'] if attributes[:'header_text']

      self.footer_text = attributes[:'footerText'] if attributes[:'footerText']

      raise 'You cannot provide both :footerText and :footer_text' if attributes.key?(:'footerText') && attributes.key?(:'footer_text')

      self.footer_text = attributes[:'footer_text'] if attributes[:'footer_text']

      self.consent_text = attributes[:'consentText'] if attributes[:'consentText']

      raise 'You cannot provide both :consentText and :consent_text' if attributes.key?(:'consentText') && attributes.key?(:'consent_text')

      self.consent_text = attributes[:'consent_text'] if attributes[:'consent_text']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idcs_prevented_operations Object to be assigned
    def idcs_prevented_operations=(idcs_prevented_operations)
      # rubocop:disable Style/ConditionalAssignment
      if idcs_prevented_operations.nil?
        @idcs_prevented_operations = nil
      else
        @idcs_prevented_operations =
          idcs_prevented_operations.collect do |item|
            if IDCS_PREVENTED_OPERATIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'idcs_prevented_operations' [#{item}]. Mapping to 'IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              IDCS_PREVENTED_OPERATIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ocid == other.ocid &&
        schemas == other.schemas &&
        meta == other.meta &&
        idcs_created_by == other.idcs_created_by &&
        idcs_last_modified_by == other.idcs_last_modified_by &&
        idcs_prevented_operations == other.idcs_prevented_operations &&
        tags == other.tags &&
        delete_in_progress == other.delete_in_progress &&
        idcs_last_upgraded_in_release == other.idcs_last_upgraded_in_release &&
        domain_ocid == other.domain_ocid &&
        compartment_ocid == other.compartment_ocid &&
        tenancy_ocid == other.tenancy_ocid &&
        external_id == other.external_id &&
        name == other.name &&
        activation_email_required == other.activation_email_required &&
        number_of_days_redirect_url_is_valid == other.number_of_days_redirect_url_is_valid &&
        active == other.active &&
        show_on_login_page == other.show_on_login_page &&
        allowed_email_domains == other.allowed_email_domains &&
        disallowed_email_domains == other.disallowed_email_domains &&
        header_logo == other.header_logo &&
        footer_logo == other.footer_logo &&
        redirect_url == other.redirect_url &&
        consent_text_present == other.consent_text_present &&
        display_name == other.display_name &&
        after_submit_text == other.after_submit_text &&
        user_attributes == other.user_attributes &&
        email_template == other.email_template &&
        default_groups == other.default_groups &&
        header_text == other.header_text &&
        footer_text == other.footer_text &&
        consent_text == other.consent_text
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ocid, schemas, meta, idcs_created_by, idcs_last_modified_by, idcs_prevented_operations, tags, delete_in_progress, idcs_last_upgraded_in_release, domain_ocid, compartment_ocid, tenancy_ocid, external_id, name, activation_email_required, number_of_days_redirect_url_is_valid, active, show_on_login_page, allowed_email_domains, disallowed_email_domains, header_logo, footer_logo, redirect_url, consent_text_present, display_name, after_submit_text, user_attributes, email_template, default_groups, header_text, footer_text, consent_text].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
