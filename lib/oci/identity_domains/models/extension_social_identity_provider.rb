# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Social Identity Provider Extension Schema
  class IdentityDomains::Models::ExtensionSocialIdentityProvider
    STATUS_ENUM = [
      STATUS_CREATED = 'created'.freeze,
      STATUS_DELETED = 'deleted'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Whether account linking is enabled
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :account_linking_enabled

    # **[Required]** Whether registration is enabled
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :registration_enabled

    # Status
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_reader :status

    # Social IDP Authorization URL
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :authz_url

    # Social IDP Access token URL
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :access_token_url

    # Social IDP User profile URL
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :profile_url

    # Scope to request
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :scope

    # Admin scope to request
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: true
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [Array<String>]
    attr_accessor :admin_scope

    # **[Required]** Social IDP Client Application Client ID
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :consumer_key

    # **[Required]** Social IDP Client Application Client Secret
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - idcsSensitive: encrypt
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :consumer_secret

    # **[Required]** Service Provider Name
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: true
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: true
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :service_provider_name

    # Social IDP allowed clock skew time
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: integer
    #  - uniqueness: none
    # @return [Integer]
    attr_accessor :clock_skew_in_seconds

    # redirect URL for social idp
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :redirect_url

    # Discovery URL
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :discovery_url

    # Whether the client credential is contained in payload
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: readWrite
    #  - required: false
    #  - returned: default
    #  - type: boolean
    #  - uniqueness: none
    # @return [BOOLEAN]
    attr_accessor :client_credential_in_payload

    # Id attribute used for account linking
    #
    # **Added In:** 20.1.3
    #
    # **SCIM++ Properties:**
    #  - caseExact: true
    #  - idcsSearchable: false
    #  - multiValued: false
    #  - mutability: immutable
    #  - required: false
    #  - returned: default
    #  - type: string
    #  - uniqueness: none
    # @return [String]
    attr_accessor :id_attribute

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'account_linking_enabled': :'accountLinkingEnabled',
        'registration_enabled': :'registrationEnabled',
        'status': :'status',
        'authz_url': :'authzUrl',
        'access_token_url': :'accessTokenUrl',
        'profile_url': :'profileUrl',
        'scope': :'scope',
        'admin_scope': :'adminScope',
        'consumer_key': :'consumerKey',
        'consumer_secret': :'consumerSecret',
        'service_provider_name': :'serviceProviderName',
        'clock_skew_in_seconds': :'clockSkewInSeconds',
        'redirect_url': :'redirectUrl',
        'discovery_url': :'discoveryUrl',
        'client_credential_in_payload': :'clientCredentialInPayload',
        'id_attribute': :'idAttribute'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'account_linking_enabled': :'BOOLEAN',
        'registration_enabled': :'BOOLEAN',
        'status': :'String',
        'authz_url': :'String',
        'access_token_url': :'String',
        'profile_url': :'String',
        'scope': :'Array<String>',
        'admin_scope': :'Array<String>',
        'consumer_key': :'String',
        'consumer_secret': :'String',
        'service_provider_name': :'String',
        'clock_skew_in_seconds': :'Integer',
        'redirect_url': :'String',
        'discovery_url': :'String',
        'client_credential_in_payload': :'BOOLEAN',
        'id_attribute': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :account_linking_enabled The value to assign to the {#account_linking_enabled} property
    # @option attributes [BOOLEAN] :registration_enabled The value to assign to the {#registration_enabled} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :authz_url The value to assign to the {#authz_url} property
    # @option attributes [String] :access_token_url The value to assign to the {#access_token_url} property
    # @option attributes [String] :profile_url The value to assign to the {#profile_url} property
    # @option attributes [Array<String>] :scope The value to assign to the {#scope} property
    # @option attributes [Array<String>] :admin_scope The value to assign to the {#admin_scope} property
    # @option attributes [String] :consumer_key The value to assign to the {#consumer_key} property
    # @option attributes [String] :consumer_secret The value to assign to the {#consumer_secret} property
    # @option attributes [String] :service_provider_name The value to assign to the {#service_provider_name} property
    # @option attributes [Integer] :clock_skew_in_seconds The value to assign to the {#clock_skew_in_seconds} property
    # @option attributes [String] :redirect_url The value to assign to the {#redirect_url} property
    # @option attributes [String] :discovery_url The value to assign to the {#discovery_url} property
    # @option attributes [BOOLEAN] :client_credential_in_payload The value to assign to the {#client_credential_in_payload} property
    # @option attributes [String] :id_attribute The value to assign to the {#id_attribute} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.account_linking_enabled = attributes[:'accountLinkingEnabled'] unless attributes[:'accountLinkingEnabled'].nil?

      raise 'You cannot provide both :accountLinkingEnabled and :account_linking_enabled' if attributes.key?(:'accountLinkingEnabled') && attributes.key?(:'account_linking_enabled')

      self.account_linking_enabled = attributes[:'account_linking_enabled'] unless attributes[:'account_linking_enabled'].nil?

      self.registration_enabled = attributes[:'registrationEnabled'] unless attributes[:'registrationEnabled'].nil?

      raise 'You cannot provide both :registrationEnabled and :registration_enabled' if attributes.key?(:'registrationEnabled') && attributes.key?(:'registration_enabled')

      self.registration_enabled = attributes[:'registration_enabled'] unless attributes[:'registration_enabled'].nil?

      self.status = attributes[:'status'] if attributes[:'status']

      self.authz_url = attributes[:'authzUrl'] if attributes[:'authzUrl']

      raise 'You cannot provide both :authzUrl and :authz_url' if attributes.key?(:'authzUrl') && attributes.key?(:'authz_url')

      self.authz_url = attributes[:'authz_url'] if attributes[:'authz_url']

      self.access_token_url = attributes[:'accessTokenUrl'] if attributes[:'accessTokenUrl']

      raise 'You cannot provide both :accessTokenUrl and :access_token_url' if attributes.key?(:'accessTokenUrl') && attributes.key?(:'access_token_url')

      self.access_token_url = attributes[:'access_token_url'] if attributes[:'access_token_url']

      self.profile_url = attributes[:'profileUrl'] if attributes[:'profileUrl']

      raise 'You cannot provide both :profileUrl and :profile_url' if attributes.key?(:'profileUrl') && attributes.key?(:'profile_url')

      self.profile_url = attributes[:'profile_url'] if attributes[:'profile_url']

      self.scope = attributes[:'scope'] if attributes[:'scope']

      self.admin_scope = attributes[:'adminScope'] if attributes[:'adminScope']

      raise 'You cannot provide both :adminScope and :admin_scope' if attributes.key?(:'adminScope') && attributes.key?(:'admin_scope')

      self.admin_scope = attributes[:'admin_scope'] if attributes[:'admin_scope']

      self.consumer_key = attributes[:'consumerKey'] if attributes[:'consumerKey']

      raise 'You cannot provide both :consumerKey and :consumer_key' if attributes.key?(:'consumerKey') && attributes.key?(:'consumer_key')

      self.consumer_key = attributes[:'consumer_key'] if attributes[:'consumer_key']

      self.consumer_secret = attributes[:'consumerSecret'] if attributes[:'consumerSecret']

      raise 'You cannot provide both :consumerSecret and :consumer_secret' if attributes.key?(:'consumerSecret') && attributes.key?(:'consumer_secret')

      self.consumer_secret = attributes[:'consumer_secret'] if attributes[:'consumer_secret']

      self.service_provider_name = attributes[:'serviceProviderName'] if attributes[:'serviceProviderName']

      raise 'You cannot provide both :serviceProviderName and :service_provider_name' if attributes.key?(:'serviceProviderName') && attributes.key?(:'service_provider_name')

      self.service_provider_name = attributes[:'service_provider_name'] if attributes[:'service_provider_name']

      self.clock_skew_in_seconds = attributes[:'clockSkewInSeconds'] if attributes[:'clockSkewInSeconds']

      raise 'You cannot provide both :clockSkewInSeconds and :clock_skew_in_seconds' if attributes.key?(:'clockSkewInSeconds') && attributes.key?(:'clock_skew_in_seconds')

      self.clock_skew_in_seconds = attributes[:'clock_skew_in_seconds'] if attributes[:'clock_skew_in_seconds']

      self.redirect_url = attributes[:'redirectUrl'] if attributes[:'redirectUrl']

      raise 'You cannot provide both :redirectUrl and :redirect_url' if attributes.key?(:'redirectUrl') && attributes.key?(:'redirect_url')

      self.redirect_url = attributes[:'redirect_url'] if attributes[:'redirect_url']

      self.discovery_url = attributes[:'discoveryUrl'] if attributes[:'discoveryUrl']

      raise 'You cannot provide both :discoveryUrl and :discovery_url' if attributes.key?(:'discoveryUrl') && attributes.key?(:'discovery_url')

      self.discovery_url = attributes[:'discovery_url'] if attributes[:'discovery_url']

      self.client_credential_in_payload = attributes[:'clientCredentialInPayload'] unless attributes[:'clientCredentialInPayload'].nil?

      raise 'You cannot provide both :clientCredentialInPayload and :client_credential_in_payload' if attributes.key?(:'clientCredentialInPayload') && attributes.key?(:'client_credential_in_payload')

      self.client_credential_in_payload = attributes[:'client_credential_in_payload'] unless attributes[:'client_credential_in_payload'].nil?

      self.id_attribute = attributes[:'idAttribute'] if attributes[:'idAttribute']

      raise 'You cannot provide both :idAttribute and :id_attribute' if attributes.key?(:'idAttribute') && attributes.key?(:'id_attribute')

      self.id_attribute = attributes[:'id_attribute'] if attributes[:'id_attribute']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        account_linking_enabled == other.account_linking_enabled &&
        registration_enabled == other.registration_enabled &&
        status == other.status &&
        authz_url == other.authz_url &&
        access_token_url == other.access_token_url &&
        profile_url == other.profile_url &&
        scope == other.scope &&
        admin_scope == other.admin_scope &&
        consumer_key == other.consumer_key &&
        consumer_secret == other.consumer_secret &&
        service_provider_name == other.service_provider_name &&
        clock_skew_in_seconds == other.clock_skew_in_seconds &&
        redirect_url == other.redirect_url &&
        discovery_url == other.discovery_url &&
        client_credential_in_payload == other.client_credential_in_payload &&
        id_attribute == other.id_attribute
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_linking_enabled, registration_enabled, status, authz_url, access_token_url, profile_url, scope, admin_scope, consumer_key, consumer_secret, service_provider_name, clock_skew_in_seconds, redirect_url, discovery_url, client_credential_in_payload, id_attribute].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
