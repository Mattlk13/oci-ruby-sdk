# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: v1

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the Identity Domains API to manage resources within an identity domain, for example, users, dynamic resource groups, groups, and identity providers. For information about managing resources within identity domains, see [Identity and Access Management (with identity domains)](https://docs.oracle.com/iaas/Content/Identity/home.htm). This REST API is SCIM compliant.
  # Use the table of contents and search tool to explore the Identity Domains API.
  class IdentityDomains::IdentityDomainsClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new IdentityDomainsClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    # @param [Config] config A Config object.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      raise 'A fully qualified endpoint URL must be defined' unless endpoint

      @endpoint = endpoint + ''

      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config
      logger.info "IdentityDomainsClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's API key.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::ApiKey] :api_key ApiKey schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApiKey ApiKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_api_key.rb.html) to see an example of how to use create_api_key API.
    def create_api_key(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_api_key.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApiKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:api_key])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_api_key') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApiKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create an App
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::App] :app App schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::App App}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_app.rb.html) to see an example of how to use create_app API.
    def create_app(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_app.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Apps'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:app])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_app') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::App'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create an AppRole
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::AppRole] :app_role AppRole schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AppRole AppRole}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_app_role.rb.html) to see an example of how to use create_app_role API.
    def create_app_role(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_app_role.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/AppRoles'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:app_role])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_app_role') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AppRole'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create ApprovalWorkflow
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::ApprovalWorkflow] :approval_workflow ApprovalWorkflow schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflow ApprovalWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_approval_workflow.rb.html) to see an example of how to use create_approval_workflow API.
    def create_approval_workflow(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_approval_workflow.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApprovalWorkflows'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:approval_workflow])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_approval_workflow') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create Approval Workflow Assignment
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::ApprovalWorkflowAssignment] :approval_workflow_assignment ApprovalWorkflowAssignment schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflowAssignment ApprovalWorkflowAssignment}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_approval_workflow_assignment.rb.html) to see an example of how to use create_approval_workflow_assignment API.
    def create_approval_workflow_assignment(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_approval_workflow_assignment.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApprovalWorkflowAssignments'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:approval_workflow_assignment])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_approval_workflow_assignment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflowAssignment'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create ApprovalWorkflowStep
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::ApprovalWorkflowStep] :approval_workflow_step ApprovalWorkflowStep schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflowStep ApprovalWorkflowStep}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_approval_workflow_step.rb.html) to see an example of how to use create_approval_workflow_step API.
    def create_approval_workflow_step(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_approval_workflow_step.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApprovalWorkflowSteps'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:approval_workflow_step])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_approval_workflow_step') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflowStep'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's Auth token.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::AuthToken] :auth_token AuthToken schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthToken AuthToken}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_auth_token.rb.html) to see an example of how to use create_auth_token API.
    def create_auth_token(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_auth_token.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/AuthTokens'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:auth_token])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_auth_token') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthToken'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove All Authentication Factor Channels for a User
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::AuthenticationFactorsRemover] :authentication_factors_remover AuthenticationFactorsRemover schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthenticationFactorsRemover AuthenticationFactorsRemover}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_authentication_factors_remover.rb.html) to see an example of how to use create_authentication_factors_remover API.
    def create_authentication_factors_remover(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_authentication_factors_remover.' if logger


      path = '/admin/v1/AuthenticationFactorsRemover'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:authentication_factors_remover])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_authentication_factors_remover') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthenticationFactorsRemover'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Cloud Gate
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::CloudGate] :cloud_gate CloudGate schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGate CloudGate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_cloud_gate.rb.html) to see an example of how to use create_cloud_gate API.
    def create_cloud_gate(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_cloud_gate.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CloudGates'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_cloud_gate') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Cloud Gate mapping
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::CloudGateMapping] :cloud_gate_mapping CloudGateMapping schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateMapping CloudGateMapping}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_cloud_gate_mapping.rb.html) to see an example of how to use create_cloud_gate_mapping API.
    def create_cloud_gate_mapping(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_cloud_gate_mapping.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CloudGateMappings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate_mapping])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_cloud_gate_mapping') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateMapping'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Cloud Gate server
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::CloudGateServer] :cloud_gate_server CloudGateServer schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateServer CloudGateServer}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_cloud_gate_server.rb.html) to see an example of how to use create_cloud_gate_server API.
    def create_cloud_gate_server(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_cloud_gate_server.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CloudGateServers'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate_server])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_cloud_gate_server') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateServer'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Condition
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Condition] :condition Condition schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Condition Condition}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_condition.rb.html) to see an example of how to use create_condition API.
    def create_condition(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_condition.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Conditions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:condition])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_condition') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Condition'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's customer secret key.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::CustomerSecretKey] :customer_secret_key CustomerSecretKey schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CustomerSecretKey CustomerSecretKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_customer_secret_key.rb.html) to see an example of how to use create_customer_secret_key API.
    def create_customer_secret_key(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_customer_secret_key.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CustomerSecretKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:customer_secret_key])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_customer_secret_key') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CustomerSecretKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Dynamic Resource Group.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::DynamicResourceGroup] :dynamic_resource_group DynamicResourceGroup schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::DynamicResourceGroup DynamicResourceGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_dynamic_resource_group.rb.html) to see an example of how to use create_dynamic_resource_group API.
    def create_dynamic_resource_group(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_dynamic_resource_group.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/DynamicResourceGroups'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:dynamic_resource_group])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_dynamic_resource_group') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::DynamicResourceGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a Grantee to an AppRole
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Grant] :grant Grant schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Grant Grant}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_grant.rb.html) to see an example of how to use create_grant API.
    def create_grant(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_grant.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Grants'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:grant])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_grant') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Grant'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a group.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Group] :group Group schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Group Group}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_group.rb.html) to see an example of how to use create_group API.
    def create_group(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_group.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Groups'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:group])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_group') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Group'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create an Identity Provider
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::IdentityProvider] :identity_provider IdentityProvider schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentityProvider IdentityProvider}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_identity_provider.rb.html) to see an example of how to use create_identity_provider API.
    def create_identity_provider(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_identity_provider.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/IdentityProviders'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:identity_provider])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_identity_provider') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentityProvider'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Self register a user.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Me] :me Me schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Me Me}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_me.rb.html) to see an example of how to use create_me API.
    def create_me(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_me.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Me'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:me])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_me') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Me'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a user's own API key.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyApiKey] :my_api_key MyApiKey schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyApiKey MyApiKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_api_key.rb.html) to see an example of how to use create_my_api_key API.
    def create_my_api_key(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_api_key.' if logger


      path = '/admin/v1/MyApiKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_api_key])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_api_key') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyApiKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's own Auth token.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyAuthToken] :my_auth_token MyAuthToken schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyAuthToken MyAuthToken}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_auth_token.rb.html) to see an example of how to use create_my_auth_token API.
    def create_my_auth_token(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_auth_token.' if logger


      path = '/admin/v1/MyAuthTokens'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_auth_token])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_auth_token') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyAuthToken'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Initiate Self Service Enrollment using the Requested MFA Factor
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyAuthenticationFactorInitiator] :my_authentication_factor_initiator MyAuthenticationFactorInitiator schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyAuthenticationFactorInitiator MyAuthenticationFactorInitiator}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_authentication_factor_initiator.rb.html) to see an example of how to use create_my_authentication_factor_initiator API.
    def create_my_authentication_factor_initiator(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_authentication_factor_initiator.' if logger


      path = '/admin/v1/MyAuthenticationFactorInitiator'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_authentication_factor_initiator])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_authentication_factor_initiator') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyAuthenticationFactorInitiator'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Validate Self Service Enrollment using the Requested MFA Factor
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyAuthenticationFactorValidator] :my_authentication_factor_validator MyAuthenticationFactorValidator schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyAuthenticationFactorValidator MyAuthenticationFactorValidator}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_authentication_factor_validator.rb.html) to see an example of how to use create_my_authentication_factor_validator API.
    def create_my_authentication_factor_validator(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_authentication_factor_validator.' if logger


      path = '/admin/v1/MyAuthenticationFactorValidator'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_authentication_factor_validator])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_authentication_factor_validator') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyAuthenticationFactorValidator'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove All Authentication Factor Channels for a User
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyAuthenticationFactorsRemover] :my_authentication_factors_remover MyAuthenticationFactorsRemover schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyAuthenticationFactorsRemover MyAuthenticationFactorsRemover}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_authentication_factors_remover.rb.html) to see an example of how to use create_my_authentication_factors_remover API.
    def create_my_authentication_factors_remover(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_authentication_factors_remover.' if logger


      path = '/admin/v1/MyAuthenticationFactorsRemover'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_authentication_factors_remover])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_authentication_factors_remover') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyAuthenticationFactorsRemover'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a user's own customer secret key.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyCustomerSecretKey] :my_customer_secret_key MyCustomerSecretKey schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyCustomerSecretKey MyCustomerSecretKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_customer_secret_key.rb.html) to see an example of how to use create_my_customer_secret_key API.
    def create_my_customer_secret_key(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_customer_secret_key.' if logger


      path = '/admin/v1/MyCustomerSecretKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_customer_secret_key])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_customer_secret_key') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyCustomerSecretKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's own OAuth2 client credential.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyOAuth2ClientCredential] :my_o_auth2_client_credential MyOAuth2ClientCredential schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyOAuth2ClientCredential MyOAuth2ClientCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_o_auth2_client_credential.rb.html) to see an example of how to use create_my_o_auth2_client_credential API.
    def create_my_o_auth2_client_credential(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_o_auth2_client_credential.' if logger


      path = '/admin/v1/MyOAuth2ClientCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_o_auth2_client_credential])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_o_auth2_client_credential') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyOAuth2ClientCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Request
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::MyRequest] :my_request MyRequest schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyRequest MyRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_request.rb.html) to see an example of how to use create_my_request API.
    def create_my_request(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_request.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/MyRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_request') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's own SMTP credential.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MySmtpCredential] :my_smtp_credential MySmtpCredential schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MySmtpCredential MySmtpCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_smtp_credential.rb.html) to see an example of how to use create_my_smtp_credential API.
    def create_my_smtp_credential(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_smtp_credential.' if logger


      path = '/admin/v1/MySmtpCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_smtp_credential])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_smtp_credential') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MySmtpCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's own support account.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MySupportAccount] :my_support_account MySupportAccount schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MySupportAccount MySupportAccount}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_support_account.rb.html) to see an example of how to use create_my_support_account API.
    def create_my_support_account(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_support_account.' if logger


      path = '/admin/v1/MySupportAccounts'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_support_account])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_support_account') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MySupportAccount'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's own database (DB) credential.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyUserDbCredential] :my_user_db_credential MyUserDbCredentials schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyUserDbCredential MyUserDbCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_my_user_db_credential.rb.html) to see an example of how to use create_my_user_db_credential API.
    def create_my_user_db_credential(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_my_user_db_credential.' if logger


      path = '/admin/v1/MyUserDbCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_user_db_credential])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_my_user_db_credential') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyUserDbCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a NetworkPerimeter
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::NetworkPerimeter] :network_perimeter NetworkPerimeter schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NetworkPerimeter NetworkPerimeter}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_network_perimeter.rb.html) to see an example of how to use create_network_perimeter API.
    def create_network_perimeter(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_network_perimeter.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/NetworkPerimeters'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:network_perimeter])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_network_perimeter') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NetworkPerimeter'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a user's OAuth2 client credentials.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::OAuth2ClientCredential] :o_auth2_client_credential OAuth2ClientCredential schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuth2ClientCredential OAuth2ClientCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_o_auth2_client_credential.rb.html) to see an example of how to use create_o_auth2_client_credential API.
    def create_o_auth2_client_credential(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_o_auth2_client_credential.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/OAuth2ClientCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:o_auth2_client_credential])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_o_auth2_client_credential') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuth2ClientCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create an OAuth Client Certificate
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::OAuthClientCertificate] :o_auth_client_certificate OAuthClientCertificate schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthClientCertificate OAuthClientCertificate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_o_auth_client_certificate.rb.html) to see an example of how to use create_o_auth_client_certificate API.
    def create_o_auth_client_certificate(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_o_auth_client_certificate.' if logger


      path = '/admin/v1/OAuthClientCertificates'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:o_auth_client_certificate])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_o_auth_client_certificate') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthClientCertificate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create an OAuth Partner Certificate
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::OAuthPartnerCertificate] :o_auth_partner_certificate OAuthPartnerCertificate schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthPartnerCertificate OAuthPartnerCertificate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_o_auth_partner_certificate.rb.html) to see an example of how to use create_o_auth_partner_certificate API.
    def create_o_auth_partner_certificate(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_o_auth_partner_certificate.' if logger


      path = '/admin/v1/OAuthPartnerCertificates'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:o_auth_partner_certificate])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_o_auth_partner_certificate') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthPartnerCertificate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a password policy.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PasswordPolicy] :password_policy PasswordPolicy schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::PasswordPolicy PasswordPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_password_policy.rb.html) to see an example of how to use create_password_policy API.
    def create_password_policy(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_password_policy.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/PasswordPolicies'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:password_policy])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_password_policy') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::PasswordPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Policy
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Policy] :policy Policy schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Policy Policy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_policy.rb.html) to see an example of how to use create_policy API.
    def create_policy(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_policy.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Policies'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:policy])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_policy') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Policy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a Rule
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Rule] :rule Rule schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Rule Rule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_rule.rb.html) to see an example of how to use create_rule API.
    def create_rule(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_rule.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Rules'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:rule])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_rule') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Rule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a security question.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::SecurityQuestion] :security_question SecurityQuestion schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestion SecurityQuestion}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_security_question.rb.html) to see an example of how to use create_security_question API.
    def create_security_question(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_security_question.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/SecurityQuestions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:security_question])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_security_question') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestion'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a self-registration profile.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::SelfRegistrationProfile] :self_registration_profile SelfRegistrationProfile schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SelfRegistrationProfile SelfRegistrationProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_self_registration_profile.rb.html) to see an example of how to use create_self_registration_profile API.
    def create_self_registration_profile(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_self_registration_profile.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/SelfRegistrationProfiles'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:self_registration_profile])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_self_registration_profile') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SelfRegistrationProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's SMTP credentials.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::SmtpCredential] :smtp_credential SmtpCredential schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SmtpCredential SmtpCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_smtp_credential.rb.html) to see an example of how to use create_smtp_credential API.
    def create_smtp_credential(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_smtp_credential.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/SmtpCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:smtp_credential])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_smtp_credential') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SmtpCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::User] :user User schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::User User}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_user.rb.html) to see an example of how to use create_user API.
    def create_user(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_user.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Users'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_user') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::User'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a user's database (DB) credentials.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::UserDbCredential] :user_db_credential UserDbCredentials schema.
    #
    #   Before you specify an attribute-value in a request to create a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserDbCredential UserDbCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/create_user_db_credential.rb.html) to see an example of how to use create_user_db_credential API.
    def create_user_db_credential(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#create_user_db_credential.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/UserDbCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_db_credential])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#create_user_db_credential') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserDbCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's API key.
    # @param [String] api_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_api_key.rb.html) to see an example of how to use delete_api_key API.
    def delete_api_key(api_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_api_key.' if logger

      raise "Missing the required parameter 'api_key_id' when calling delete_api_key." if api_key_id.nil?
      raise "Parameter value for 'api_key_id' must not be blank" if OCI::Internal::Util.blank_string?(api_key_id)

      path = '/admin/v1/ApiKeys/{apiKeyId}'.sub('{apiKeyId}', api_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_api_key') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete an App
    # @param [String] app_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_app.rb.html) to see an example of how to use delete_app API.
    def delete_app(app_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_app.' if logger

      raise "Missing the required parameter 'app_id' when calling delete_app." if app_id.nil?
      raise "Parameter value for 'app_id' must not be blank" if OCI::Internal::Util.blank_string?(app_id)

      path = '/admin/v1/Apps/{appId}'.sub('{appId}', app_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_app') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete an AppRole
    # @param [String] app_role_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_app_role.rb.html) to see an example of how to use delete_app_role API.
    def delete_app_role(app_role_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_app_role.' if logger

      raise "Missing the required parameter 'app_role_id' when calling delete_app_role." if app_role_id.nil?
      raise "Parameter value for 'app_role_id' must not be blank" if OCI::Internal::Util.blank_string?(app_role_id)

      path = '/admin/v1/AppRoles/{appRoleId}'.sub('{appRoleId}', app_role_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_app_role') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete ApprovalWorkflow
    # @param [String] approval_workflow_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_approval_workflow.rb.html) to see an example of how to use delete_approval_workflow API.
    def delete_approval_workflow(approval_workflow_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_approval_workflow.' if logger

      raise "Missing the required parameter 'approval_workflow_id' when calling delete_approval_workflow." if approval_workflow_id.nil?
      raise "Parameter value for 'approval_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_id)

      path = '/admin/v1/ApprovalWorkflows/{approvalWorkflowId}'.sub('{approvalWorkflowId}', approval_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_approval_workflow') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete Approval Workflow Assignment
    # @param [String] approval_workflow_assignment_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_approval_workflow_assignment.rb.html) to see an example of how to use delete_approval_workflow_assignment API.
    def delete_approval_workflow_assignment(approval_workflow_assignment_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_approval_workflow_assignment.' if logger

      raise "Missing the required parameter 'approval_workflow_assignment_id' when calling delete_approval_workflow_assignment." if approval_workflow_assignment_id.nil?
      raise "Parameter value for 'approval_workflow_assignment_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_assignment_id)

      path = '/admin/v1/ApprovalWorkflowAssignments/{approvalWorkflowAssignmentId}'.sub('{approvalWorkflowAssignmentId}', approval_workflow_assignment_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_approval_workflow_assignment') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete ApprovalWorkflowStep
    # @param [String] approval_workflow_step_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_approval_workflow_step.rb.html) to see an example of how to use delete_approval_workflow_step API.
    def delete_approval_workflow_step(approval_workflow_step_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_approval_workflow_step.' if logger

      raise "Missing the required parameter 'approval_workflow_step_id' when calling delete_approval_workflow_step." if approval_workflow_step_id.nil?
      raise "Parameter value for 'approval_workflow_step_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_step_id)

      path = '/admin/v1/ApprovalWorkflowSteps/{approvalWorkflowStepId}'.sub('{approvalWorkflowStepId}', approval_workflow_step_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_approval_workflow_step') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's Auth token.
    # @param [String] auth_token_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_auth_token.rb.html) to see an example of how to use delete_auth_token API.
    def delete_auth_token(auth_token_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_auth_token.' if logger

      raise "Missing the required parameter 'auth_token_id' when calling delete_auth_token." if auth_token_id.nil?
      raise "Parameter value for 'auth_token_id' must not be blank" if OCI::Internal::Util.blank_string?(auth_token_id)

      path = '/admin/v1/AuthTokens/{authTokenId}'.sub('{authTokenId}', auth_token_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_auth_token') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Cloud Gate
    # @param [String] cloud_gate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_cloud_gate.rb.html) to see an example of how to use delete_cloud_gate API.
    def delete_cloud_gate(cloud_gate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_cloud_gate.' if logger

      raise "Missing the required parameter 'cloud_gate_id' when calling delete_cloud_gate." if cloud_gate_id.nil?
      raise "Parameter value for 'cloud_gate_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_id)

      path = '/admin/v1/CloudGates/{cloudGateId}'.sub('{cloudGateId}', cloud_gate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_cloud_gate') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Cloud Gate mapping
    # @param [String] cloud_gate_mapping_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_cloud_gate_mapping.rb.html) to see an example of how to use delete_cloud_gate_mapping API.
    def delete_cloud_gate_mapping(cloud_gate_mapping_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_cloud_gate_mapping.' if logger

      raise "Missing the required parameter 'cloud_gate_mapping_id' when calling delete_cloud_gate_mapping." if cloud_gate_mapping_id.nil?
      raise "Parameter value for 'cloud_gate_mapping_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_mapping_id)

      path = '/admin/v1/CloudGateMappings/{cloudGateMappingId}'.sub('{cloudGateMappingId}', cloud_gate_mapping_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_cloud_gate_mapping') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Cloud Gate server
    # @param [String] cloud_gate_server_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_cloud_gate_server.rb.html) to see an example of how to use delete_cloud_gate_server API.
    def delete_cloud_gate_server(cloud_gate_server_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_cloud_gate_server.' if logger

      raise "Missing the required parameter 'cloud_gate_server_id' when calling delete_cloud_gate_server." if cloud_gate_server_id.nil?
      raise "Parameter value for 'cloud_gate_server_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_server_id)

      path = '/admin/v1/CloudGateServers/{cloudGateServerId}'.sub('{cloudGateServerId}', cloud_gate_server_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_cloud_gate_server') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Condition
    # @param [String] condition_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_condition.rb.html) to see an example of how to use delete_condition API.
    def delete_condition(condition_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_condition.' if logger

      raise "Missing the required parameter 'condition_id' when calling delete_condition." if condition_id.nil?
      raise "Parameter value for 'condition_id' must not be blank" if OCI::Internal::Util.blank_string?(condition_id)

      path = '/admin/v1/Conditions/{conditionId}'.sub('{conditionId}', condition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_condition') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's customer secret key.
    # @param [String] customer_secret_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_customer_secret_key.rb.html) to see an example of how to use delete_customer_secret_key API.
    def delete_customer_secret_key(customer_secret_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_customer_secret_key.' if logger

      raise "Missing the required parameter 'customer_secret_key_id' when calling delete_customer_secret_key." if customer_secret_key_id.nil?
      raise "Parameter value for 'customer_secret_key_id' must not be blank" if OCI::Internal::Util.blank_string?(customer_secret_key_id)

      path = '/admin/v1/CustomerSecretKeys/{customerSecretKeyId}'.sub('{customerSecretKeyId}', customer_secret_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_customer_secret_key') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Dynamic Resource Group.
    # @param [String] dynamic_resource_group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_dynamic_resource_group.rb.html) to see an example of how to use delete_dynamic_resource_group API.
    def delete_dynamic_resource_group(dynamic_resource_group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_dynamic_resource_group.' if logger

      raise "Missing the required parameter 'dynamic_resource_group_id' when calling delete_dynamic_resource_group." if dynamic_resource_group_id.nil?
      raise "Parameter value for 'dynamic_resource_group_id' must not be blank" if OCI::Internal::Util.blank_string?(dynamic_resource_group_id)

      path = '/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}'.sub('{dynamicResourceGroupId}', dynamic_resource_group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_dynamic_resource_group') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a Grantee from an AppRole
    # @param [String] grant_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_grant.rb.html) to see an example of how to use delete_grant API.
    def delete_grant(grant_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_grant.' if logger

      raise "Missing the required parameter 'grant_id' when calling delete_grant." if grant_id.nil?
      raise "Parameter value for 'grant_id' must not be blank" if OCI::Internal::Util.blank_string?(grant_id)

      path = '/admin/v1/Grants/{grantId}'.sub('{grantId}', grant_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_grant') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a group.
    # @param [String] group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_group.rb.html) to see an example of how to use delete_group API.
    def delete_group(group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_group.' if logger

      raise "Missing the required parameter 'group_id' when calling delete_group." if group_id.nil?
      raise "Parameter value for 'group_id' must not be blank" if OCI::Internal::Util.blank_string?(group_id)

      path = '/admin/v1/Groups/{groupId}'.sub('{groupId}', group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_group') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete an Identity Provider
    # @param [String] identity_provider_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_identity_provider.rb.html) to see an example of how to use delete_identity_provider API.
    def delete_identity_provider(identity_provider_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_identity_provider.' if logger

      raise "Missing the required parameter 'identity_provider_id' when calling delete_identity_provider." if identity_provider_id.nil?
      raise "Parameter value for 'identity_provider_id' must not be blank" if OCI::Internal::Util.blank_string?(identity_provider_id)

      path = '/admin/v1/IdentityProviders/{identityProviderId}'.sub('{identityProviderId}', identity_provider_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_identity_provider') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's own API key.
    # @param [String] my_api_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_api_key.rb.html) to see an example of how to use delete_my_api_key API.
    def delete_my_api_key(my_api_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_api_key.' if logger

      raise "Missing the required parameter 'my_api_key_id' when calling delete_my_api_key." if my_api_key_id.nil?
      raise "Parameter value for 'my_api_key_id' must not be blank" if OCI::Internal::Util.blank_string?(my_api_key_id)

      path = '/admin/v1/MyApiKeys/{myApiKeyId}'.sub('{myApiKeyId}', my_api_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_api_key') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's own Auth token.
    # @param [String] my_auth_token_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_auth_token.rb.html) to see an example of how to use delete_my_auth_token API.
    def delete_my_auth_token(my_auth_token_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_auth_token.' if logger

      raise "Missing the required parameter 'my_auth_token_id' when calling delete_my_auth_token." if my_auth_token_id.nil?
      raise "Parameter value for 'my_auth_token_id' must not be blank" if OCI::Internal::Util.blank_string?(my_auth_token_id)

      path = '/admin/v1/MyAuthTokens/{myAuthTokenId}'.sub('{myAuthTokenId}', my_auth_token_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_auth_token') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's own customer secret key.
    # @param [String] my_customer_secret_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_customer_secret_key.rb.html) to see an example of how to use delete_my_customer_secret_key API.
    def delete_my_customer_secret_key(my_customer_secret_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_customer_secret_key.' if logger

      raise "Missing the required parameter 'my_customer_secret_key_id' when calling delete_my_customer_secret_key." if my_customer_secret_key_id.nil?
      raise "Parameter value for 'my_customer_secret_key_id' must not be blank" if OCI::Internal::Util.blank_string?(my_customer_secret_key_id)

      path = '/admin/v1/MyCustomerSecretKeys/{myCustomerSecretKeyId}'.sub('{myCustomerSecretKeyId}', my_customer_secret_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_customer_secret_key') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Device
    # @param [String] my_device_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_device.rb.html) to see an example of how to use delete_my_device API.
    def delete_my_device(my_device_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_device.' if logger

      raise "Missing the required parameter 'my_device_id' when calling delete_my_device." if my_device_id.nil?
      raise "Parameter value for 'my_device_id' must not be blank" if OCI::Internal::Util.blank_string?(my_device_id)

      path = '/admin/v1/MyDevices/{myDeviceId}'.sub('{myDeviceId}', my_device_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_device') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's own OAuth2 client credential.
    # @param [String] my_o_auth2_client_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_o_auth2_client_credential.rb.html) to see an example of how to use delete_my_o_auth2_client_credential API.
    def delete_my_o_auth2_client_credential(my_o_auth2_client_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_o_auth2_client_credential.' if logger

      raise "Missing the required parameter 'my_o_auth2_client_credential_id' when calling delete_my_o_auth2_client_credential." if my_o_auth2_client_credential_id.nil?
      raise "Parameter value for 'my_o_auth2_client_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_o_auth2_client_credential_id)

      path = '/admin/v1/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}'.sub('{myOAuth2ClientCredentialId}', my_o_auth2_client_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_o_auth2_client_credential') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's own SMTP credential.
    # @param [String] my_smtp_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_smtp_credential.rb.html) to see an example of how to use delete_my_smtp_credential API.
    def delete_my_smtp_credential(my_smtp_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_smtp_credential.' if logger

      raise "Missing the required parameter 'my_smtp_credential_id' when calling delete_my_smtp_credential." if my_smtp_credential_id.nil?
      raise "Parameter value for 'my_smtp_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_smtp_credential_id)

      path = '/admin/v1/MySmtpCredentials/{mySmtpCredentialId}'.sub('{mySmtpCredentialId}', my_smtp_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_smtp_credential') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's own support account.
    # @param [String] my_support_account_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_support_account.rb.html) to see an example of how to use delete_my_support_account API.
    def delete_my_support_account(my_support_account_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_support_account.' if logger

      raise "Missing the required parameter 'my_support_account_id' when calling delete_my_support_account." if my_support_account_id.nil?
      raise "Parameter value for 'my_support_account_id' must not be blank" if OCI::Internal::Util.blank_string?(my_support_account_id)

      path = '/admin/v1/MySupportAccounts/{mySupportAccountId}'.sub('{mySupportAccountId}', my_support_account_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_support_account') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Trusted User Agent
    # @param [String] my_trusted_user_agent_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_trusted_user_agent.rb.html) to see an example of how to use delete_my_trusted_user_agent API.
    def delete_my_trusted_user_agent(my_trusted_user_agent_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_trusted_user_agent.' if logger

      raise "Missing the required parameter 'my_trusted_user_agent_id' when calling delete_my_trusted_user_agent." if my_trusted_user_agent_id.nil?
      raise "Parameter value for 'my_trusted_user_agent_id' must not be blank" if OCI::Internal::Util.blank_string?(my_trusted_user_agent_id)

      path = '/admin/v1/MyTrustedUserAgents/{myTrustedUserAgentId}'.sub('{myTrustedUserAgentId}', my_trusted_user_agent_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_trusted_user_agent') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's own database (DB) credential.
    # @param [String] my_user_db_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_my_user_db_credential.rb.html) to see an example of how to use delete_my_user_db_credential API.
    def delete_my_user_db_credential(my_user_db_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_my_user_db_credential.' if logger

      raise "Missing the required parameter 'my_user_db_credential_id' when calling delete_my_user_db_credential." if my_user_db_credential_id.nil?
      raise "Parameter value for 'my_user_db_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_user_db_credential_id)

      path = '/admin/v1/MyUserDbCredentials/{myUserDbCredentialId}'.sub('{myUserDbCredentialId}', my_user_db_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_my_user_db_credential') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a NetworkPerimeter
    # @param [String] network_perimeter_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_network_perimeter.rb.html) to see an example of how to use delete_network_perimeter API.
    def delete_network_perimeter(network_perimeter_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_network_perimeter.' if logger

      raise "Missing the required parameter 'network_perimeter_id' when calling delete_network_perimeter." if network_perimeter_id.nil?
      raise "Parameter value for 'network_perimeter_id' must not be blank" if OCI::Internal::Util.blank_string?(network_perimeter_id)

      path = '/admin/v1/NetworkPerimeters/{networkPerimeterId}'.sub('{networkPerimeterId}', network_perimeter_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_network_perimeter') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's OAuth2 client credentials.
    # @param [String] o_auth2_client_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_o_auth2_client_credential.rb.html) to see an example of how to use delete_o_auth2_client_credential API.
    def delete_o_auth2_client_credential(o_auth2_client_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_o_auth2_client_credential.' if logger

      raise "Missing the required parameter 'o_auth2_client_credential_id' when calling delete_o_auth2_client_credential." if o_auth2_client_credential_id.nil?
      raise "Parameter value for 'o_auth2_client_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(o_auth2_client_credential_id)

      path = '/admin/v1/OAuth2ClientCredentials/{oAuth2ClientCredentialId}'.sub('{oAuth2ClientCredentialId}', o_auth2_client_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_o_auth2_client_credential') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete an OAuth Client Certificate
    # @param [String] o_auth_client_certificate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_o_auth_client_certificate.rb.html) to see an example of how to use delete_o_auth_client_certificate API.
    def delete_o_auth_client_certificate(o_auth_client_certificate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_o_auth_client_certificate.' if logger

      raise "Missing the required parameter 'o_auth_client_certificate_id' when calling delete_o_auth_client_certificate." if o_auth_client_certificate_id.nil?
      raise "Parameter value for 'o_auth_client_certificate_id' must not be blank" if OCI::Internal::Util.blank_string?(o_auth_client_certificate_id)

      path = '/admin/v1/OAuthClientCertificates/{oAuthClientCertificateId}'.sub('{oAuthClientCertificateId}', o_auth_client_certificate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_o_auth_client_certificate') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete an OAuth Partner Certificate
    # @param [String] o_auth_partner_certificate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_o_auth_partner_certificate.rb.html) to see an example of how to use delete_o_auth_partner_certificate API.
    def delete_o_auth_partner_certificate(o_auth_partner_certificate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_o_auth_partner_certificate.' if logger

      raise "Missing the required parameter 'o_auth_partner_certificate_id' when calling delete_o_auth_partner_certificate." if o_auth_partner_certificate_id.nil?
      raise "Parameter value for 'o_auth_partner_certificate_id' must not be blank" if OCI::Internal::Util.blank_string?(o_auth_partner_certificate_id)

      path = '/admin/v1/OAuthPartnerCertificates/{oAuthPartnerCertificateId}'.sub('{oAuthPartnerCertificateId}', o_auth_partner_certificate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_o_auth_partner_certificate') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a password policy.
    # @param [String] password_policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_password_policy.rb.html) to see an example of how to use delete_password_policy API.
    def delete_password_policy(password_policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_password_policy.' if logger

      raise "Missing the required parameter 'password_policy_id' when calling delete_password_policy." if password_policy_id.nil?
      raise "Parameter value for 'password_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(password_policy_id)

      path = '/admin/v1/PasswordPolicies/{passwordPolicyId}'.sub('{passwordPolicyId}', password_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_password_policy') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Policy
    # @param [String] policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_policy.rb.html) to see an example of how to use delete_policy API.
    def delete_policy(policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_policy.' if logger

      raise "Missing the required parameter 'policy_id' when calling delete_policy." if policy_id.nil?
      raise "Parameter value for 'policy_id' must not be blank" if OCI::Internal::Util.blank_string?(policy_id)

      path = '/admin/v1/Policies/{policyId}'.sub('{policyId}', policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_policy') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Rule
    # @param [String] rule_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_rule.rb.html) to see an example of how to use delete_rule API.
    def delete_rule(rule_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_rule.' if logger

      raise "Missing the required parameter 'rule_id' when calling delete_rule." if rule_id.nil?
      raise "Parameter value for 'rule_id' must not be blank" if OCI::Internal::Util.blank_string?(rule_id)

      path = '/admin/v1/Rules/{ruleId}'.sub('{ruleId}', rule_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_rule') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a security question.
    # @param [String] security_question_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_security_question.rb.html) to see an example of how to use delete_security_question API.
    def delete_security_question(security_question_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_security_question.' if logger

      raise "Missing the required parameter 'security_question_id' when calling delete_security_question." if security_question_id.nil?
      raise "Parameter value for 'security_question_id' must not be blank" if OCI::Internal::Util.blank_string?(security_question_id)

      path = '/admin/v1/SecurityQuestions/{securityQuestionId}'.sub('{securityQuestionId}', security_question_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_security_question') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a self-registration profile.
    # @param [String] self_registration_profile_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_self_registration_profile.rb.html) to see an example of how to use delete_self_registration_profile API.
    def delete_self_registration_profile(self_registration_profile_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_self_registration_profile.' if logger

      raise "Missing the required parameter 'self_registration_profile_id' when calling delete_self_registration_profile." if self_registration_profile_id.nil?
      raise "Parameter value for 'self_registration_profile_id' must not be blank" if OCI::Internal::Util.blank_string?(self_registration_profile_id)

      path = '/admin/v1/SelfRegistrationProfiles/{selfRegistrationProfileId}'.sub('{selfRegistrationProfileId}', self_registration_profile_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_self_registration_profile') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's SMTP credentials.
    # @param [String] smtp_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_smtp_credential.rb.html) to see an example of how to use delete_smtp_credential API.
    def delete_smtp_credential(smtp_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_smtp_credential.' if logger

      raise "Missing the required parameter 'smtp_credential_id' when calling delete_smtp_credential." if smtp_credential_id.nil?
      raise "Parameter value for 'smtp_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(smtp_credential_id)

      path = '/admin/v1/SmtpCredentials/{smtpCredentialId}'.sub('{smtpCredentialId}', smtp_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_smtp_credential') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user.
    # @param [String] user_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_user.rb.html) to see an example of how to use delete_user API.
    def delete_user(user_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_user.' if logger

      raise "Missing the required parameter 'user_id' when calling delete_user." if user_id.nil?
      raise "Parameter value for 'user_id' must not be blank" if OCI::Internal::Util.blank_string?(user_id)

      path = '/admin/v1/Users/{userId}'.sub('{userId}', user_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_user') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a user's database (DB) credentials.
    # @param [String] user_db_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [BOOLEAN] :force_delete To force delete the resource and all its references (if any).
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/delete_user_db_credential.rb.html) to see an example of how to use delete_user_db_credential API.
    def delete_user_db_credential(user_db_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#delete_user_db_credential.' if logger

      raise "Missing the required parameter 'user_db_credential_id' when calling delete_user_db_credential." if user_db_credential_id.nil?
      raise "Parameter value for 'user_db_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(user_db_credential_id)

      path = '/admin/v1/UserDbCredentials/{userDbCredentialId}'.sub('{userDbCredentialId}', user_db_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:forceDelete] = opts[:force_delete] if !opts[:force_delete].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#delete_user_db_credential') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Account Mgmt Info
    # @param [String] account_mgmt_info_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AccountMgmtInfo AccountMgmtInfo}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_account_mgmt_info.rb.html) to see an example of how to use get_account_mgmt_info API.
    def get_account_mgmt_info(account_mgmt_info_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_account_mgmt_info.' if logger

      raise "Missing the required parameter 'account_mgmt_info_id' when calling get_account_mgmt_info." if account_mgmt_info_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'account_mgmt_info_id' must not be blank" if OCI::Internal::Util.blank_string?(account_mgmt_info_id)

      path = '/admin/v1/AccountMgmtInfos/{accountMgmtInfoId}'.sub('{accountMgmtInfoId}', account_mgmt_info_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_account_mgmt_info') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AccountMgmtInfo'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get an account recovery setting.
    # @param [String] account_recovery_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AccountRecoverySetting AccountRecoverySetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_account_recovery_setting.rb.html) to see an example of how to use get_account_recovery_setting API.
    def get_account_recovery_setting(account_recovery_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_account_recovery_setting.' if logger

      raise "Missing the required parameter 'account_recovery_setting_id' when calling get_account_recovery_setting." if account_recovery_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'account_recovery_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(account_recovery_setting_id)

      path = '/admin/v1/AccountRecoverySettings/{accountRecoverySettingId}'.sub('{accountRecoverySettingId}', account_recovery_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_account_recovery_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AccountRecoverySetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's API key.
    # @param [String] api_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApiKey ApiKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_api_key.rb.html) to see an example of how to use get_api_key API.
    def get_api_key(api_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_api_key.' if logger

      raise "Missing the required parameter 'api_key_id' when calling get_api_key." if api_key_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'api_key_id' must not be blank" if OCI::Internal::Util.blank_string?(api_key_id)

      path = '/admin/v1/ApiKeys/{apiKeyId}'.sub('{apiKeyId}', api_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_api_key') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApiKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get an App
    # @param [String] app_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::App App}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_app.rb.html) to see an example of how to use get_app API.
    def get_app(app_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_app.' if logger

      raise "Missing the required parameter 'app_id' when calling get_app." if app_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'app_id' must not be blank" if OCI::Internal::Util.blank_string?(app_id)

      path = '/admin/v1/Apps/{appId}'.sub('{appId}', app_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_app') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::App'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get an AppRole
    # @param [String] app_role_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AppRole AppRole}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_app_role.rb.html) to see an example of how to use get_app_role API.
    def get_app_role(app_role_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_app_role.' if logger

      raise "Missing the required parameter 'app_role_id' when calling get_app_role." if app_role_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'app_role_id' must not be blank" if OCI::Internal::Util.blank_string?(app_role_id)

      path = '/admin/v1/AppRoles/{appRoleId}'.sub('{appRoleId}', app_role_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_app_role') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AppRole'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get ApprovalWorkflow
    # @param [String] approval_workflow_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflow ApprovalWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_approval_workflow.rb.html) to see an example of how to use get_approval_workflow API.
    def get_approval_workflow(approval_workflow_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_approval_workflow.' if logger

      raise "Missing the required parameter 'approval_workflow_id' when calling get_approval_workflow." if approval_workflow_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'approval_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_id)

      path = '/admin/v1/ApprovalWorkflows/{approvalWorkflowId}'.sub('{approvalWorkflowId}', approval_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_approval_workflow') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get an Approval Workflow Assignment
    # @param [String] approval_workflow_assignment_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflowAssignment ApprovalWorkflowAssignment}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_approval_workflow_assignment.rb.html) to see an example of how to use get_approval_workflow_assignment API.
    def get_approval_workflow_assignment(approval_workflow_assignment_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_approval_workflow_assignment.' if logger

      raise "Missing the required parameter 'approval_workflow_assignment_id' when calling get_approval_workflow_assignment." if approval_workflow_assignment_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'approval_workflow_assignment_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_assignment_id)

      path = '/admin/v1/ApprovalWorkflowAssignments/{approvalWorkflowAssignmentId}'.sub('{approvalWorkflowAssignmentId}', approval_workflow_assignment_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_approval_workflow_assignment') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflowAssignment'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get ApprovalWorkflowStep
    # @param [String] approval_workflow_step_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflowStep ApprovalWorkflowStep}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_approval_workflow_step.rb.html) to see an example of how to use get_approval_workflow_step API.
    def get_approval_workflow_step(approval_workflow_step_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_approval_workflow_step.' if logger

      raise "Missing the required parameter 'approval_workflow_step_id' when calling get_approval_workflow_step." if approval_workflow_step_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'approval_workflow_step_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_step_id)

      path = '/admin/v1/ApprovalWorkflowSteps/{approvalWorkflowStepId}'.sub('{approvalWorkflowStepId}', approval_workflow_step_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_approval_workflow_step') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflowStep'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's Auth token.
    # @param [String] auth_token_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthToken AuthToken}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_auth_token.rb.html) to see an example of how to use get_auth_token API.
    def get_auth_token(auth_token_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_auth_token.' if logger

      raise "Missing the required parameter 'auth_token_id' when calling get_auth_token." if auth_token_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'auth_token_id' must not be blank" if OCI::Internal::Util.blank_string?(auth_token_id)

      path = '/admin/v1/AuthTokens/{authTokenId}'.sub('{authTokenId}', auth_token_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_auth_token') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthToken'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Authentication Factor Settings
    # @param [String] authentication_factor_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthenticationFactorSetting AuthenticationFactorSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_authentication_factor_setting.rb.html) to see an example of how to use get_authentication_factor_setting API.
    def get_authentication_factor_setting(authentication_factor_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_authentication_factor_setting.' if logger

      raise "Missing the required parameter 'authentication_factor_setting_id' when calling get_authentication_factor_setting." if authentication_factor_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'authentication_factor_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(authentication_factor_setting_id)

      path = '/admin/v1/AuthenticationFactorSettings/{authenticationFactorSettingId}'.sub('{authenticationFactorSettingId}', authentication_factor_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_authentication_factor_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthenticationFactorSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Branding Settings
    # @param [String] branding_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::BrandingSetting BrandingSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_branding_setting.rb.html) to see an example of how to use get_branding_setting API.
    def get_branding_setting(branding_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_branding_setting.' if logger

      raise "Missing the required parameter 'branding_setting_id' when calling get_branding_setting." if branding_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'branding_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(branding_setting_id)

      path = '/admin/v1/BrandingSettings/{brandingSettingId}'.sub('{brandingSettingId}', branding_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_branding_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::BrandingSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Cloud Gate
    # @param [String] cloud_gate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGate CloudGate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_cloud_gate.rb.html) to see an example of how to use get_cloud_gate API.
    def get_cloud_gate(cloud_gate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_cloud_gate.' if logger

      raise "Missing the required parameter 'cloud_gate_id' when calling get_cloud_gate." if cloud_gate_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_id)

      path = '/admin/v1/CloudGates/{cloudGateId}'.sub('{cloudGateId}', cloud_gate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_cloud_gate') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Cloud Gate mapping
    # @param [String] cloud_gate_mapping_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateMapping CloudGateMapping}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_cloud_gate_mapping.rb.html) to see an example of how to use get_cloud_gate_mapping API.
    def get_cloud_gate_mapping(cloud_gate_mapping_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_cloud_gate_mapping.' if logger

      raise "Missing the required parameter 'cloud_gate_mapping_id' when calling get_cloud_gate_mapping." if cloud_gate_mapping_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_mapping_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_mapping_id)

      path = '/admin/v1/CloudGateMappings/{cloudGateMappingId}'.sub('{cloudGateMappingId}', cloud_gate_mapping_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_cloud_gate_mapping') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateMapping'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Cloud Gate server
    # @param [String] cloud_gate_server_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateServer CloudGateServer}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_cloud_gate_server.rb.html) to see an example of how to use get_cloud_gate_server API.
    def get_cloud_gate_server(cloud_gate_server_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_cloud_gate_server.' if logger

      raise "Missing the required parameter 'cloud_gate_server_id' when calling get_cloud_gate_server." if cloud_gate_server_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_server_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_server_id)

      path = '/admin/v1/CloudGateServers/{cloudGateServerId}'.sub('{cloudGateServerId}', cloud_gate_server_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_cloud_gate_server') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateServer'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Condition
    # @param [String] condition_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Condition Condition}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_condition.rb.html) to see an example of how to use get_condition API.
    def get_condition(condition_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_condition.' if logger

      raise "Missing the required parameter 'condition_id' when calling get_condition." if condition_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'condition_id' must not be blank" if OCI::Internal::Util.blank_string?(condition_id)

      path = '/admin/v1/Conditions/{conditionId}'.sub('{conditionId}', condition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_condition') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Condition'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's customer secret key.
    # @param [String] customer_secret_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CustomerSecretKey CustomerSecretKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_customer_secret_key.rb.html) to see an example of how to use get_customer_secret_key API.
    def get_customer_secret_key(customer_secret_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_customer_secret_key.' if logger

      raise "Missing the required parameter 'customer_secret_key_id' when calling get_customer_secret_key." if customer_secret_key_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'customer_secret_key_id' must not be blank" if OCI::Internal::Util.blank_string?(customer_secret_key_id)

      path = '/admin/v1/CustomerSecretKeys/{customerSecretKeyId}'.sub('{customerSecretKeyId}', customer_secret_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_customer_secret_key') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CustomerSecretKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Dynamic Resource Group.
    # @param [String] dynamic_resource_group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::DynamicResourceGroup DynamicResourceGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_dynamic_resource_group.rb.html) to see an example of how to use get_dynamic_resource_group API.
    def get_dynamic_resource_group(dynamic_resource_group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_dynamic_resource_group.' if logger

      raise "Missing the required parameter 'dynamic_resource_group_id' when calling get_dynamic_resource_group." if dynamic_resource_group_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'dynamic_resource_group_id' must not be blank" if OCI::Internal::Util.blank_string?(dynamic_resource_group_id)

      path = '/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}'.sub('{dynamicResourceGroupId}', dynamic_resource_group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_dynamic_resource_group') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::DynamicResourceGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Grant
    # @param [String] grant_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Grant Grant}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_grant.rb.html) to see an example of how to use get_grant API.
    def get_grant(grant_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_grant.' if logger

      raise "Missing the required parameter 'grant_id' when calling get_grant." if grant_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'grant_id' must not be blank" if OCI::Internal::Util.blank_string?(grant_id)

      path = '/admin/v1/Grants/{grantId}'.sub('{grantId}', grant_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_grant') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Grant'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a group. <b>Important:</b> The Group SEARCH and GET operations on users and members will throw an exception if the response has more than 10,000 members. To avoid the exception, use the pagination filter to GET or SEARCH group members.
    # @param [String] group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Group Group}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_group.rb.html) to see an example of how to use get_group API.
    def get_group(group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_group.' if logger

      raise "Missing the required parameter 'group_id' when calling get_group." if group_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'group_id' must not be blank" if OCI::Internal::Util.blank_string?(group_id)

      path = '/admin/v1/Groups/{groupId}'.sub('{groupId}', group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_group') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Group'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get an Identity Provider
    # @param [String] identity_provider_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentityProvider IdentityProvider}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_identity_provider.rb.html) to see an example of how to use get_identity_provider API.
    def get_identity_provider(identity_provider_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_identity_provider.' if logger

      raise "Missing the required parameter 'identity_provider_id' when calling get_identity_provider." if identity_provider_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'identity_provider_id' must not be blank" if OCI::Internal::Util.blank_string?(identity_provider_id)

      path = '/admin/v1/IdentityProviders/{identityProviderId}'.sub('{identityProviderId}', identity_provider_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_identity_provider') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentityProvider'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get an Identity setting.
    # @param [String] identity_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentitySetting IdentitySetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_identity_setting.rb.html) to see an example of how to use get_identity_setting API.
    def get_identity_setting(identity_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_identity_setting.' if logger

      raise "Missing the required parameter 'identity_setting_id' when calling get_identity_setting." if identity_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'identity_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(identity_setting_id)

      path = '/admin/v1/IdentitySettings/{identitySettingId}'.sub('{identitySettingId}', identity_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_identity_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentitySetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get KmsiSettings
    # @param [String] kmsi_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::KmsiSetting KmsiSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_kmsi_setting.rb.html) to see an example of how to use get_kmsi_setting API.
    def get_kmsi_setting(kmsi_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_kmsi_setting.' if logger

      raise "Missing the required parameter 'kmsi_setting_id' when calling get_kmsi_setting." if kmsi_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'kmsi_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(kmsi_setting_id)

      path = '/admin/v1/KmsiSettings/{kmsiSettingId}'.sub('{kmsiSettingId}', kmsi_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_kmsi_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::KmsiSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own information.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Me Me}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_me.rb.html) to see an example of how to use get_me API.
    def get_me(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_me.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Me'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_me') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Me'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own API key.
    # @param [String] my_api_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyApiKey MyApiKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_api_key.rb.html) to see an example of how to use get_my_api_key API.
    def get_my_api_key(my_api_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_api_key.' if logger

      raise "Missing the required parameter 'my_api_key_id' when calling get_my_api_key." if my_api_key_id.nil?
      raise "Parameter value for 'my_api_key_id' must not be blank" if OCI::Internal::Util.blank_string?(my_api_key_id)

      path = '/admin/v1/MyApiKeys/{myApiKeyId}'.sub('{myApiKeyId}', my_api_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_api_key') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyApiKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own Auth token.
    # @param [String] my_auth_token_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyAuthToken MyAuthToken}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_auth_token.rb.html) to see an example of how to use get_my_auth_token API.
    def get_my_auth_token(my_auth_token_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_auth_token.' if logger

      raise "Missing the required parameter 'my_auth_token_id' when calling get_my_auth_token." if my_auth_token_id.nil?
      raise "Parameter value for 'my_auth_token_id' must not be blank" if OCI::Internal::Util.blank_string?(my_auth_token_id)

      path = '/admin/v1/MyAuthTokens/{myAuthTokenId}'.sub('{myAuthTokenId}', my_auth_token_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_auth_token') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyAuthToken'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get My MyCompletedApproval
    # @param [String] my_completed_approval_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyCompletedApproval MyCompletedApproval}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_completed_approval.rb.html) to see an example of how to use get_my_completed_approval API.
    def get_my_completed_approval(my_completed_approval_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_completed_approval.' if logger

      raise "Missing the required parameter 'my_completed_approval_id' when calling get_my_completed_approval." if my_completed_approval_id.nil?
      raise "Parameter value for 'my_completed_approval_id' must not be blank" if OCI::Internal::Util.blank_string?(my_completed_approval_id)

      path = '/admin/v1/MyCompletedApprovals/{myCompletedApprovalId}'.sub('{myCompletedApprovalId}', my_completed_approval_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_completed_approval') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyCompletedApproval'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own customer secret key.
    # @param [String] my_customer_secret_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyCustomerSecretKey MyCustomerSecretKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_customer_secret_key.rb.html) to see an example of how to use get_my_customer_secret_key API.
    def get_my_customer_secret_key(my_customer_secret_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_customer_secret_key.' if logger

      raise "Missing the required parameter 'my_customer_secret_key_id' when calling get_my_customer_secret_key." if my_customer_secret_key_id.nil?
      raise "Parameter value for 'my_customer_secret_key_id' must not be blank" if OCI::Internal::Util.blank_string?(my_customer_secret_key_id)

      path = '/admin/v1/MyCustomerSecretKeys/{myCustomerSecretKeyId}'.sub('{myCustomerSecretKeyId}', my_customer_secret_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_customer_secret_key') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyCustomerSecretKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Device
    # @param [String] my_device_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyDevice MyDevice}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_device.rb.html) to see an example of how to use get_my_device API.
    def get_my_device(my_device_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_device.' if logger

      raise "Missing the required parameter 'my_device_id' when calling get_my_device." if my_device_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'my_device_id' must not be blank" if OCI::Internal::Util.blank_string?(my_device_id)

      path = '/admin/v1/MyDevices/{myDeviceId}'.sub('{myDeviceId}', my_device_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_device') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyDevice'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own OAuth2 client credential.
    # @param [String] my_o_auth2_client_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyOAuth2ClientCredential MyOAuth2ClientCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_o_auth2_client_credential.rb.html) to see an example of how to use get_my_o_auth2_client_credential API.
    def get_my_o_auth2_client_credential(my_o_auth2_client_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_o_auth2_client_credential.' if logger

      raise "Missing the required parameter 'my_o_auth2_client_credential_id' when calling get_my_o_auth2_client_credential." if my_o_auth2_client_credential_id.nil?
      raise "Parameter value for 'my_o_auth2_client_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_o_auth2_client_credential_id)

      path = '/admin/v1/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}'.sub('{myOAuth2ClientCredentialId}', my_o_auth2_client_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_o_auth2_client_credential') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyOAuth2ClientCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get My MyPendingApproval
    # @param [String] my_pending_approval_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyPendingApproval MyPendingApproval}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_pending_approval.rb.html) to see an example of how to use get_my_pending_approval API.
    def get_my_pending_approval(my_pending_approval_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_pending_approval.' if logger

      raise "Missing the required parameter 'my_pending_approval_id' when calling get_my_pending_approval." if my_pending_approval_id.nil?
      raise "Parameter value for 'my_pending_approval_id' must not be blank" if OCI::Internal::Util.blank_string?(my_pending_approval_id)

      path = '/admin/v1/MyPendingApprovals/{myPendingApprovalId}'.sub('{myPendingApprovalId}', my_pending_approval_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_pending_approval') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyPendingApproval'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get My Requests
    # @param [String] my_request_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyRequest MyRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_request.rb.html) to see an example of how to use get_my_request API.
    def get_my_request(my_request_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_request.' if logger

      raise "Missing the required parameter 'my_request_id' when calling get_my_request." if my_request_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'my_request_id' must not be blank" if OCI::Internal::Util.blank_string?(my_request_id)

      path = '/admin/v1/MyRequests/{myRequestId}'.sub('{myRequestId}', my_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_request') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own SMTP credential.
    # @param [String] my_smtp_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MySmtpCredential MySmtpCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_smtp_credential.rb.html) to see an example of how to use get_my_smtp_credential API.
    def get_my_smtp_credential(my_smtp_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_smtp_credential.' if logger

      raise "Missing the required parameter 'my_smtp_credential_id' when calling get_my_smtp_credential." if my_smtp_credential_id.nil?
      raise "Parameter value for 'my_smtp_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_smtp_credential_id)

      path = '/admin/v1/MySmtpCredentials/{mySmtpCredentialId}'.sub('{mySmtpCredentialId}', my_smtp_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_smtp_credential') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MySmtpCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own support account.
    # @param [String] my_support_account_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MySupportAccount MySupportAccount}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_support_account.rb.html) to see an example of how to use get_my_support_account API.
    def get_my_support_account(my_support_account_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_support_account.' if logger

      raise "Missing the required parameter 'my_support_account_id' when calling get_my_support_account." if my_support_account_id.nil?
      raise "Parameter value for 'my_support_account_id' must not be blank" if OCI::Internal::Util.blank_string?(my_support_account_id)

      path = '/admin/v1/MySupportAccounts/{mySupportAccountId}'.sub('{mySupportAccountId}', my_support_account_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_support_account') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MySupportAccount'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Trusted User Agent
    # @param [String] my_trusted_user_agent_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyTrustedUserAgent MyTrustedUserAgent}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_trusted_user_agent.rb.html) to see an example of how to use get_my_trusted_user_agent API.
    def get_my_trusted_user_agent(my_trusted_user_agent_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_trusted_user_agent.' if logger

      raise "Missing the required parameter 'my_trusted_user_agent_id' when calling get_my_trusted_user_agent." if my_trusted_user_agent_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'my_trusted_user_agent_id' must not be blank" if OCI::Internal::Util.blank_string?(my_trusted_user_agent_id)

      path = '/admin/v1/MyTrustedUserAgents/{myTrustedUserAgentId}'.sub('{myTrustedUserAgentId}', my_trusted_user_agent_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_trusted_user_agent') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyTrustedUserAgent'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's own database (DB) credential.
    # @param [String] my_user_db_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyUserDbCredential MyUserDbCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_my_user_db_credential.rb.html) to see an example of how to use get_my_user_db_credential API.
    def get_my_user_db_credential(my_user_db_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_my_user_db_credential.' if logger

      raise "Missing the required parameter 'my_user_db_credential_id' when calling get_my_user_db_credential." if my_user_db_credential_id.nil?
      raise "Parameter value for 'my_user_db_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_user_db_credential_id)

      path = '/admin/v1/MyUserDbCredentials/{myUserDbCredentialId}'.sub('{myUserDbCredentialId}', my_user_db_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_my_user_db_credential') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyUserDbCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a NetworkPerimeter
    # @param [String] network_perimeter_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NetworkPerimeter NetworkPerimeter}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_network_perimeter.rb.html) to see an example of how to use get_network_perimeter API.
    def get_network_perimeter(network_perimeter_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_network_perimeter.' if logger

      raise "Missing the required parameter 'network_perimeter_id' when calling get_network_perimeter." if network_perimeter_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'network_perimeter_id' must not be blank" if OCI::Internal::Util.blank_string?(network_perimeter_id)

      path = '/admin/v1/NetworkPerimeters/{networkPerimeterId}'.sub('{networkPerimeterId}', network_perimeter_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_network_perimeter') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NetworkPerimeter'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Notification Settings
    # @param [String] notification_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NotificationSetting NotificationSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_notification_setting.rb.html) to see an example of how to use get_notification_setting API.
    def get_notification_setting(notification_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_notification_setting.' if logger

      raise "Missing the required parameter 'notification_setting_id' when calling get_notification_setting." if notification_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'notification_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(notification_setting_id)

      path = '/admin/v1/NotificationSettings/{notificationSettingId}'.sub('{notificationSettingId}', notification_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_notification_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NotificationSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's OAuth2 client credentials.
    # @param [String] o_auth2_client_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuth2ClientCredential OAuth2ClientCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_o_auth2_client_credential.rb.html) to see an example of how to use get_o_auth2_client_credential API.
    def get_o_auth2_client_credential(o_auth2_client_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_o_auth2_client_credential.' if logger

      raise "Missing the required parameter 'o_auth2_client_credential_id' when calling get_o_auth2_client_credential." if o_auth2_client_credential_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'o_auth2_client_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(o_auth2_client_credential_id)

      path = '/admin/v1/OAuth2ClientCredentials/{oAuth2ClientCredentialId}'.sub('{oAuth2ClientCredentialId}', o_auth2_client_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_o_auth2_client_credential') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuth2ClientCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get OAuth Client Certificates
    # @param [String] o_auth_client_certificate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthClientCertificate OAuthClientCertificate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_o_auth_client_certificate.rb.html) to see an example of how to use get_o_auth_client_certificate API.
    def get_o_auth_client_certificate(o_auth_client_certificate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_o_auth_client_certificate.' if logger

      raise "Missing the required parameter 'o_auth_client_certificate_id' when calling get_o_auth_client_certificate." if o_auth_client_certificate_id.nil?
      raise "Parameter value for 'o_auth_client_certificate_id' must not be blank" if OCI::Internal::Util.blank_string?(o_auth_client_certificate_id)

      path = '/admin/v1/OAuthClientCertificates/{oAuthClientCertificateId}'.sub('{oAuthClientCertificateId}', o_auth_client_certificate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_o_auth_client_certificate') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthClientCertificate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get an OAuth Partner Certificate
    # @param [String] o_auth_partner_certificate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthPartnerCertificate OAuthPartnerCertificate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_o_auth_partner_certificate.rb.html) to see an example of how to use get_o_auth_partner_certificate API.
    def get_o_auth_partner_certificate(o_auth_partner_certificate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_o_auth_partner_certificate.' if logger

      raise "Missing the required parameter 'o_auth_partner_certificate_id' when calling get_o_auth_partner_certificate." if o_auth_partner_certificate_id.nil?
      raise "Parameter value for 'o_auth_partner_certificate_id' must not be blank" if OCI::Internal::Util.blank_string?(o_auth_partner_certificate_id)

      path = '/admin/v1/OAuthPartnerCertificates/{oAuthPartnerCertificateId}'.sub('{oAuthPartnerCertificateId}', o_auth_partner_certificate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_o_auth_partner_certificate') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthPartnerCertificate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a password policy.
    # @param [String] password_policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::PasswordPolicy PasswordPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_password_policy.rb.html) to see an example of how to use get_password_policy API.
    def get_password_policy(password_policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_password_policy.' if logger

      raise "Missing the required parameter 'password_policy_id' when calling get_password_policy." if password_policy_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'password_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(password_policy_id)

      path = '/admin/v1/PasswordPolicies/{passwordPolicyId}'.sub('{passwordPolicyId}', password_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_password_policy') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::PasswordPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Policy
    # @param [String] policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Policy Policy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_policy.rb.html) to see an example of how to use get_policy API.
    def get_policy(policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_policy.' if logger

      raise "Missing the required parameter 'policy_id' when calling get_policy." if policy_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'policy_id' must not be blank" if OCI::Internal::Util.blank_string?(policy_id)

      path = '/admin/v1/Policies/{policyId}'.sub('{policyId}', policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_policy') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Policy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Rule
    # @param [String] rule_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Rule Rule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_rule.rb.html) to see an example of how to use get_rule API.
    def get_rule(rule_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_rule.' if logger

      raise "Missing the required parameter 'rule_id' when calling get_rule." if rule_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'rule_id' must not be blank" if OCI::Internal::Util.blank_string?(rule_id)

      path = '/admin/v1/Rules/{ruleId}'.sub('{ruleId}', rule_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_rule') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Rule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a Schema
    # @param [String] schema_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Schema Schema}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_schema.rb.html) to see an example of how to use get_schema API.
    def get_schema(schema_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_schema.' if logger

      raise "Missing the required parameter 'schema_id' when calling get_schema." if schema_id.nil?
      raise "Parameter value for 'schema_id' must not be blank" if OCI::Internal::Util.blank_string?(schema_id)

      path = '/admin/v1/Schemas/{schemaId}'.sub('{schemaId}', schema_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_schema') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Schema'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a security question.
    # @param [String] security_question_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestion SecurityQuestion}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_security_question.rb.html) to see an example of how to use get_security_question API.
    def get_security_question(security_question_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_security_question.' if logger

      raise "Missing the required parameter 'security_question_id' when calling get_security_question." if security_question_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'security_question_id' must not be blank" if OCI::Internal::Util.blank_string?(security_question_id)

      path = '/admin/v1/SecurityQuestions/{securityQuestionId}'.sub('{securityQuestionId}', security_question_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_security_question') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestion'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a security question setting.
    # @param [String] security_question_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestionSetting SecurityQuestionSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_security_question_setting.rb.html) to see an example of how to use get_security_question_setting API.
    def get_security_question_setting(security_question_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_security_question_setting.' if logger

      raise "Missing the required parameter 'security_question_setting_id' when calling get_security_question_setting." if security_question_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'security_question_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(security_question_setting_id)

      path = '/admin/v1/SecurityQuestionSettings/{securityQuestionSettingId}'.sub('{securityQuestionSettingId}', security_question_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_security_question_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestionSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a self-registration profile.
    # @param [String] self_registration_profile_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SelfRegistrationProfile SelfRegistrationProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_self_registration_profile.rb.html) to see an example of how to use get_self_registration_profile API.
    def get_self_registration_profile(self_registration_profile_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_self_registration_profile.' if logger

      raise "Missing the required parameter 'self_registration_profile_id' when calling get_self_registration_profile." if self_registration_profile_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'self_registration_profile_id' must not be blank" if OCI::Internal::Util.blank_string?(self_registration_profile_id)

      path = '/admin/v1/SelfRegistrationProfiles/{selfRegistrationProfileId}'.sub('{selfRegistrationProfileId}', self_registration_profile_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_self_registration_profile') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SelfRegistrationProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get Settings
    # @param [String] setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Setting Setting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_setting.rb.html) to see an example of how to use get_setting API.
    def get_setting(setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_setting.' if logger

      raise "Missing the required parameter 'setting_id' when calling get_setting." if setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'setting_id' must not be blank" if OCI::Internal::Util.blank_string?(setting_id)

      path = '/admin/v1/Settings/{settingId}'.sub('{settingId}', setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Setting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's SMTP credentials.
    # @param [String] smtp_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SmtpCredential SmtpCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_smtp_credential.rb.html) to see an example of how to use get_smtp_credential API.
    def get_smtp_credential(smtp_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_smtp_credential.' if logger

      raise "Missing the required parameter 'smtp_credential_id' when calling get_smtp_credential." if smtp_credential_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'smtp_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(smtp_credential_id)

      path = '/admin/v1/SmtpCredentials/{smtpCredentialId}'.sub('{smtpCredentialId}', smtp_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_smtp_credential') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SmtpCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user.
    # @param [String] user_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::User User}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_user.rb.html) to see an example of how to use get_user API.
    def get_user(user_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_user.' if logger

      raise "Missing the required parameter 'user_id' when calling get_user." if user_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'user_id' must not be blank" if OCI::Internal::Util.blank_string?(user_id)

      path = '/admin/v1/Users/{userId}'.sub('{userId}', user_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_user') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::User'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get User Schema Attribute Settings
    # @param [String] user_attributes_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserAttributesSetting UserAttributesSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_user_attributes_setting.rb.html) to see an example of how to use get_user_attributes_setting API.
    def get_user_attributes_setting(user_attributes_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_user_attributes_setting.' if logger

      raise "Missing the required parameter 'user_attributes_setting_id' when calling get_user_attributes_setting." if user_attributes_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'user_attributes_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(user_attributes_setting_id)

      path = '/admin/v1/UserAttributesSettings/{userAttributesSettingId}'.sub('{userAttributesSettingId}', user_attributes_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_user_attributes_setting') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserAttributesSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get a user's database (DB) credentials.
    # @param [String] user_db_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserDbCredential UserDbCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/get_user_db_credential.rb.html) to see an example of how to use get_user_db_credential API.
    def get_user_db_credential(user_db_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#get_user_db_credential.' if logger

      raise "Missing the required parameter 'user_db_credential_id' when calling get_user_db_credential." if user_db_credential_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'user_db_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(user_db_credential_id)

      path = '/admin/v1/UserDbCredentials/{userDbCredentialId}'.sub('{userDbCredentialId}', user_db_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#get_user_db_credential') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserDbCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Account Mgmt Info
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AccountMgmtInfos AccountMgmtInfos}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_account_mgmt_infos.rb.html) to see an example of how to use list_account_mgmt_infos API.
    def list_account_mgmt_infos(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_account_mgmt_infos.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/AccountMgmtInfos'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_account_mgmt_infos') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AccountMgmtInfos'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for account recovery settings.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AccountRecoverySettings AccountRecoverySettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_account_recovery_settings.rb.html) to see an example of how to use list_account_recovery_settings API.
    def list_account_recovery_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_account_recovery_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/AccountRecoverySettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_account_recovery_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AccountRecoverySettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search API keys.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApiKeys ApiKeys}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_api_keys.rb.html) to see an example of how to use list_api_keys API.
    def list_api_keys(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_api_keys.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApiKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_api_keys') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApiKeys'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search AppRoles
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AppRoles AppRoles}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_app_roles.rb.html) to see an example of how to use list_app_roles API.
    def list_app_roles(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_app_roles.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/AppRoles'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_app_roles') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AppRoles'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Approval Workflow Assignments
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflowAssignments ApprovalWorkflowAssignments}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_approval_workflow_assignments.rb.html) to see an example of how to use list_approval_workflow_assignments API.
    def list_approval_workflow_assignments(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_approval_workflow_assignments.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApprovalWorkflowAssignments'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_approval_workflow_assignments') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflowAssignments'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search ApprovalWorkflowStep
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflowSteps ApprovalWorkflowSteps}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_approval_workflow_steps.rb.html) to see an example of how to use list_approval_workflow_steps API.
    def list_approval_workflow_steps(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_approval_workflow_steps.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApprovalWorkflowSteps'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_approval_workflow_steps') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflowSteps'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search ApprovalWorkflow
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflows ApprovalWorkflows}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_approval_workflows.rb.html) to see an example of how to use list_approval_workflows API.
    def list_approval_workflows(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_approval_workflows.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ApprovalWorkflows'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_approval_workflows') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflows'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Apps
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Apps Apps}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_apps.rb.html) to see an example of how to use list_apps API.
    def list_apps(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_apps.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Apps'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_apps') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Apps'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for Auth tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthTokens AuthTokens}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_auth_tokens.rb.html) to see an example of how to use list_auth_tokens API.
    def list_auth_tokens(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_auth_tokens.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/AuthTokens'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_auth_tokens') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthTokens'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Authentication Factor Settings
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthenticationFactorSettings AuthenticationFactorSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_authentication_factor_settings.rb.html) to see an example of how to use list_authentication_factor_settings API.
    def list_authentication_factor_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_authentication_factor_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/AuthenticationFactorSettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_authentication_factor_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthenticationFactorSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Branding Settings
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::BrandingSettings BrandingSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_branding_settings.rb.html) to see an example of how to use list_branding_settings API.
    def list_branding_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_branding_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/BrandingSettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_branding_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::BrandingSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Cloud Gate mappings
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateMappings CloudGateMappings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_cloud_gate_mappings.rb.html) to see an example of how to use list_cloud_gate_mappings API.
    def list_cloud_gate_mappings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_cloud_gate_mappings.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CloudGateMappings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_cloud_gate_mappings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateMappings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Cloud Gate servers
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateServers CloudGateServers}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_cloud_gate_servers.rb.html) to see an example of how to use list_cloud_gate_servers API.
    def list_cloud_gate_servers(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_cloud_gate_servers.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CloudGateServers'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_cloud_gate_servers') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateServers'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Cloud Gates
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGates CloudGates}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_cloud_gates.rb.html) to see an example of how to use list_cloud_gates API.
    def list_cloud_gates(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_cloud_gates.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CloudGates'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_cloud_gates') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGates'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Conditions
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Conditions Conditions}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_conditions.rb.html) to see an example of how to use list_conditions API.
    def list_conditions(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_conditions.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Conditions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_conditions') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Conditions'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's customer secret keys.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CustomerSecretKeys CustomerSecretKeys}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_customer_secret_keys.rb.html) to see an example of how to use list_customer_secret_keys API.
    def list_customer_secret_keys(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_customer_secret_keys.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/CustomerSecretKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_customer_secret_keys') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CustomerSecretKeys'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for Dynamic Resource Groups.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::DynamicResourceGroups DynamicResourceGroups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_dynamic_resource_groups.rb.html) to see an example of how to use list_dynamic_resource_groups API.
    def list_dynamic_resource_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_dynamic_resource_groups.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/DynamicResourceGroups'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_dynamic_resource_groups') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::DynamicResourceGroups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Grants
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Grants Grants}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_grants.rb.html) to see an example of how to use list_grants API.
    def list_grants(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_grants.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Grants'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_grants') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Grants'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for groups. <b>Important:</b> The Group SEARCH and GET operations on users and members will throw an exception if the response has more than 10,000 members. To avoid the exception, use the pagination filter to GET or SEARCH group members.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Groups Groups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_groups.rb.html) to see an example of how to use list_groups API.
    def list_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_groups.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Groups'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_groups') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Groups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Identity Providers
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentityProviders IdentityProviders}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_identity_providers.rb.html) to see an example of how to use list_identity_providers API.
    def list_identity_providers(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_identity_providers.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/IdentityProviders'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_identity_providers') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentityProviders'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for Identity settings.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentitySettings IdentitySettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_identity_settings.rb.html) to see an example of how to use list_identity_settings API.
    def list_identity_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_identity_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/IdentitySettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_identity_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentitySettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search KmsiSettings
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::KmsiSettings KmsiSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_kmsi_settings.rb.html) to see an example of how to use list_kmsi_settings API.
    def list_kmsi_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_kmsi_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/KmsiSettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_kmsi_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::KmsiSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's own API key.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyApiKeys MyApiKeys}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_api_keys.rb.html) to see an example of how to use list_my_api_keys API.
    def list_my_api_keys(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_api_keys.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyApiKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_api_keys') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyApiKeys'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My Apps
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyApps MyApps}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_apps.rb.html) to see an example of how to use list_my_apps API.
    def list_my_apps(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_apps.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyApps'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_apps') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyApps'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's own Auth token.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyAuthTokens MyAuthTokens}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_auth_tokens.rb.html) to see an example of how to use list_my_auth_tokens API.
    def list_my_auth_tokens(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_auth_tokens.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyAuthTokens'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_auth_tokens') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyAuthTokens'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My MyCompletedApproval
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyCompletedApprovals MyCompletedApprovals}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_completed_approvals.rb.html) to see an example of how to use list_my_completed_approvals API.
    def list_my_completed_approvals(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_completed_approvals.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyCompletedApprovals'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_completed_approvals') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyCompletedApprovals'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's own customer secret key.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyCustomerSecretKeys MyCustomerSecretKeys}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_customer_secret_keys.rb.html) to see an example of how to use list_my_customer_secret_keys API.
    def list_my_customer_secret_keys(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_customer_secret_keys.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyCustomerSecretKeys'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_customer_secret_keys') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyCustomerSecretKeys'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Devices
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyDevices MyDevices}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_devices.rb.html) to see an example of how to use list_my_devices API.
    def list_my_devices(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_devices.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/MyDevices'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_devices') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyDevices'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for 'My Groups'.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyGroups MyGroups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_groups.rb.html) to see an example of how to use list_my_groups API.
    def list_my_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_groups.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/MyGroups'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_groups') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyGroups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's own OAuth2 client credential.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyOAuth2ClientCredentials MyOAuth2ClientCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_o_auth2_client_credentials.rb.html) to see an example of how to use list_my_o_auth2_client_credentials API.
    def list_my_o_auth2_client_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_o_auth2_client_credentials.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyOAuth2ClientCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_o_auth2_client_credentials') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyOAuth2ClientCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My Approvals
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyPendingApprovals MyPendingApprovals}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_pending_approvals.rb.html) to see an example of how to use list_my_pending_approvals API.
    def list_my_pending_approvals(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_pending_approvals.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyPendingApprovals'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_pending_approvals') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyPendingApprovals'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My Requestable Groups
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyRequestableGroups MyRequestableGroups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_requestable_groups.rb.html) to see an example of how to use list_my_requestable_groups API.
    def list_my_requestable_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_requestable_groups.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyRequestableGroups'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_requestable_groups') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyRequestableGroups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My Requests
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyRequests MyRequests}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_requests.rb.html) to see an example of how to use list_my_requests API.
    def list_my_requests(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_requests.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/MyRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_requests') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyRequests'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's own SMTP credential.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MySmtpCredentials MySmtpCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_smtp_credentials.rb.html) to see an example of how to use list_my_smtp_credentials API.
    def list_my_smtp_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_smtp_credentials.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MySmtpCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_smtp_credentials') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MySmtpCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's own support account.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MySupportAccounts MySupportAccounts}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_support_accounts.rb.html) to see an example of how to use list_my_support_accounts API.
    def list_my_support_accounts(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_support_accounts.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MySupportAccounts'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_support_accounts') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MySupportAccounts'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Trusted User Agents
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyTrustedUserAgents MyTrustedUserAgents}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_trusted_user_agents.rb.html) to see an example of how to use list_my_trusted_user_agents API.
    def list_my_trusted_user_agents(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_trusted_user_agents.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/MyTrustedUserAgents'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_trusted_user_agents') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyTrustedUserAgents'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's own database (DB) credential.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyUserDbCredentials MyUserDbCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_my_user_db_credentials.rb.html) to see an example of how to use list_my_user_db_credentials API.
    def list_my_user_db_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_my_user_db_credentials.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/MyUserDbCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_my_user_db_credentials') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyUserDbCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search NetworkPerimeters
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NetworkPerimeters NetworkPerimeters}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_network_perimeters.rb.html) to see an example of how to use list_network_perimeters API.
    def list_network_perimeters(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_network_perimeters.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/NetworkPerimeters'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_network_perimeters') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NetworkPerimeters'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Notification Settings
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NotificationSettings NotificationSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_notification_settings.rb.html) to see an example of how to use list_notification_settings API.
    def list_notification_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_notification_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/NotificationSettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_notification_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NotificationSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's OAuth2 client credentials.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuth2ClientCredentials OAuth2ClientCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_o_auth2_client_credentials.rb.html) to see an example of how to use list_o_auth2_client_credentials API.
    def list_o_auth2_client_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_o_auth2_client_credentials.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/OAuth2ClientCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_o_auth2_client_credentials') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuth2ClientCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search OAuth Client Certificates
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthClientCertificates OAuthClientCertificates}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_o_auth_client_certificates.rb.html) to see an example of how to use list_o_auth_client_certificates API.
    def list_o_auth_client_certificates(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_o_auth_client_certificates.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/OAuthClientCertificates'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_o_auth_client_certificates') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthClientCertificates'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search OAuth Partner Certificates
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthPartnerCertificates OAuthPartnerCertificates}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_o_auth_partner_certificates.rb.html) to see an example of how to use list_o_auth_partner_certificates API.
    def list_o_auth_partner_certificates(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_o_auth_partner_certificates.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/OAuthPartnerCertificates'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_o_auth_partner_certificates') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthPartnerCertificates'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for password policies.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::PasswordPolicies PasswordPolicies}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_password_policies.rb.html) to see an example of how to use list_password_policies API.
    def list_password_policies(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_password_policies.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/PasswordPolicies'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_password_policies') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::PasswordPolicies'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Policies
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Policies Policies}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_policies.rb.html) to see an example of how to use list_policies API.
    def list_policies(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_policies.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Policies'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_policies') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Policies'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Resource Type Schema Attributes
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ResourceTypeSchemaAttributes ResourceTypeSchemaAttributes}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_resource_type_schema_attributes.rb.html) to see an example of how to use list_resource_type_schema_attributes API.
    def list_resource_type_schema_attributes(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_resource_type_schema_attributes.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/ResourceTypeSchemaAttributes'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_resource_type_schema_attributes') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ResourceTypeSchemaAttributes'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Rules
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Rules Rules}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_rules.rb.html) to see an example of how to use list_rules API.
    def list_rules(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_rules.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Rules'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_rules') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Rules'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Schemas
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Schemas Schemas}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_schemas.rb.html) to see an example of how to use list_schemas API.
    def list_schemas(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_schemas.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end

      path = '/admin/v1/Schemas'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_schemas') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Schemas'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for security question settings.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestionSettings SecurityQuestionSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_security_question_settings.rb.html) to see an example of how to use list_security_question_settings API.
    def list_security_question_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_security_question_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/SecurityQuestionSettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_security_question_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestionSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for security questions.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestions SecurityQuestions}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_security_questions.rb.html) to see an example of how to use list_security_questions API.
    def list_security_questions(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_security_questions.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/SecurityQuestions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_security_questions') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestions'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for self-registration profiles.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SelfRegistrationProfiles SelfRegistrationProfiles}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_self_registration_profiles.rb.html) to see an example of how to use list_self_registration_profiles API.
    def list_self_registration_profiles(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_self_registration_profiles.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/SelfRegistrationProfiles'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_self_registration_profiles') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SelfRegistrationProfiles'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Settings
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Settings Settings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_settings.rb.html) to see an example of how to use list_settings API.
    def list_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Settings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Settings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for SMTP credentials.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SmtpCredentials SmtpCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_smtp_credentials.rb.html) to see an example of how to use list_smtp_credentials API.
    def list_smtp_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_smtp_credentials.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/SmtpCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_smtp_credentials') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SmtpCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search User Schema Attribute Settings
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserAttributesSettings UserAttributesSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_user_attributes_settings.rb.html) to see an example of how to use list_user_attributes_settings API.
    def list_user_attributes_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_user_attributes_settings.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/UserAttributesSettings'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_user_attributes_settings') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserAttributesSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's database (DB) credentials.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserDbCredentials UserDbCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_user_db_credentials.rb.html) to see an example of how to use list_user_db_credentials API.
    def list_user_db_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_user_db_credentials.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/UserDbCredentials'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_user_db_credentials') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserDbCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for users.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :filter OPTIONAL. The filter string that is used to request a subset of resources. The filter string MUST be a valid filter expression. See the Filtering section of the SCIM specification for more information (Section 3.4.2.2). The string should contain at least one condition that each item must match in order to be returned in the search results. Each condition specifies an attribute, an operator, and a value. Conditions within a filter can be connected by logical operators (such as AND and OR). Sets of conditions can be grouped together using parentheses.
    # @option opts [String] :sort_by OPTIONAL. A string that indicates the attribute whose value SHALL be used to order the returned responses. The sortBy attribute MUST be in standard attribute notation form. See the Attribute Notation section of the SCIM specification for more information (Section 3.10). Also, see the Sorting section of the SCIM specification for more information (Section 3.4.2.3). (default to id)
    # @option opts [String] :sort_order A string that indicates the order in which the sortBy parameter is applied. Allowed values are 'ascending' and 'descending'. See ([Sorting Section](https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.3)). OPTIONAL. (default to ASCENDING)
    # @option opts [Integer] :start_index OPTIONAL. An integer that indicates the 1-based index of the first query result. See the Pagination section of the SCIM specification for more information. (Section 3.4.2.4). The number of results pages to return. The first page is 1. Specify 2 to access the second page of results, and so on. (default to 1)
    # @option opts [Integer] :count OPTIONAL. An integer that indicates the desired maximum number of query results per page. 1000 is the largest value that you can use. See the Pagination section of the System for Cross-Domain Identity Management Protocol specification for more information. (Section 3.4.2.4). (default to 50)
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Users Users}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/list_users.rb.html) to see an example of how to use list_users API.
    def list_users(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#list_users.' if logger


      if opts[:sort_order] && !OCI::IdentityDomains::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::IdentityDomains::Models::SORT_ORDER_ENUM.'
      end


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Users'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:filter] = opts[:filter] if opts[:filter]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:startIndex] = opts[:start_index] if opts[:start_index]
      query_params[:count] = opts[:count] if opts[:count]
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#list_users') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Users'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update an account recovery setting.
    # @param [String] account_recovery_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the AccountRecoverySettings with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AccountRecoverySetting AccountRecoverySetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_account_recovery_setting.rb.html) to see an example of how to use patch_account_recovery_setting API.
    def patch_account_recovery_setting(account_recovery_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_account_recovery_setting.' if logger

      raise "Missing the required parameter 'account_recovery_setting_id' when calling patch_account_recovery_setting." if account_recovery_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'account_recovery_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(account_recovery_setting_id)

      path = '/admin/v1/AccountRecoverySettings/{accountRecoverySettingId}'.sub('{accountRecoverySettingId}', account_recovery_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_account_recovery_setting') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AccountRecoverySetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's API key.
    # @param [String] api_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the ApiKey with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApiKey ApiKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_api_key.rb.html) to see an example of how to use patch_api_key API.
    def patch_api_key(api_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_api_key.' if logger

      raise "Missing the required parameter 'api_key_id' when calling patch_api_key." if api_key_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'api_key_id' must not be blank" if OCI::Internal::Util.blank_string?(api_key_id)

      path = '/admin/v1/ApiKeys/{apiKeyId}'.sub('{apiKeyId}', api_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_api_key') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApiKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update an App
    # @param [String] app_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the App with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::App App}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_app.rb.html) to see an example of how to use patch_app API.
    def patch_app(app_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_app.' if logger

      raise "Missing the required parameter 'app_id' when calling patch_app." if app_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'app_id' must not be blank" if OCI::Internal::Util.blank_string?(app_id)

      path = '/admin/v1/Apps/{appId}'.sub('{appId}', app_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_app') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::App'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update an AppRole
    # @param [String] app_role_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the AppRole with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AppRole AppRole}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_app_role.rb.html) to see an example of how to use patch_app_role API.
    def patch_app_role(app_role_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_app_role.' if logger

      raise "Missing the required parameter 'app_role_id' when calling patch_app_role." if app_role_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'app_role_id' must not be blank" if OCI::Internal::Util.blank_string?(app_role_id)

      path = '/admin/v1/AppRoles/{appRoleId}'.sub('{appRoleId}', app_role_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_app_role') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AppRole'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update ApprovalWorkflow
    # @param [String] approval_workflow_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the ApprovalWorkflow with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflow ApprovalWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_approval_workflow.rb.html) to see an example of how to use patch_approval_workflow API.
    def patch_approval_workflow(approval_workflow_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_approval_workflow.' if logger

      raise "Missing the required parameter 'approval_workflow_id' when calling patch_approval_workflow." if approval_workflow_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'approval_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_id)

      path = '/admin/v1/ApprovalWorkflows/{approvalWorkflowId}'.sub('{approvalWorkflowId}', approval_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_approval_workflow') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update ApprovalWorkflowStep
    # @param [String] approval_workflow_step_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the ApprovalWorkflowStep with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflowStep ApprovalWorkflowStep}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_approval_workflow_step.rb.html) to see an example of how to use patch_approval_workflow_step API.
    def patch_approval_workflow_step(approval_workflow_step_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_approval_workflow_step.' if logger

      raise "Missing the required parameter 'approval_workflow_step_id' when calling patch_approval_workflow_step." if approval_workflow_step_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'approval_workflow_step_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_step_id)

      path = '/admin/v1/ApprovalWorkflowSteps/{approvalWorkflowStepId}'.sub('{approvalWorkflowStepId}', approval_workflow_step_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_approval_workflow_step') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflowStep'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's Auth token.
    # @param [String] auth_token_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the AuthToken with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthToken AuthToken}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_auth_token.rb.html) to see an example of how to use patch_auth_token API.
    def patch_auth_token(auth_token_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_auth_token.' if logger

      raise "Missing the required parameter 'auth_token_id' when calling patch_auth_token." if auth_token_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'auth_token_id' must not be blank" if OCI::Internal::Util.blank_string?(auth_token_id)

      path = '/admin/v1/AuthTokens/{authTokenId}'.sub('{authTokenId}', auth_token_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_auth_token') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthToken'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Cloud Gate
    # @param [String] cloud_gate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the CloudGate with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGate CloudGate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_cloud_gate.rb.html) to see an example of how to use patch_cloud_gate API.
    def patch_cloud_gate(cloud_gate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_cloud_gate.' if logger

      raise "Missing the required parameter 'cloud_gate_id' when calling patch_cloud_gate." if cloud_gate_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_id)

      path = '/admin/v1/CloudGates/{cloudGateId}'.sub('{cloudGateId}', cloud_gate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_cloud_gate') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Cloud Gate mapping
    # @param [String] cloud_gate_mapping_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the CloudGateMapping with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateMapping CloudGateMapping}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_cloud_gate_mapping.rb.html) to see an example of how to use patch_cloud_gate_mapping API.
    def patch_cloud_gate_mapping(cloud_gate_mapping_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_cloud_gate_mapping.' if logger

      raise "Missing the required parameter 'cloud_gate_mapping_id' when calling patch_cloud_gate_mapping." if cloud_gate_mapping_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_mapping_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_mapping_id)

      path = '/admin/v1/CloudGateMappings/{cloudGateMappingId}'.sub('{cloudGateMappingId}', cloud_gate_mapping_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_cloud_gate_mapping') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateMapping'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Cloud Gate server
    # @param [String] cloud_gate_server_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the CloudGateServer with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateServer CloudGateServer}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_cloud_gate_server.rb.html) to see an example of how to use patch_cloud_gate_server API.
    def patch_cloud_gate_server(cloud_gate_server_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_cloud_gate_server.' if logger

      raise "Missing the required parameter 'cloud_gate_server_id' when calling patch_cloud_gate_server." if cloud_gate_server_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_server_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_server_id)

      path = '/admin/v1/CloudGateServers/{cloudGateServerId}'.sub('{cloudGateServerId}', cloud_gate_server_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_cloud_gate_server') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateServer'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Condition
    # @param [String] condition_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Condition with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Condition Condition}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_condition.rb.html) to see an example of how to use patch_condition API.
    def patch_condition(condition_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_condition.' if logger

      raise "Missing the required parameter 'condition_id' when calling patch_condition." if condition_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'condition_id' must not be blank" if OCI::Internal::Util.blank_string?(condition_id)

      path = '/admin/v1/Conditions/{conditionId}'.sub('{conditionId}', condition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_condition') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Condition'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's customer secret key.
    # @param [String] customer_secret_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the CustomerSecretKey with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CustomerSecretKey CustomerSecretKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_customer_secret_key.rb.html) to see an example of how to use patch_customer_secret_key API.
    def patch_customer_secret_key(customer_secret_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_customer_secret_key.' if logger

      raise "Missing the required parameter 'customer_secret_key_id' when calling patch_customer_secret_key." if customer_secret_key_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'customer_secret_key_id' must not be blank" if OCI::Internal::Util.blank_string?(customer_secret_key_id)

      path = '/admin/v1/CustomerSecretKeys/{customerSecretKeyId}'.sub('{customerSecretKeyId}', customer_secret_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_customer_secret_key') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CustomerSecretKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Dynamic Resource Group.
    # @param [String] dynamic_resource_group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the DynamicResourceGroup with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::DynamicResourceGroup DynamicResourceGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_dynamic_resource_group.rb.html) to see an example of how to use patch_dynamic_resource_group API.
    def patch_dynamic_resource_group(dynamic_resource_group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_dynamic_resource_group.' if logger

      raise "Missing the required parameter 'dynamic_resource_group_id' when calling patch_dynamic_resource_group." if dynamic_resource_group_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'dynamic_resource_group_id' must not be blank" if OCI::Internal::Util.blank_string?(dynamic_resource_group_id)

      path = '/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}'.sub('{dynamicResourceGroupId}', dynamic_resource_group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_dynamic_resource_group') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::DynamicResourceGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Grant
    # @param [String] grant_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Grant with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Grant Grant}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_grant.rb.html) to see an example of how to use patch_grant API.
    def patch_grant(grant_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_grant.' if logger

      raise "Missing the required parameter 'grant_id' when calling patch_grant." if grant_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'grant_id' must not be blank" if OCI::Internal::Util.blank_string?(grant_id)

      path = '/admin/v1/Grants/{grantId}'.sub('{grantId}', grant_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_grant') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Grant'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a group.
    # @param [String] group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Group with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Group Group}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_group.rb.html) to see an example of how to use patch_group API.
    def patch_group(group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_group.' if logger

      raise "Missing the required parameter 'group_id' when calling patch_group." if group_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'group_id' must not be blank" if OCI::Internal::Util.blank_string?(group_id)

      path = '/admin/v1/Groups/{groupId}'.sub('{groupId}', group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_group') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Group'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update an Identity Provider
    # @param [String] identity_provider_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the IdentityProvider with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentityProvider IdentityProvider}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_identity_provider.rb.html) to see an example of how to use patch_identity_provider API.
    def patch_identity_provider(identity_provider_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_identity_provider.' if logger

      raise "Missing the required parameter 'identity_provider_id' when calling patch_identity_provider." if identity_provider_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'identity_provider_id' must not be blank" if OCI::Internal::Util.blank_string?(identity_provider_id)

      path = '/admin/v1/IdentityProviders/{identityProviderId}'.sub('{identityProviderId}', identity_provider_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_identity_provider') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentityProvider'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update an Identity setting.
    # @param [String] identity_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the IdentitySettings with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentitySetting IdentitySetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_identity_setting.rb.html) to see an example of how to use patch_identity_setting API.
    def patch_identity_setting(identity_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_identity_setting.' if logger

      raise "Missing the required parameter 'identity_setting_id' when calling patch_identity_setting." if identity_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'identity_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(identity_setting_id)

      path = '/admin/v1/IdentitySettings/{identitySettingId}'.sub('{identitySettingId}', identity_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_identity_setting') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentitySetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Setting
    # @param [String] kmsi_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the KmsiSettings with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::KmsiSetting KmsiSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_kmsi_setting.rb.html) to see an example of how to use patch_kmsi_setting API.
    def patch_kmsi_setting(kmsi_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_kmsi_setting.' if logger

      raise "Missing the required parameter 'kmsi_setting_id' when calling patch_kmsi_setting." if kmsi_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'kmsi_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(kmsi_setting_id)

      path = '/admin/v1/KmsiSettings/{kmsiSettingId}'.sub('{kmsiSettingId}', kmsi_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_kmsi_setting') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::KmsiSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's own information.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Me with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Me Me}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_me.rb.html) to see an example of how to use patch_me API.
    def patch_me(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_me.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Me'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_me') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Me'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's own API key.
    # @param [String] my_api_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MyApiKey with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyApiKey MyApiKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_api_key.rb.html) to see an example of how to use patch_my_api_key API.
    def patch_my_api_key(my_api_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_api_key.' if logger

      raise "Missing the required parameter 'my_api_key_id' when calling patch_my_api_key." if my_api_key_id.nil?
      raise "Parameter value for 'my_api_key_id' must not be blank" if OCI::Internal::Util.blank_string?(my_api_key_id)

      path = '/admin/v1/MyApiKeys/{myApiKeyId}'.sub('{myApiKeyId}', my_api_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_api_key') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyApiKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's own Auth token.
    # @param [String] my_auth_token_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MyAuthToken with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyAuthToken MyAuthToken}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_auth_token.rb.html) to see an example of how to use patch_my_auth_token API.
    def patch_my_auth_token(my_auth_token_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_auth_token.' if logger

      raise "Missing the required parameter 'my_auth_token_id' when calling patch_my_auth_token." if my_auth_token_id.nil?
      raise "Parameter value for 'my_auth_token_id' must not be blank" if OCI::Internal::Util.blank_string?(my_auth_token_id)

      path = '/admin/v1/MyAuthTokens/{myAuthTokenId}'.sub('{myAuthTokenId}', my_auth_token_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_auth_token') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyAuthToken'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's own customer secret key.
    # @param [String] my_customer_secret_key_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MyCustomerSecretKey with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyCustomerSecretKey MyCustomerSecretKey}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_customer_secret_key.rb.html) to see an example of how to use patch_my_customer_secret_key API.
    def patch_my_customer_secret_key(my_customer_secret_key_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_customer_secret_key.' if logger

      raise "Missing the required parameter 'my_customer_secret_key_id' when calling patch_my_customer_secret_key." if my_customer_secret_key_id.nil?
      raise "Parameter value for 'my_customer_secret_key_id' must not be blank" if OCI::Internal::Util.blank_string?(my_customer_secret_key_id)

      path = '/admin/v1/MyCustomerSecretKeys/{myCustomerSecretKeyId}'.sub('{myCustomerSecretKeyId}', my_customer_secret_key_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_customer_secret_key') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyCustomerSecretKey'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Device
    # @param [String] my_device_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MyDevice with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyDevice MyDevice}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_device.rb.html) to see an example of how to use patch_my_device API.
    def patch_my_device(my_device_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_device.' if logger

      raise "Missing the required parameter 'my_device_id' when calling patch_my_device." if my_device_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'my_device_id' must not be blank" if OCI::Internal::Util.blank_string?(my_device_id)

      path = '/admin/v1/MyDevices/{myDeviceId}'.sub('{myDeviceId}', my_device_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_device') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyDevice'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's own OAuth2 client credential.
    # @param [String] my_o_auth2_client_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MyOAuth2ClientCredential with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyOAuth2ClientCredential MyOAuth2ClientCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_o_auth2_client_credential.rb.html) to see an example of how to use patch_my_o_auth2_client_credential API.
    def patch_my_o_auth2_client_credential(my_o_auth2_client_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_o_auth2_client_credential.' if logger

      raise "Missing the required parameter 'my_o_auth2_client_credential_id' when calling patch_my_o_auth2_client_credential." if my_o_auth2_client_credential_id.nil?
      raise "Parameter value for 'my_o_auth2_client_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_o_auth2_client_credential_id)

      path = '/admin/v1/MyOAuth2ClientCredentials/{myOAuth2ClientCredentialId}'.sub('{myOAuth2ClientCredentialId}', my_o_auth2_client_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_o_auth2_client_credential') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyOAuth2ClientCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update MyPendingApproval
    # @param [String] my_pending_approval_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MyPendingApproval with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyPendingApproval MyPendingApproval}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_pending_approval.rb.html) to see an example of how to use patch_my_pending_approval API.
    def patch_my_pending_approval(my_pending_approval_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_pending_approval.' if logger

      raise "Missing the required parameter 'my_pending_approval_id' when calling patch_my_pending_approval." if my_pending_approval_id.nil?
      raise "Parameter value for 'my_pending_approval_id' must not be blank" if OCI::Internal::Util.blank_string?(my_pending_approval_id)

      path = '/admin/v1/MyPendingApprovals/{myPendingApprovalId}'.sub('{myPendingApprovalId}', my_pending_approval_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_pending_approval') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyPendingApproval'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update My Requests
    # @param [String] my_request_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MyRequest with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyRequest MyRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_request.rb.html) to see an example of how to use patch_my_request API.
    def patch_my_request(my_request_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_request.' if logger

      raise "Missing the required parameter 'my_request_id' when calling patch_my_request." if my_request_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'my_request_id' must not be blank" if OCI::Internal::Util.blank_string?(my_request_id)

      path = '/admin/v1/MyRequests/{myRequestId}'.sub('{myRequestId}', my_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_request') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's own SMTP credential.
    # @param [String] my_smtp_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the MySmtpCredential with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MySmtpCredential MySmtpCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_my_smtp_credential.rb.html) to see an example of how to use patch_my_smtp_credential API.
    def patch_my_smtp_credential(my_smtp_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_my_smtp_credential.' if logger

      raise "Missing the required parameter 'my_smtp_credential_id' when calling patch_my_smtp_credential." if my_smtp_credential_id.nil?
      raise "Parameter value for 'my_smtp_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(my_smtp_credential_id)

      path = '/admin/v1/MySmtpCredentials/{mySmtpCredentialId}'.sub('{mySmtpCredentialId}', my_smtp_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_my_smtp_credential') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MySmtpCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a NetworkPerimeter
    # @param [String] network_perimeter_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the NetworkPerimeter with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NetworkPerimeter NetworkPerimeter}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_network_perimeter.rb.html) to see an example of how to use patch_network_perimeter API.
    def patch_network_perimeter(network_perimeter_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_network_perimeter.' if logger

      raise "Missing the required parameter 'network_perimeter_id' when calling patch_network_perimeter." if network_perimeter_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'network_perimeter_id' must not be blank" if OCI::Internal::Util.blank_string?(network_perimeter_id)

      path = '/admin/v1/NetworkPerimeters/{networkPerimeterId}'.sub('{networkPerimeterId}', network_perimeter_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_network_perimeter') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NetworkPerimeter'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's OAuth2 client credentials.
    # @param [String] o_auth2_client_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the OAuth2ClientCredential with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuth2ClientCredential OAuth2ClientCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_o_auth2_client_credential.rb.html) to see an example of how to use patch_o_auth2_client_credential API.
    def patch_o_auth2_client_credential(o_auth2_client_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_o_auth2_client_credential.' if logger

      raise "Missing the required parameter 'o_auth2_client_credential_id' when calling patch_o_auth2_client_credential." if o_auth2_client_credential_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'o_auth2_client_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(o_auth2_client_credential_id)

      path = '/admin/v1/OAuth2ClientCredentials/{oAuth2ClientCredentialId}'.sub('{oAuth2ClientCredentialId}', o_auth2_client_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_o_auth2_client_credential') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuth2ClientCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a password policy.
    # @param [String] password_policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the PasswordPolicy with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::PasswordPolicy PasswordPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_password_policy.rb.html) to see an example of how to use patch_password_policy API.
    def patch_password_policy(password_policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_password_policy.' if logger

      raise "Missing the required parameter 'password_policy_id' when calling patch_password_policy." if password_policy_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'password_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(password_policy_id)

      path = '/admin/v1/PasswordPolicies/{passwordPolicyId}'.sub('{passwordPolicyId}', password_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_password_policy') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::PasswordPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Policy
    # @param [String] policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Policy with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Policy Policy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_policy.rb.html) to see an example of how to use patch_policy API.
    def patch_policy(policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_policy.' if logger

      raise "Missing the required parameter 'policy_id' when calling patch_policy." if policy_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'policy_id' must not be blank" if OCI::Internal::Util.blank_string?(policy_id)

      path = '/admin/v1/Policies/{policyId}'.sub('{policyId}', policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_policy') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Policy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Rule
    # @param [String] rule_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Rule with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Rule Rule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_rule.rb.html) to see an example of how to use patch_rule API.
    def patch_rule(rule_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_rule.' if logger

      raise "Missing the required parameter 'rule_id' when calling patch_rule." if rule_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'rule_id' must not be blank" if OCI::Internal::Util.blank_string?(rule_id)

      path = '/admin/v1/Rules/{ruleId}'.sub('{ruleId}', rule_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_rule') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Rule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Schema Def
    # @param [String] schema_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Schema with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Schema Schema}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_schema.rb.html) to see an example of how to use patch_schema API.
    def patch_schema(schema_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_schema.' if logger

      raise "Missing the required parameter 'schema_id' when calling patch_schema." if schema_id.nil?
      raise "Parameter value for 'schema_id' must not be blank" if OCI::Internal::Util.blank_string?(schema_id)

      path = '/admin/v1/Schemas/{schemaId}'.sub('{schemaId}', schema_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_schema') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Schema'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a security question.
    # @param [String] security_question_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the SecurityQuestion with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestion SecurityQuestion}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_security_question.rb.html) to see an example of how to use patch_security_question API.
    def patch_security_question(security_question_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_security_question.' if logger

      raise "Missing the required parameter 'security_question_id' when calling patch_security_question." if security_question_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'security_question_id' must not be blank" if OCI::Internal::Util.blank_string?(security_question_id)

      path = '/admin/v1/SecurityQuestions/{securityQuestionId}'.sub('{securityQuestionId}', security_question_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_security_question') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestion'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a security question setting.
    # @param [String] security_question_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the SecurityQuestionSettings with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestionSetting SecurityQuestionSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_security_question_setting.rb.html) to see an example of how to use patch_security_question_setting API.
    def patch_security_question_setting(security_question_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_security_question_setting.' if logger

      raise "Missing the required parameter 'security_question_setting_id' when calling patch_security_question_setting." if security_question_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'security_question_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(security_question_setting_id)

      path = '/admin/v1/SecurityQuestionSettings/{securityQuestionSettingId}'.sub('{securityQuestionSettingId}', security_question_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_security_question_setting') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestionSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a self-registration profile.
    # @param [String] self_registration_profile_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the SelfRegistrationProfile with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SelfRegistrationProfile SelfRegistrationProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_self_registration_profile.rb.html) to see an example of how to use patch_self_registration_profile API.
    def patch_self_registration_profile(self_registration_profile_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_self_registration_profile.' if logger

      raise "Missing the required parameter 'self_registration_profile_id' when calling patch_self_registration_profile." if self_registration_profile_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'self_registration_profile_id' must not be blank" if OCI::Internal::Util.blank_string?(self_registration_profile_id)

      path = '/admin/v1/SelfRegistrationProfiles/{selfRegistrationProfileId}'.sub('{selfRegistrationProfileId}', self_registration_profile_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_self_registration_profile') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SelfRegistrationProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Setting
    # @param [String] setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the Settings with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Setting Setting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_setting.rb.html) to see an example of how to use patch_setting API.
    def patch_setting(setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_setting.' if logger

      raise "Missing the required parameter 'setting_id' when calling patch_setting." if setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'setting_id' must not be blank" if OCI::Internal::Util.blank_string?(setting_id)

      path = '/admin/v1/Settings/{settingId}'.sub('{settingId}', setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_setting') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Setting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's SMTP credentials.
    # @param [String] smtp_credential_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the SmtpCredential with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SmtpCredential SmtpCredential}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_smtp_credential.rb.html) to see an example of how to use patch_smtp_credential API.
    def patch_smtp_credential(smtp_credential_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_smtp_credential.' if logger

      raise "Missing the required parameter 'smtp_credential_id' when calling patch_smtp_credential." if smtp_credential_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'smtp_credential_id' must not be blank" if OCI::Internal::Util.blank_string?(smtp_credential_id)

      path = '/admin/v1/SmtpCredentials/{smtpCredentialId}'.sub('{smtpCredentialId}', smtp_credential_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_smtp_credential') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SmtpCredential'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user.
    # @param [String] user_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the User with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::User User}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_user.rb.html) to see an example of how to use patch_user API.
    def patch_user(user_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_user.' if logger

      raise "Missing the required parameter 'user_id' when calling patch_user." if user_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'user_id' must not be blank" if OCI::Internal::Util.blank_string?(user_id)

      path = '/admin/v1/Users/{userId}'.sub('{userId}', user_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_user') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::User'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update User Schema Attribute Settings
    # @param [String] user_attributes_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PatchOp] :patch_op Update the UserAttributesSettings with SCIM Patch schema.
    #
    #   Before you specify an attribute-value in a request to update a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserAttributesSetting UserAttributesSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/patch_user_attributes_setting.rb.html) to see an example of how to use patch_user_attributes_setting API.
    def patch_user_attributes_setting(user_attributes_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#patch_user_attributes_setting.' if logger

      raise "Missing the required parameter 'user_attributes_setting_id' when calling patch_user_attributes_setting." if user_attributes_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'user_attributes_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(user_attributes_setting_id)

      path = '/admin/v1/UserAttributesSettings/{userAttributesSettingId}'.sub('{userAttributesSettingId}', user_attributes_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:patch_op])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#patch_user_attributes_setting') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserAttributesSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace an account recovery setting.
    # @param [String] account_recovery_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::AccountRecoverySetting] :account_recovery_setting Replace the current instance of AccountRecoverySettings with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AccountRecoverySetting AccountRecoverySetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_account_recovery_setting.rb.html) to see an example of how to use put_account_recovery_setting API.
    def put_account_recovery_setting(account_recovery_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_account_recovery_setting.' if logger

      raise "Missing the required parameter 'account_recovery_setting_id' when calling put_account_recovery_setting." if account_recovery_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'account_recovery_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(account_recovery_setting_id)

      path = '/admin/v1/AccountRecoverySettings/{accountRecoverySettingId}'.sub('{accountRecoverySettingId}', account_recovery_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:account_recovery_setting])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_account_recovery_setting') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AccountRecoverySetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace an App
    # @param [String] app_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::App] :app Replace the current instance of App with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::App App}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_app.rb.html) to see an example of how to use put_app API.
    def put_app(app_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_app.' if logger

      raise "Missing the required parameter 'app_id' when calling put_app." if app_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'app_id' must not be blank" if OCI::Internal::Util.blank_string?(app_id)

      path = '/admin/v1/Apps/{appId}'.sub('{appId}', app_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:app])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_app') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::App'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Activate/Deactivate an App
    # @param [String] app_status_changer_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::AppStatusChanger] :app_status_changer Replace the current instance of AppStatusChanger with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AppStatusChanger AppStatusChanger}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_app_status_changer.rb.html) to see an example of how to use put_app_status_changer API.
    def put_app_status_changer(app_status_changer_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_app_status_changer.' if logger

      raise "Missing the required parameter 'app_status_changer_id' when calling put_app_status_changer." if app_status_changer_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'app_status_changer_id' must not be blank" if OCI::Internal::Util.blank_string?(app_status_changer_id)

      path = '/admin/v1/AppStatusChanger/{appStatusChangerId}'.sub('{appStatusChangerId}', app_status_changer_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:app_status_changer])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_app_status_changer') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AppStatusChanger'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace ApprovalWorkflow
    # @param [String] approval_workflow_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::ApprovalWorkflow] :approval_workflow Replace the current instance of ApprovalWorkflow with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApprovalWorkflow ApprovalWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_approval_workflow.rb.html) to see an example of how to use put_approval_workflow API.
    def put_approval_workflow(approval_workflow_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_approval_workflow.' if logger

      raise "Missing the required parameter 'approval_workflow_id' when calling put_approval_workflow." if approval_workflow_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'approval_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(approval_workflow_id)

      path = '/admin/v1/ApprovalWorkflows/{approvalWorkflowId}'.sub('{approvalWorkflowId}', approval_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:approval_workflow])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_approval_workflow') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApprovalWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace Authentication Factor Settings
    # @param [String] authentication_factor_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::AuthenticationFactorSetting] :authentication_factor_setting Replace the current instance of AuthenticationFactorSettings with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthenticationFactorSetting AuthenticationFactorSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_authentication_factor_setting.rb.html) to see an example of how to use put_authentication_factor_setting API.
    def put_authentication_factor_setting(authentication_factor_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_authentication_factor_setting.' if logger

      raise "Missing the required parameter 'authentication_factor_setting_id' when calling put_authentication_factor_setting." if authentication_factor_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'authentication_factor_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(authentication_factor_setting_id)

      path = '/admin/v1/AuthenticationFactorSettings/{authenticationFactorSettingId}'.sub('{authenticationFactorSettingId}', authentication_factor_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:authentication_factor_setting])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_authentication_factor_setting') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthenticationFactorSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Cloud Gate
    # @param [String] cloud_gate_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::CloudGate] :cloud_gate Replace the current instance of CloudGate with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGate CloudGate}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_cloud_gate.rb.html) to see an example of how to use put_cloud_gate API.
    def put_cloud_gate(cloud_gate_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_cloud_gate.' if logger

      raise "Missing the required parameter 'cloud_gate_id' when calling put_cloud_gate." if cloud_gate_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_id)

      path = '/admin/v1/CloudGates/{cloudGateId}'.sub('{cloudGateId}', cloud_gate_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_cloud_gate') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGate'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Cloud Gate mapping
    # @param [String] cloud_gate_mapping_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::CloudGateMapping] :cloud_gate_mapping Replace the current instance of CloudGateMapping with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateMapping CloudGateMapping}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_cloud_gate_mapping.rb.html) to see an example of how to use put_cloud_gate_mapping API.
    def put_cloud_gate_mapping(cloud_gate_mapping_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_cloud_gate_mapping.' if logger

      raise "Missing the required parameter 'cloud_gate_mapping_id' when calling put_cloud_gate_mapping." if cloud_gate_mapping_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_mapping_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_mapping_id)

      path = '/admin/v1/CloudGateMappings/{cloudGateMappingId}'.sub('{cloudGateMappingId}', cloud_gate_mapping_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate_mapping])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_cloud_gate_mapping') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateMapping'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Cloud Gate server
    # @param [String] cloud_gate_server_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::CloudGateServer] :cloud_gate_server Replace the current instance of CloudGateServer with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateServer CloudGateServer}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_cloud_gate_server.rb.html) to see an example of how to use put_cloud_gate_server API.
    def put_cloud_gate_server(cloud_gate_server_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_cloud_gate_server.' if logger

      raise "Missing the required parameter 'cloud_gate_server_id' when calling put_cloud_gate_server." if cloud_gate_server_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'cloud_gate_server_id' must not be blank" if OCI::Internal::Util.blank_string?(cloud_gate_server_id)

      path = '/admin/v1/CloudGateServers/{cloudGateServerId}'.sub('{cloudGateServerId}', cloud_gate_server_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate_server])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_cloud_gate_server') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateServer'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Condition
    # @param [String] condition_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Condition] :condition Replace the current instance of Condition with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Condition Condition}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_condition.rb.html) to see an example of how to use put_condition API.
    def put_condition(condition_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_condition.' if logger

      raise "Missing the required parameter 'condition_id' when calling put_condition." if condition_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'condition_id' must not be blank" if OCI::Internal::Util.blank_string?(condition_id)

      path = '/admin/v1/Conditions/{conditionId}'.sub('{conditionId}', condition_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:condition])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_condition') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Condition'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Dynamic Resource Group.
    # @param [String] dynamic_resource_group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::DynamicResourceGroup] :dynamic_resource_group Replace the current instance of DynamicResourceGroup with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::DynamicResourceGroup DynamicResourceGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_dynamic_resource_group.rb.html) to see an example of how to use put_dynamic_resource_group API.
    def put_dynamic_resource_group(dynamic_resource_group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_dynamic_resource_group.' if logger

      raise "Missing the required parameter 'dynamic_resource_group_id' when calling put_dynamic_resource_group." if dynamic_resource_group_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'dynamic_resource_group_id' must not be blank" if OCI::Internal::Util.blank_string?(dynamic_resource_group_id)

      path = '/admin/v1/DynamicResourceGroups/{dynamicResourceGroupId}'.sub('{dynamicResourceGroupId}', dynamic_resource_group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:dynamic_resource_group])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_dynamic_resource_group') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::DynamicResourceGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a group.
    # @param [String] group_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Group] :group Replace the current instance of Group with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Group Group}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_group.rb.html) to see an example of how to use put_group API.
    def put_group(group_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_group.' if logger

      raise "Missing the required parameter 'group_id' when calling put_group." if group_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'group_id' must not be blank" if OCI::Internal::Util.blank_string?(group_id)

      path = '/admin/v1/Groups/{groupId}'.sub('{groupId}', group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:group])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_group') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Group'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace an Identity Provider
    # @param [String] identity_provider_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::IdentityProvider] :identity_provider Replace the current instance of IdentityProvider with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentityProvider IdentityProvider}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_identity_provider.rb.html) to see an example of how to use put_identity_provider API.
    def put_identity_provider(identity_provider_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_identity_provider.' if logger

      raise "Missing the required parameter 'identity_provider_id' when calling put_identity_provider." if identity_provider_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'identity_provider_id' must not be blank" if OCI::Internal::Util.blank_string?(identity_provider_id)

      path = '/admin/v1/IdentityProviders/{identityProviderId}'.sub('{identityProviderId}', identity_provider_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:identity_provider])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_identity_provider') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentityProvider'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace an Identity setting.
    # @param [String] identity_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::IdentitySetting] :identity_setting Replace the current instance of IdentitySettings with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentitySetting IdentitySetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_identity_setting.rb.html) to see an example of how to use put_identity_setting API.
    def put_identity_setting(identity_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_identity_setting.' if logger

      raise "Missing the required parameter 'identity_setting_id' when calling put_identity_setting." if identity_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'identity_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(identity_setting_id)

      path = '/admin/v1/IdentitySettings/{identitySettingId}'.sub('{identitySettingId}', identity_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:identity_setting])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_identity_setting') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentitySetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace KmsiSettings
    # @param [String] kmsi_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::KmsiSetting] :kmsi_setting Replace the current instance of KmsiSettings with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::KmsiSetting KmsiSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_kmsi_setting.rb.html) to see an example of how to use put_kmsi_setting API.
    def put_kmsi_setting(kmsi_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_kmsi_setting.' if logger

      raise "Missing the required parameter 'kmsi_setting_id' when calling put_kmsi_setting." if kmsi_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'kmsi_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(kmsi_setting_id)

      path = '/admin/v1/KmsiSettings/{kmsiSettingId}'.sub('{kmsiSettingId}', kmsi_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:kmsi_setting])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_kmsi_setting') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::KmsiSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a user's own information.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Me] :me Replace the current instance of Me with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Me Me}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_me.rb.html) to see an example of how to use put_me API.
    def put_me(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_me.' if logger



      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end

      path = '/admin/v1/Me'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:me])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_me') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Me'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a user's own password.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MePasswordChanger] :me_password_changer Replace the current instance of MePasswordChanger with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MePasswordChanger MePasswordChanger}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_me_password_changer.rb.html) to see an example of how to use put_me_password_changer API.
    def put_me_password_changer(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_me_password_changer.' if logger


      path = '/admin/v1/MePasswordChanger'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:me_password_changer])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_me_password_changer') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MePasswordChanger'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a NetworkPerimeter
    # @param [String] network_perimeter_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::NetworkPerimeter] :network_perimeter Replace the current instance of NetworkPerimeter with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NetworkPerimeter NetworkPerimeter}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_network_perimeter.rb.html) to see an example of how to use put_network_perimeter API.
    def put_network_perimeter(network_perimeter_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_network_perimeter.' if logger

      raise "Missing the required parameter 'network_perimeter_id' when calling put_network_perimeter." if network_perimeter_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'network_perimeter_id' must not be blank" if OCI::Internal::Util.blank_string?(network_perimeter_id)

      path = '/admin/v1/NetworkPerimeters/{networkPerimeterId}'.sub('{networkPerimeterId}', network_perimeter_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:network_perimeter])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_network_perimeter') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NetworkPerimeter'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace Notification Settings
    # @param [String] notification_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::NotificationSetting] :notification_setting Replace the current instance of NotificationSettings with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NotificationSetting NotificationSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_notification_setting.rb.html) to see an example of how to use put_notification_setting API.
    def put_notification_setting(notification_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_notification_setting.' if logger

      raise "Missing the required parameter 'notification_setting_id' when calling put_notification_setting." if notification_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'notification_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(notification_setting_id)

      path = '/admin/v1/NotificationSettings/{notificationSettingId}'.sub('{notificationSettingId}', notification_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:notification_setting])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_notification_setting') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NotificationSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a password policy.
    # @param [String] password_policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::PasswordPolicy] :password_policy Replace the current instance of PasswordPolicy with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::PasswordPolicy PasswordPolicy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_password_policy.rb.html) to see an example of how to use put_password_policy API.
    def put_password_policy(password_policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_password_policy.' if logger

      raise "Missing the required parameter 'password_policy_id' when calling put_password_policy." if password_policy_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'password_policy_id' must not be blank" if OCI::Internal::Util.blank_string?(password_policy_id)

      path = '/admin/v1/PasswordPolicies/{passwordPolicyId}'.sub('{passwordPolicyId}', password_policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:password_policy])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_password_policy') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::PasswordPolicy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Policy
    # @param [String] policy_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Policy] :policy Replace the current instance of Policy with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Policy Policy}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_policy.rb.html) to see an example of how to use put_policy API.
    def put_policy(policy_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_policy.' if logger

      raise "Missing the required parameter 'policy_id' when calling put_policy." if policy_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'policy_id' must not be blank" if OCI::Internal::Util.blank_string?(policy_id)

      path = '/admin/v1/Policies/{policyId}'.sub('{policyId}', policy_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:policy])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_policy') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Policy'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Rule
    # @param [String] rule_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Rule] :rule Replace the current instance of Rule with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Rule Rule}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_rule.rb.html) to see an example of how to use put_rule API.
    def put_rule(rule_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_rule.' if logger

      raise "Missing the required parameter 'rule_id' when calling put_rule." if rule_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'rule_id' must not be blank" if OCI::Internal::Util.blank_string?(rule_id)

      path = '/admin/v1/Rules/{ruleId}'.sub('{ruleId}', rule_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:rule])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_rule') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Rule'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a Schema Def
    # @param [String] schema_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::Schema] :schema Replace the current instance of Schema with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Schema Schema}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_schema.rb.html) to see an example of how to use put_schema API.
    def put_schema(schema_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_schema.' if logger

      raise "Missing the required parameter 'schema_id' when calling put_schema." if schema_id.nil?
      raise "Parameter value for 'schema_id' must not be blank" if OCI::Internal::Util.blank_string?(schema_id)

      path = '/admin/v1/Schemas/{schemaId}'.sub('{schemaId}', schema_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:schema])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_schema') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Schema'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a security question setting.
    # @param [String] security_question_setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::SecurityQuestionSetting] :security_question_setting Replace the current instance of SecurityQuestionSettings with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestionSetting SecurityQuestionSetting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_security_question_setting.rb.html) to see an example of how to use put_security_question_setting API.
    def put_security_question_setting(security_question_setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_security_question_setting.' if logger

      raise "Missing the required parameter 'security_question_setting_id' when calling put_security_question_setting." if security_question_setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'security_question_setting_id' must not be blank" if OCI::Internal::Util.blank_string?(security_question_setting_id)

      path = '/admin/v1/SecurityQuestionSettings/{securityQuestionSettingId}'.sub('{securityQuestionSettingId}', security_question_setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:security_question_setting])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_security_question_setting') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestionSetting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a self-registration profile.
    # @param [String] self_registration_profile_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::SelfRegistrationProfile] :self_registration_profile Replace the current instance of SelfRegistrationProfile with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SelfRegistrationProfile SelfRegistrationProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_self_registration_profile.rb.html) to see an example of how to use put_self_registration_profile API.
    def put_self_registration_profile(self_registration_profile_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_self_registration_profile.' if logger

      raise "Missing the required parameter 'self_registration_profile_id' when calling put_self_registration_profile." if self_registration_profile_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'self_registration_profile_id' must not be blank" if OCI::Internal::Util.blank_string?(self_registration_profile_id)

      path = '/admin/v1/SelfRegistrationProfiles/{selfRegistrationProfileId}'.sub('{selfRegistrationProfileId}', self_registration_profile_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:self_registration_profile])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_self_registration_profile') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SelfRegistrationProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace Settings
    # @param [String] setting_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::Setting] :setting Replace the current instance of Settings with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Setting Setting}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_setting.rb.html) to see an example of how to use put_setting API.
    def put_setting(setting_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_setting.' if logger

      raise "Missing the required parameter 'setting_id' when calling put_setting." if setting_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'setting_id' must not be blank" if OCI::Internal::Util.blank_string?(setting_id)

      path = '/admin/v1/Settings/{settingId}'.sub('{settingId}', setting_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:setting])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_setting') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Setting'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Replace a user.
    # @param [String] user_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::User] :user Replace the current instance of User with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::User User}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_user.rb.html) to see an example of how to use put_user API.
    def put_user(user_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_user.' if logger

      raise "Missing the required parameter 'user_id' when calling put_user." if user_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'user_id' must not be blank" if OCI::Internal::Util.blank_string?(user_id)

      path = '/admin/v1/Users/{userId}'.sub('{userId}', user_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_user') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::User'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Change a user's capabilities.
    # @param [String] user_capabilities_changer_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::UserCapabilitiesChanger] :user_capabilities_changer Replace the current instance of UserCapabilitiesChanger with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserCapabilitiesChanger UserCapabilitiesChanger}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_user_capabilities_changer.rb.html) to see an example of how to use put_user_capabilities_changer API.
    def put_user_capabilities_changer(user_capabilities_changer_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_user_capabilities_changer.' if logger

      raise "Missing the required parameter 'user_capabilities_changer_id' when calling put_user_capabilities_changer." if user_capabilities_changer_id.nil?
      raise "Parameter value for 'user_capabilities_changer_id' must not be blank" if OCI::Internal::Util.blank_string?(user_capabilities_changer_id)

      path = '/admin/v1/UserCapabilitiesChanger/{userCapabilitiesChangerId}'.sub('{userCapabilitiesChangerId}', user_capabilities_changer_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_capabilities_changer])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_user_capabilities_changer') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserCapabilitiesChanger'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Change a user's password to a known value.
    # @param [String] user_password_changer_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::UserPasswordChanger] :user_password_changer Replace the current instance of UserPasswordChanger with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserPasswordChanger UserPasswordChanger}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_user_password_changer.rb.html) to see an example of how to use put_user_password_changer API.
    def put_user_password_changer(user_password_changer_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_user_password_changer.' if logger

      raise "Missing the required parameter 'user_password_changer_id' when calling put_user_password_changer." if user_password_changer_id.nil?
      raise "Parameter value for 'user_password_changer_id' must not be blank" if OCI::Internal::Util.blank_string?(user_password_changer_id)

      path = '/admin/v1/UserPasswordChanger/{userPasswordChangerId}'.sub('{userPasswordChangerId}', user_password_changer_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_password_changer])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_user_password_changer') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserPasswordChanger'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Reset a user's password to a randomly-generated value.
    # @param [String] user_password_resetter_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::UserPasswordResetter] :user_password_resetter Replace the current instance of UserPasswordResetter with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserPasswordResetter UserPasswordResetter}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_user_password_resetter.rb.html) to see an example of how to use put_user_password_resetter API.
    def put_user_password_resetter(user_password_resetter_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_user_password_resetter.' if logger

      raise "Missing the required parameter 'user_password_resetter_id' when calling put_user_password_resetter." if user_password_resetter_id.nil?
      raise "Parameter value for 'user_password_resetter_id' must not be blank" if OCI::Internal::Util.blank_string?(user_password_resetter_id)

      path = '/admin/v1/UserPasswordResetter/{userPasswordResetterId}'.sub('{userPasswordResetterId}', user_password_resetter_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_password_resetter])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_user_password_resetter') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserPasswordResetter'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Change a user's status.
    # @param [String] user_status_changer_id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [String] :attributes A comma-delimited string that specifies the names of resource attributes that should be returned in the response. By default, a response that contains resource attributes contains only attributes that are defined in the schema for that resource type as returned=always or returned=default. An attribute that is defined as returned=request is returned in a response only if the request specifies its name in the value of this query parameter. If a request specifies this query parameter, the response contains the attributes that this query parameter specifies, as well as any attribute that is defined as returned=always.
    # @option opts [Array<String>] :attribute_sets A multi-valued list of strings indicating the return type of attribute definition. The specified set of attributes can be fetched by the return type of the attribute. One or more values can be given together to fetch more than one group of attributes. If 'attributes' query parameter is also available, union of the two is fetched. Valid values - all, always, never, request, default. Values are case-insensitive.
    #   Allowed values are: all, always, never, request, default
    # @option opts [OCI::IdentityDomains::Models::UserStatusChanger] :user_status_changer Replace the current instance of UserStatusChanger with provided payload.
    #
    #   Before you specify an attribute-value in a request to replace a resource, please check the **'mutability'** property of that attribute in the resource-type schema below. Clicking on an attribute-row will expand that row to show the **SCIM++ Properties** of that attribute.
    #   - Your request to create, update or replace a resource may specify in its payload a value for any attribute that is defined as *mutability:readWrite* or *mutability:writeOnly* or *mutability:immutable*:
    #     - The SCIM APIs to create a resource will ignore silently any value that you specify for an attribute that is defined as *mutability:readOnly*.
    #     - The SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify a value for an attribute that is defined as *mutability:readOnly*.
    #     - Similarly, the SCIM APIs to update or replace a resource will fail with an error 400 Bad Request if you specify any value for an attribute that is defined as *mutability:immutable* and that already has a value in the specified resource.
    #
    #   Also, before you use the query-parameter attributes to request specific attributes, please check the **'returned'** property of that attribute in the resource-type schema below:
    #   - Your request to read a resource (or to search a resource-type) can specify as the value of attributes any attributes that are defined as *returned:default* or *returned:request* or *returned:always*:
    #     - If you request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the set of attributes that you requested, as well as any attribute that is defined as *returned:always*.
    #     - If you do not request a specific set of attributes, the SCIM APIs to read a resource (or to search a resource-type) will return in each resource the the set of attributes defined as *returned:default*, as well as any attribute that is defined as *returned:always*.
    #     - The SCIM APIs to read a resource (or to search a resource-type) will ignore silently any request to return an attribute that is defined as *returned:never*.
    #
    # @option opts [String] :if_match Used to make the request conditional on an ETag
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserStatusChanger UserStatusChanger}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/put_user_status_changer.rb.html) to see an example of how to use put_user_status_changer API.
    def put_user_status_changer(user_status_changer_id, opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#put_user_status_changer.' if logger

      raise "Missing the required parameter 'user_status_changer_id' when calling put_user_status_changer." if user_status_changer_id.nil?


      attribute_sets_allowable_values = %w[all always never request default]
      if opts[:attribute_sets] && !opts[:attribute_sets].empty?
        opts[:attribute_sets].each do |val_to_check|
          unless attribute_sets_allowable_values.include?(val_to_check)
            raise 'Invalid value for "attribute_sets", must be one of all, always, never, request, default.'
          end
        end
      end
      raise "Parameter value for 'user_status_changer_id' must not be blank" if OCI::Internal::Util.blank_string?(user_status_changer_id)

      path = '/admin/v1/UserStatusChanger/{userStatusChangerId}'.sub('{userStatusChangerId}', user_status_changer_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:attributes] = opts[:attributes] if opts[:attributes]
      query_params[:attributeSets] = OCI::ApiClient.build_collection_params(opts[:attribute_sets], :multi) if opts[:attribute_sets] && !opts[:attribute_sets].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_status_changer])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#put_user_status_changer') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserStatusChanger'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Account Mgmt Info Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::AccountMgmtInfoSearchRequest] :account_mgmt_info_search_request Parameters for searching AccountMgmtInfos
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AccountMgmtInfos AccountMgmtInfos}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_account_mgmt_infos.rb.html) to see an example of how to use search_account_mgmt_infos API.
    def search_account_mgmt_infos(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_account_mgmt_infos.' if logger


      path = '/admin/v1/AccountMgmtInfos/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:account_mgmt_info_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_account_mgmt_infos') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AccountMgmtInfos'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for API keys using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::ApiKeySearchRequest] :api_key_search_request Parameters for searching ApiKeys
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ApiKeys ApiKeys}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_api_keys.rb.html) to see an example of how to use search_api_keys API.
    def search_api_keys(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_api_keys.' if logger


      path = '/admin/v1/ApiKeys/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:api_key_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_api_keys') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ApiKeys'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search AppRoles Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::AppRoleSearchRequest] :app_role_search_request Parameters for searching AppRoles
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AppRoles AppRoles}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_app_roles.rb.html) to see an example of how to use search_app_roles API.
    def search_app_roles(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_app_roles.' if logger


      path = '/admin/v1/AppRoles/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:app_role_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_app_roles') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AppRoles'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Apps Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::AppSearchRequest] :app_search_request Parameters for searching Apps
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Apps Apps}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_apps.rb.html) to see an example of how to use search_apps API.
    def search_apps(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_apps.' if logger


      path = '/admin/v1/Apps/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:app_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_apps') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Apps'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for Auth tokens using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::AuthTokenSearchRequest] :auth_token_search_request Parameters for searching AuthTokens
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthTokens AuthTokens}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_auth_tokens.rb.html) to see an example of how to use search_auth_tokens API.
    def search_auth_tokens(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_auth_tokens.' if logger


      path = '/admin/v1/AuthTokens/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:auth_token_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_auth_tokens') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthTokens'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Authentication Factor Settings Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::AuthenticationFactorSettingsSearchRequest] :authentication_factor_settings_search_request Parameters for searching AuthenticationFactorSettings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::AuthenticationFactorSettings AuthenticationFactorSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_authentication_factor_settings.rb.html) to see an example of how to use search_authentication_factor_settings API.
    def search_authentication_factor_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_authentication_factor_settings.' if logger


      path = '/admin/v1/AuthenticationFactorSettings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:authentication_factor_settings_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_authentication_factor_settings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::AuthenticationFactorSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Cloud Gate mappings Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::CloudGateMappingSearchRequest] :cloud_gate_mapping_search_request Parameters for searching CloudGateMappings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateMappings CloudGateMappings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_cloud_gate_mappings.rb.html) to see an example of how to use search_cloud_gate_mappings API.
    def search_cloud_gate_mappings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_cloud_gate_mappings.' if logger


      path = '/admin/v1/CloudGateMappings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate_mapping_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_cloud_gate_mappings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateMappings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Cloud Gate servers Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::CloudGateServerSearchRequest] :cloud_gate_server_search_request Parameters for searching CloudGateServers
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGateServers CloudGateServers}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_cloud_gate_servers.rb.html) to see an example of how to use search_cloud_gate_servers API.
    def search_cloud_gate_servers(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_cloud_gate_servers.' if logger


      path = '/admin/v1/CloudGateServers/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate_server_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_cloud_gate_servers') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGateServers'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Cloud Gates Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::CloudGateSearchRequest] :cloud_gate_search_request Parameters for searching CloudGates
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CloudGates CloudGates}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_cloud_gates.rb.html) to see an example of how to use search_cloud_gates API.
    def search_cloud_gates(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_cloud_gates.' if logger


      path = '/admin/v1/CloudGates/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:cloud_gate_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_cloud_gates') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CloudGates'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Conditions Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::ConditionSearchRequest] :condition_search_request Parameters for searching Conditions
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Conditions Conditions}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_conditions.rb.html) to see an example of how to use search_conditions API.
    def search_conditions(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_conditions.' if logger


      path = '/admin/v1/Conditions/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:condition_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_conditions') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Conditions'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for customer secret keys using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::CustomerSecretKeySearchRequest] :customer_secret_key_search_request Parameters for searching CustomerSecretKeys
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::CustomerSecretKeys CustomerSecretKeys}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_customer_secret_keys.rb.html) to see an example of how to use search_customer_secret_keys API.
    def search_customer_secret_keys(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_customer_secret_keys.' if logger


      path = '/admin/v1/CustomerSecretKeys/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:customer_secret_key_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_customer_secret_keys') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::CustomerSecretKeys'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for Dynamic Resource Groups using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::DynamicResourceGroupSearchRequest] :dynamic_resource_group_search_request Parameters for searching DynamicResourceGroups
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::DynamicResourceGroups DynamicResourceGroups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_dynamic_resource_groups.rb.html) to see an example of how to use search_dynamic_resource_groups API.
    def search_dynamic_resource_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_dynamic_resource_groups.' if logger


      path = '/admin/v1/DynamicResourceGroups/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:dynamic_resource_group_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_dynamic_resource_groups') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::DynamicResourceGroups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Grants Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::GrantSearchRequest] :grant_search_request Parameters for searching Grants
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Grants Grants}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_grants.rb.html) to see an example of how to use search_grants API.
    def search_grants(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_grants.' if logger


      path = '/admin/v1/Grants/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:grant_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_grants') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Grants'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for groups using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::GroupSearchRequest] :group_search_request Parameters for searching Groups
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Groups Groups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_groups.rb.html) to see an example of how to use search_groups API.
    def search_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_groups.' if logger


      path = '/admin/v1/Groups/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:group_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_groups') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Groups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Identity Providers Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::IdentityProviderSearchRequest] :identity_provider_search_request Parameters for searching IdentityProviders
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentityProviders IdentityProviders}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_identity_providers.rb.html) to see an example of how to use search_identity_providers API.
    def search_identity_providers(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_identity_providers.' if logger


      path = '/admin/v1/IdentityProviders/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:identity_provider_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_identity_providers') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentityProviders'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for Identity settings using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::IdentitySettingsSearchRequest] :identity_settings_search_request Parameters for searching IdentitySettings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::IdentitySettings IdentitySettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_identity_settings.rb.html) to see an example of how to use search_identity_settings API.
    def search_identity_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_identity_settings.' if logger


      path = '/admin/v1/IdentitySettings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:identity_settings_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_identity_settings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::IdentitySettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search KmsiSettings Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::KmsiSettingsSearchRequest] :kmsi_settings_search_request Parameters for searching KmsiSettings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::KmsiSettings KmsiSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_kmsi_settings.rb.html) to see an example of how to use search_kmsi_settings API.
    def search_kmsi_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_kmsi_settings.' if logger


      path = '/admin/v1/KmsiSettings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:kmsi_settings_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_kmsi_settings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::KmsiSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My Apps Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyAppSearchRequest] :my_app_search_request Parameters for searching MyApps
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyApps MyApps}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_my_apps.rb.html) to see an example of how to use search_my_apps API.
    def search_my_apps(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_my_apps.' if logger


      path = '/admin/v1/MyApps/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_app_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_my_apps') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyApps'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for 'My Groups' using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyGroupSearchRequest] :my_group_search_request Parameters for searching MyGroups
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyGroups MyGroups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_my_groups.rb.html) to see an example of how to use search_my_groups API.
    def search_my_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_my_groups.' if logger


      path = '/admin/v1/MyGroups/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_group_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_my_groups') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyGroups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My Requestable Groups Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyRequestableGroupSearchRequest] :my_requestable_group_search_request Parameters for searching MyRequestableGroups
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyRequestableGroups MyRequestableGroups}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_my_requestable_groups.rb.html) to see an example of how to use search_my_requestable_groups API.
    def search_my_requestable_groups(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_my_requestable_groups.' if logger


      path = '/admin/v1/MyRequestableGroups/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_requestable_group_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_my_requestable_groups') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyRequestableGroups'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search My Requests Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::MyRequestSearchRequest] :my_request_search_request Parameters for searching MyRequests
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::MyRequests MyRequests}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_my_requests.rb.html) to see an example of how to use search_my_requests API.
    def search_my_requests(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_my_requests.' if logger


      path = '/admin/v1/MyRequests/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:my_request_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_my_requests') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::MyRequests'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search NetworkPerimeters Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::NetworkPerimeterSearchRequest] :network_perimeter_search_request Parameters for searching NetworkPerimeters
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NetworkPerimeters NetworkPerimeters}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_network_perimeters.rb.html) to see an example of how to use search_network_perimeters API.
    def search_network_perimeters(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_network_perimeters.' if logger


      path = '/admin/v1/NetworkPerimeters/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:network_perimeter_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_network_perimeters') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NetworkPerimeters'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Notification Settings Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::NotificationSettingsSearchRequest] :notification_settings_search_request Parameters for searching NotificationSettings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::NotificationSettings NotificationSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_notification_settings.rb.html) to see an example of how to use search_notification_settings API.
    def search_notification_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_notification_settings.' if logger


      path = '/admin/v1/NotificationSettings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:notification_settings_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_notification_settings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::NotificationSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for OAuth2 client credentials using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::OAuth2ClientCredentialSearchRequest] :o_auth2_client_credential_search_request Parameters for searching OAuth2ClientCredentials
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuth2ClientCredentials OAuth2ClientCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_o_auth2_client_credentials.rb.html) to see an example of how to use search_o_auth2_client_credentials API.
    def search_o_auth2_client_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_o_auth2_client_credentials.' if logger


      path = '/admin/v1/OAuth2ClientCredentials/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:o_auth2_client_credential_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_o_auth2_client_credentials') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuth2ClientCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search OAuth Client Certificates Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::OAuthClientCertificateSearchRequest] :o_auth_client_certificate_search_request Parameters for searching OAuthClientCertificates
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthClientCertificates OAuthClientCertificates}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_o_auth_client_certificates.rb.html) to see an example of how to use search_o_auth_client_certificates API.
    def search_o_auth_client_certificates(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_o_auth_client_certificates.' if logger


      path = '/admin/v1/OAuthClientCertificates/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:o_auth_client_certificate_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_o_auth_client_certificates') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthClientCertificates'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search OAuth Partner Certificates Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::OAuthPartnerCertificateSearchRequest] :o_auth_partner_certificate_search_request Parameters for searching OAuthPartnerCertificates
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::OAuthPartnerCertificates OAuthPartnerCertificates}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_o_auth_partner_certificates.rb.html) to see an example of how to use search_o_auth_partner_certificates API.
    def search_o_auth_partner_certificates(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_o_auth_partner_certificates.' if logger


      path = '/admin/v1/OAuthPartnerCertificates/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:o_auth_partner_certificate_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_o_auth_partner_certificates') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::OAuthPartnerCertificates'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for password policies using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PasswordPolicySearchRequest] :password_policy_search_request Parameters for searching PasswordPolicies
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::PasswordPolicies PasswordPolicies}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_password_policies.rb.html) to see an example of how to use search_password_policies API.
    def search_password_policies(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_password_policies.' if logger


      path = '/admin/v1/PasswordPolicies/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:password_policy_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_password_policies') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::PasswordPolicies'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Policies Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::PolicySearchRequest] :policy_search_request Parameters for searching Policies
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Policies Policies}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_policies.rb.html) to see an example of how to use search_policies API.
    def search_policies(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_policies.' if logger


      path = '/admin/v1/Policies/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:policy_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_policies') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Policies'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Resource Type Schema Attributes Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::ResourceTypeSchemaAttributeSearchRequest] :resource_type_schema_attribute_search_request Parameters for searching ResourceTypeSchemaAttributes
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::ResourceTypeSchemaAttributes ResourceTypeSchemaAttributes}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_resource_type_schema_attributes.rb.html) to see an example of how to use search_resource_type_schema_attributes API.
    def search_resource_type_schema_attributes(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_resource_type_schema_attributes.' if logger


      path = '/admin/v1/ResourceTypeSchemaAttributes/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:resource_type_schema_attribute_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_resource_type_schema_attributes') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::ResourceTypeSchemaAttributes'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Rules Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::RuleSearchRequest] :rule_search_request Parameters for searching Rules
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Rules Rules}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_rules.rb.html) to see an example of how to use search_rules API.
    def search_rules(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_rules.' if logger


      path = '/admin/v1/Rules/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:rule_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_rules') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Rules'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Schemas Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::SchemaSearchRequest] :schema_search_request Parameters for searching Schemas
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Schemas Schemas}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_schemas.rb.html) to see an example of how to use search_schemas API.
    def search_schemas(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_schemas.' if logger


      path = '/admin/v1/Schemas/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:schema_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_schemas') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Schemas'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for security question settings using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::SecurityQuestionSettingsSearchRequest] :security_question_settings_search_request Parameters for searching SecurityQuestionSettings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestionSettings SecurityQuestionSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_security_question_settings.rb.html) to see an example of how to use search_security_question_settings API.
    def search_security_question_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_security_question_settings.' if logger


      path = '/admin/v1/SecurityQuestionSettings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:security_question_settings_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_security_question_settings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestionSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for security questions using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::SecurityQuestionSearchRequest] :security_question_search_request Parameters for searching SecurityQuestions
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SecurityQuestions SecurityQuestions}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_security_questions.rb.html) to see an example of how to use search_security_questions API.
    def search_security_questions(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_security_questions.' if logger


      path = '/admin/v1/SecurityQuestions/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:security_question_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_security_questions') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SecurityQuestions'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for self-registration profile using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::SelfRegistrationProfileSearchRequest] :self_registration_profile_search_request Parameters for searching SelfRegistrationProfiles
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SelfRegistrationProfiles SelfRegistrationProfiles}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_self_registration_profiles.rb.html) to see an example of how to use search_self_registration_profiles API.
    def search_self_registration_profiles(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_self_registration_profiles.' if logger


      path = '/admin/v1/SelfRegistrationProfiles/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:self_registration_profile_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_self_registration_profiles') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SelfRegistrationProfiles'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search Settings Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::SettingsSearchRequest] :settings_search_request Parameters for searching Settings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Settings Settings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_settings.rb.html) to see an example of how to use search_settings API.
    def search_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_settings.' if logger


      path = '/admin/v1/Settings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:settings_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_settings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Settings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for SMTP credentials using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::SmtpCredentialSearchRequest] :smtp_credential_search_request Parameters for searching SmtpCredentials
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::SmtpCredentials SmtpCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_smtp_credentials.rb.html) to see an example of how to use search_smtp_credentials API.
    def search_smtp_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_smtp_credentials.' if logger


      path = '/admin/v1/SmtpCredentials/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:smtp_credential_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_smtp_credentials') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::SmtpCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search User Schema Attribute Settings Using POST
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::UserAttributesSettingsSearchRequest] :user_attributes_settings_search_request Parameters for searching UserAttributesSettings
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserAttributesSettings UserAttributesSettings}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_user_attributes_settings.rb.html) to see an example of how to use search_user_attributes_settings API.
    def search_user_attributes_settings(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_user_attributes_settings.' if logger


      path = '/admin/v1/UserAttributesSettings/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_attributes_settings_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_user_attributes_settings') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserAttributesSettings'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for a user's database (DB) credentials using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::UserDbCredentialsSearchRequest] :user_db_credentials_search_request Parameters for searching UserDbCredentials
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::UserDbCredentials UserDbCredentials}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_user_db_credentials.rb.html) to see an example of how to use search_user_db_credentials API.
    def search_user_db_credentials(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_user_db_credentials.' if logger


      path = '/admin/v1/UserDbCredentials/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_db_credentials_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_user_db_credentials') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::UserDbCredentials'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Search for users using POST.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :authorization The Authorization field value consists of credentials containing the authentication information of the user agent for the realm of the resource being requested.
    # @option opts [String] :resource_type_schema_version An endpoint-specific schema version number to use in the Request. Allowed version values are Earliest Version or Latest Version as specified in each REST API endpoint description, or any sequential number inbetween. All schema attributes/body parameters are a part of version 1. After version 1, any attributes added or deprecated will be tagged with the version that they were added to or deprecated in. If no version is provided, the latest schema version is returned.
    # @option opts [OCI::IdentityDomains::Models::UserSearchRequest] :user_search_request Parameters for searching Users
    # @option opts [String] :opc_retry_token A token you supply to uniquely identify the request and provide idempotency if the request is retried. Idempotency tokens expire after 24 hours.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous 'List' call.
    # @option opts [Integer] :limit The maximum number of items to return in a paginated 'List' call. (default to 50)
    # @return [Response] A Response object with data of type {OCI::IdentityDomains::Models::Users Users}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/identitydomains/search_users.rb.html) to see an example of how to use search_users API.
    def search_users(opts = {})
      logger.debug 'Calling operation IdentityDomainsClient#search_users.' if logger


      path = '/admin/v1/Users/.search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json, application/scim+json'
      header_params[:'content-type'] = 'application/json'
      header_params[:authorization] = opts[:authorization] if opts[:authorization]
      header_params[:resource_type_schema_version] = opts[:resource_type_schema_version] if opts[:resource_type_schema_version]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:user_search_request])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'IdentityDomainsClient#search_users') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::IdentityDomains::Models::Users'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
