# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200601
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This is the recall count statistics for a given tenant
  #
  class LogAnalytics::Models::RecallCount
    # **[Required]** This is the total number of recalls made so far
    # @return [Integer]
    attr_accessor :recall_count

    # **[Required]** This is the number of recalls that succeeded
    # @return [Integer]
    attr_accessor :recall_succeeded

    # **[Required]** This is the number of recalls that failed
    # @return [Integer]
    attr_accessor :recall_failed

    # **[Required]** This is the number of recalls in pending state
    # @return [Integer]
    attr_accessor :recall_pending

    # **[Required]** This is the maximum number of recalls (including successful and pending recalls) allowed
    # @return [Integer]
    attr_accessor :recall_limit

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'recall_count': :'recallCount',
        'recall_succeeded': :'recallSucceeded',
        'recall_failed': :'recallFailed',
        'recall_pending': :'recallPending',
        'recall_limit': :'recallLimit'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'recall_count': :'Integer',
        'recall_succeeded': :'Integer',
        'recall_failed': :'Integer',
        'recall_pending': :'Integer',
        'recall_limit': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :recall_count The value to assign to the {#recall_count} property
    # @option attributes [Integer] :recall_succeeded The value to assign to the {#recall_succeeded} property
    # @option attributes [Integer] :recall_failed The value to assign to the {#recall_failed} property
    # @option attributes [Integer] :recall_pending The value to assign to the {#recall_pending} property
    # @option attributes [Integer] :recall_limit The value to assign to the {#recall_limit} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.recall_count = attributes[:'recallCount'] if attributes[:'recallCount']

      raise 'You cannot provide both :recallCount and :recall_count' if attributes.key?(:'recallCount') && attributes.key?(:'recall_count')

      self.recall_count = attributes[:'recall_count'] if attributes[:'recall_count']

      self.recall_succeeded = attributes[:'recallSucceeded'] if attributes[:'recallSucceeded']

      raise 'You cannot provide both :recallSucceeded and :recall_succeeded' if attributes.key?(:'recallSucceeded') && attributes.key?(:'recall_succeeded')

      self.recall_succeeded = attributes[:'recall_succeeded'] if attributes[:'recall_succeeded']

      self.recall_failed = attributes[:'recallFailed'] if attributes[:'recallFailed']

      raise 'You cannot provide both :recallFailed and :recall_failed' if attributes.key?(:'recallFailed') && attributes.key?(:'recall_failed')

      self.recall_failed = attributes[:'recall_failed'] if attributes[:'recall_failed']

      self.recall_pending = attributes[:'recallPending'] if attributes[:'recallPending']

      raise 'You cannot provide both :recallPending and :recall_pending' if attributes.key?(:'recallPending') && attributes.key?(:'recall_pending')

      self.recall_pending = attributes[:'recall_pending'] if attributes[:'recall_pending']

      self.recall_limit = attributes[:'recallLimit'] if attributes[:'recallLimit']

      raise 'You cannot provide both :recallLimit and :recall_limit' if attributes.key?(:'recallLimit') && attributes.key?(:'recall_limit')

      self.recall_limit = attributes[:'recall_limit'] if attributes[:'recall_limit']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        recall_count == other.recall_count &&
        recall_succeeded == other.recall_succeeded &&
        recall_failed == other.recall_failed &&
        recall_pending == other.recall_pending &&
        recall_limit == other.recall_limit
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [recall_count, recall_succeeded, recall_failed, recall_pending, recall_limit].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
