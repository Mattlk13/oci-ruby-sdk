# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200601
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A condition block. This could represent a single condition, or have nested condition blocks under it.
  # To form a single condition, specify the name, operator and value(s).
  # To form nested conditions, specify the conditions in conditionBlocks, and how to join them in conditionBlocksOperator.
  #
  class LogAnalytics::Models::GenericConditionBlock
    CONDITION_BLOCKS_OPERATOR_ENUM = [
      CONDITION_BLOCKS_OPERATOR_AND = 'AND'.freeze,
      CONDITION_BLOCKS_OPERATOR_OR = 'OR'.freeze,
      CONDITION_BLOCKS_OPERATOR_NOT_AND = 'NOT_AND'.freeze,
      CONDITION_BLOCKS_OPERATOR_NOT_OR = 'NOT_OR'.freeze,
      CONDITION_BLOCKS_OPERATOR_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Operator using which the conditionBlocks should be joined. Specify this for nested conditions.
    #
    # @return [String]
    attr_reader :condition_blocks_operator

    # The name of the field the condition is based on. Specify this if this condition block represents a single condition.
    #
    # @return [String]
    attr_accessor :name

    # The condition operator. Specify this if this condition block represents a single condition.
    #
    # @return [String]
    attr_accessor :operator

    # The condition value. Specify this if this condition block represents a single condition.
    #
    # @return [String]
    attr_accessor :value

    # A list of condition values. Specify this if this condition block represents a single condition.
    #
    # @return [Array<String>]
    attr_accessor :values

    # Condition blocks to evaluate within this condition block. Specify this for nested conditions.
    #
    # @return [Array<OCI::LogAnalytics::Models::GenericConditionBlock>]
    attr_accessor :generic_condition_blocks

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'condition_blocks_operator': :'conditionBlocksOperator',
        'name': :'name',
        'operator': :'operator',
        'value': :'value',
        'values': :'values',
        'generic_condition_blocks': :'genericConditionBlocks'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'condition_blocks_operator': :'String',
        'name': :'String',
        'operator': :'String',
        'value': :'String',
        'values': :'Array<String>',
        'generic_condition_blocks': :'Array<OCI::LogAnalytics::Models::GenericConditionBlock>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :condition_blocks_operator The value to assign to the {#condition_blocks_operator} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :operator The value to assign to the {#operator} property
    # @option attributes [String] :value The value to assign to the {#value} property
    # @option attributes [Array<String>] :values The value to assign to the {#values} property
    # @option attributes [Array<OCI::LogAnalytics::Models::GenericConditionBlock>] :generic_condition_blocks The value to assign to the {#generic_condition_blocks} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.condition_blocks_operator = attributes[:'conditionBlocksOperator'] if attributes[:'conditionBlocksOperator']

      raise 'You cannot provide both :conditionBlocksOperator and :condition_blocks_operator' if attributes.key?(:'conditionBlocksOperator') && attributes.key?(:'condition_blocks_operator')

      self.condition_blocks_operator = attributes[:'condition_blocks_operator'] if attributes[:'condition_blocks_operator']

      self.name = attributes[:'name'] if attributes[:'name']

      self.operator = attributes[:'operator'] if attributes[:'operator']

      self.value = attributes[:'value'] if attributes[:'value']

      self.values = attributes[:'values'] if attributes[:'values']

      self.generic_condition_blocks = attributes[:'genericConditionBlocks'] if attributes[:'genericConditionBlocks']

      raise 'You cannot provide both :genericConditionBlocks and :generic_condition_blocks' if attributes.key?(:'genericConditionBlocks') && attributes.key?(:'generic_condition_blocks')

      self.generic_condition_blocks = attributes[:'generic_condition_blocks'] if attributes[:'generic_condition_blocks']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] condition_blocks_operator Object to be assigned
    def condition_blocks_operator=(condition_blocks_operator)
      # rubocop:disable Style/ConditionalAssignment
      if condition_blocks_operator && !CONDITION_BLOCKS_OPERATOR_ENUM.include?(condition_blocks_operator)
        OCI.logger.debug("Unknown value for 'condition_blocks_operator' [" + condition_blocks_operator + "]. Mapping to 'CONDITION_BLOCKS_OPERATOR_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @condition_blocks_operator = CONDITION_BLOCKS_OPERATOR_UNKNOWN_ENUM_VALUE
      else
        @condition_blocks_operator = condition_blocks_operator
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        condition_blocks_operator == other.condition_blocks_operator &&
        name == other.name &&
        operator == other.operator &&
        value == other.value &&
        values == other.values &&
        generic_condition_blocks == other.generic_condition_blocks
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [condition_blocks_operator, name, operator, value, values, generic_condition_blocks].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
