# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200601
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The result of the label condition validation
  class LogAnalytics::Models::ValidateLabelConditionResult
    # **[Required]** String representation of the validated label condition.
    # @return [String]
    attr_accessor :condition_string

    # This attribute is required.
    # @return [OCI::LogAnalytics::Models::ConditionBlock]
    attr_accessor :condition_block

    # Field values against which the label condition was evaluated.
    # @return [Array<OCI::LogAnalytics::Models::LogAnalyticsProperty>]
    attr_accessor :field_values

    # **[Required]** The validation status.
    # @return [String]
    attr_accessor :status

    # The validation status description.
    # @return [String]
    attr_accessor :status_description

    # The result of evaluating the condition blocks against the specified field values. Either true or false.
    #
    # @return [BOOLEAN]
    attr_accessor :evaluation_result

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'condition_string': :'conditionString',
        'condition_block': :'conditionBlock',
        'field_values': :'fieldValues',
        'status': :'status',
        'status_description': :'statusDescription',
        'evaluation_result': :'evaluationResult'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'condition_string': :'String',
        'condition_block': :'OCI::LogAnalytics::Models::ConditionBlock',
        'field_values': :'Array<OCI::LogAnalytics::Models::LogAnalyticsProperty>',
        'status': :'String',
        'status_description': :'String',
        'evaluation_result': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :condition_string The value to assign to the {#condition_string} property
    # @option attributes [OCI::LogAnalytics::Models::ConditionBlock] :condition_block The value to assign to the {#condition_block} property
    # @option attributes [Array<OCI::LogAnalytics::Models::LogAnalyticsProperty>] :field_values The value to assign to the {#field_values} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :status_description The value to assign to the {#status_description} property
    # @option attributes [BOOLEAN] :evaluation_result The value to assign to the {#evaluation_result} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.condition_string = attributes[:'conditionString'] if attributes[:'conditionString']

      raise 'You cannot provide both :conditionString and :condition_string' if attributes.key?(:'conditionString') && attributes.key?(:'condition_string')

      self.condition_string = attributes[:'condition_string'] if attributes[:'condition_string']

      self.condition_block = attributes[:'conditionBlock'] if attributes[:'conditionBlock']

      raise 'You cannot provide both :conditionBlock and :condition_block' if attributes.key?(:'conditionBlock') && attributes.key?(:'condition_block')

      self.condition_block = attributes[:'condition_block'] if attributes[:'condition_block']

      self.field_values = attributes[:'fieldValues'] if attributes[:'fieldValues']

      raise 'You cannot provide both :fieldValues and :field_values' if attributes.key?(:'fieldValues') && attributes.key?(:'field_values')

      self.field_values = attributes[:'field_values'] if attributes[:'field_values']

      self.status = attributes[:'status'] if attributes[:'status']

      self.status_description = attributes[:'statusDescription'] if attributes[:'statusDescription']

      raise 'You cannot provide both :statusDescription and :status_description' if attributes.key?(:'statusDescription') && attributes.key?(:'status_description')

      self.status_description = attributes[:'status_description'] if attributes[:'status_description']

      self.evaluation_result = attributes[:'evaluationResult'] unless attributes[:'evaluationResult'].nil?

      raise 'You cannot provide both :evaluationResult and :evaluation_result' if attributes.key?(:'evaluationResult') && attributes.key?(:'evaluation_result')

      self.evaluation_result = attributes[:'evaluation_result'] unless attributes[:'evaluation_result'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        condition_string == other.condition_string &&
        condition_block == other.condition_block &&
        field_values == other.field_values &&
        status == other.status &&
        status_description == other.status_description &&
        evaluation_result == other.evaluation_result
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [condition_string, condition_block, field_values, status, status_description, evaluation_result].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
