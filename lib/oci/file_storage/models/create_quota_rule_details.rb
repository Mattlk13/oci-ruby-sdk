# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20171215
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for creating a quota rule in the file system.
  class FileStorage::Models::CreateQuotaRuleDetails
    PRINCIPAL_TYPE_ENUM = [
      PRINCIPAL_TYPE_FILE_SYSTEM_LEVEL = 'FILE_SYSTEM_LEVEL'.freeze,
      PRINCIPAL_TYPE_DEFAULT_GROUP = 'DEFAULT_GROUP'.freeze,
      PRINCIPAL_TYPE_DEFAULT_USER = 'DEFAULT_USER'.freeze,
      PRINCIPAL_TYPE_INDIVIDUAL_GROUP = 'INDIVIDUAL_GROUP'.freeze,
      PRINCIPAL_TYPE_INDIVIDUAL_USER = 'INDIVIDUAL_USER'.freeze
    ].freeze

    # **[Required]** The type of the owner of this quota rule and usage.
    #
    # @return [String]
    attr_reader :principal_type

    # An identifier for the user or the group associated with quota rule and usage. UNIX-like operating systems use this integer value to
    # identify a user or group to manage access control.
    #
    # @return [Integer]
    attr_accessor :principal_id

    # **[Required]** Whether the quota rule will be enforced.
    # If `isHardQuota` is true, the quota rule is enforced so that the write is blocked if usage
    # exceeds the hard quota limit.
    # If `isHardQuota` is false, writes succeed even if usage exceeds the soft quota limit, but the quota rule is violated.
    #
    # @return [BOOLEAN]
    attr_accessor :is_hard_quota

    # A user-friendly name. It does not have to be unique, and it is changeable.
    # Avoid entering confidential information.
    # Example: `UserXYZ's quota`
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The value of the quota rule in gigabytes.
    #
    # @return [Integer]
    attr_accessor :quota_limit_in_gigabytes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'principal_type': :'principalType',
        'principal_id': :'principalId',
        'is_hard_quota': :'isHardQuota',
        'display_name': :'displayName',
        'quota_limit_in_gigabytes': :'quotaLimitInGigabytes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'principal_type': :'String',
        'principal_id': :'Integer',
        'is_hard_quota': :'BOOLEAN',
        'display_name': :'String',
        'quota_limit_in_gigabytes': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :principal_type The value to assign to the {#principal_type} property
    # @option attributes [Integer] :principal_id The value to assign to the {#principal_id} property
    # @option attributes [BOOLEAN] :is_hard_quota The value to assign to the {#is_hard_quota} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Integer] :quota_limit_in_gigabytes The value to assign to the {#quota_limit_in_gigabytes} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.principal_type = attributes[:'principalType'] if attributes[:'principalType']

      raise 'You cannot provide both :principalType and :principal_type' if attributes.key?(:'principalType') && attributes.key?(:'principal_type')

      self.principal_type = attributes[:'principal_type'] if attributes[:'principal_type']

      self.principal_id = attributes[:'principalId'] if attributes[:'principalId']

      raise 'You cannot provide both :principalId and :principal_id' if attributes.key?(:'principalId') && attributes.key?(:'principal_id')

      self.principal_id = attributes[:'principal_id'] if attributes[:'principal_id']

      self.is_hard_quota = attributes[:'isHardQuota'] unless attributes[:'isHardQuota'].nil?

      raise 'You cannot provide both :isHardQuota and :is_hard_quota' if attributes.key?(:'isHardQuota') && attributes.key?(:'is_hard_quota')

      self.is_hard_quota = attributes[:'is_hard_quota'] unless attributes[:'is_hard_quota'].nil?

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.quota_limit_in_gigabytes = attributes[:'quotaLimitInGigabytes'] if attributes[:'quotaLimitInGigabytes']

      raise 'You cannot provide both :quotaLimitInGigabytes and :quota_limit_in_gigabytes' if attributes.key?(:'quotaLimitInGigabytes') && attributes.key?(:'quota_limit_in_gigabytes')

      self.quota_limit_in_gigabytes = attributes[:'quota_limit_in_gigabytes'] if attributes[:'quota_limit_in_gigabytes']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] principal_type Object to be assigned
    def principal_type=(principal_type)
      raise "Invalid value for 'principal_type': this must be one of the values in PRINCIPAL_TYPE_ENUM." if principal_type && !PRINCIPAL_TYPE_ENUM.include?(principal_type)

      @principal_type = principal_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        principal_type == other.principal_type &&
        principal_id == other.principal_id &&
        is_hard_quota == other.is_hard_quota &&
        display_name == other.display_name &&
        quota_limit_in_gigabytes == other.quota_limit_in_gigabytes
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [principal_type, principal_id, is_hard_quota, display_name, quota_limit_in_gigabytes].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
