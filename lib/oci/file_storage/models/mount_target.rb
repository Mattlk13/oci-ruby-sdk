# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20171215
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Provides access to a collection of file systems through one or more VNICs on a
  # specified subnet. The set of file systems is controlled through the
  # referenced export set.
  #
  class FileStorage::Models::MountTarget
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    IDMAP_TYPE_ENUM = [
      IDMAP_TYPE_LDAP = 'LDAP'.freeze,
      IDMAP_TYPE_NONE = 'NONE'.freeze,
      IDMAP_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The availability domain the mount target is in. May be unset
    # as a blank or NULL value.
    #
    # Example: `Uocm:PHX-AD-1`
    #
    # @return [String]
    attr_accessor :availability_domain

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment that contains the mount target.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** A user-friendly name. It does not have to be unique, and it is changeable.
    # Avoid entering confidential information.
    #
    # Example: `My mount target`
    #
    # @return [String]
    attr_accessor :display_name

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the associated export set. Controls what file
    # systems will be exported through Network File System (NFS) protocol on this
    # mount target.
    #
    # @return [String]
    attr_accessor :export_set_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the mount target.
    # @return [String]
    attr_accessor :id

    # **[Required]** Additional information about the current 'lifecycleState'.
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** The current state of the mount target.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The OCIDs of the private IP addresses associated with this mount target.
    # @return [Array<String>]
    attr_accessor :private_ip_ids

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the subnet the mount target is in.
    # @return [String]
    attr_accessor :subnet_id

    # The method used to map a Unix UID to secondary groups. If NONE, the mount target will not use the Unix UID for ID mapping.
    # @return [String]
    attr_reader :idmap_type

    # @return [OCI::FileStorage::Models::LdapIdmap]
    attr_accessor :ldap_idmap

    # A list of Network Security Group [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) associated with this mount target.
    # A maximum of 5 is allowed.
    # Setting this to an empty array after the list is created removes the mount target from all NSGs.
    # For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/Content/Network/Concepts/securityrules.htm).
    #
    # @return [Array<String>]
    attr_accessor :nsg_ids

    # @return [OCI::FileStorage::Models::Kerberos]
    attr_accessor :kerberos

    # The date and time the mount target current billing cycle will end and next one starts, expressed
    #   in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
    #
    #   Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_billing_cycle_end

    # Current billed throughput for mount target in Gbps. This corresponds to shape of mount target.
    # Available shapes and corresponding throughput are listed at [Mount Target Performance](https://docs.oracle.com/iaas/Content/File/Tasks/managingmounttargets.htm#performance).
    #
    # @return [Integer]
    attr_accessor :observed_throughput

    # - New throughput for mount target at the end of billing cycle in Gbps.
    #
    # @return [Integer]
    attr_accessor :requested_throughput

    # - Reserved capacity (GB) associated with this mount target. Reserved capacity depends on observedThroughput value
    # of mount target. Value is listed at [Mount Target Performance](https://docs.oracle.com/iaas/Content/File/Tasks/managingmounttargets.htm#performance).
    #
    # @return [Integer]
    attr_accessor :reserved_storage_capacity

    # **[Required]** The date and time the mount target was created, expressed
    # in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # Locks associated with this resource.
    # @return [Array<OCI::FileStorage::Models::ResourceLock>]
    attr_accessor :locks

    # Free-form tags for this resource. Each tag is a simple key-value pair
    #  with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource.
    # System tags are applied to resources by internal OCI services.
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'availabilityDomain',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'export_set_id': :'exportSetId',
        'id': :'id',
        'lifecycle_details': :'lifecycleDetails',
        'lifecycle_state': :'lifecycleState',
        'private_ip_ids': :'privateIpIds',
        'subnet_id': :'subnetId',
        'idmap_type': :'idmapType',
        'ldap_idmap': :'ldapIdmap',
        'nsg_ids': :'nsgIds',
        'kerberos': :'kerberos',
        'time_billing_cycle_end': :'timeBillingCycleEnd',
        'observed_throughput': :'observedThroughput',
        'requested_throughput': :'requestedThroughput',
        'reserved_storage_capacity': :'reservedStorageCapacity',
        'time_created': :'timeCreated',
        'locks': :'locks',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'export_set_id': :'String',
        'id': :'String',
        'lifecycle_details': :'String',
        'lifecycle_state': :'String',
        'private_ip_ids': :'Array<String>',
        'subnet_id': :'String',
        'idmap_type': :'String',
        'ldap_idmap': :'OCI::FileStorage::Models::LdapIdmap',
        'nsg_ids': :'Array<String>',
        'kerberos': :'OCI::FileStorage::Models::Kerberos',
        'time_billing_cycle_end': :'DateTime',
        'observed_throughput': :'Integer',
        'requested_throughput': :'Integer',
        'reserved_storage_capacity': :'Integer',
        'time_created': :'DateTime',
        'locks': :'Array<OCI::FileStorage::Models::ResourceLock>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :export_set_id The value to assign to the {#export_set_id} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Array<String>] :private_ip_ids The value to assign to the {#private_ip_ids} property
    # @option attributes [String] :subnet_id The value to assign to the {#subnet_id} property
    # @option attributes [String] :idmap_type The value to assign to the {#idmap_type} property
    # @option attributes [OCI::FileStorage::Models::LdapIdmap] :ldap_idmap The value to assign to the {#ldap_idmap} property
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {#nsg_ids} property
    # @option attributes [OCI::FileStorage::Models::Kerberos] :kerberos The value to assign to the {#kerberos} property
    # @option attributes [DateTime] :time_billing_cycle_end The value to assign to the {#time_billing_cycle_end} property
    # @option attributes [Integer] :observed_throughput The value to assign to the {#observed_throughput} property
    # @option attributes [Integer] :requested_throughput The value to assign to the {#requested_throughput} property
    # @option attributes [Integer] :reserved_storage_capacity The value to assign to the {#reserved_storage_capacity} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [Array<OCI::FileStorage::Models::ResourceLock>] :locks The value to assign to the {#locks} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.export_set_id = attributes[:'exportSetId'] if attributes[:'exportSetId']

      raise 'You cannot provide both :exportSetId and :export_set_id' if attributes.key?(:'exportSetId') && attributes.key?(:'export_set_id')

      self.export_set_id = attributes[:'export_set_id'] if attributes[:'export_set_id']

      self.id = attributes[:'id'] if attributes[:'id']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.private_ip_ids = attributes[:'privateIpIds'] if attributes[:'privateIpIds']

      raise 'You cannot provide both :privateIpIds and :private_ip_ids' if attributes.key?(:'privateIpIds') && attributes.key?(:'private_ip_ids')

      self.private_ip_ids = attributes[:'private_ip_ids'] if attributes[:'private_ip_ids']

      self.subnet_id = attributes[:'subnetId'] if attributes[:'subnetId']

      raise 'You cannot provide both :subnetId and :subnet_id' if attributes.key?(:'subnetId') && attributes.key?(:'subnet_id')

      self.subnet_id = attributes[:'subnet_id'] if attributes[:'subnet_id']

      self.idmap_type = attributes[:'idmapType'] if attributes[:'idmapType']

      raise 'You cannot provide both :idmapType and :idmap_type' if attributes.key?(:'idmapType') && attributes.key?(:'idmap_type')

      self.idmap_type = attributes[:'idmap_type'] if attributes[:'idmap_type']

      self.ldap_idmap = attributes[:'ldapIdmap'] if attributes[:'ldapIdmap']

      raise 'You cannot provide both :ldapIdmap and :ldap_idmap' if attributes.key?(:'ldapIdmap') && attributes.key?(:'ldap_idmap')

      self.ldap_idmap = attributes[:'ldap_idmap'] if attributes[:'ldap_idmap']

      self.nsg_ids = attributes[:'nsgIds'] if attributes[:'nsgIds']

      raise 'You cannot provide both :nsgIds and :nsg_ids' if attributes.key?(:'nsgIds') && attributes.key?(:'nsg_ids')

      self.nsg_ids = attributes[:'nsg_ids'] if attributes[:'nsg_ids']

      self.kerberos = attributes[:'kerberos'] if attributes[:'kerberos']

      self.time_billing_cycle_end = attributes[:'timeBillingCycleEnd'] if attributes[:'timeBillingCycleEnd']

      raise 'You cannot provide both :timeBillingCycleEnd and :time_billing_cycle_end' if attributes.key?(:'timeBillingCycleEnd') && attributes.key?(:'time_billing_cycle_end')

      self.time_billing_cycle_end = attributes[:'time_billing_cycle_end'] if attributes[:'time_billing_cycle_end']

      self.observed_throughput = attributes[:'observedThroughput'] if attributes[:'observedThroughput']

      raise 'You cannot provide both :observedThroughput and :observed_throughput' if attributes.key?(:'observedThroughput') && attributes.key?(:'observed_throughput')

      self.observed_throughput = attributes[:'observed_throughput'] if attributes[:'observed_throughput']

      self.requested_throughput = attributes[:'requestedThroughput'] if attributes[:'requestedThroughput']

      raise 'You cannot provide both :requestedThroughput and :requested_throughput' if attributes.key?(:'requestedThroughput') && attributes.key?(:'requested_throughput')

      self.requested_throughput = attributes[:'requested_throughput'] if attributes[:'requested_throughput']

      self.reserved_storage_capacity = attributes[:'reservedStorageCapacity'] if attributes[:'reservedStorageCapacity']

      raise 'You cannot provide both :reservedStorageCapacity and :reserved_storage_capacity' if attributes.key?(:'reservedStorageCapacity') && attributes.key?(:'reserved_storage_capacity')

      self.reserved_storage_capacity = attributes[:'reserved_storage_capacity'] if attributes[:'reserved_storage_capacity']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.locks = attributes[:'locks'] if attributes[:'locks']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idmap_type Object to be assigned
    def idmap_type=(idmap_type)
      # rubocop:disable Style/ConditionalAssignment
      if idmap_type && !IDMAP_TYPE_ENUM.include?(idmap_type)
        OCI.logger.debug("Unknown value for 'idmap_type' [" + idmap_type + "]. Mapping to 'IDMAP_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @idmap_type = IDMAP_TYPE_UNKNOWN_ENUM_VALUE
      else
        @idmap_type = idmap_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        availability_domain == other.availability_domain &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        export_set_id == other.export_set_id &&
        id == other.id &&
        lifecycle_details == other.lifecycle_details &&
        lifecycle_state == other.lifecycle_state &&
        private_ip_ids == other.private_ip_ids &&
        subnet_id == other.subnet_id &&
        idmap_type == other.idmap_type &&
        ldap_idmap == other.ldap_idmap &&
        nsg_ids == other.nsg_ids &&
        kerberos == other.kerberos &&
        time_billing_cycle_end == other.time_billing_cycle_end &&
        observed_throughput == other.observed_throughput &&
        requested_throughput == other.requested_throughput &&
        reserved_storage_capacity == other.reserved_storage_capacity &&
        time_created == other.time_created &&
        locks == other.locks &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [availability_domain, compartment_id, display_name, export_set_id, id, lifecycle_details, lifecycle_state, private_ip_ids, subnet_id, idmap_type, ldap_idmap, nsg_ids, kerberos, time_billing_cycle_end, observed_throughput, requested_throughput, reserved_storage_capacity, time_created, locks, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
