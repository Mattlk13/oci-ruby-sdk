# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20171215
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The snapshot schedule is a structure within a parent file system snapshot policy. It contains data about
  # the frequency of snapshot creation and the retention time of the taken snapshots.
  #
  class FileStorage::Models::SnapshotSchedule
    PERIOD_ENUM = [
      PERIOD_HOURLY = 'HOURLY'.freeze,
      PERIOD_DAILY = 'DAILY'.freeze,
      PERIOD_WEEKLY = 'WEEKLY'.freeze,
      PERIOD_MONTHLY = 'MONTHLY'.freeze,
      PERIOD_YEARLY = 'YEARLY'.freeze,
      PERIOD_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TIME_ZONE_ENUM = [
      TIME_ZONE_UTC = 'UTC'.freeze,
      TIME_ZONE_REGIONAL_DATA_CENTER_TIME = 'REGIONAL_DATA_CENTER_TIME'.freeze,
      TIME_ZONE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DAY_OF_WEEK_ENUM = [
      DAY_OF_WEEK_MONDAY = 'MONDAY'.freeze,
      DAY_OF_WEEK_TUESDAY = 'TUESDAY'.freeze,
      DAY_OF_WEEK_WEDNESDAY = 'WEDNESDAY'.freeze,
      DAY_OF_WEEK_THURSDAY = 'THURSDAY'.freeze,
      DAY_OF_WEEK_FRIDAY = 'FRIDAY'.freeze,
      DAY_OF_WEEK_SATURDAY = 'SATURDAY'.freeze,
      DAY_OF_WEEK_SUNDAY = 'SUNDAY'.freeze,
      DAY_OF_WEEK_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MONTH_ENUM = [
      MONTH_JANUARY = 'JANUARY'.freeze,
      MONTH_FEBRUARY = 'FEBRUARY'.freeze,
      MONTH_MARCH = 'MARCH'.freeze,
      MONTH_APRIL = 'APRIL'.freeze,
      MONTH_MAY = 'MAY'.freeze,
      MONTH_JUNE = 'JUNE'.freeze,
      MONTH_JULY = 'JULY'.freeze,
      MONTH_AUGUST = 'AUGUST'.freeze,
      MONTH_SEPTEMBER = 'SEPTEMBER'.freeze,
      MONTH_OCTOBER = 'OCTOBER'.freeze,
      MONTH_NOVEMBER = 'NOVEMBER'.freeze,
      MONTH_DECEMBER = 'DECEMBER'.freeze,
      MONTH_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # A name prefix to be applied to snapshots created by this schedule.
    #
    # Example: `compliance1`
    #
    # @return [String]
    attr_accessor :schedule_prefix

    # The starting point used to begin the scheduling of the snapshots based upon recurrence string
    # in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
    # If no `timeScheduleStart` is provided, the value will be set to the time when the schedule was created.
    #
    # @return [DateTime]
    attr_accessor :time_schedule_start

    # **[Required]** The frequency of scheduled snapshots.
    # @return [String]
    attr_reader :period

    # The number of seconds to retain snapshots created with this schedule.
    # Snapshot expiration time will not be set if this value is empty.
    #
    # @return [Integer]
    attr_accessor :retention_duration_in_seconds

    # **[Required]** Time zone used for scheduling the snapshot.
    # @return [String]
    attr_reader :time_zone

    # The hour of the day to create a DAILY, WEEKLY, MONTHLY, or YEARLY snapshot.
    # If not set, a value will be chosen at creation time.
    #
    # @return [Integer]
    attr_accessor :hour_of_day

    # The day of the week to create a scheduled snapshot.
    # Used for WEEKLY snapshot schedules.
    #
    # @return [String]
    attr_reader :day_of_week

    # The day of the month to create a scheduled snapshot.
    # If the day does not exist for the month, snapshot creation will be skipped.
    # Used for MONTHLY and YEARLY snapshot schedules.
    #
    # @return [Integer]
    attr_accessor :day_of_month

    # The month to create a scheduled snapshot.
    # Used only for YEARLY snapshot schedules.
    #
    # @return [String]
    attr_reader :month

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'schedule_prefix': :'schedulePrefix',
        'time_schedule_start': :'timeScheduleStart',
        'period': :'period',
        'retention_duration_in_seconds': :'retentionDurationInSeconds',
        'time_zone': :'timeZone',
        'hour_of_day': :'hourOfDay',
        'day_of_week': :'dayOfWeek',
        'day_of_month': :'dayOfMonth',
        'month': :'month'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'schedule_prefix': :'String',
        'time_schedule_start': :'DateTime',
        'period': :'String',
        'retention_duration_in_seconds': :'Integer',
        'time_zone': :'String',
        'hour_of_day': :'Integer',
        'day_of_week': :'String',
        'day_of_month': :'Integer',
        'month': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :schedule_prefix The value to assign to the {#schedule_prefix} property
    # @option attributes [DateTime] :time_schedule_start The value to assign to the {#time_schedule_start} property
    # @option attributes [String] :period The value to assign to the {#period} property
    # @option attributes [Integer] :retention_duration_in_seconds The value to assign to the {#retention_duration_in_seconds} property
    # @option attributes [String] :time_zone The value to assign to the {#time_zone} property
    # @option attributes [Integer] :hour_of_day The value to assign to the {#hour_of_day} property
    # @option attributes [String] :day_of_week The value to assign to the {#day_of_week} property
    # @option attributes [Integer] :day_of_month The value to assign to the {#day_of_month} property
    # @option attributes [String] :month The value to assign to the {#month} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.schedule_prefix = attributes[:'schedulePrefix'] if attributes[:'schedulePrefix']

      raise 'You cannot provide both :schedulePrefix and :schedule_prefix' if attributes.key?(:'schedulePrefix') && attributes.key?(:'schedule_prefix')

      self.schedule_prefix = attributes[:'schedule_prefix'] if attributes[:'schedule_prefix']

      self.time_schedule_start = attributes[:'timeScheduleStart'] if attributes[:'timeScheduleStart']

      raise 'You cannot provide both :timeScheduleStart and :time_schedule_start' if attributes.key?(:'timeScheduleStart') && attributes.key?(:'time_schedule_start')

      self.time_schedule_start = attributes[:'time_schedule_start'] if attributes[:'time_schedule_start']

      self.period = attributes[:'period'] if attributes[:'period']

      self.retention_duration_in_seconds = attributes[:'retentionDurationInSeconds'] if attributes[:'retentionDurationInSeconds']

      raise 'You cannot provide both :retentionDurationInSeconds and :retention_duration_in_seconds' if attributes.key?(:'retentionDurationInSeconds') && attributes.key?(:'retention_duration_in_seconds')

      self.retention_duration_in_seconds = attributes[:'retention_duration_in_seconds'] if attributes[:'retention_duration_in_seconds']

      self.time_zone = attributes[:'timeZone'] if attributes[:'timeZone']

      raise 'You cannot provide both :timeZone and :time_zone' if attributes.key?(:'timeZone') && attributes.key?(:'time_zone')

      self.time_zone = attributes[:'time_zone'] if attributes[:'time_zone']

      self.hour_of_day = attributes[:'hourOfDay'] if attributes[:'hourOfDay']

      raise 'You cannot provide both :hourOfDay and :hour_of_day' if attributes.key?(:'hourOfDay') && attributes.key?(:'hour_of_day')

      self.hour_of_day = attributes[:'hour_of_day'] if attributes[:'hour_of_day']

      self.day_of_week = attributes[:'dayOfWeek'] if attributes[:'dayOfWeek']

      raise 'You cannot provide both :dayOfWeek and :day_of_week' if attributes.key?(:'dayOfWeek') && attributes.key?(:'day_of_week')

      self.day_of_week = attributes[:'day_of_week'] if attributes[:'day_of_week']

      self.day_of_month = attributes[:'dayOfMonth'] if attributes[:'dayOfMonth']

      raise 'You cannot provide both :dayOfMonth and :day_of_month' if attributes.key?(:'dayOfMonth') && attributes.key?(:'day_of_month')

      self.day_of_month = attributes[:'day_of_month'] if attributes[:'day_of_month']

      self.month = attributes[:'month'] if attributes[:'month']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] period Object to be assigned
    def period=(period)
      # rubocop:disable Style/ConditionalAssignment
      if period && !PERIOD_ENUM.include?(period)
        OCI.logger.debug("Unknown value for 'period' [" + period + "]. Mapping to 'PERIOD_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @period = PERIOD_UNKNOWN_ENUM_VALUE
      else
        @period = period
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] time_zone Object to be assigned
    def time_zone=(time_zone)
      # rubocop:disable Style/ConditionalAssignment
      if time_zone && !TIME_ZONE_ENUM.include?(time_zone)
        OCI.logger.debug("Unknown value for 'time_zone' [" + time_zone + "]. Mapping to 'TIME_ZONE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @time_zone = TIME_ZONE_UNKNOWN_ENUM_VALUE
      else
        @time_zone = time_zone
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] day_of_week Object to be assigned
    def day_of_week=(day_of_week)
      # rubocop:disable Style/ConditionalAssignment
      if day_of_week && !DAY_OF_WEEK_ENUM.include?(day_of_week)
        OCI.logger.debug("Unknown value for 'day_of_week' [" + day_of_week + "]. Mapping to 'DAY_OF_WEEK_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @day_of_week = DAY_OF_WEEK_UNKNOWN_ENUM_VALUE
      else
        @day_of_week = day_of_week
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] month Object to be assigned
    def month=(month)
      # rubocop:disable Style/ConditionalAssignment
      if month && !MONTH_ENUM.include?(month)
        OCI.logger.debug("Unknown value for 'month' [" + month + "]. Mapping to 'MONTH_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @month = MONTH_UNKNOWN_ENUM_VALUE
      else
        @month = month
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        schedule_prefix == other.schedule_prefix &&
        time_schedule_start == other.time_schedule_start &&
        period == other.period &&
        retention_duration_in_seconds == other.retention_duration_in_seconds &&
        time_zone == other.time_zone &&
        hour_of_day == other.hour_of_day &&
        day_of_week == other.day_of_week &&
        day_of_month == other.day_of_month &&
        month == other.month
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [schedule_prefix, time_schedule_start, period, retention_duration_in_seconds, time_zone, hour_of_day, day_of_week, day_of_month, month].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
