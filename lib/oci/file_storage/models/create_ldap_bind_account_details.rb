# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20171215
require 'date'
require_relative 'create_outbound_connector_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Account details for the LDAP bind account to be used by mount targets that use this outbound connector.
  #
  class FileStorage::Models::CreateLdapBindAccountDetails < FileStorage::Models::CreateOutboundConnectorDetails
    # **[Required]** Array of server endpoints to use when connecting with the LDAP bind account.
    #
    # @return [Array<OCI::FileStorage::Models::Endpoint>]
    attr_accessor :endpoints

    # **[Required]** The LDAP Distinguished Name of the bind account.
    #
    # @return [String]
    attr_accessor :bind_distinguished_name

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the password for the LDAP bind account in the Vault.
    # @return [String]
    attr_accessor :password_secret_id

    # Version of the password secret in the Vault to use.
    # @return [Integer]
    attr_accessor :password_secret_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'availabilityDomain',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'connector_type': :'connectorType',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'endpoints': :'endpoints',
        'bind_distinguished_name': :'bindDistinguishedName',
        'password_secret_id': :'passwordSecretId',
        'password_secret_version': :'passwordSecretVersion'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'connector_type': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'endpoints': :'Array<OCI::FileStorage::Models::Endpoint>',
        'bind_distinguished_name': :'String',
        'password_secret_id': :'String',
        'password_secret_version': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :availability_domain The value to assign to the {OCI::FileStorage::Models::CreateOutboundConnectorDetails#availability_domain #availability_domain} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::FileStorage::Models::CreateOutboundConnectorDetails#compartment_id #compartment_id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::FileStorage::Models::CreateOutboundConnectorDetails#display_name #display_name} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::FileStorage::Models::CreateOutboundConnectorDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::FileStorage::Models::CreateOutboundConnectorDetails#defined_tags #defined_tags} proprety
    # @option attributes [Array<OCI::FileStorage::Models::Endpoint>] :endpoints The value to assign to the {#endpoints} property
    # @option attributes [String] :bind_distinguished_name The value to assign to the {#bind_distinguished_name} property
    # @option attributes [String] :password_secret_id The value to assign to the {#password_secret_id} property
    # @option attributes [Integer] :password_secret_version The value to assign to the {#password_secret_version} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['connectorType'] = 'LDAPBIND'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.endpoints = attributes[:'endpoints'] if attributes[:'endpoints']

      self.bind_distinguished_name = attributes[:'bindDistinguishedName'] if attributes[:'bindDistinguishedName']

      raise 'You cannot provide both :bindDistinguishedName and :bind_distinguished_name' if attributes.key?(:'bindDistinguishedName') && attributes.key?(:'bind_distinguished_name')

      self.bind_distinguished_name = attributes[:'bind_distinguished_name'] if attributes[:'bind_distinguished_name']

      self.password_secret_id = attributes[:'passwordSecretId'] if attributes[:'passwordSecretId']

      raise 'You cannot provide both :passwordSecretId and :password_secret_id' if attributes.key?(:'passwordSecretId') && attributes.key?(:'password_secret_id')

      self.password_secret_id = attributes[:'password_secret_id'] if attributes[:'password_secret_id']

      self.password_secret_version = attributes[:'passwordSecretVersion'] if attributes[:'passwordSecretVersion']

      raise 'You cannot provide both :passwordSecretVersion and :password_secret_version' if attributes.key?(:'passwordSecretVersion') && attributes.key?(:'password_secret_version')

      self.password_secret_version = attributes[:'password_secret_version'] if attributes[:'password_secret_version']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        availability_domain == other.availability_domain &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        connector_type == other.connector_type &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        endpoints == other.endpoints &&
        bind_distinguished_name == other.bind_distinguished_name &&
        password_secret_id == other.password_secret_id &&
        password_secret_version == other.password_secret_version
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [availability_domain, compartment_id, display_name, connector_type, freeform_tags, defined_tags, endpoints, bind_distinguished_name, password_secret_id, password_secret_version].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
