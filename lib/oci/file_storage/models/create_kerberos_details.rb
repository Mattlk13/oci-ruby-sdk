# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20171215
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Kerberos details needed to create configuration.
  #
  class FileStorage::Models::CreateKerberosDetails
    # **[Required]** The Kerberos realm that the mount target will join.
    # @return [String]
    attr_accessor :kerberos_realm

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the keytab Secret in the Vault.
    # @return [String]
    attr_accessor :key_tab_secret_id

    # Version of the keytab Secret in the Vault to use.
    # @return [Integer]
    attr_accessor :current_key_tab_secret_version

    # Version of the keytab Secret in the Vault to use as a backup.
    # @return [Integer]
    attr_accessor :backup_key_tab_secret_version

    # Specifies whether to enable or disable Kerberos.
    # @return [BOOLEAN]
    attr_accessor :is_kerberos_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'kerberos_realm': :'kerberosRealm',
        'key_tab_secret_id': :'keyTabSecretId',
        'current_key_tab_secret_version': :'currentKeyTabSecretVersion',
        'backup_key_tab_secret_version': :'backupKeyTabSecretVersion',
        'is_kerberos_enabled': :'isKerberosEnabled'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'kerberos_realm': :'String',
        'key_tab_secret_id': :'String',
        'current_key_tab_secret_version': :'Integer',
        'backup_key_tab_secret_version': :'Integer',
        'is_kerberos_enabled': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :kerberos_realm The value to assign to the {#kerberos_realm} property
    # @option attributes [String] :key_tab_secret_id The value to assign to the {#key_tab_secret_id} property
    # @option attributes [Integer] :current_key_tab_secret_version The value to assign to the {#current_key_tab_secret_version} property
    # @option attributes [Integer] :backup_key_tab_secret_version The value to assign to the {#backup_key_tab_secret_version} property
    # @option attributes [BOOLEAN] :is_kerberos_enabled The value to assign to the {#is_kerberos_enabled} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.kerberos_realm = attributes[:'kerberosRealm'] if attributes[:'kerberosRealm']

      raise 'You cannot provide both :kerberosRealm and :kerberos_realm' if attributes.key?(:'kerberosRealm') && attributes.key?(:'kerberos_realm')

      self.kerberos_realm = attributes[:'kerberos_realm'] if attributes[:'kerberos_realm']

      self.key_tab_secret_id = attributes[:'keyTabSecretId'] if attributes[:'keyTabSecretId']

      raise 'You cannot provide both :keyTabSecretId and :key_tab_secret_id' if attributes.key?(:'keyTabSecretId') && attributes.key?(:'key_tab_secret_id')

      self.key_tab_secret_id = attributes[:'key_tab_secret_id'] if attributes[:'key_tab_secret_id']

      self.current_key_tab_secret_version = attributes[:'currentKeyTabSecretVersion'] if attributes[:'currentKeyTabSecretVersion']

      raise 'You cannot provide both :currentKeyTabSecretVersion and :current_key_tab_secret_version' if attributes.key?(:'currentKeyTabSecretVersion') && attributes.key?(:'current_key_tab_secret_version')

      self.current_key_tab_secret_version = attributes[:'current_key_tab_secret_version'] if attributes[:'current_key_tab_secret_version']

      self.backup_key_tab_secret_version = attributes[:'backupKeyTabSecretVersion'] if attributes[:'backupKeyTabSecretVersion']

      raise 'You cannot provide both :backupKeyTabSecretVersion and :backup_key_tab_secret_version' if attributes.key?(:'backupKeyTabSecretVersion') && attributes.key?(:'backup_key_tab_secret_version')

      self.backup_key_tab_secret_version = attributes[:'backup_key_tab_secret_version'] if attributes[:'backup_key_tab_secret_version']

      self.is_kerberos_enabled = attributes[:'isKerberosEnabled'] unless attributes[:'isKerberosEnabled'].nil?

      raise 'You cannot provide both :isKerberosEnabled and :is_kerberos_enabled' if attributes.key?(:'isKerberosEnabled') && attributes.key?(:'is_kerberos_enabled')

      self.is_kerberos_enabled = attributes[:'is_kerberos_enabled'] unless attributes[:'is_kerberos_enabled'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        kerberos_realm == other.kerberos_realm &&
        key_tab_secret_id == other.key_tab_secret_id &&
        current_key_tab_secret_version == other.current_key_tab_secret_version &&
        backup_key_tab_secret_version == other.backup_key_tab_secret_version &&
        is_kerberos_enabled == other.is_kerberos_enabled
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [kerberos_realm, key_tab_secret_id, current_key_tab_secret_version, backup_key_tab_secret_version, is_kerberos_enabled].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
