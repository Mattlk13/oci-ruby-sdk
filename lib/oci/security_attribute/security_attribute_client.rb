# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240815

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the Security Attributes API to manage security attributes and security attribute namespaces. For more information, see the documentation for [Security Attributes](/iaas/Content/zero-trust-packet-routing/managing-security-attributes.htm) and [Security Attribute Namespaces](/iaas/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
  class SecurityAttribute::SecurityAttributeClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new SecurityAttributeClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20240815'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "SecurityAttributeClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://security-attribute.{region}.oci.{secondLevelDomain}') + '/20240815'
      logger.info "SecurityAttributeClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes the specified security attribute definitions. This operation triggers a process that removes the
    # security attributes from all resources in your tenancy. The security attributes must be within the same security attribute namespace.
    #
    # The following actions happen immediately:
    #
    # After you start this operation, the state of the tag changes to DELETING, and security attribute removal
    # from resources begins. This process can take up to 48 hours depending on the number of resources that
    # are tagged and the regions in which those resources reside.
    #
    # When all security attributes have been removed, the state changes to DELETED. You cannot restore a deleted security attribute. After the security attribute state
    # changes to DELETED, you can use the same security attribute name again.
    #
    # After you start this operation, you cannot start either the {#delete_security_attribute delete_security_attribute} or the {#cascading_delete_security_attribute_namespace cascading_delete_security_attribute_namespace} operation until this process completes.
    #
    # In order to delete security attribute, you must first retire the security attribute. Use {#update_security_attribute_namespace update_security_attribute_namespace}
    # to retire a security attribute.
    #
    # @param [OCI::SecurityAttribute::Models::BulkDeleteSecurityAttributesDetails] bulk_delete_security_attributes_details Request object for deleting security attributes in bulk.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/bulk_delete_security_attributes.rb.html) to see an example of how to use bulk_delete_security_attributes API.
    def bulk_delete_security_attributes(bulk_delete_security_attributes_details, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#bulk_delete_security_attributes.' if logger

      raise "Missing the required parameter 'bulk_delete_security_attributes_details' when calling bulk_delete_security_attributes." if bulk_delete_security_attributes_details.nil?

      path = '/securityAttributes/actions/bulkDelete'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(bulk_delete_security_attributes_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#bulk_delete_security_attributes') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Edits the specified list of security attributes for the selected resources.
    # This operation triggers a process that edits the attributes on all selected resources. The possible actions are:
    #
    #   * Add a security attribute when it does not already exist on the resource.
    #   * Update the value for a security attribute when it is present on the resource.
    #   * Add a security attribute when it does not already exist on the resource or update the value when it is present on the resource.
    #   * Remove a security attribute from a resource. The security attribute is removed from the resource regardless of the value.
    #
    # The edits can include a combination of operations and attributes.
    # However, multiple operations cannot apply to the same attribute in the same request.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [OCI::SecurityAttribute::Models::BulkEditSecurityAttributeDetails] :bulk_edit_security_attribute_details The request object for bulk editing security attributes on resources in the compartment.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/bulk_edit_security_attributes.rb.html) to see an example of how to use bulk_edit_security_attributes API.
    def bulk_edit_security_attributes(opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#bulk_edit_security_attributes.' if logger


      path = '/securityAttributes/actions/bulkEdit'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(opts[:bulk_edit_security_attribute_details])

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#bulk_edit_security_attributes') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes the specified security attribute namespace. This operation triggers a process that removes all of the security attributes
    # defined in the specified security attribute namespace from all resources in your tenancy and then deletes the security attribute namespace.
    #
    # After you start the delete operation:
    #
    #   * New security attribute key definitions cannot be created under the namespace.
    #   * The state of the security attribute namespace changes to DELETING.
    #   * Security attribute removal from the resources begins.
    #
    # This process can take up to 48 hours depending on the number of security attributes in the namespace, the number of resources
    # that are tagged, and the locations of the regions in which those resources reside.
    #
    # After all security attributes are removed, the state changes to DELETED. You cannot restore a deleted security attribute namespace. After the deleted security attribute namespace
    # changes its state to DELETED, you can use the name of the deleted security attribute namespace again.
    #
    # After you start this operation, you cannot start either the {#delete_security_attribute delete_security_attribute} or the {#bulk_delete_security_attributes bulk_delete_security_attributes} operation until this process completes.
    #
    # To delete a security attribute namespace, you must first retire it. Use {#update_security_attribute_namespace update_security_attribute_namespace}
    # to retire a security attribute namespace.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource, set the
    #   `if-match` parameter to the value of the etag from a previous GET or POST response for
    #   that resource. The resource will be updated or deleted only if the etag you provide
    #   matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/cascading_delete_security_attribute_namespace.rb.html) to see an example of how to use cascading_delete_security_attribute_namespace API.
    def cascading_delete_security_attribute_namespace(security_attribute_namespace_id, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#cascading_delete_security_attribute_namespace.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling cascading_delete_security_attribute_namespace." if security_attribute_namespace_id.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}/actions/cascadeDelete'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#cascading_delete_security_attribute_namespace') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves the specified security attribute namespace to the specified compartment within the same tenancy.
    #
    # To move the security attribute namespace, you must have the manage security-attributes permission on both compartments.
    # For more information about IAM policies, see [Details for IAM](https://docs.cloud.oracle.com/Content/Identity/policyreference/iampolicyreference.htm).
    #
    # Moving a security attribute namespace moves all the security attributes contained in the security attribute namespace.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [OCI::SecurityAttribute::Models::ChangeSecurityAttributeNamespaceCompartmentDetails] change_security_attribute_namespace_compartment_details Request object for changing the compartment of a security attribute namespace.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource, set the
    #   `if-match` parameter to the value of the etag from a previous GET or POST response for
    #   that resource. The resource will be updated or deleted only if the etag you provide
    #   matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/change_security_attribute_namespace_compartment.rb.html) to see an example of how to use change_security_attribute_namespace_compartment API.
    def change_security_attribute_namespace_compartment(security_attribute_namespace_id, change_security_attribute_namespace_compartment_details, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#change_security_attribute_namespace_compartment.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling change_security_attribute_namespace_compartment." if security_attribute_namespace_id.nil?
      raise "Missing the required parameter 'change_security_attribute_namespace_compartment_details' when calling change_security_attribute_namespace_compartment." if change_security_attribute_namespace_compartment_details.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}/actions/changeCompartment'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_security_attribute_namespace_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#change_security_attribute_namespace_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new security attribute in the specified security attribute namespace.
    #
    # The security attribute requires either the OCID or the name of the security attribute namespace that will contain this
    # security attribute.
    #
    # You must specify a *name* for the attribute, which must be unique across all attributes in the security attribute namespace
    # and cannot be changed. The only valid characters for security attribute names are:\u00A00-9, A-Z, a-z, -, _ characters.
    # Names are case insensitive. That means, for example, \"mySecurityAttribute\" and \"mysecurityattribute\" are not allowed in the same namespace.
    # If you specify a name that's already in use in the security attribute namespace, a 409 error is returned.
    #
    # The security attribute must have a *description*. It does not have to be unique, and you can change it with
    # {#update_security_attribute update_security_attribute}.
    #
    # The security attribute must have a value type, which is specified with a validator. Security attribute can use either a
    # static value or a list of possible values. Static values are entered by a user applying the security attribute
    # to a resource. Lists are created by the user and the user must apply a value from the list. Lists
    # are validated.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [OCI::SecurityAttribute::Models::CreateSecurityAttributeDetails] create_security_attribute_details Request object for creating a new security attribute in the specified security attribute namespace.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::SecurityAttribute::Models::SecurityAttribute SecurityAttribute}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/create_security_attribute.rb.html) to see an example of how to use create_security_attribute API.
    def create_security_attribute(security_attribute_namespace_id, create_security_attribute_details, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#create_security_attribute.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling create_security_attribute." if security_attribute_namespace_id.nil?
      raise "Missing the required parameter 'create_security_attribute_details' when calling create_security_attribute." if create_security_attribute_details.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_security_attribute_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#create_security_attribute') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::SecurityAttribute::Models::SecurityAttribute'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new security attribute namespace in the specified compartment.
    #
    # You must specify the compartment ID in the request object (remember that the tenancy is simply the root
    # compartment).
    #
    # You must also specify a *name* for the namespace, which must be unique across all namespaces in your tenancy
    # and cannot be changed. The only valid characters for security attribute names are: \u00A00-9, A-Z, a-z, -, _ characters.
    # Names are case insensitive. That means, for example, \"myNamespace\" and \"mynamespace\" are not allowed
    # in the same tenancy. Once you created a namespace, you cannot change the name.
    # If you specify a name that's already in use in the tenancy, a 409 error is returned.
    #
    # You must also specify a *description* for the namespace.
    # It does not have to be unique, and you can change it with
    # {#update_security_attribute_namespace update_security_attribute_namespace}.
    #
    # @param [OCI::SecurityAttribute::Models::CreateSecurityAttributeNamespaceDetails] create_security_attribute_namespace_details Request object for creating a new security attribute namespace.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::SecurityAttribute::Models::SecurityAttributeNamespace SecurityAttributeNamespace}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/create_security_attribute_namespace.rb.html) to see an example of how to use create_security_attribute_namespace API.
    def create_security_attribute_namespace(create_security_attribute_namespace_details, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#create_security_attribute_namespace.' if logger

      raise "Missing the required parameter 'create_security_attribute_namespace_details' when calling create_security_attribute_namespace." if create_security_attribute_namespace_details.nil?

      path = '/securityAttributeNamespaces'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_security_attribute_namespace_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#create_security_attribute_namespace') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::SecurityAttribute::Models::SecurityAttributeNamespace'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes the specified security attribute. This operation triggers a process that removes the
    # security attribute from all resources in your tenancy.
    #
    # When you start the delete operation, the state of the security attribute changes to DELETING and security attribute removal
    # from resources begins. This can take up to 48 hours depending on the number of resources that
    # were tagged as well as the regions in which those resources reside.
    #
    # When all attributes have been removed, the state changes to DELETED. You cannot restore a deleted attribute. Once the deleted attribute
    # changes its state to DELETED, you can use the same security attribute name again.
    #
    # After you start this operation, you cannot start either the {#bulk_delete_security_attributes bulk_delete_security_attributes} or the {#cascading_delete_security_attribute_namespace cascading_delete_security_attribute_namespace} operation until this process completes.
    #
    # To delete a security attribute, you must first retire it. Use {#update_security_attribute update_security_attribute}
    # to retire a security attribute.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [String] security_attribute_name The name of the security attribute.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource, set the
    #   `if-match` parameter to the value of the etag from a previous GET or POST response for
    #   that resource. The resource will be updated or deleted only if the etag you provide
    #   matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/delete_security_attribute.rb.html) to see an example of how to use delete_security_attribute API.
    def delete_security_attribute(security_attribute_namespace_id, security_attribute_name, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#delete_security_attribute.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling delete_security_attribute." if security_attribute_namespace_id.nil?
      raise "Missing the required parameter 'security_attribute_name' when calling delete_security_attribute." if security_attribute_name.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)
      raise "Parameter value for 'security_attribute_name' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_name)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s).sub('{securityAttributeName}', security_attribute_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#delete_security_attribute') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes the specified security attribute namespace. Only an empty security attribute namespace can be deleted with this operation. To use this operation
    # to delete a security attribute namespace that contains security attributes, first delete all of its security attributes.
    # Use {#delete_security_attribute delete_security_attribute} to delete a security attribute.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource, set the
    #   `if-match` parameter to the value of the etag from a previous GET or POST response for
    #   that resource. The resource will be updated or deleted only if the etag you provide
    #   matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/delete_security_attribute_namespace.rb.html) to see an example of how to use delete_security_attribute_namespace API.
    def delete_security_attribute_namespace(security_attribute_namespace_id, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#delete_security_attribute_namespace.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling delete_security_attribute_namespace." if security_attribute_namespace_id.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#delete_security_attribute_namespace') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the specified security attribute's information.
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [String] security_attribute_name The name of the security attribute.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::SecurityAttribute::Models::SecurityAttribute SecurityAttribute}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/get_security_attribute.rb.html) to see an example of how to use get_security_attribute API.
    def get_security_attribute(security_attribute_namespace_id, security_attribute_name, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#get_security_attribute.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling get_security_attribute." if security_attribute_namespace_id.nil?
      raise "Missing the required parameter 'security_attribute_name' when calling get_security_attribute." if security_attribute_name.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)
      raise "Parameter value for 'security_attribute_name' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_name)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s).sub('{securityAttributeName}', security_attribute_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#get_security_attribute') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::SecurityAttribute::Models::SecurityAttribute'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the specified security attribute namespace's information.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::SecurityAttribute::Models::SecurityAttributeNamespace SecurityAttributeNamespace}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/get_security_attribute_namespace.rb.html) to see an example of how to use get_security_attribute_namespace API.
    def get_security_attribute_namespace(security_attribute_namespace_id, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#get_security_attribute_namespace.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling get_security_attribute_namespace." if security_attribute_namespace_id.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#get_security_attribute_namespace') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::SecurityAttribute::Models::SecurityAttributeNamespace'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets details on a specified work request. The workRequestID is returned in the opc-work-request-id header
    # for any asynchronous operation in security attributes service.
    #
    # @param [String] work_request_id The OCID of the work request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::SecurityAttribute::Models::SecurityAttributeWorkRequest SecurityAttributeWorkRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/get_security_attribute_work_request.rb.html) to see an example of how to use get_security_attribute_work_request API.
    def get_security_attribute_work_request(work_request_id, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#get_security_attribute_work_request.' if logger

      raise "Missing the required parameter 'work_request_id' when calling get_security_attribute_work_request." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/securityAttributeWorkRequests/{workRequestId}'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#get_security_attribute_work_request') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::SecurityAttribute::Models::SecurityAttributeWorkRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the security attribute namespaces in the specified compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous \"List\" call.
    #
    # @option opts [Integer] :limit The maximum number of items to return in a paginated \"List\" call.
    #
    # @option opts [String] :sort_order The sort order to use, either ascending (`ASC`) or descending (`DESC`).
    # @option opts [String] :sort_by The field to sort by. You can provide one sort order (`sortOrder`). Default order for
    #   TIMECREATED is descending. Default order for NAME is ascending. The NAME
    #   sort order is case sensitive.
    #
    #   **Note:** In general, some \"List\" operations (for example, `ListInstances`) let you
    #   optionally filter by Availability Domain if the scope of the resource type is within a
    #   single Availability Domain. If you call one of these \"List\" operations without specifying
    #   an Availability Domain, the resources are grouped by Availability Domain, then sorted.
    #
    #   Allowed values are: TIMECREATED, NAME
    # @option opts [String] :name A filter to return only resources that match the entire display name given.
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [BOOLEAN] :compartment_id_in_subtree An optional boolean parameter indicating whether to retrieve all security attribute namespaces in subcompartments. If this
    #   parameter is not specified, only the namespaces defined in the specified compartment are retrieved.
    #
    # @option opts [String] :lifecycle_state A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
    #
    # @return [Response] A Response object with data of type Array<{OCI::SecurityAttribute::Models::SecurityAttributeNamespaceSummary SecurityAttributeNamespaceSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/list_security_attribute_namespaces.rb.html) to see an example of how to use list_security_attribute_namespaces API.
    def list_security_attribute_namespaces(opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#list_security_attribute_namespaces.' if logger


      if opts[:sort_order] && !OCI::SecurityAttribute::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::SecurityAttribute::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[TIMECREATED NAME].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of TIMECREATED, NAME.'
      end

      if opts[:lifecycle_state] && !OCI::SecurityAttribute::Models::SecurityAttributeNamespace::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::SecurityAttribute::Models::SecurityAttributeNamespace::LIFECYCLE_STATE_ENUM.'
      end

      path = '/securityAttributeNamespaces'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:compartmentIdInSubtree] = opts[:compartment_id_in_subtree] if !opts[:compartment_id_in_subtree].nil?
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#list_security_attribute_namespaces') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::SecurityAttribute::Models::SecurityAttributeNamespaceSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the errors for a work request.
    #
    # @param [String] work_request_id The OCID of the work request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous \"List\" call.
    #
    # @option opts [Integer] :limit The maximum number of items to return in a paginated \"List\" call.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type Array<{OCI::SecurityAttribute::Models::SecurityAttributeWorkRequestErrorSummary SecurityAttributeWorkRequestErrorSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/list_security_attribute_work_request_errors.rb.html) to see an example of how to use list_security_attribute_work_request_errors API.
    def list_security_attribute_work_request_errors(work_request_id, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#list_security_attribute_work_request_errors.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_security_attribute_work_request_errors." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/securityAttributeWorkRequests/{workRequestId}/errors'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#list_security_attribute_work_request_errors') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::SecurityAttribute::Models::SecurityAttributeWorkRequestErrorSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the logs for a work request.
    #
    # @param [String] work_request_id The OCID of the work request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous \"List\" call.
    #
    # @option opts [Integer] :limit The maximum number of items to return in a paginated \"List\" call.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type Array<{OCI::SecurityAttribute::Models::SecurityAttributeWorkRequestLogSummary SecurityAttributeWorkRequestLogSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/list_security_attribute_work_request_logs.rb.html) to see an example of how to use list_security_attribute_work_request_logs API.
    def list_security_attribute_work_request_logs(work_request_id, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#list_security_attribute_work_request_logs.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_security_attribute_work_request_logs." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/securityAttributeWorkRequests/{workRequestId}/logs'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#list_security_attribute_work_request_logs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::SecurityAttribute::Models::SecurityAttributeWorkRequestLogSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the security attribute work requests in compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous \"List\" call.
    #
    # @option opts [Integer] :limit The maximum number of items to return in a paginated \"List\" call.
    #
    # @option opts [String] :resource_identifier The identifier of the resource the work request affects.
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type Array<{OCI::SecurityAttribute::Models::SecurityAttributeWorkRequestSummary SecurityAttributeWorkRequestSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/list_security_attribute_work_requests.rb.html) to see an example of how to use list_security_attribute_work_requests API.
    def list_security_attribute_work_requests(opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#list_security_attribute_work_requests.' if logger


      path = '/securityAttributeWorkRequests/'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:resourceIdentifier] = opts[:resource_identifier] if opts[:resource_identifier]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#list_security_attribute_work_requests') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::SecurityAttribute::Models::SecurityAttributeWorkRequestSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the security attributes in the specified namespace.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :page The value of the `opc-next-page` response header from the previous \"List\" call.
    #
    # @option opts [Integer] :limit The maximum number of items to return in a paginated \"List\" call.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :lifecycle_state A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
    #
    # @return [Response] A Response object with data of type Array<{OCI::SecurityAttribute::Models::SecurityAttributeSummary SecurityAttributeSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/list_security_attributes.rb.html) to see an example of how to use list_security_attributes API.
    def list_security_attributes(security_attribute_namespace_id, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#list_security_attributes.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling list_security_attributes." if security_attribute_namespace_id.nil?

      if opts[:lifecycle_state] && !OCI::SecurityAttribute::Models::SecurityAttribute::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::SecurityAttribute::Models::SecurityAttribute::LIFECYCLE_STATE_ENUM.'
      end
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#list_security_attributes') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::SecurityAttribute::Models::SecurityAttributeSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the specified security attribute. You can only update `description`, and `isRetired`.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [String] security_attribute_name The name of the security attribute.
    #
    # @param [OCI::SecurityAttribute::Models::UpdateSecurityAttributeDetails] update_security_attribute_details Request object for updating a security attribute.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource, set the
    #   `if-match` parameter to the value of the etag from a previous GET or POST response for
    #   that resource. The resource will be updated or deleted only if the etag you provide
    #   matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::SecurityAttribute::Models::SecurityAttribute SecurityAttribute}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/update_security_attribute.rb.html) to see an example of how to use update_security_attribute API.
    def update_security_attribute(security_attribute_namespace_id, security_attribute_name, update_security_attribute_details, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#update_security_attribute.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling update_security_attribute." if security_attribute_namespace_id.nil?
      raise "Missing the required parameter 'security_attribute_name' when calling update_security_attribute." if security_attribute_name.nil?
      raise "Missing the required parameter 'update_security_attribute_details' when calling update_security_attribute." if update_security_attribute_details.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)
      raise "Parameter value for 'security_attribute_name' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_name)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}/securityAttributes/{securityAttributeName}'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s).sub('{securityAttributeName}', security_attribute_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(update_security_attribute_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#update_security_attribute') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::SecurityAttribute::Models::SecurityAttribute'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the specified security attribute namespace. You can't update the namespace name.
    #
    # Updating `isRetired` to 'true' retires the namespace and all the security attributes in the namespace. Reactivating a
    # namespace (changing `isRetired` from 'true' to 'false') does not reactivate security attributes.
    # To reactivate the security attributes, you must reactivate each one individually *after* you reactivate the namespace,
    # using {#update_security_attribute update_security_attribute}. For more information about retiring security attribute namespaces, see
    # [Managing Security Attribute Namespaces](https://docs.cloud.oracle.com/Content/zero-trust-packet-routing/managing-security-attribute-namespaces.htm).
    #
    # You can't add a namespace with the same name as a retired namespace in the same tenancy.
    #
    # @param [String] security_attribute_namespace_id The OCID of the security attribute namespace.
    #
    # @param [OCI::SecurityAttribute::Models::UpdateSecurityAttributeNamespaceDetails] update_security_attribute_namespace_details Request object for updating a namespace.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource, set the
    #   `if-match` parameter to the value of the etag from a previous GET or POST response for
    #   that resource. The resource will be updated or deleted only if the etag you provide
    #   matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact
    #   Oracle about a particular request, please provide the request ID.
    #   The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of running that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and removed from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::SecurityAttribute::Models::SecurityAttributeNamespace SecurityAttributeNamespace}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/securityattribute/update_security_attribute_namespace.rb.html) to see an example of how to use update_security_attribute_namespace API.
    def update_security_attribute_namespace(security_attribute_namespace_id, update_security_attribute_namespace_details, opts = {})
      logger.debug 'Calling operation SecurityAttributeClient#update_security_attribute_namespace.' if logger

      raise "Missing the required parameter 'security_attribute_namespace_id' when calling update_security_attribute_namespace." if security_attribute_namespace_id.nil?
      raise "Missing the required parameter 'update_security_attribute_namespace_details' when calling update_security_attribute_namespace." if update_security_attribute_namespace_details.nil?
      raise "Parameter value for 'security_attribute_namespace_id' must not be blank" if OCI::Internal::Util.blank_string?(security_attribute_namespace_id)

      path = '/securityAttributeNamespaces/{securityAttributeNamespaceId}'.sub('{securityAttributeNamespaceId}', security_attribute_namespace_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(update_security_attribute_namespace_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SecurityAttributeClient#update_security_attribute_namespace') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::SecurityAttribute::Models::SecurityAttributeNamespace'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
