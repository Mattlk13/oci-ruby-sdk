# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20211101

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This class provides a wrapper around {OCI::MediaServices::MediaServicesClient} and offers convenience methods
  # for operations that would otherwise need to be chained together. For example, instead of performing an action
  # on a resource (e.g. launching an instance, creating a load balancer) and then using a waiter to wait for the resource
  # to enter a given state, you can call a single method in this class to accomplish the same functionality
  class MediaServices::MediaServicesClientCompositeOperations
    # The {OCI::MediaServices::MediaServicesClient} used to communicate with the service_client
    #
    # @return [OCI::MediaServices::MediaServicesClient]
    attr_reader :service_client

    # Initializes a new MediaServicesClientCompositeOperations
    #
    # @param [OCI::MediaServices::MediaServicesClient] service_client The client used to communicate with the service.
    #   Defaults to a new service client created via {OCI::MediaServices::MediaServicesClient#initialize} with no arguments
    def initialize(service_client = OCI::MediaServices::MediaServicesClient.new)
      @service_client = service_client
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#add_media_asset_lock} and then waits for the {OCI::MediaServices::Models::MediaAsset} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_lock_details The details to be updated for the AddLock.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaAsset#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#add_media_asset_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaAsset}
    def add_media_asset_lock_and_wait_for_state(add_lock_details, media_asset_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.add_media_asset_lock(add_lock_details, media_asset_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_asset(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#add_media_workflow_configuration_lock} and then waits for the {OCI::MediaServices::Models::MediaWorkflowConfiguration} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowConfiguration#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#add_media_workflow_configuration_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration}
    def add_media_workflow_configuration_lock_and_wait_for_state(add_resource_lock_details, media_workflow_configuration_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.add_media_workflow_configuration_lock(add_resource_lock_details, media_workflow_configuration_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_configuration(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#add_media_workflow_job_lock} and then waits for the {OCI::MediaServices::Models::MediaWorkflowJob} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_lock_details The details to be updated for the AddLock.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowJob#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#add_media_workflow_job_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowJob}
    def add_media_workflow_job_lock_and_wait_for_state(add_lock_details, media_workflow_job_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.add_media_workflow_job_lock(add_lock_details, media_workflow_job_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_job(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#add_media_workflow_lock} and then waits for the {OCI::MediaServices::Models::MediaWorkflow} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflow#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#add_media_workflow_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflow}
    def add_media_workflow_lock_and_wait_for_state(add_resource_lock_details, media_workflow_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.add_media_workflow_lock(add_resource_lock_details, media_workflow_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#add_stream_cdn_config_lock} and then waits for the {OCI::MediaServices::Models::StreamCdnConfig} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamCdnConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#add_stream_cdn_config_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamCdnConfig}
    def add_stream_cdn_config_lock_and_wait_for_state(add_resource_lock_details, stream_cdn_config_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.add_stream_cdn_config_lock(add_resource_lock_details, stream_cdn_config_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_cdn_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#add_stream_distribution_channel_lock} and then waits for the {OCI::MediaServices::Models::StreamDistributionChannel} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamDistributionChannel#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#add_stream_distribution_channel_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamDistributionChannel}
    def add_stream_distribution_channel_lock_and_wait_for_state(add_resource_lock_details, stream_distribution_channel_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.add_stream_distribution_channel_lock(add_resource_lock_details, stream_distribution_channel_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_distribution_channel(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#add_stream_packaging_config_lock} and then waits for the {OCI::MediaServices::Models::StreamPackagingConfig} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamPackagingConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#add_stream_packaging_config_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamPackagingConfig}
    def add_stream_packaging_config_lock_and_wait_for_state(add_resource_lock_details, stream_packaging_config_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.add_stream_packaging_config_lock(add_resource_lock_details, stream_packaging_config_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_packaging_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#create_media_asset} and then waits for the {OCI::MediaServices::Models::MediaAsset} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::CreateMediaAssetDetails] create_media_asset_details Details for the new MediaAsset.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaAsset#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#create_media_asset}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaAsset}
    def create_media_asset_and_wait_for_state(create_media_asset_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_media_asset(create_media_asset_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_asset(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#create_media_workflow} and then waits for the {OCI::MediaServices::Models::MediaWorkflow} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::CreateMediaWorkflowDetails] create_media_workflow_details Details for the new MediaWorkflow.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflow#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#create_media_workflow}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflow}
    def create_media_workflow_and_wait_for_state(create_media_workflow_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_media_workflow(create_media_workflow_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#create_media_workflow_configuration} and then waits for the {OCI::MediaServices::Models::MediaWorkflowConfiguration} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::CreateMediaWorkflowConfigurationDetails] create_media_workflow_configuration_details Details for the new MediaWorkflowConfiguration.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowConfiguration#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#create_media_workflow_configuration}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration}
    def create_media_workflow_configuration_and_wait_for_state(create_media_workflow_configuration_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_media_workflow_configuration(create_media_workflow_configuration_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_configuration(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#create_media_workflow_job} and then waits for the {OCI::MediaServices::Models::MediaWorkflowJob} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::CreateMediaWorkflowJobDetails] create_media_workflow_job_details The information to run the mediaWorkflow.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowJob#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#create_media_workflow_job}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowJob}
    def create_media_workflow_job_and_wait_for_state(create_media_workflow_job_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_media_workflow_job(create_media_workflow_job_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_job(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#create_stream_cdn_config} and then waits for the {OCI::MediaServices::Models::StreamCdnConfig} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::CreateStreamCdnConfigDetails] create_stream_cdn_config_details Details for the new StreamCdnConfig.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamCdnConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#create_stream_cdn_config}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamCdnConfig}
    def create_stream_cdn_config_and_wait_for_state(create_stream_cdn_config_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_stream_cdn_config(create_stream_cdn_config_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_cdn_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#create_stream_distribution_channel} and then waits for the {OCI::MediaServices::Models::StreamDistributionChannel} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::CreateStreamDistributionChannelDetails] create_stream_distribution_channel_details Details for the new Stream Distribution Channel.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamDistributionChannel#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#create_stream_distribution_channel}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamDistributionChannel}
    def create_stream_distribution_channel_and_wait_for_state(create_stream_distribution_channel_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_stream_distribution_channel(create_stream_distribution_channel_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_distribution_channel(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#create_stream_packaging_config} and then waits for the {OCI::MediaServices::Models::StreamPackagingConfig} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::CreateStreamPackagingConfigDetails] create_stream_packaging_config_details Details for the new Stream Packaging Configuration.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamPackagingConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#create_stream_packaging_config}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamPackagingConfig}
    def create_stream_packaging_config_and_wait_for_state(create_stream_packaging_config_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_stream_packaging_config(create_stream_packaging_config_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_packaging_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#delete_media_asset} and then waits for the {OCI::MediaServices::Models::MediaAsset} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaAsset#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#delete_media_asset}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_media_asset_and_wait_for_state(media_asset_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_media_asset(media_asset_id)
      operation_result = @service_client.delete_media_asset(media_asset_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#delete_media_workflow} and then waits for the {OCI::MediaServices::Models::MediaWorkflow} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflow#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#delete_media_workflow}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_media_workflow_and_wait_for_state(media_workflow_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_media_workflow(media_workflow_id)
      operation_result = @service_client.delete_media_workflow(media_workflow_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#delete_media_workflow_configuration} and then waits for the {OCI::MediaServices::Models::MediaWorkflowConfiguration} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowConfiguration#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#delete_media_workflow_configuration}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_media_workflow_configuration_and_wait_for_state(media_workflow_configuration_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_media_workflow_configuration(media_workflow_configuration_id)
      operation_result = @service_client.delete_media_workflow_configuration(media_workflow_configuration_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#delete_media_workflow_job} and then waits for the {OCI::MediaServices::Models::MediaWorkflowJob} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowJob#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#delete_media_workflow_job}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_media_workflow_job_and_wait_for_state(media_workflow_job_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_media_workflow_job(media_workflow_job_id)
      operation_result = @service_client.delete_media_workflow_job(media_workflow_job_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#delete_stream_cdn_config} and then waits for the {OCI::MediaServices::Models::StreamCdnConfig} acted upon
    # to enter the given state(s).
    #
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamCdnConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#delete_stream_cdn_config}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_stream_cdn_config_and_wait_for_state(stream_cdn_config_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_stream_cdn_config(stream_cdn_config_id)
      operation_result = @service_client.delete_stream_cdn_config(stream_cdn_config_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#delete_stream_distribution_channel} and then waits for the {OCI::MediaServices::Models::StreamDistributionChannel} acted upon
    # to enter the given state(s).
    #
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamDistributionChannel#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#delete_stream_distribution_channel}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_stream_distribution_channel_and_wait_for_state(stream_distribution_channel_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_stream_distribution_channel(stream_distribution_channel_id)
      operation_result = @service_client.delete_stream_distribution_channel(stream_distribution_channel_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#delete_stream_packaging_config} and then waits for the {OCI::MediaServices::Models::StreamPackagingConfig} acted upon
    # to enter the given state(s).
    #
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamPackagingConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#delete_stream_packaging_config}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_stream_packaging_config_and_wait_for_state(stream_packaging_config_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_stream_packaging_config(stream_packaging_config_id)
      operation_result = @service_client.delete_stream_packaging_config(stream_packaging_config_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#remove_media_asset_lock} and then waits for the {OCI::MediaServices::Models::MediaAsset} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_lock_details The details to be updated for the RemoveLock.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaAsset#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#remove_media_asset_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaAsset}
    def remove_media_asset_lock_and_wait_for_state(remove_lock_details, media_asset_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.remove_media_asset_lock(remove_lock_details, media_asset_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_asset(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#remove_media_workflow_configuration_lock} and then waits for the {OCI::MediaServices::Models::MediaWorkflowConfiguration} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowConfiguration#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#remove_media_workflow_configuration_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration}
    def remove_media_workflow_configuration_lock_and_wait_for_state(remove_resource_lock_details, media_workflow_configuration_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.remove_media_workflow_configuration_lock(remove_resource_lock_details, media_workflow_configuration_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_configuration(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#remove_media_workflow_job_lock} and then waits for the {OCI::MediaServices::Models::MediaWorkflowJob} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_lock_details The details to be updated for the RemoveLock.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowJob#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#remove_media_workflow_job_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowJob}
    def remove_media_workflow_job_lock_and_wait_for_state(remove_lock_details, media_workflow_job_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.remove_media_workflow_job_lock(remove_lock_details, media_workflow_job_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_job(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#remove_media_workflow_lock} and then waits for the {OCI::MediaServices::Models::MediaWorkflow} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflow#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#remove_media_workflow_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflow}
    def remove_media_workflow_lock_and_wait_for_state(remove_resource_lock_details, media_workflow_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.remove_media_workflow_lock(remove_resource_lock_details, media_workflow_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#remove_stream_cdn_config_lock} and then waits for the {OCI::MediaServices::Models::StreamCdnConfig} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamCdnConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#remove_stream_cdn_config_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamCdnConfig}
    def remove_stream_cdn_config_lock_and_wait_for_state(remove_resource_lock_details, stream_cdn_config_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.remove_stream_cdn_config_lock(remove_resource_lock_details, stream_cdn_config_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_cdn_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#remove_stream_distribution_channel_lock} and then waits for the {OCI::MediaServices::Models::StreamDistributionChannel} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamDistributionChannel#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#remove_stream_distribution_channel_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamDistributionChannel}
    def remove_stream_distribution_channel_lock_and_wait_for_state(remove_resource_lock_details, stream_distribution_channel_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.remove_stream_distribution_channel_lock(remove_resource_lock_details, stream_distribution_channel_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_distribution_channel(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#remove_stream_packaging_config_lock} and then waits for the {OCI::MediaServices::Models::StreamPackagingConfig} acted upon
    # to enter the given state(s).
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamPackagingConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#remove_stream_packaging_config_lock}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamPackagingConfig}
    def remove_stream_packaging_config_lock_and_wait_for_state(remove_resource_lock_details, stream_packaging_config_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.remove_stream_packaging_config_lock(remove_resource_lock_details, stream_packaging_config_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_packaging_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#update_media_asset} and then waits for the {OCI::MediaServices::Models::MediaAsset} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [OCI::MediaServices::Models::UpdateMediaAssetDetails] update_media_asset_details The information to be updated.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaAsset#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#update_media_asset}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaAsset}
    def update_media_asset_and_wait_for_state(media_asset_id, update_media_asset_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_media_asset(media_asset_id, update_media_asset_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_asset(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#update_media_workflow} and then waits for the {OCI::MediaServices::Models::MediaWorkflow} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [OCI::MediaServices::Models::UpdateMediaWorkflowDetails] update_media_workflow_details The information to be updated.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflow#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#update_media_workflow}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflow}
    def update_media_workflow_and_wait_for_state(media_workflow_id, update_media_workflow_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_media_workflow(media_workflow_id, update_media_workflow_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#update_media_workflow_configuration} and then waits for the {OCI::MediaServices::Models::MediaWorkflowConfiguration} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [OCI::MediaServices::Models::UpdateMediaWorkflowConfigurationDetails] update_media_workflow_configuration_details The information to be updated.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowConfiguration#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#update_media_workflow_configuration}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration}
    def update_media_workflow_configuration_and_wait_for_state(media_workflow_configuration_id, update_media_workflow_configuration_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_media_workflow_configuration(media_workflow_configuration_id, update_media_workflow_configuration_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_configuration(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#update_media_workflow_job} and then waits for the {OCI::MediaServices::Models::MediaWorkflowJob} acted upon
    # to enter the given state(s).
    #
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [OCI::MediaServices::Models::UpdateMediaWorkflowJobDetails] update_media_workflow_job_details The information to be updated.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::MediaWorkflowJob#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#update_media_workflow_job}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::MediaWorkflowJob}
    def update_media_workflow_job_and_wait_for_state(media_workflow_job_id, update_media_workflow_job_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_media_workflow_job(media_workflow_job_id, update_media_workflow_job_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_media_workflow_job(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#update_stream_cdn_config} and then waits for the {OCI::MediaServices::Models::StreamCdnConfig} acted upon
    # to enter the given state(s).
    #
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [OCI::MediaServices::Models::UpdateStreamCdnConfigDetails] update_stream_cdn_config_details The information to be updated.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamCdnConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#update_stream_cdn_config}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamCdnConfig}
    def update_stream_cdn_config_and_wait_for_state(stream_cdn_config_id, update_stream_cdn_config_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_stream_cdn_config(stream_cdn_config_id, update_stream_cdn_config_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_cdn_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#update_stream_distribution_channel} and then waits for the {OCI::MediaServices::Models::StreamDistributionChannel} acted upon
    # to enter the given state(s).
    #
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [OCI::MediaServices::Models::UpdateStreamDistributionChannelDetails] update_stream_distribution_channel_details The information to be updated.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamDistributionChannel#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#update_stream_distribution_channel}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamDistributionChannel}
    def update_stream_distribution_channel_and_wait_for_state(stream_distribution_channel_id, update_stream_distribution_channel_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_stream_distribution_channel(stream_distribution_channel_id, update_stream_distribution_channel_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_distribution_channel(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::MediaServices::MediaServicesClient#update_stream_packaging_config} and then waits for the {OCI::MediaServices::Models::StreamPackagingConfig} acted upon
    # to enter the given state(s).
    #
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [OCI::MediaServices::Models::UpdateStreamPackagingConfigDetails] update_stream_packaging_config_details The information to be updated.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::MediaServices::Models::StreamPackagingConfig#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::MediaServices::MediaServicesClient#update_stream_packaging_config}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type {OCI::MediaServices::Models::StreamPackagingConfig}
    def update_stream_packaging_config_and_wait_for_state(stream_packaging_config_id, update_stream_packaging_config_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_stream_packaging_config(stream_packaging_config_id, update_stream_packaging_config_details, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.data.id

      begin
        waiter_result = @service_client.get_stream_packaging_config(wait_for_resource_id).wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
