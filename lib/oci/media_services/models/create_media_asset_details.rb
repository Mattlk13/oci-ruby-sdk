# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20211101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about new MediaAsset.
  class MediaServices::Models::CreateMediaAssetDetails
    TYPE_ENUM = [
      TYPE_AUDIO = 'AUDIO'.freeze,
      TYPE_VIDEO = 'VIDEO'.freeze,
      TYPE_PLAYLIST = 'PLAYLIST'.freeze,
      TYPE_IMAGE = 'IMAGE'.freeze,
      TYPE_CAPTION_FILE = 'CAPTION_FILE'.freeze,
      TYPE_UNKNOWN = 'UNKNOWN'.freeze
    ].freeze

    # The ID of the MediaWorkflow used to produce this asset.
    # @return [String]
    attr_accessor :source_media_workflow_id

    # The ID of the MediaWorkflowJob used to produce this asset.
    # @return [String]
    attr_accessor :media_workflow_job_id

    # The version of the MediaWorkflow used to produce this asset.
    # @return [Integer]
    attr_accessor :source_media_workflow_version

    # Display name for the Media Asset. Does not have to be unique. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Compartment Identifier.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The type of the media asset.
    # @return [String]
    attr_reader :type

    # The ID of the parent asset from which this asset is derived.
    # @return [String]
    attr_accessor :parent_media_asset_id

    # The ID of the senior most asset from which this asset is derived.
    # @return [String]
    attr_accessor :master_media_asset_id

    # The name of the object storage bucket where this asset is located.
    # @return [String]
    attr_accessor :bucket_name

    # The object storage namespace where this asset is located.
    # @return [String]
    attr_accessor :namespace_name

    # The object storage object name that identifies this asset.
    # @return [String]
    attr_accessor :object_name

    # eTag of the underlying object storage object.
    # @return [String]
    attr_accessor :object_etag

    # List of Metadata.
    # @return [Array<OCI::MediaServices::Models::Metadata>]
    attr_accessor :metadata

    # The start index for video segment files.
    # @return [Integer]
    attr_accessor :segment_range_start_index

    # The end index for video segment files.
    # @return [Integer]
    attr_accessor :segment_range_end_index

    # list of tags for the MediaAsset.
    # @return [Array<OCI::MediaServices::Models::MediaAssetTag>]
    attr_accessor :media_asset_tags

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Locks associated with this resource.
    # @return [Array<OCI::MediaServices::Models::ResourceLock>]
    attr_accessor :locks

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'source_media_workflow_id': :'sourceMediaWorkflowId',
        'media_workflow_job_id': :'mediaWorkflowJobId',
        'source_media_workflow_version': :'sourceMediaWorkflowVersion',
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'type': :'type',
        'parent_media_asset_id': :'parentMediaAssetId',
        'master_media_asset_id': :'masterMediaAssetId',
        'bucket_name': :'bucketName',
        'namespace_name': :'namespaceName',
        'object_name': :'objectName',
        'object_etag': :'objectEtag',
        'metadata': :'metadata',
        'segment_range_start_index': :'segmentRangeStartIndex',
        'segment_range_end_index': :'segmentRangeEndIndex',
        'media_asset_tags': :'mediaAssetTags',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'locks': :'locks'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'source_media_workflow_id': :'String',
        'media_workflow_job_id': :'String',
        'source_media_workflow_version': :'Integer',
        'display_name': :'String',
        'compartment_id': :'String',
        'type': :'String',
        'parent_media_asset_id': :'String',
        'master_media_asset_id': :'String',
        'bucket_name': :'String',
        'namespace_name': :'String',
        'object_name': :'String',
        'object_etag': :'String',
        'metadata': :'Array<OCI::MediaServices::Models::Metadata>',
        'segment_range_start_index': :'Integer',
        'segment_range_end_index': :'Integer',
        'media_asset_tags': :'Array<OCI::MediaServices::Models::MediaAssetTag>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'locks': :'Array<OCI::MediaServices::Models::ResourceLock>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :source_media_workflow_id The value to assign to the {#source_media_workflow_id} property
    # @option attributes [String] :media_workflow_job_id The value to assign to the {#media_workflow_job_id} property
    # @option attributes [Integer] :source_media_workflow_version The value to assign to the {#source_media_workflow_version} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :parent_media_asset_id The value to assign to the {#parent_media_asset_id} property
    # @option attributes [String] :master_media_asset_id The value to assign to the {#master_media_asset_id} property
    # @option attributes [String] :bucket_name The value to assign to the {#bucket_name} property
    # @option attributes [String] :namespace_name The value to assign to the {#namespace_name} property
    # @option attributes [String] :object_name The value to assign to the {#object_name} property
    # @option attributes [String] :object_etag The value to assign to the {#object_etag} property
    # @option attributes [Array<OCI::MediaServices::Models::Metadata>] :metadata The value to assign to the {#metadata} property
    # @option attributes [Integer] :segment_range_start_index The value to assign to the {#segment_range_start_index} property
    # @option attributes [Integer] :segment_range_end_index The value to assign to the {#segment_range_end_index} property
    # @option attributes [Array<OCI::MediaServices::Models::MediaAssetTag>] :media_asset_tags The value to assign to the {#media_asset_tags} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Array<OCI::MediaServices::Models::ResourceLock>] :locks The value to assign to the {#locks} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.source_media_workflow_id = attributes[:'sourceMediaWorkflowId'] if attributes[:'sourceMediaWorkflowId']

      raise 'You cannot provide both :sourceMediaWorkflowId and :source_media_workflow_id' if attributes.key?(:'sourceMediaWorkflowId') && attributes.key?(:'source_media_workflow_id')

      self.source_media_workflow_id = attributes[:'source_media_workflow_id'] if attributes[:'source_media_workflow_id']

      self.media_workflow_job_id = attributes[:'mediaWorkflowJobId'] if attributes[:'mediaWorkflowJobId']

      raise 'You cannot provide both :mediaWorkflowJobId and :media_workflow_job_id' if attributes.key?(:'mediaWorkflowJobId') && attributes.key?(:'media_workflow_job_id')

      self.media_workflow_job_id = attributes[:'media_workflow_job_id'] if attributes[:'media_workflow_job_id']

      self.source_media_workflow_version = attributes[:'sourceMediaWorkflowVersion'] if attributes[:'sourceMediaWorkflowVersion']

      raise 'You cannot provide both :sourceMediaWorkflowVersion and :source_media_workflow_version' if attributes.key?(:'sourceMediaWorkflowVersion') && attributes.key?(:'source_media_workflow_version')

      self.source_media_workflow_version = attributes[:'source_media_workflow_version'] if attributes[:'source_media_workflow_version']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.type = attributes[:'type'] if attributes[:'type']

      self.parent_media_asset_id = attributes[:'parentMediaAssetId'] if attributes[:'parentMediaAssetId']

      raise 'You cannot provide both :parentMediaAssetId and :parent_media_asset_id' if attributes.key?(:'parentMediaAssetId') && attributes.key?(:'parent_media_asset_id')

      self.parent_media_asset_id = attributes[:'parent_media_asset_id'] if attributes[:'parent_media_asset_id']

      self.master_media_asset_id = attributes[:'masterMediaAssetId'] if attributes[:'masterMediaAssetId']

      raise 'You cannot provide both :masterMediaAssetId and :master_media_asset_id' if attributes.key?(:'masterMediaAssetId') && attributes.key?(:'master_media_asset_id')

      self.master_media_asset_id = attributes[:'master_media_asset_id'] if attributes[:'master_media_asset_id']

      self.bucket_name = attributes[:'bucketName'] if attributes[:'bucketName']

      raise 'You cannot provide both :bucketName and :bucket_name' if attributes.key?(:'bucketName') && attributes.key?(:'bucket_name')

      self.bucket_name = attributes[:'bucket_name'] if attributes[:'bucket_name']

      self.namespace_name = attributes[:'namespaceName'] if attributes[:'namespaceName']

      raise 'You cannot provide both :namespaceName and :namespace_name' if attributes.key?(:'namespaceName') && attributes.key?(:'namespace_name')

      self.namespace_name = attributes[:'namespace_name'] if attributes[:'namespace_name']

      self.object_name = attributes[:'objectName'] if attributes[:'objectName']

      raise 'You cannot provide both :objectName and :object_name' if attributes.key?(:'objectName') && attributes.key?(:'object_name')

      self.object_name = attributes[:'object_name'] if attributes[:'object_name']

      self.object_etag = attributes[:'objectEtag'] if attributes[:'objectEtag']

      raise 'You cannot provide both :objectEtag and :object_etag' if attributes.key?(:'objectEtag') && attributes.key?(:'object_etag')

      self.object_etag = attributes[:'object_etag'] if attributes[:'object_etag']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']

      self.segment_range_start_index = attributes[:'segmentRangeStartIndex'] if attributes[:'segmentRangeStartIndex']

      raise 'You cannot provide both :segmentRangeStartIndex and :segment_range_start_index' if attributes.key?(:'segmentRangeStartIndex') && attributes.key?(:'segment_range_start_index')

      self.segment_range_start_index = attributes[:'segment_range_start_index'] if attributes[:'segment_range_start_index']

      self.segment_range_end_index = attributes[:'segmentRangeEndIndex'] if attributes[:'segmentRangeEndIndex']

      raise 'You cannot provide both :segmentRangeEndIndex and :segment_range_end_index' if attributes.key?(:'segmentRangeEndIndex') && attributes.key?(:'segment_range_end_index')

      self.segment_range_end_index = attributes[:'segment_range_end_index'] if attributes[:'segment_range_end_index']

      self.media_asset_tags = attributes[:'mediaAssetTags'] if attributes[:'mediaAssetTags']

      raise 'You cannot provide both :mediaAssetTags and :media_asset_tags' if attributes.key?(:'mediaAssetTags') && attributes.key?(:'media_asset_tags')

      self.media_asset_tags = attributes[:'media_asset_tags'] if attributes[:'media_asset_tags']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.locks = attributes[:'locks'] if attributes[:'locks']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      raise "Invalid value for 'type': this must be one of the values in TYPE_ENUM." if type && !TYPE_ENUM.include?(type)

      @type = type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        source_media_workflow_id == other.source_media_workflow_id &&
        media_workflow_job_id == other.media_workflow_job_id &&
        source_media_workflow_version == other.source_media_workflow_version &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        type == other.type &&
        parent_media_asset_id == other.parent_media_asset_id &&
        master_media_asset_id == other.master_media_asset_id &&
        bucket_name == other.bucket_name &&
        namespace_name == other.namespace_name &&
        object_name == other.object_name &&
        object_etag == other.object_etag &&
        metadata == other.metadata &&
        segment_range_start_index == other.segment_range_start_index &&
        segment_range_end_index == other.segment_range_end_index &&
        media_asset_tags == other.media_asset_tags &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        locks == other.locks
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [source_media_workflow_id, media_workflow_job_id, source_media_workflow_version, display_name, compartment_id, type, parent_media_asset_id, master_media_asset_id, bucket_name, namespace_name, object_name, object_etag, metadata, segment_range_start_index, segment_range_end_index, media_asset_tags, freeform_tags, defined_tags, locks].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
