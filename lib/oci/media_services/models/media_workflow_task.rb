# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20211101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Defines the type of processing to be run at a given point in the workflow, parameters to configure the
  # processing, and any processing that must be completed before this processing begins.
  #
  class MediaServices::Models::MediaWorkflowTask
    # **[Required]** The type of process to run at this task. Refers to the name of a MediaWorkflowTaskDeclaration.
    #
    # @return [String]
    attr_accessor :type

    # **[Required]** The version of the MediaWorkflowTaskDeclaration.
    # @return [Integer]
    attr_accessor :version

    # **[Required]** A unique identifier for this task within its workflow. Keys are used to reference a task within workflows
    # and MediaWorkflowJobs. Tasks are referenced as prerequisites and to track output and state.
    #
    # @return [String]
    attr_accessor :key

    # Keys to the other tasks in this workflow that must be completed before execution of this task can begin.
    #
    # @return [Array<String>]
    attr_accessor :prerequisites

    # Allows this task to be conditionally enabled.  If no value or a blank value is given, the task is
    # unconditionally enbled.  Otherwise the given string specifies a parameter of the job created for this task's
    # workflow using the JSON pointer syntax. The JSON pointer is validated when a job is created from the workflow of this task.
    #
    # @return [String]
    attr_accessor :enable_parameter_reference

    # Used in conjunction with enableParameterReference to conditionally enable a task.  When a job is created
    # from the workflow of this task, the task will only be enabled if the value of the parameter specified by
    # enableParameterReference is equal to the value of this property. This property must be prenset if and only if
    # a enableParameterReference is given. The value is a JSON node.
    #
    # @return [Hash<String, Object>]
    attr_accessor :enable_when_referenced_parameter_equals

    # **[Required]** Data specifiying how this task is to be run. The data is a JSON object that must conform to the JSON Schema
    # specified by the parameters of the MediaWorkflowTaskDeclaration this task references. The parameters may
    # contain values or references to other parameters.
    #
    # @return [Hash<String, Object>]
    attr_accessor :parameters

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'type',
        'version': :'version',
        'key': :'key',
        'prerequisites': :'prerequisites',
        'enable_parameter_reference': :'enableParameterReference',
        'enable_when_referenced_parameter_equals': :'enableWhenReferencedParameterEquals',
        'parameters': :'parameters'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'String',
        'version': :'Integer',
        'key': :'String',
        'prerequisites': :'Array<String>',
        'enable_parameter_reference': :'String',
        'enable_when_referenced_parameter_equals': :'Hash<String, Object>',
        'parameters': :'Hash<String, Object>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [Integer] :version The value to assign to the {#version} property
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [Array<String>] :prerequisites The value to assign to the {#prerequisites} property
    # @option attributes [String] :enable_parameter_reference The value to assign to the {#enable_parameter_reference} property
    # @option attributes [Hash<String, Object>] :enable_when_referenced_parameter_equals The value to assign to the {#enable_when_referenced_parameter_equals} property
    # @option attributes [Hash<String, Object>] :parameters The value to assign to the {#parameters} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.type = attributes[:'type'] if attributes[:'type']

      self.version = attributes[:'version'] if attributes[:'version']

      self.key = attributes[:'key'] if attributes[:'key']

      self.prerequisites = attributes[:'prerequisites'] if attributes[:'prerequisites']

      self.enable_parameter_reference = attributes[:'enableParameterReference'] if attributes[:'enableParameterReference']

      raise 'You cannot provide both :enableParameterReference and :enable_parameter_reference' if attributes.key?(:'enableParameterReference') && attributes.key?(:'enable_parameter_reference')

      self.enable_parameter_reference = attributes[:'enable_parameter_reference'] if attributes[:'enable_parameter_reference']

      self.enable_when_referenced_parameter_equals = attributes[:'enableWhenReferencedParameterEquals'] if attributes[:'enableWhenReferencedParameterEquals']

      raise 'You cannot provide both :enableWhenReferencedParameterEquals and :enable_when_referenced_parameter_equals' if attributes.key?(:'enableWhenReferencedParameterEquals') && attributes.key?(:'enable_when_referenced_parameter_equals')

      self.enable_when_referenced_parameter_equals = attributes[:'enable_when_referenced_parameter_equals'] if attributes[:'enable_when_referenced_parameter_equals']

      self.parameters = attributes[:'parameters'] if attributes[:'parameters']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        version == other.version &&
        key == other.key &&
        prerequisites == other.prerequisites &&
        enable_parameter_reference == other.enable_parameter_reference &&
        enable_when_referenced_parameter_equals == other.enable_when_referenced_parameter_equals &&
        parameters == other.parameters
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, version, key, prerequisites, enable_parameter_reference, enable_when_referenced_parameter_equals, parameters].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
