# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20211101

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Media Services (includes Media Flow and Media Streams) is a fully managed service for processing media (video) source content. Use Media Flow and Media Streams to transcode and package digital video using configurable workflows and stream video outputs.
  #
  # Use the Media Services API to configure media workflows and run Media Flow jobs, create distribution channels, ingest assets, create Preview URLs and play assets. For more information, see [Media Flow](/iaas/Content/dms-mediaflow/home.htm) and [Media Streams](/iaas/Content/dms-mediastream/home.htm).
  class MediaServices::MediaServicesClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new MediaServicesClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20211101'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "MediaServicesClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://mediaservices.{region}.oci.{secondLevelDomain}') + '/20211101'
      logger.info "MediaServicesClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a lock to an MediaAsset.
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_lock_details The details to be updated for the AddLock.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAsset MediaAsset}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/add_media_asset_lock.rb.html) to see an example of how to use add_media_asset_lock API.
    def add_media_asset_lock(add_lock_details, media_asset_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#add_media_asset_lock.' if logger

      raise "Missing the required parameter 'add_lock_details' when calling add_media_asset_lock." if add_lock_details.nil?
      raise "Missing the required parameter 'media_asset_id' when calling add_media_asset_lock." if media_asset_id.nil?
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)

      path = '/mediaAssets/{mediaAssetId}/actions/addLock'.sub('{mediaAssetId}', media_asset_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#add_media_asset_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAsset'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a lock to a MediaWorkflowConfiguration.
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration MediaWorkflowConfiguration}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/add_media_workflow_configuration_lock.rb.html) to see an example of how to use add_media_workflow_configuration_lock API.
    def add_media_workflow_configuration_lock(add_resource_lock_details, media_workflow_configuration_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#add_media_workflow_configuration_lock.' if logger

      raise "Missing the required parameter 'add_resource_lock_details' when calling add_media_workflow_configuration_lock." if add_resource_lock_details.nil?
      raise "Missing the required parameter 'media_workflow_configuration_id' when calling add_media_workflow_configuration_lock." if media_workflow_configuration_id.nil?
      raise "Parameter value for 'media_workflow_configuration_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_configuration_id)

      path = '/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}/actions/addLock'.sub('{mediaWorkflowConfigurationId}', media_workflow_configuration_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#add_media_workflow_configuration_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowConfiguration'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a lock to a MediaWorkflowJob.
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_lock_details The details to be updated for the AddLock.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowJob MediaWorkflowJob}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/add_media_workflow_job_lock.rb.html) to see an example of how to use add_media_workflow_job_lock API.
    def add_media_workflow_job_lock(add_lock_details, media_workflow_job_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#add_media_workflow_job_lock.' if logger

      raise "Missing the required parameter 'add_lock_details' when calling add_media_workflow_job_lock." if add_lock_details.nil?
      raise "Missing the required parameter 'media_workflow_job_id' when calling add_media_workflow_job_lock." if media_workflow_job_id.nil?
      raise "Parameter value for 'media_workflow_job_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_job_id)

      path = '/mediaWorkflowJobs/{mediaWorkflowJobId}/actions/addLock'.sub('{mediaWorkflowJobId}', media_workflow_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#add_media_workflow_job_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowJob'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a lock to a MediaWorkflow.
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflow MediaWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/add_media_workflow_lock.rb.html) to see an example of how to use add_media_workflow_lock API.
    def add_media_workflow_lock(add_resource_lock_details, media_workflow_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#add_media_workflow_lock.' if logger

      raise "Missing the required parameter 'add_resource_lock_details' when calling add_media_workflow_lock." if add_resource_lock_details.nil?
      raise "Missing the required parameter 'media_workflow_id' when calling add_media_workflow_lock." if media_workflow_id.nil?
      raise "Parameter value for 'media_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_id)

      path = '/mediaWorkflows/{mediaWorkflowId}/actions/addLock'.sub('{mediaWorkflowId}', media_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#add_media_workflow_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a lock to a StreamCdnConfig.
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamCdnConfig StreamCdnConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/add_stream_cdn_config_lock.rb.html) to see an example of how to use add_stream_cdn_config_lock API.
    def add_stream_cdn_config_lock(add_resource_lock_details, stream_cdn_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#add_stream_cdn_config_lock.' if logger

      raise "Missing the required parameter 'add_resource_lock_details' when calling add_stream_cdn_config_lock." if add_resource_lock_details.nil?
      raise "Missing the required parameter 'stream_cdn_config_id' when calling add_stream_cdn_config_lock." if stream_cdn_config_id.nil?
      raise "Parameter value for 'stream_cdn_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_cdn_config_id)

      path = '/streamCdnConfigs/{streamCdnConfigId}/actions/addLock'.sub('{streamCdnConfigId}', stream_cdn_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#add_stream_cdn_config_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamCdnConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a lock to a StreamDistributionChannel.
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamDistributionChannel StreamDistributionChannel}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/add_stream_distribution_channel_lock.rb.html) to see an example of how to use add_stream_distribution_channel_lock API.
    def add_stream_distribution_channel_lock(add_resource_lock_details, stream_distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#add_stream_distribution_channel_lock.' if logger

      raise "Missing the required parameter 'add_resource_lock_details' when calling add_stream_distribution_channel_lock." if add_resource_lock_details.nil?
      raise "Missing the required parameter 'stream_distribution_channel_id' when calling add_stream_distribution_channel_lock." if stream_distribution_channel_id.nil?
      raise "Parameter value for 'stream_distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_distribution_channel_id)

      path = '/streamDistributionChannels/{streamDistributionChannelId}/actions/addLock'.sub('{streamDistributionChannelId}', stream_distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#add_stream_distribution_channel_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamDistributionChannel'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add a lock to a StreamPackagingConfig.
    #
    # @param [OCI::MediaServices::Models::AddLockDetails] add_resource_lock_details AddResourceLockDetails body parameter
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamPackagingConfig StreamPackagingConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/add_stream_packaging_config_lock.rb.html) to see an example of how to use add_stream_packaging_config_lock API.
    def add_stream_packaging_config_lock(add_resource_lock_details, stream_packaging_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#add_stream_packaging_config_lock.' if logger

      raise "Missing the required parameter 'add_resource_lock_details' when calling add_stream_packaging_config_lock." if add_resource_lock_details.nil?
      raise "Missing the required parameter 'stream_packaging_config_id' when calling add_stream_packaging_config_lock." if stream_packaging_config_id.nil?
      raise "Parameter value for 'stream_packaging_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_packaging_config_id)

      path = '/streamPackagingConfigs/{streamPackagingConfigId}/actions/addLock'.sub('{streamPackagingConfigId}', stream_packaging_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#add_stream_packaging_config_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamPackagingConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a MediaAsset resource from one compartment identifier to another.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [OCI::MediaServices::Models::ChangeMediaAssetCompartmentDetails] change_media_asset_compartment_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/change_media_asset_compartment.rb.html) to see an example of how to use change_media_asset_compartment API.
    def change_media_asset_compartment(media_asset_id, change_media_asset_compartment_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#change_media_asset_compartment.' if logger

      raise "Missing the required parameter 'media_asset_id' when calling change_media_asset_compartment." if media_asset_id.nil?
      raise "Missing the required parameter 'change_media_asset_compartment_details' when calling change_media_asset_compartment." if change_media_asset_compartment_details.nil?
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)

      path = '/mediaAssets/{mediaAssetId}/actions/changeCompartment'.sub('{mediaAssetId}', media_asset_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_media_asset_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#change_media_asset_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a MediaWorkflow resource from one compartment identifier to another.
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [OCI::MediaServices::Models::ChangeMediaWorkflowCompartmentDetails] change_media_workflow_compartment_details The change compartment payload.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/change_media_workflow_compartment.rb.html) to see an example of how to use change_media_workflow_compartment API.
    def change_media_workflow_compartment(media_workflow_id, change_media_workflow_compartment_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#change_media_workflow_compartment.' if logger

      raise "Missing the required parameter 'media_workflow_id' when calling change_media_workflow_compartment." if media_workflow_id.nil?
      raise "Missing the required parameter 'change_media_workflow_compartment_details' when calling change_media_workflow_compartment." if change_media_workflow_compartment_details.nil?
      raise "Parameter value for 'media_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_id)

      path = '/mediaWorkflows/{mediaWorkflowId}/actions/changeCompartment'.sub('{mediaWorkflowId}', media_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_media_workflow_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#change_media_workflow_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a MediaWorkflowConfiguration resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [OCI::MediaServices::Models::ChangeMediaWorkflowConfigurationCompartmentDetails] change_media_workflow_configuration_compartment_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/change_media_workflow_configuration_compartment.rb.html) to see an example of how to use change_media_workflow_configuration_compartment API.
    def change_media_workflow_configuration_compartment(media_workflow_configuration_id, change_media_workflow_configuration_compartment_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#change_media_workflow_configuration_compartment.' if logger

      raise "Missing the required parameter 'media_workflow_configuration_id' when calling change_media_workflow_configuration_compartment." if media_workflow_configuration_id.nil?
      raise "Missing the required parameter 'change_media_workflow_configuration_compartment_details' when calling change_media_workflow_configuration_compartment." if change_media_workflow_configuration_compartment_details.nil?
      raise "Parameter value for 'media_workflow_configuration_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_configuration_id)

      path = '/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}/actions/changeCompartment'.sub('{mediaWorkflowConfigurationId}', media_workflow_configuration_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_media_workflow_configuration_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#change_media_workflow_configuration_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a MediaWorkflowJob resource from one compartment identifier to another.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [OCI::MediaServices::Models::ChangeMediaWorkflowJobCompartmentDetails] change_media_workflow_job_compartment_details The change compartment payload.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/change_media_workflow_job_compartment.rb.html) to see an example of how to use change_media_workflow_job_compartment API.
    def change_media_workflow_job_compartment(media_workflow_job_id, change_media_workflow_job_compartment_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#change_media_workflow_job_compartment.' if logger

      raise "Missing the required parameter 'media_workflow_job_id' when calling change_media_workflow_job_compartment." if media_workflow_job_id.nil?
      raise "Missing the required parameter 'change_media_workflow_job_compartment_details' when calling change_media_workflow_job_compartment." if change_media_workflow_job_compartment_details.nil?
      raise "Parameter value for 'media_workflow_job_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_job_id)

      path = '/mediaWorkflowJobs/{mediaWorkflowJobId}/actions/changeCompartment'.sub('{mediaWorkflowJobId}', media_workflow_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_media_workflow_job_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#change_media_workflow_job_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a Stream Distribution Channel resource from one compartment identifier to another.
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [OCI::MediaServices::Models::ChangeStreamDistributionChannelCompartmentDetails] change_stream_distribution_channel_compartment_details The change compartment payload.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/change_stream_distribution_channel_compartment.rb.html) to see an example of how to use change_stream_distribution_channel_compartment API.
    def change_stream_distribution_channel_compartment(stream_distribution_channel_id, change_stream_distribution_channel_compartment_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#change_stream_distribution_channel_compartment.' if logger

      raise "Missing the required parameter 'stream_distribution_channel_id' when calling change_stream_distribution_channel_compartment." if stream_distribution_channel_id.nil?
      raise "Missing the required parameter 'change_stream_distribution_channel_compartment_details' when calling change_stream_distribution_channel_compartment." if change_stream_distribution_channel_compartment_details.nil?
      raise "Parameter value for 'stream_distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_distribution_channel_id)

      path = '/streamDistributionChannels/{streamDistributionChannelId}/actions/changeCompartment'.sub('{streamDistributionChannelId}', stream_distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_stream_distribution_channel_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#change_stream_distribution_channel_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new MediaAsset.
    #
    # @param [OCI::MediaServices::Models::CreateMediaAssetDetails] create_media_asset_details Details for the new MediaAsset.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAsset MediaAsset}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/create_media_asset.rb.html) to see an example of how to use create_media_asset API.
    def create_media_asset(create_media_asset_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#create_media_asset.' if logger

      raise "Missing the required parameter 'create_media_asset_details' when calling create_media_asset." if create_media_asset_details.nil?

      path = '/mediaAssets'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_media_asset_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#create_media_asset') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAsset'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new MediaWorkflow.
    #
    # @param [OCI::MediaServices::Models::CreateMediaWorkflowDetails] create_media_workflow_details Details for the new MediaWorkflow.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflow MediaWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/create_media_workflow.rb.html) to see an example of how to use create_media_workflow API.
    def create_media_workflow(create_media_workflow_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#create_media_workflow.' if logger

      raise "Missing the required parameter 'create_media_workflow_details' when calling create_media_workflow." if create_media_workflow_details.nil?

      path = '/mediaWorkflows'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_media_workflow_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#create_media_workflow') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new MediaWorkflowConfiguration.
    #
    # @param [OCI::MediaServices::Models::CreateMediaWorkflowConfigurationDetails] create_media_workflow_configuration_details Details for the new MediaWorkflowConfiguration.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration MediaWorkflowConfiguration}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/create_media_workflow_configuration.rb.html) to see an example of how to use create_media_workflow_configuration API.
    def create_media_workflow_configuration(create_media_workflow_configuration_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#create_media_workflow_configuration.' if logger

      raise "Missing the required parameter 'create_media_workflow_configuration_details' when calling create_media_workflow_configuration." if create_media_workflow_configuration_details.nil?

      path = '/mediaWorkflowConfigurations'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_media_workflow_configuration_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#create_media_workflow_configuration') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowConfiguration'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Run the MediaWorkflow according to the given mediaWorkflow definition and configuration.
    # @param [OCI::MediaServices::Models::CreateMediaWorkflowJobDetails] create_media_workflow_job_details The information to run the mediaWorkflow.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowJob MediaWorkflowJob}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/create_media_workflow_job.rb.html) to see an example of how to use create_media_workflow_job API.
    def create_media_workflow_job(create_media_workflow_job_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#create_media_workflow_job.' if logger

      raise "Missing the required parameter 'create_media_workflow_job_details' when calling create_media_workflow_job." if create_media_workflow_job_details.nil?

      path = '/mediaWorkflowJobs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_media_workflow_job_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#create_media_workflow_job') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowJob'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new CDN Configuration.
    #
    # @param [OCI::MediaServices::Models::CreateStreamCdnConfigDetails] create_stream_cdn_config_details Details for the new StreamCdnConfig.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamCdnConfig StreamCdnConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/create_stream_cdn_config.rb.html) to see an example of how to use create_stream_cdn_config API.
    def create_stream_cdn_config(create_stream_cdn_config_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#create_stream_cdn_config.' if logger

      raise "Missing the required parameter 'create_stream_cdn_config_details' when calling create_stream_cdn_config." if create_stream_cdn_config_details.nil?

      path = '/streamCdnConfigs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_stream_cdn_config_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#create_stream_cdn_config') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamCdnConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Stream Distribution Channel.
    #
    # @param [OCI::MediaServices::Models::CreateStreamDistributionChannelDetails] create_stream_distribution_channel_details Details for the new Stream Distribution Channel.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamDistributionChannel StreamDistributionChannel}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/create_stream_distribution_channel.rb.html) to see an example of how to use create_stream_distribution_channel API.
    def create_stream_distribution_channel(create_stream_distribution_channel_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#create_stream_distribution_channel.' if logger

      raise "Missing the required parameter 'create_stream_distribution_channel_details' when calling create_stream_distribution_channel." if create_stream_distribution_channel_details.nil?

      path = '/streamDistributionChannels'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_stream_distribution_channel_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#create_stream_distribution_channel') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamDistributionChannel'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new Packaging Configuration.
    #
    # @param [OCI::MediaServices::Models::CreateStreamPackagingConfigDetails] create_stream_packaging_config_details Details for the new Stream Packaging Configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamPackagingConfig StreamPackagingConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/create_stream_packaging_config.rb.html) to see an example of how to use create_stream_packaging_config API.
    def create_stream_packaging_config(create_stream_packaging_config_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#create_stream_packaging_config.' if logger

      raise "Missing the required parameter 'create_stream_packaging_config_details' when calling create_stream_packaging_config." if create_stream_packaging_config_details.nil?

      path = '/streamPackagingConfigs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_stream_packaging_config_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#create_stream_packaging_config') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamPackagingConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a MediaAsset resource by identifier. If DeleteChildren is passed in as the mode, all the assets with the parentMediaAssetId matching the ID will be deleted. If DeleteDerivatives is set as the mode, all the assets with the masterMediaAssetId matching the ID will be deleted.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :delete_mode DeleteMode decides whether to delete all the immediate children or all assets with the asset's ID as their masterMediaAssetId.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_media_asset.rb.html) to see an example of how to use delete_media_asset API.
    def delete_media_asset(media_asset_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_media_asset.' if logger

      raise "Missing the required parameter 'media_asset_id' when calling delete_media_asset." if media_asset_id.nil?

      if opts[:delete_mode] && !OCI::MediaServices::Models::DELETE_MODE_ENUM.include?(opts[:delete_mode])
        raise 'Invalid value for "delete_mode", must be one of the values in OCI::MediaServices::Models::DELETE_MODE_ENUM.'
      end
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)

      path = '/mediaAssets/{mediaAssetId}'.sub('{mediaAssetId}', media_asset_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?
      query_params[:deleteMode] = opts[:delete_mode] if opts[:delete_mode]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_media_asset') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a MediaAsset from the DistributionChannel by identifiers.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [String] distribution_channel_id Unique DistributionChannel identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :version Version of the attachment.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_media_asset_distribution_channel_attachment.rb.html) to see an example of how to use delete_media_asset_distribution_channel_attachment API.
    def delete_media_asset_distribution_channel_attachment(media_asset_id, distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_media_asset_distribution_channel_attachment.' if logger

      raise "Missing the required parameter 'media_asset_id' when calling delete_media_asset_distribution_channel_attachment." if media_asset_id.nil?
      raise "Missing the required parameter 'distribution_channel_id' when calling delete_media_asset_distribution_channel_attachment." if distribution_channel_id.nil?
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)
      raise "Parameter value for 'distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(distribution_channel_id)

      path = '/mediaAssets/{mediaAssetId}/distributionChannelAttachments/{distributionChannelId}'.sub('{mediaAssetId}', media_asset_id.to_s).sub('{distributionChannelId}', distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?
      query_params[:version] = opts[:version] if opts[:version]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_media_asset_distribution_channel_attachment') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # The MediaWorkflow lifecycleState will change to DELETED.
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_media_workflow.rb.html) to see an example of how to use delete_media_workflow API.
    def delete_media_workflow(media_workflow_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_media_workflow.' if logger

      raise "Missing the required parameter 'media_workflow_id' when calling delete_media_workflow." if media_workflow_id.nil?
      raise "Parameter value for 'media_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_id)

      path = '/mediaWorkflows/{mediaWorkflowId}'.sub('{mediaWorkflowId}', media_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_media_workflow') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a MediaWorkflowConfiguration resource by identifier.
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_media_workflow_configuration.rb.html) to see an example of how to use delete_media_workflow_configuration API.
    def delete_media_workflow_configuration(media_workflow_configuration_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_media_workflow_configuration.' if logger

      raise "Missing the required parameter 'media_workflow_configuration_id' when calling delete_media_workflow_configuration." if media_workflow_configuration_id.nil?
      raise "Parameter value for 'media_workflow_configuration_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_configuration_id)

      path = '/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}'.sub('{mediaWorkflowConfigurationId}', media_workflow_configuration_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_media_workflow_configuration') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is an asynchronous operation. The MediaWorkflowJob lifecycleState will change to CANCELING temporarily until the job is completely CANCELED.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_media_workflow_job.rb.html) to see an example of how to use delete_media_workflow_job API.
    def delete_media_workflow_job(media_workflow_job_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_media_workflow_job.' if logger

      raise "Missing the required parameter 'media_workflow_job_id' when calling delete_media_workflow_job." if media_workflow_job_id.nil?
      raise "Parameter value for 'media_workflow_job_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_job_id)

      path = '/mediaWorkflowJobs/{mediaWorkflowJobId}'.sub('{mediaWorkflowJobId}', media_workflow_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_media_workflow_job') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # The StreamCdnConfig lifecycleState will change to DELETED.
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_stream_cdn_config.rb.html) to see an example of how to use delete_stream_cdn_config API.
    def delete_stream_cdn_config(stream_cdn_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_stream_cdn_config.' if logger

      raise "Missing the required parameter 'stream_cdn_config_id' when calling delete_stream_cdn_config." if stream_cdn_config_id.nil?
      raise "Parameter value for 'stream_cdn_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_cdn_config_id)

      path = '/streamCdnConfigs/{streamCdnConfigId}'.sub('{streamCdnConfigId}', stream_cdn_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_stream_cdn_config') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # The Stream Distribution Channel lifecycleState will change to DELETED.
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_stream_distribution_channel.rb.html) to see an example of how to use delete_stream_distribution_channel API.
    def delete_stream_distribution_channel(stream_distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_stream_distribution_channel.' if logger

      raise "Missing the required parameter 'stream_distribution_channel_id' when calling delete_stream_distribution_channel." if stream_distribution_channel_id.nil?
      raise "Parameter value for 'stream_distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_distribution_channel_id)

      path = '/streamDistributionChannels/{streamDistributionChannelId}'.sub('{streamDistributionChannelId}', stream_distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_stream_distribution_channel') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # The Stream Packaging Configuration lifecycleState will change to DELETED.
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/delete_stream_packaging_config.rb.html) to see an example of how to use delete_stream_packaging_config API.
    def delete_stream_packaging_config(stream_packaging_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#delete_stream_packaging_config.' if logger

      raise "Missing the required parameter 'stream_packaging_config_id' when calling delete_stream_packaging_config." if stream_packaging_config_id.nil?
      raise "Parameter value for 'stream_packaging_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_packaging_config_id)

      path = '/streamPackagingConfigs/{streamPackagingConfigId}'.sub('{streamPackagingConfigId}', stream_packaging_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#delete_stream_packaging_config') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a MediaAsset by identifier.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAsset MediaAsset}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_media_asset.rb.html) to see an example of how to use get_media_asset API.
    def get_media_asset(media_asset_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_media_asset.' if logger

      raise "Missing the required parameter 'media_asset_id' when calling get_media_asset." if media_asset_id.nil?
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)

      path = '/mediaAssets/{mediaAssetId}'.sub('{mediaAssetId}', media_asset_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_media_asset') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAsset'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a MediaAssetDistributionChannelAttachment for a MediaAsset by identifiers.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [String] distribution_channel_id Unique DistributionChannel identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [Integer] :version Version of the attachment.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAssetDistributionChannelAttachment MediaAssetDistributionChannelAttachment}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_media_asset_distribution_channel_attachment.rb.html) to see an example of how to use get_media_asset_distribution_channel_attachment API.
    def get_media_asset_distribution_channel_attachment(media_asset_id, distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_media_asset_distribution_channel_attachment.' if logger

      raise "Missing the required parameter 'media_asset_id' when calling get_media_asset_distribution_channel_attachment." if media_asset_id.nil?
      raise "Missing the required parameter 'distribution_channel_id' when calling get_media_asset_distribution_channel_attachment." if distribution_channel_id.nil?
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)
      raise "Parameter value for 'distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(distribution_channel_id)

      path = '/mediaAssets/{mediaAssetId}/distributionChannelAttachments/{distributionChannelId}'.sub('{mediaAssetId}', media_asset_id.to_s).sub('{distributionChannelId}', distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:version] = opts[:version] if opts[:version]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_media_asset_distribution_channel_attachment') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAssetDistributionChannelAttachment'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a MediaWorkflow by identifier.
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflow MediaWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_media_workflow.rb.html) to see an example of how to use get_media_workflow API.
    def get_media_workflow(media_workflow_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_media_workflow.' if logger

      raise "Missing the required parameter 'media_workflow_id' when calling get_media_workflow." if media_workflow_id.nil?
      raise "Parameter value for 'media_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_id)

      path = '/mediaWorkflows/{mediaWorkflowId}'.sub('{mediaWorkflowId}', media_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_media_workflow') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a MediaWorkflowConfiguration by identifier
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration MediaWorkflowConfiguration}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_media_workflow_configuration.rb.html) to see an example of how to use get_media_workflow_configuration API.
    def get_media_workflow_configuration(media_workflow_configuration_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_media_workflow_configuration.' if logger

      raise "Missing the required parameter 'media_workflow_configuration_id' when calling get_media_workflow_configuration." if media_workflow_configuration_id.nil?
      raise "Parameter value for 'media_workflow_configuration_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_configuration_id)

      path = '/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}'.sub('{mediaWorkflowConfigurationId}', media_workflow_configuration_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_media_workflow_configuration') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowConfiguration'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the MediaWorkflowJob.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowJob MediaWorkflowJob}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_media_workflow_job.rb.html) to see an example of how to use get_media_workflow_job API.
    def get_media_workflow_job(media_workflow_job_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_media_workflow_job.' if logger

      raise "Missing the required parameter 'media_workflow_job_id' when calling get_media_workflow_job." if media_workflow_job_id.nil?
      raise "Parameter value for 'media_workflow_job_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_job_id)

      path = '/mediaWorkflowJobs/{mediaWorkflowJobId}'.sub('{mediaWorkflowJobId}', media_workflow_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_media_workflow_job') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowJob'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a StreamCdnConfig by identifier.
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamCdnConfig StreamCdnConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_stream_cdn_config.rb.html) to see an example of how to use get_stream_cdn_config API.
    def get_stream_cdn_config(stream_cdn_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_stream_cdn_config.' if logger

      raise "Missing the required parameter 'stream_cdn_config_id' when calling get_stream_cdn_config." if stream_cdn_config_id.nil?
      raise "Parameter value for 'stream_cdn_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_cdn_config_id)

      path = '/streamCdnConfigs/{streamCdnConfigId}'.sub('{streamCdnConfigId}', stream_cdn_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_stream_cdn_config') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamCdnConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a Stream Distribution Channel by identifier.
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamDistributionChannel StreamDistributionChannel}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_stream_distribution_channel.rb.html) to see an example of how to use get_stream_distribution_channel API.
    def get_stream_distribution_channel(stream_distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_stream_distribution_channel.' if logger

      raise "Missing the required parameter 'stream_distribution_channel_id' when calling get_stream_distribution_channel." if stream_distribution_channel_id.nil?
      raise "Parameter value for 'stream_distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_distribution_channel_id)

      path = '/streamDistributionChannels/{streamDistributionChannelId}'.sub('{streamDistributionChannelId}', stream_distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_stream_distribution_channel') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamDistributionChannel'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a Stream Packaging Configuration by identifier.
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamPackagingConfig StreamPackagingConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/get_stream_packaging_config.rb.html) to see an example of how to use get_stream_packaging_config API.
    def get_stream_packaging_config(stream_packaging_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#get_stream_packaging_config.' if logger

      raise "Missing the required parameter 'stream_packaging_config_id' when calling get_stream_packaging_config." if stream_packaging_config_id.nil?
      raise "Parameter value for 'stream_packaging_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_packaging_config_id)

      path = '/streamPackagingConfigs/{streamPackagingConfigId}'.sub('{streamPackagingConfigId}', stream_packaging_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#get_stream_packaging_config') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamPackagingConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Ingests an Asset into a Distribution Channel.
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [OCI::MediaServices::Models::IngestStreamDistributionChannelDetails] ingest_stream_distribution_channel_details Playlist entry information.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::IngestStreamDistributionChannelResult IngestStreamDistributionChannelResult}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/ingest_stream_distribution_channel.rb.html) to see an example of how to use ingest_stream_distribution_channel API.
    def ingest_stream_distribution_channel(stream_distribution_channel_id, ingest_stream_distribution_channel_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#ingest_stream_distribution_channel.' if logger

      raise "Missing the required parameter 'stream_distribution_channel_id' when calling ingest_stream_distribution_channel." if stream_distribution_channel_id.nil?
      raise "Missing the required parameter 'ingest_stream_distribution_channel_details' when calling ingest_stream_distribution_channel." if ingest_stream_distribution_channel_details.nil?
      raise "Parameter value for 'stream_distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_distribution_channel_id)

      path = '/streamDistributionChannels/{streamDistributionChannelId}/actions/ingest'.sub('{streamDistributionChannelId}', stream_distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(ingest_stream_distribution_channel_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#ingest_stream_distribution_channel') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::IngestStreamDistributionChannelResult'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the MediaAssetDistributionChannelAttachments for a MediaAsset by identifier.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #
    # @option opts [String] :distribution_channel_id Unique DistributionChannel identifier.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAssetDistributionChannelAttachmentCollection MediaAssetDistributionChannelAttachmentCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_media_asset_distribution_channel_attachments.rb.html) to see an example of how to use list_media_asset_distribution_channel_attachments API.
    def list_media_asset_distribution_channel_attachments(media_asset_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_media_asset_distribution_channel_attachments.' if logger

      raise "Missing the required parameter 'media_asset_id' when calling list_media_asset_distribution_channel_attachments." if media_asset_id.nil?

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::MEDIA_ASSET_DISTRIBUTION_CHANNEL_ATTACHMENT_SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::MEDIA_ASSET_DISTRIBUTION_CHANNEL_ATTACHMENT_SORT_BY_ENUM.'
      end
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)

      path = '/mediaAssets/{mediaAssetId}/distributionChannelAttachments'.sub('{mediaAssetId}', media_asset_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:distributionChannelId] = opts[:distribution_channel_id] if opts[:distribution_channel_id]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_media_asset_distribution_channel_attachments') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAssetDistributionChannelAttachmentCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of MediaAssetSummary.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [String] :lifecycle_state A filter to return only the resources with lifecycleState matching the given lifecycleState.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :distribution_channel_id Unique DistributionChannel identifier.
    # @option opts [String] :parent_media_asset_id Unique MediaAsset identifier of the asset from which this asset is derived.
    # @option opts [String] :master_media_asset_id Unique MediaAsset identifier of the first asset upload.
    # @option opts [String] :type Filter MediaAsset by the asset type.
    # @option opts [String] :bucket_name Filter MediaAsset by the bucket where the object is stored.
    # @option opts [String] :object_name Filter MediaAsset by the name of the object in object storage.
    # @option opts [String] :media_workflow_job_id The ID of the MediaWorkflowJob used to produce this asset, if this parameter is supplied then the workflow ID must also be supplied.
    # @option opts [String] :source_media_workflow_id The ID of the MediaWorkflow used to produce this asset.
    # @option opts [Integer] :source_media_workflow_version The version of the MediaWorkflow used to produce this asset.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAssetCollection MediaAssetCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_media_assets.rb.html) to see an example of how to use list_media_assets API.
    def list_media_assets(opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_media_assets.' if logger


      if opts[:lifecycle_state] && !OCI::MediaServices::Models::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::MediaServices::Models::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::MEDIA_ASSET_SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::MEDIA_ASSET_SORT_BY_ENUM.'
      end

      if opts[:type] && !OCI::MediaServices::Models::ASSET_TYPE_ENUM.include?(opts[:type])
        raise 'Invalid value for "type", must be one of the values in OCI::MediaServices::Models::ASSET_TYPE_ENUM.'
      end

      path = '/mediaAssets'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:distributionChannelId] = opts[:distribution_channel_id] if opts[:distribution_channel_id]
      query_params[:parentMediaAssetId] = opts[:parent_media_asset_id] if opts[:parent_media_asset_id]
      query_params[:masterMediaAssetId] = opts[:master_media_asset_id] if opts[:master_media_asset_id]
      query_params[:type] = opts[:type] if opts[:type]
      query_params[:bucketName] = opts[:bucket_name] if opts[:bucket_name]
      query_params[:objectName] = opts[:object_name] if opts[:object_name]
      query_params[:mediaWorkflowJobId] = opts[:media_workflow_job_id] if opts[:media_workflow_job_id]
      query_params[:sourceMediaWorkflowId] = opts[:source_media_workflow_id] if opts[:source_media_workflow_id]
      query_params[:sourceMediaWorkflowVersion] = opts[:source_media_workflow_version] if opts[:source_media_workflow_version]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_media_assets') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAssetCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of MediaWorkflowConfigurations.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :lifecycle_state A filter to return only the resources with lifecycleState matching the given lifecycleState.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [String] :id Unique MediaWorkflowConfiguration identifier.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default
    #   order for displayName is ascending.
    #    (default to timeCreated)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowConfigurationCollection MediaWorkflowConfigurationCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_media_workflow_configurations.rb.html) to see an example of how to use list_media_workflow_configurations API.
    def list_media_workflow_configurations(opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_media_workflow_configurations.' if logger


      if opts[:lifecycle_state] && !OCI::MediaServices::Models::MediaWorkflow::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::MediaServices::Models::MediaWorkflow::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::SORT_BY_ENUM.'
      end

      path = '/mediaWorkflowConfigurations'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_media_workflow_configurations') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowConfigurationCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the MediaWorkflowJobs.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :id unique MediaWorkflowJob identifier
    # @option opts [String] :media_workflow_id Unique MediaWorkflow identifier.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [String] :lifecycle_state A filter to return only the resources with lifecycleState matching the given lifecycleState.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :sort_by The parameter sort by. (default to timeCreated)
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowJobCollection MediaWorkflowJobCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_media_workflow_jobs.rb.html) to see an example of how to use list_media_workflow_jobs API.
    def list_media_workflow_jobs(opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_media_workflow_jobs.' if logger


      if opts[:lifecycle_state] && !OCI::MediaServices::Models::MediaWorkflowJob::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::MediaServices::Models::MediaWorkflowJob::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::MEDIA_WORKFLOW_JOB_SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::MEDIA_WORKFLOW_JOB_SORT_BY_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      path = '/mediaWorkflowJobs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:mediaWorkflowId] = opts[:media_workflow_id] if opts[:media_workflow_id]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_media_workflow_jobs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowJobCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of MediaWorkflowTaskDeclarations.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :name A filter to return only the resources with their system defined, unique name matching the given name.
    # @option opts [Integer] :version A filter to select MediaWorkflowTaskDeclaration by version.
    # @option opts [BOOLEAN] :is_current A filter to only select the newest version for each MediaWorkflowTaskDeclaration name. (default to false)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided.
    #    (default to name)
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowTaskDeclarationCollection MediaWorkflowTaskDeclarationCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_media_workflow_task_declarations.rb.html) to see an example of how to use list_media_workflow_task_declarations API.
    def list_media_workflow_task_declarations(opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_media_workflow_task_declarations.' if logger


      if opts[:sort_by] && !OCI::MediaServices::Models::MEDIA_WORKFLOW_TASK_DECLARATION_SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::MEDIA_WORKFLOW_TASK_DECLARATION_SORT_BY_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      path = '/mediaWorkflowTaskDeclarations'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:version] = opts[:version] if opts[:version]
      query_params[:isCurrent] = opts[:is_current] if !opts[:is_current].nil?
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_media_workflow_task_declarations') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowTaskDeclarationCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the MediaWorkflows.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :id Unique MediaWorkflow identifier.
    # @option opts [String] :lifecycle_state A filter to return only the resources with lifecycleState matching the given lifecycleState.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default
    #   order for displayName is ascending.
    #    (default to timeCreated)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowCollection MediaWorkflowCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_media_workflows.rb.html) to see an example of how to use list_media_workflows API.
    def list_media_workflows(opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_media_workflows.' if logger


      if opts[:lifecycle_state] && !OCI::MediaServices::Models::MediaWorkflow::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::MediaServices::Models::MediaWorkflow::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::SORT_BY_ENUM.'
      end

      path = '/mediaWorkflows'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_media_workflows') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the StreamCdnConfig.
    # @param [String] distribution_channel_id The Stream Distribution Channel identifier this CdnConfig belongs to.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :id Unique StreamCdnConfig identifier.
    # @option opts [String] :lifecycle_state A filter to return only the resources with lifecycleState matching the given lifecycleState.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default
    #   order for displayName is ascending.
    #    (default to timeCreated)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamCdnConfigCollection StreamCdnConfigCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_stream_cdn_configs.rb.html) to see an example of how to use list_stream_cdn_configs API.
    def list_stream_cdn_configs(distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_stream_cdn_configs.' if logger

      raise "Missing the required parameter 'distribution_channel_id' when calling list_stream_cdn_configs." if distribution_channel_id.nil?

      if opts[:lifecycle_state] && !OCI::MediaServices::Models::StreamCdnConfig::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::MediaServices::Models::StreamCdnConfig::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::SORT_BY_ENUM.'
      end

      path = '/streamCdnConfigs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:distributionChannelId] = distribution_channel_id
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_stream_cdn_configs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamCdnConfigCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the Stream Distribution Channels.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :id Unique Stream Distribution Channel identifier.
    # @option opts [String] :lifecycle_state A filter to return only the resources with lifecycleState matching the given lifecycleState.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default
    #   order for displayName is ascending.
    #    (default to timeCreated)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamDistributionChannelCollection StreamDistributionChannelCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_stream_distribution_channels.rb.html) to see an example of how to use list_stream_distribution_channels API.
    def list_stream_distribution_channels(opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_stream_distribution_channels.' if logger


      if opts[:lifecycle_state] && !OCI::MediaServices::Models::StreamDistributionChannel::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::MediaServices::Models::StreamDistributionChannel::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::SORT_BY_ENUM.'
      end

      path = '/streamDistributionChannels'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_stream_distribution_channels') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamDistributionChannelCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the Stream Packaging Configurations.
    # @param [String] distribution_channel_id Unique Stream Distribution Channel identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :stream_packaging_config_id Unique Stream Packaging Configuration identifier.
    # @option opts [String] :lifecycle_state A filter to return only the resources with lifecycleState matching the given lifecycleState.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name given.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default
    #   order for displayName is ascending.
    #    (default to timeCreated)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamPackagingConfigCollection StreamPackagingConfigCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_stream_packaging_configs.rb.html) to see an example of how to use list_stream_packaging_configs API.
    def list_stream_packaging_configs(distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_stream_packaging_configs.' if logger

      raise "Missing the required parameter 'distribution_channel_id' when calling list_stream_packaging_configs." if distribution_channel_id.nil?

      if opts[:lifecycle_state] && !OCI::MediaServices::Models::StreamPackagingConfig::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::MediaServices::Models::StreamPackagingConfig::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !OCI::MediaServices::Models::SORT_BY_ENUM.include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of the values in OCI::MediaServices::Models::SORT_BY_ENUM.'
      end

      path = '/streamPackagingConfigs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:distributionChannelId] = distribution_channel_id
      query_params[:streamPackagingConfigId] = opts[:stream_packaging_config_id] if opts[:stream_packaging_config_id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_stream_packaging_configs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamPackagingConfigCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the SystemMediaWorkflows that can be used to run a job by name or as a template to create a MediaWorkflow.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The ID of the compartment in which to list resources.
    # @option opts [String] :name A filter to return only the resources with their system defined, unique name matching the given name.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from the
    #   `opc-next-page` header field of a previous response.
    #    (default to )
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::SystemMediaWorkflowCollection SystemMediaWorkflowCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/list_system_media_workflows.rb.html) to see an example of how to use list_system_media_workflows API.
    def list_system_media_workflows(opts = {})
      logger.debug 'Calling operation MediaServicesClient#list_system_media_workflows.' if logger


      if opts[:sort_order] && !OCI::MediaServices::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::MediaServices::Models::SORT_ORDER_ENUM.'
      end

      path = '/systemMediaWorkflows'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:limit] = opts[:limit] if opts[:limit]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#list_system_media_workflows') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::SystemMediaWorkflowCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a lock to an MediaAsset.
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_lock_details The details to be updated for the RemoveLock.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAsset MediaAsset}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/remove_media_asset_lock.rb.html) to see an example of how to use remove_media_asset_lock API.
    def remove_media_asset_lock(remove_lock_details, media_asset_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#remove_media_asset_lock.' if logger

      raise "Missing the required parameter 'remove_lock_details' when calling remove_media_asset_lock." if remove_lock_details.nil?
      raise "Missing the required parameter 'media_asset_id' when calling remove_media_asset_lock." if media_asset_id.nil?
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)

      path = '/mediaAssets/{mediaAssetId}/actions/removeLock'.sub('{mediaAssetId}', media_asset_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(remove_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#remove_media_asset_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAsset'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a lock from a MediaWorkflowConfiguration.
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration MediaWorkflowConfiguration}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/remove_media_workflow_configuration_lock.rb.html) to see an example of how to use remove_media_workflow_configuration_lock API.
    def remove_media_workflow_configuration_lock(remove_resource_lock_details, media_workflow_configuration_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#remove_media_workflow_configuration_lock.' if logger

      raise "Missing the required parameter 'remove_resource_lock_details' when calling remove_media_workflow_configuration_lock." if remove_resource_lock_details.nil?
      raise "Missing the required parameter 'media_workflow_configuration_id' when calling remove_media_workflow_configuration_lock." if media_workflow_configuration_id.nil?
      raise "Parameter value for 'media_workflow_configuration_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_configuration_id)

      path = '/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}/actions/removeLock'.sub('{mediaWorkflowConfigurationId}', media_workflow_configuration_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(remove_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#remove_media_workflow_configuration_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowConfiguration'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a lock from a MediaWorkflowJob.
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_lock_details The details to be updated for the RemoveLock.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowJob MediaWorkflowJob}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/remove_media_workflow_job_lock.rb.html) to see an example of how to use remove_media_workflow_job_lock API.
    def remove_media_workflow_job_lock(remove_lock_details, media_workflow_job_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#remove_media_workflow_job_lock.' if logger

      raise "Missing the required parameter 'remove_lock_details' when calling remove_media_workflow_job_lock." if remove_lock_details.nil?
      raise "Missing the required parameter 'media_workflow_job_id' when calling remove_media_workflow_job_lock." if media_workflow_job_id.nil?
      raise "Parameter value for 'media_workflow_job_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_job_id)

      path = '/mediaWorkflowJobs/{mediaWorkflowJobId}/actions/removeLock'.sub('{mediaWorkflowJobId}', media_workflow_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(remove_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#remove_media_workflow_job_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowJob'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a lock from a MediaWorkflow.
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflow MediaWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/remove_media_workflow_lock.rb.html) to see an example of how to use remove_media_workflow_lock API.
    def remove_media_workflow_lock(remove_resource_lock_details, media_workflow_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#remove_media_workflow_lock.' if logger

      raise "Missing the required parameter 'remove_resource_lock_details' when calling remove_media_workflow_lock." if remove_resource_lock_details.nil?
      raise "Missing the required parameter 'media_workflow_id' when calling remove_media_workflow_lock." if media_workflow_id.nil?
      raise "Parameter value for 'media_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_id)

      path = '/mediaWorkflows/{mediaWorkflowId}/actions/removeLock'.sub('{mediaWorkflowId}', media_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(remove_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#remove_media_workflow_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a lock from a StreamCdnConfig.
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamCdnConfig StreamCdnConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/remove_stream_cdn_config_lock.rb.html) to see an example of how to use remove_stream_cdn_config_lock API.
    def remove_stream_cdn_config_lock(remove_resource_lock_details, stream_cdn_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#remove_stream_cdn_config_lock.' if logger

      raise "Missing the required parameter 'remove_resource_lock_details' when calling remove_stream_cdn_config_lock." if remove_resource_lock_details.nil?
      raise "Missing the required parameter 'stream_cdn_config_id' when calling remove_stream_cdn_config_lock." if stream_cdn_config_id.nil?
      raise "Parameter value for 'stream_cdn_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_cdn_config_id)

      path = '/streamCdnConfigs/{streamCdnConfigId}/actions/removeLock'.sub('{streamCdnConfigId}', stream_cdn_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(remove_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#remove_stream_cdn_config_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamCdnConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a lock to a StreamDistributionChannel.
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamDistributionChannel StreamDistributionChannel}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/remove_stream_distribution_channel_lock.rb.html) to see an example of how to use remove_stream_distribution_channel_lock API.
    def remove_stream_distribution_channel_lock(remove_resource_lock_details, stream_distribution_channel_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#remove_stream_distribution_channel_lock.' if logger

      raise "Missing the required parameter 'remove_resource_lock_details' when calling remove_stream_distribution_channel_lock." if remove_resource_lock_details.nil?
      raise "Missing the required parameter 'stream_distribution_channel_id' when calling remove_stream_distribution_channel_lock." if stream_distribution_channel_id.nil?
      raise "Parameter value for 'stream_distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_distribution_channel_id)

      path = '/streamDistributionChannels/{streamDistributionChannelId}/actions/removeLock'.sub('{streamDistributionChannelId}', stream_distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(remove_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#remove_stream_distribution_channel_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamDistributionChannel'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Remove a lock from a StreamPackagingConfig.
    #
    # @param [OCI::MediaServices::Models::RemoveLockDetails] remove_resource_lock_details RemoveResourceLockDetails body parameter
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without the risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamPackagingConfig StreamPackagingConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/remove_stream_packaging_config_lock.rb.html) to see an example of how to use remove_stream_packaging_config_lock API.
    def remove_stream_packaging_config_lock(remove_resource_lock_details, stream_packaging_config_id, opts = {})
      logger.debug 'Calling operation MediaServicesClient#remove_stream_packaging_config_lock.' if logger

      raise "Missing the required parameter 'remove_resource_lock_details' when calling remove_stream_packaging_config_lock." if remove_resource_lock_details.nil?
      raise "Missing the required parameter 'stream_packaging_config_id' when calling remove_stream_packaging_config_lock." if stream_packaging_config_id.nil?
      raise "Parameter value for 'stream_packaging_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_packaging_config_id)

      path = '/streamPackagingConfigs/{streamPackagingConfigId}/actions/removeLock'.sub('{streamPackagingConfigId}', stream_packaging_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(remove_resource_lock_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#remove_stream_packaging_config_lock') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamPackagingConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the MediaAsset.
    # @param [String] media_asset_id Unique MediaAsset identifier
    # @param [OCI::MediaServices::Models::UpdateMediaAssetDetails] update_media_asset_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaAsset MediaAsset}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/update_media_asset.rb.html) to see an example of how to use update_media_asset API.
    def update_media_asset(media_asset_id, update_media_asset_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#update_media_asset.' if logger

      raise "Missing the required parameter 'media_asset_id' when calling update_media_asset." if media_asset_id.nil?
      raise "Missing the required parameter 'update_media_asset_details' when calling update_media_asset." if update_media_asset_details.nil?
      raise "Parameter value for 'media_asset_id' must not be blank" if OCI::Internal::Util.blank_string?(media_asset_id)

      path = '/mediaAssets/{mediaAssetId}'.sub('{mediaAssetId}', media_asset_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_media_asset_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#update_media_asset') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaAsset'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the MediaWorkflow.
    # @param [String] media_workflow_id Unique MediaWorkflow identifier.
    # @param [OCI::MediaServices::Models::UpdateMediaWorkflowDetails] update_media_workflow_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflow MediaWorkflow}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/update_media_workflow.rb.html) to see an example of how to use update_media_workflow API.
    def update_media_workflow(media_workflow_id, update_media_workflow_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#update_media_workflow.' if logger

      raise "Missing the required parameter 'media_workflow_id' when calling update_media_workflow." if media_workflow_id.nil?
      raise "Missing the required parameter 'update_media_workflow_details' when calling update_media_workflow." if update_media_workflow_details.nil?
      raise "Parameter value for 'media_workflow_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_id)

      path = '/mediaWorkflows/{mediaWorkflowId}'.sub('{mediaWorkflowId}', media_workflow_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_media_workflow_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#update_media_workflow') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflow'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the MediaWorkflowConfiguration.
    # @param [String] media_workflow_configuration_id Unique MediaWorkflowConfiguration identifier.
    # @param [OCI::MediaServices::Models::UpdateMediaWorkflowConfigurationDetails] update_media_workflow_configuration_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowConfiguration MediaWorkflowConfiguration}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/update_media_workflow_configuration.rb.html) to see an example of how to use update_media_workflow_configuration API.
    def update_media_workflow_configuration(media_workflow_configuration_id, update_media_workflow_configuration_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#update_media_workflow_configuration.' if logger

      raise "Missing the required parameter 'media_workflow_configuration_id' when calling update_media_workflow_configuration." if media_workflow_configuration_id.nil?
      raise "Missing the required parameter 'update_media_workflow_configuration_details' when calling update_media_workflow_configuration." if update_media_workflow_configuration_details.nil?
      raise "Parameter value for 'media_workflow_configuration_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_configuration_id)

      path = '/mediaWorkflowConfigurations/{mediaWorkflowConfigurationId}'.sub('{mediaWorkflowConfigurationId}', media_workflow_configuration_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_media_workflow_configuration_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#update_media_workflow_configuration') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowConfiguration'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the MediaWorkflowJob.
    # @param [String] media_workflow_job_id Unique MediaWorkflowJob identifier.
    # @param [OCI::MediaServices::Models::UpdateMediaWorkflowJobDetails] update_media_workflow_job_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::MediaWorkflowJob MediaWorkflowJob}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/update_media_workflow_job.rb.html) to see an example of how to use update_media_workflow_job API.
    def update_media_workflow_job(media_workflow_job_id, update_media_workflow_job_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#update_media_workflow_job.' if logger

      raise "Missing the required parameter 'media_workflow_job_id' when calling update_media_workflow_job." if media_workflow_job_id.nil?
      raise "Missing the required parameter 'update_media_workflow_job_details' when calling update_media_workflow_job." if update_media_workflow_job_details.nil?
      raise "Parameter value for 'media_workflow_job_id' must not be blank" if OCI::Internal::Util.blank_string?(media_workflow_job_id)

      path = '/mediaWorkflowJobs/{mediaWorkflowJobId}'.sub('{mediaWorkflowJobId}', media_workflow_job_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_media_workflow_job_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#update_media_workflow_job') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::MediaWorkflowJob'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the StreamCdnConfig.
    # @param [String] stream_cdn_config_id Unique StreamCdnConfig identifier.
    # @param [OCI::MediaServices::Models::UpdateStreamCdnConfigDetails] update_stream_cdn_config_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamCdnConfig StreamCdnConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/update_stream_cdn_config.rb.html) to see an example of how to use update_stream_cdn_config API.
    def update_stream_cdn_config(stream_cdn_config_id, update_stream_cdn_config_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#update_stream_cdn_config.' if logger

      raise "Missing the required parameter 'stream_cdn_config_id' when calling update_stream_cdn_config." if stream_cdn_config_id.nil?
      raise "Missing the required parameter 'update_stream_cdn_config_details' when calling update_stream_cdn_config." if update_stream_cdn_config_details.nil?
      raise "Parameter value for 'stream_cdn_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_cdn_config_id)

      path = '/streamCdnConfigs/{streamCdnConfigId}'.sub('{streamCdnConfigId}', stream_cdn_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_stream_cdn_config_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#update_stream_cdn_config') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamCdnConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Stream Distribution Channel.
    # @param [String] stream_distribution_channel_id Unique Stream Distribution Channel path identifier.
    # @param [OCI::MediaServices::Models::UpdateStreamDistributionChannelDetails] update_stream_distribution_channel_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamDistributionChannel StreamDistributionChannel}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/update_stream_distribution_channel.rb.html) to see an example of how to use update_stream_distribution_channel API.
    def update_stream_distribution_channel(stream_distribution_channel_id, update_stream_distribution_channel_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#update_stream_distribution_channel.' if logger

      raise "Missing the required parameter 'stream_distribution_channel_id' when calling update_stream_distribution_channel." if stream_distribution_channel_id.nil?
      raise "Missing the required parameter 'update_stream_distribution_channel_details' when calling update_stream_distribution_channel." if update_stream_distribution_channel_details.nil?
      raise "Parameter value for 'stream_distribution_channel_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_distribution_channel_id)

      path = '/streamDistributionChannels/{streamDistributionChannelId}'.sub('{streamDistributionChannelId}', stream_distribution_channel_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_stream_distribution_channel_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#update_stream_distribution_channel') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamDistributionChannel'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the Stream Packaging Configuration.
    # @param [String] stream_packaging_config_id Unique Stream Packaging Configuration path identifier.
    # @param [OCI::MediaServices::Models::UpdateStreamPackagingConfigDetails] update_stream_packaging_config_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_lock_override Whether to override locks (if any exist). (default to false)
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::MediaServices::Models::StreamPackagingConfig StreamPackagingConfig}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/mediaservices/update_stream_packaging_config.rb.html) to see an example of how to use update_stream_packaging_config API.
    def update_stream_packaging_config(stream_packaging_config_id, update_stream_packaging_config_details, opts = {})
      logger.debug 'Calling operation MediaServicesClient#update_stream_packaging_config.' if logger

      raise "Missing the required parameter 'stream_packaging_config_id' when calling update_stream_packaging_config." if stream_packaging_config_id.nil?
      raise "Missing the required parameter 'update_stream_packaging_config_details' when calling update_stream_packaging_config." if update_stream_packaging_config_details.nil?
      raise "Parameter value for 'stream_packaging_config_id' must not be blank" if OCI::Internal::Util.blank_string?(stream_packaging_config_id)

      path = '/streamPackagingConfigs/{streamPackagingConfigId}'.sub('{streamPackagingConfigId}', stream_packaging_config_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isLockOverride] = opts[:is_lock_override] if !opts[:is_lock_override].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_stream_packaging_config_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'MediaServicesClient#update_stream_packaging_config') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::MediaServices::Models::StreamPackagingConfig'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
