# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of assignment Validation status.
  class OperatorAccessControl::Models::AssignmentValidationStatus
    EXECUTION_STATUS_ENUM = [
      EXECUTION_STATUS_PROGRESS = 'PROGRESS'.freeze,
      EXECUTION_STATUS_SUCCESS = 'SUCCESS'.freeze,
      EXECUTION_STATUS_FAILED = 'FAILED'.freeze,
      EXECUTION_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Id of the unique execution.
    # @return [String]
    attr_accessor :execution_id

    # Id of the user who triggered the Assignment Validation.
    # @return [String]
    attr_accessor :user_id

    # Id of the accessRequest which got created as part of Assignment Validation.
    # @return [String]
    attr_accessor :access_request_id

    # any errorMessage during validation.
    # @return [String]
    attr_accessor :error_message

    # **[Required]** Status of the execution Success or Failure.
    # @return [String]
    attr_reader :execution_status

    # List of execution detail for the validate assignment.
    # @return [Array<OCI::OperatorAccessControl::Models::StatusDetail>]
    attr_accessor :status_detail

    # Time when the respective action happened in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: '2020-05-22T21:10:29.600Z'.
    #
    # @return [DateTime]
    attr_accessor :time_of_validation_start

    # Time when the respective action happened in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format. Example: '2020-05-22T21:10:29.600Z'.
    #
    # @return [DateTime]
    attr_accessor :time_of_validation_finish

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'execution_id': :'executionId',
        'user_id': :'userId',
        'access_request_id': :'accessRequestId',
        'error_message': :'errorMessage',
        'execution_status': :'executionStatus',
        'status_detail': :'statusDetail',
        'time_of_validation_start': :'timeOfValidationStart',
        'time_of_validation_finish': :'timeOfValidationFinish'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'execution_id': :'String',
        'user_id': :'String',
        'access_request_id': :'String',
        'error_message': :'String',
        'execution_status': :'String',
        'status_detail': :'Array<OCI::OperatorAccessControl::Models::StatusDetail>',
        'time_of_validation_start': :'DateTime',
        'time_of_validation_finish': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :execution_id The value to assign to the {#execution_id} property
    # @option attributes [String] :user_id The value to assign to the {#user_id} property
    # @option attributes [String] :access_request_id The value to assign to the {#access_request_id} property
    # @option attributes [String] :error_message The value to assign to the {#error_message} property
    # @option attributes [String] :execution_status The value to assign to the {#execution_status} property
    # @option attributes [Array<OCI::OperatorAccessControl::Models::StatusDetail>] :status_detail The value to assign to the {#status_detail} property
    # @option attributes [DateTime] :time_of_validation_start The value to assign to the {#time_of_validation_start} property
    # @option attributes [DateTime] :time_of_validation_finish The value to assign to the {#time_of_validation_finish} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.execution_id = attributes[:'executionId'] if attributes[:'executionId']

      raise 'You cannot provide both :executionId and :execution_id' if attributes.key?(:'executionId') && attributes.key?(:'execution_id')

      self.execution_id = attributes[:'execution_id'] if attributes[:'execution_id']

      self.user_id = attributes[:'userId'] if attributes[:'userId']

      raise 'You cannot provide both :userId and :user_id' if attributes.key?(:'userId') && attributes.key?(:'user_id')

      self.user_id = attributes[:'user_id'] if attributes[:'user_id']

      self.access_request_id = attributes[:'accessRequestId'] if attributes[:'accessRequestId']

      raise 'You cannot provide both :accessRequestId and :access_request_id' if attributes.key?(:'accessRequestId') && attributes.key?(:'access_request_id')

      self.access_request_id = attributes[:'access_request_id'] if attributes[:'access_request_id']

      self.error_message = attributes[:'errorMessage'] if attributes[:'errorMessage']

      raise 'You cannot provide both :errorMessage and :error_message' if attributes.key?(:'errorMessage') && attributes.key?(:'error_message')

      self.error_message = attributes[:'error_message'] if attributes[:'error_message']

      self.execution_status = attributes[:'executionStatus'] if attributes[:'executionStatus']

      raise 'You cannot provide both :executionStatus and :execution_status' if attributes.key?(:'executionStatus') && attributes.key?(:'execution_status')

      self.execution_status = attributes[:'execution_status'] if attributes[:'execution_status']

      self.status_detail = attributes[:'statusDetail'] if attributes[:'statusDetail']

      raise 'You cannot provide both :statusDetail and :status_detail' if attributes.key?(:'statusDetail') && attributes.key?(:'status_detail')

      self.status_detail = attributes[:'status_detail'] if attributes[:'status_detail']

      self.time_of_validation_start = attributes[:'timeOfValidationStart'] if attributes[:'timeOfValidationStart']

      raise 'You cannot provide both :timeOfValidationStart and :time_of_validation_start' if attributes.key?(:'timeOfValidationStart') && attributes.key?(:'time_of_validation_start')

      self.time_of_validation_start = attributes[:'time_of_validation_start'] if attributes[:'time_of_validation_start']

      self.time_of_validation_finish = attributes[:'timeOfValidationFinish'] if attributes[:'timeOfValidationFinish']

      raise 'You cannot provide both :timeOfValidationFinish and :time_of_validation_finish' if attributes.key?(:'timeOfValidationFinish') && attributes.key?(:'time_of_validation_finish')

      self.time_of_validation_finish = attributes[:'time_of_validation_finish'] if attributes[:'time_of_validation_finish']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] execution_status Object to be assigned
    def execution_status=(execution_status)
      # rubocop:disable Style/ConditionalAssignment
      if execution_status && !EXECUTION_STATUS_ENUM.include?(execution_status)
        OCI.logger.debug("Unknown value for 'execution_status' [" + execution_status + "]. Mapping to 'EXECUTION_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @execution_status = EXECUTION_STATUS_UNKNOWN_ENUM_VALUE
      else
        @execution_status = execution_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        execution_id == other.execution_id &&
        user_id == other.user_id &&
        access_request_id == other.access_request_id &&
        error_message == other.error_message &&
        execution_status == other.execution_status &&
        status_detail == other.status_detail &&
        time_of_validation_start == other.time_of_validation_start &&
        time_of_validation_finish == other.time_of_validation_finish
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [execution_id, user_id, access_request_id, error_message, execution_status, status_detail, time_of_validation_start, time_of_validation_finish].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
