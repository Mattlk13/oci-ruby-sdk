# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'
require 'logger'
require_relative 'metric_extension_query_properties'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Query properties applicable to HTTP type of collection method
  class StackMonitoring::Models::HttpQueryProperties < StackMonitoring::Models::MetricExtensionQueryProperties
    RESPONSE_CONTENT_TYPE_ENUM = [
      RESPONSE_CONTENT_TYPE_TEXT_PLAIN = 'TEXT_PLAIN'.freeze,
      RESPONSE_CONTENT_TYPE_TEXT_HTML = 'TEXT_HTML'.freeze,
      RESPONSE_CONTENT_TYPE_APPLICATION_JSON = 'APPLICATION_JSON'.freeze,
      RESPONSE_CONTENT_TYPE_APPLICATION_XML = 'APPLICATION_XML'.freeze,
      RESPONSE_CONTENT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PROTOCOL_TYPE_ENUM = [
      PROTOCOL_TYPE_HTTP = 'HTTP'.freeze,
      PROTOCOL_TYPE_HTTPS = 'HTTPS'.freeze,
      PROTOCOL_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Http(s) end point URL
    # @return [String]
    attr_accessor :url

    # **[Required]** Type of content response given by the http(s) URL
    # @return [String]
    attr_reader :response_content_type

    # Supported protocol of resources to be associated with this metric extension. This is optional and defaults to HTTPS, which uses secure connection to the URL
    # @return [String]
    attr_reader :protocol_type

    # This attribute is required.
    # @return [OCI::StackMonitoring::Models::HttpScriptFileDetails]
    attr_accessor :script_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'collection_method': :'collectionMethod',
        'url': :'url',
        'response_content_type': :'responseContentType',
        'protocol_type': :'protocolType',
        'script_details': :'scriptDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'collection_method': :'String',
        'url': :'String',
        'response_content_type': :'String',
        'protocol_type': :'String',
        'script_details': :'OCI::StackMonitoring::Models::HttpScriptFileDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :url The value to assign to the {#url} property
    # @option attributes [String] :response_content_type The value to assign to the {#response_content_type} property
    # @option attributes [String] :protocol_type The value to assign to the {#protocol_type} property
    # @option attributes [OCI::StackMonitoring::Models::HttpScriptFileDetails] :script_details The value to assign to the {#script_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['collectionMethod'] = 'HTTP'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.url = attributes[:'url'] if attributes[:'url']

      self.response_content_type = attributes[:'responseContentType'] if attributes[:'responseContentType']

      raise 'You cannot provide both :responseContentType and :response_content_type' if attributes.key?(:'responseContentType') && attributes.key?(:'response_content_type')

      self.response_content_type = attributes[:'response_content_type'] if attributes[:'response_content_type']

      self.protocol_type = attributes[:'protocolType'] if attributes[:'protocolType']

      raise 'You cannot provide both :protocolType and :protocol_type' if attributes.key?(:'protocolType') && attributes.key?(:'protocol_type')

      self.protocol_type = attributes[:'protocol_type'] if attributes[:'protocol_type']

      self.script_details = attributes[:'scriptDetails'] if attributes[:'scriptDetails']

      raise 'You cannot provide both :scriptDetails and :script_details' if attributes.key?(:'scriptDetails') && attributes.key?(:'script_details')

      self.script_details = attributes[:'script_details'] if attributes[:'script_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] response_content_type Object to be assigned
    def response_content_type=(response_content_type)
      # rubocop:disable Style/ConditionalAssignment
      if response_content_type && !RESPONSE_CONTENT_TYPE_ENUM.include?(response_content_type)
        OCI.logger.debug("Unknown value for 'response_content_type' [" + response_content_type + "]. Mapping to 'RESPONSE_CONTENT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @response_content_type = RESPONSE_CONTENT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @response_content_type = response_content_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protocol_type Object to be assigned
    def protocol_type=(protocol_type)
      # rubocop:disable Style/ConditionalAssignment
      if protocol_type && !PROTOCOL_TYPE_ENUM.include?(protocol_type)
        OCI.logger.debug("Unknown value for 'protocol_type' [" + protocol_type + "]. Mapping to 'PROTOCOL_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @protocol_type = PROTOCOL_TYPE_UNKNOWN_ENUM_VALUE
      else
        @protocol_type = protocol_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        collection_method == other.collection_method &&
        url == other.url &&
        response_content_type == other.response_content_type &&
        protocol_type == other.protocol_type &&
        script_details == other.script_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [collection_method, url, response_content_type, protocol_type, script_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
