# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Specific resource mapping configurations for Agent Extension Handlers.
  class StackMonitoring::Models::AgentExtensionHandlerConfiguration
    # **[Required]** List of collector/plugin names.
    # @return [Array<String>]
    attr_accessor :collector_types

    # Metric upload interval in seconds. Any metric sent by telegraf/collectd before the
    # configured interval expires will be dropped.
    #
    # @return [Integer]
    attr_accessor :metric_upload_interval_in_seconds

    # Resource group string; if not specified, the resource group string will be generated by the handler.
    # @return [String]
    attr_accessor :telemetry_resource_group

    # @return [OCI::StackMonitoring::Models::TelegrafResourceNameConfigurationDetails]
    attr_accessor :telegraf_resource_name_config

    # @return [OCI::StackMonitoring::Models::CollectdResourceNameConfigurationDetails]
    attr_accessor :collectd_resource_name_config

    # @return [OCI::StackMonitoring::Models::MetricNameConfigurationDetails]
    attr_accessor :metric_name_config

    # List of AgentExtensionHandlerMetricMappingDetails.
    # @return [Array<OCI::StackMonitoring::Models::AgentExtensionHandlerMetricMappingDetails>]
    attr_accessor :metric_mappings

    # List of handler configuration properties
    # @return [Array<OCI::StackMonitoring::Models::AgentExtensionHandlerConfigurationProperty>]
    attr_accessor :handler_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'collector_types': :'collectorTypes',
        'metric_upload_interval_in_seconds': :'metricUploadIntervalInSeconds',
        'telemetry_resource_group': :'telemetryResourceGroup',
        'telegraf_resource_name_config': :'telegrafResourceNameConfig',
        'collectd_resource_name_config': :'collectdResourceNameConfig',
        'metric_name_config': :'metricNameConfig',
        'metric_mappings': :'metricMappings',
        'handler_properties': :'handlerProperties'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'collector_types': :'Array<String>',
        'metric_upload_interval_in_seconds': :'Integer',
        'telemetry_resource_group': :'String',
        'telegraf_resource_name_config': :'OCI::StackMonitoring::Models::TelegrafResourceNameConfigurationDetails',
        'collectd_resource_name_config': :'OCI::StackMonitoring::Models::CollectdResourceNameConfigurationDetails',
        'metric_name_config': :'OCI::StackMonitoring::Models::MetricNameConfigurationDetails',
        'metric_mappings': :'Array<OCI::StackMonitoring::Models::AgentExtensionHandlerMetricMappingDetails>',
        'handler_properties': :'Array<OCI::StackMonitoring::Models::AgentExtensionHandlerConfigurationProperty>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :collector_types The value to assign to the {#collector_types} property
    # @option attributes [Integer] :metric_upload_interval_in_seconds The value to assign to the {#metric_upload_interval_in_seconds} property
    # @option attributes [String] :telemetry_resource_group The value to assign to the {#telemetry_resource_group} property
    # @option attributes [OCI::StackMonitoring::Models::TelegrafResourceNameConfigurationDetails] :telegraf_resource_name_config The value to assign to the {#telegraf_resource_name_config} property
    # @option attributes [OCI::StackMonitoring::Models::CollectdResourceNameConfigurationDetails] :collectd_resource_name_config The value to assign to the {#collectd_resource_name_config} property
    # @option attributes [OCI::StackMonitoring::Models::MetricNameConfigurationDetails] :metric_name_config The value to assign to the {#metric_name_config} property
    # @option attributes [Array<OCI::StackMonitoring::Models::AgentExtensionHandlerMetricMappingDetails>] :metric_mappings The value to assign to the {#metric_mappings} property
    # @option attributes [Array<OCI::StackMonitoring::Models::AgentExtensionHandlerConfigurationProperty>] :handler_properties The value to assign to the {#handler_properties} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.collector_types = attributes[:'collectorTypes'] if attributes[:'collectorTypes']

      raise 'You cannot provide both :collectorTypes and :collector_types' if attributes.key?(:'collectorTypes') && attributes.key?(:'collector_types')

      self.collector_types = attributes[:'collector_types'] if attributes[:'collector_types']

      self.metric_upload_interval_in_seconds = attributes[:'metricUploadIntervalInSeconds'] if attributes[:'metricUploadIntervalInSeconds']

      raise 'You cannot provide both :metricUploadIntervalInSeconds and :metric_upload_interval_in_seconds' if attributes.key?(:'metricUploadIntervalInSeconds') && attributes.key?(:'metric_upload_interval_in_seconds')

      self.metric_upload_interval_in_seconds = attributes[:'metric_upload_interval_in_seconds'] if attributes[:'metric_upload_interval_in_seconds']

      self.telemetry_resource_group = attributes[:'telemetryResourceGroup'] if attributes[:'telemetryResourceGroup']

      raise 'You cannot provide both :telemetryResourceGroup and :telemetry_resource_group' if attributes.key?(:'telemetryResourceGroup') && attributes.key?(:'telemetry_resource_group')

      self.telemetry_resource_group = attributes[:'telemetry_resource_group'] if attributes[:'telemetry_resource_group']

      self.telegraf_resource_name_config = attributes[:'telegrafResourceNameConfig'] if attributes[:'telegrafResourceNameConfig']

      raise 'You cannot provide both :telegrafResourceNameConfig and :telegraf_resource_name_config' if attributes.key?(:'telegrafResourceNameConfig') && attributes.key?(:'telegraf_resource_name_config')

      self.telegraf_resource_name_config = attributes[:'telegraf_resource_name_config'] if attributes[:'telegraf_resource_name_config']

      self.collectd_resource_name_config = attributes[:'collectdResourceNameConfig'] if attributes[:'collectdResourceNameConfig']

      raise 'You cannot provide both :collectdResourceNameConfig and :collectd_resource_name_config' if attributes.key?(:'collectdResourceNameConfig') && attributes.key?(:'collectd_resource_name_config')

      self.collectd_resource_name_config = attributes[:'collectd_resource_name_config'] if attributes[:'collectd_resource_name_config']

      self.metric_name_config = attributes[:'metricNameConfig'] if attributes[:'metricNameConfig']

      raise 'You cannot provide both :metricNameConfig and :metric_name_config' if attributes.key?(:'metricNameConfig') && attributes.key?(:'metric_name_config')

      self.metric_name_config = attributes[:'metric_name_config'] if attributes[:'metric_name_config']

      self.metric_mappings = attributes[:'metricMappings'] if attributes[:'metricMappings']

      raise 'You cannot provide both :metricMappings and :metric_mappings' if attributes.key?(:'metricMappings') && attributes.key?(:'metric_mappings')

      self.metric_mappings = attributes[:'metric_mappings'] if attributes[:'metric_mappings']

      self.handler_properties = attributes[:'handlerProperties'] if attributes[:'handlerProperties']

      raise 'You cannot provide both :handlerProperties and :handler_properties' if attributes.key?(:'handlerProperties') && attributes.key?(:'handler_properties')

      self.handler_properties = attributes[:'handler_properties'] if attributes[:'handler_properties']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        collector_types == other.collector_types &&
        metric_upload_interval_in_seconds == other.metric_upload_interval_in_seconds &&
        telemetry_resource_group == other.telemetry_resource_group &&
        telegraf_resource_name_config == other.telegraf_resource_name_config &&
        collectd_resource_name_config == other.collectd_resource_name_config &&
        metric_name_config == other.metric_name_config &&
        metric_mappings == other.metric_mappings &&
        handler_properties == other.handler_properties
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [collector_types, metric_upload_interval_in_seconds, telemetry_resource_group, telegraf_resource_name_config, collectd_resource_name_config, metric_name_config, metric_mappings, handler_properties].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
