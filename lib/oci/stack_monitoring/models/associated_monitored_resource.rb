# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about monitored resource.
  class StackMonitoring::Models::AssociatedMonitoredResource
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LICENSE_ENUM = [
      LICENSE_STANDARD_EDITION = 'STANDARD_EDITION'.freeze,
      LICENSE_ENTERPRISE_EDITION = 'ENTERPRISE_EDITION'.freeze,
      LICENSE_ENTERPRISE_EDITION_FOR_GPU_INFRASTRUCTURE = 'ENTERPRISE_EDITION_FOR_GPU_INFRASTRUCTURE'.freeze,
      LICENSE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SOURCE_TYPE_ENUM = [
      SOURCE_TYPE_SM_MGMT_AGENT_MONITORED = 'SM_MGMT_AGENT_MONITORED'.freeze,
      SOURCE_TYPE_SM_REPO_ONLY = 'SM_REPO_ONLY'.freeze,
      SOURCE_TYPE_OCI_NATIVE = 'OCI_NATIVE'.freeze,
      SOURCE_TYPE_PROMETHEUS = 'PROMETHEUS'.freeze,
      SOURCE_TYPE_TELEGRAF = 'TELEGRAF'.freeze,
      SOURCE_TYPE_COLLECTD = 'COLLECTD'.freeze,
      SOURCE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    RESOURCE_CATEGORY_ENUM = [
      RESOURCE_CATEGORY_APPLICATION = 'APPLICATION'.freeze,
      RESOURCE_CATEGORY_DATABASE = 'DATABASE'.freeze,
      RESOURCE_CATEGORY_MIDDLEWARE = 'MIDDLEWARE'.freeze,
      RESOURCE_CATEGORY_INFRASTRUCTURE = 'INFRASTRUCTURE'.freeze,
      RESOURCE_CATEGORY_UNKNOWN = 'UNKNOWN'.freeze,
      RESOURCE_CATEGORY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Monitored resource identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
    #
    # @return [String]
    attr_accessor :id

    # Monitored Resource Name.
    #
    # @return [String]
    attr_accessor :name

    # Monitored resource display name.
    # @return [String]
    attr_accessor :display_name

    # Monitored Resource Type.
    #
    # @return [String]
    attr_accessor :type

    # Compartment Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
    #
    # @return [String]
    attr_accessor :compartment_id

    # Monitored Resource Host Name.
    #
    # @return [String]
    attr_accessor :host_name

    # External resource is any OCI resource identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)
    # which is not a Stack Monitoring service resource.
    # Currently supports only following resource types - Container database, non-container database,
    # pluggable database and OCI compute instance.
    #
    # @return [String]
    attr_accessor :external_id

    # Management Agent Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
    # @return [String]
    attr_accessor :management_agent_id

    # The current state of the monitored resource.
    # @return [String]
    attr_reader :lifecycle_state

    # License edition of the monitored resource.
    # @return [String]
    attr_reader :license

    # Source type to indicate if the resource is stack monitoring discovered, OCI native resource, etc.
    #
    # @return [String]
    attr_reader :source_type

    # Resource Category to indicate the kind of resource type.
    #
    # @return [String]
    attr_reader :resource_category

    # Association details of the resource.
    #
    # @return [Object]
    attr_accessor :association

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'name': :'name',
        'display_name': :'displayName',
        'type': :'type',
        'compartment_id': :'compartmentId',
        'host_name': :'hostName',
        'external_id': :'externalId',
        'management_agent_id': :'managementAgentId',
        'lifecycle_state': :'lifecycleState',
        'license': :'license',
        'source_type': :'sourceType',
        'resource_category': :'resourceCategory',
        'association': :'association'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'name': :'String',
        'display_name': :'String',
        'type': :'String',
        'compartment_id': :'String',
        'host_name': :'String',
        'external_id': :'String',
        'management_agent_id': :'String',
        'lifecycle_state': :'String',
        'license': :'String',
        'source_type': :'String',
        'resource_category': :'String',
        'association': :'Object'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :host_name The value to assign to the {#host_name} property
    # @option attributes [String] :external_id The value to assign to the {#external_id} property
    # @option attributes [String] :management_agent_id The value to assign to the {#management_agent_id} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :license The value to assign to the {#license} property
    # @option attributes [String] :source_type The value to assign to the {#source_type} property
    # @option attributes [String] :resource_category The value to assign to the {#resource_category} property
    # @option attributes [Object] :association The value to assign to the {#association} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.type = attributes[:'type'] if attributes[:'type']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.host_name = attributes[:'hostName'] if attributes[:'hostName']

      raise 'You cannot provide both :hostName and :host_name' if attributes.key?(:'hostName') && attributes.key?(:'host_name')

      self.host_name = attributes[:'host_name'] if attributes[:'host_name']

      self.external_id = attributes[:'externalId'] if attributes[:'externalId']

      raise 'You cannot provide both :externalId and :external_id' if attributes.key?(:'externalId') && attributes.key?(:'external_id')

      self.external_id = attributes[:'external_id'] if attributes[:'external_id']

      self.management_agent_id = attributes[:'managementAgentId'] if attributes[:'managementAgentId']

      raise 'You cannot provide both :managementAgentId and :management_agent_id' if attributes.key?(:'managementAgentId') && attributes.key?(:'management_agent_id')

      self.management_agent_id = attributes[:'management_agent_id'] if attributes[:'management_agent_id']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.license = attributes[:'license'] if attributes[:'license']

      self.source_type = attributes[:'sourceType'] if attributes[:'sourceType']

      raise 'You cannot provide both :sourceType and :source_type' if attributes.key?(:'sourceType') && attributes.key?(:'source_type')

      self.source_type = attributes[:'source_type'] if attributes[:'source_type']

      self.resource_category = attributes[:'resourceCategory'] if attributes[:'resourceCategory']

      raise 'You cannot provide both :resourceCategory and :resource_category' if attributes.key?(:'resourceCategory') && attributes.key?(:'resource_category')

      self.resource_category = attributes[:'resource_category'] if attributes[:'resource_category']

      self.association = attributes[:'association'] if attributes[:'association']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license Object to be assigned
    def license=(license)
      # rubocop:disable Style/ConditionalAssignment
      if license && !LICENSE_ENUM.include?(license)
        OCI.logger.debug("Unknown value for 'license' [" + license + "]. Mapping to 'LICENSE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @license = LICENSE_UNKNOWN_ENUM_VALUE
      else
        @license = license
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_type Object to be assigned
    def source_type=(source_type)
      # rubocop:disable Style/ConditionalAssignment
      if source_type && !SOURCE_TYPE_ENUM.include?(source_type)
        OCI.logger.debug("Unknown value for 'source_type' [" + source_type + "]. Mapping to 'SOURCE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @source_type = SOURCE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @source_type = source_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_category Object to be assigned
    def resource_category=(resource_category)
      # rubocop:disable Style/ConditionalAssignment
      if resource_category && !RESOURCE_CATEGORY_ENUM.include?(resource_category)
        OCI.logger.debug("Unknown value for 'resource_category' [" + resource_category + "]. Mapping to 'RESOURCE_CATEGORY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @resource_category = RESOURCE_CATEGORY_UNKNOWN_ENUM_VALUE
      else
        @resource_category = resource_category
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        display_name == other.display_name &&
        type == other.type &&
        compartment_id == other.compartment_id &&
        host_name == other.host_name &&
        external_id == other.external_id &&
        management_agent_id == other.management_agent_id &&
        lifecycle_state == other.lifecycle_state &&
        license == other.license &&
        source_type == other.source_type &&
        resource_category == other.resource_category &&
        association == other.association
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, display_name, type, compartment_id, host_name, external_id, management_agent_id, lifecycle_state, license, source_type, resource_category, association].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
