# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about new monitoring template. The monitoring template name should be unique in a compartment.
  class StackMonitoring::Models::CreateMonitoringTemplateDetails
    MESSAGE_FORMAT_ENUM = [
      MESSAGE_FORMAT_RAW = 'RAW'.freeze,
      MESSAGE_FORMAT_PRETTY_JSON = 'PRETTY_JSON'.freeze,
      MESSAGE_FORMAT_ONS_OPTIMIZED = 'ONS_OPTIMIZED'.freeze
    ].freeze

    # **[Required]** A user-friendly name for the monitoring template. It is unique and mutable in nature. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The OCID of the compartment containing the monitoringTemplate.
    # @return [String]
    attr_accessor :compartment_id

    # A user-friendly description for the monitoring template. It does not have to be unique, and it's changeable. Avoid entering confidential information.
    # @return [String]
    attr_accessor :description

    # **[Required]** A list of destinations for alarm notifications. Each destination is represented by the OCID of a related resource, such as a topic.
    # @return [Array<String>]
    attr_accessor :destinations

    # Whether the alarm is enabled or disabled, it will be Enabled by default.
    # @return [BOOLEAN]
    attr_accessor :is_alarms_enabled

    # Whether the alarm notification is enabled or disabled, it will be Enabled by default.
    # @return [BOOLEAN]
    attr_accessor :is_split_notification_enabled

    # **[Required]** List of members of this monitoring template
    # @return [Array<OCI::StackMonitoring::Models::MemberReference>]
    attr_accessor :members

    # The frequency for re-submitting alarm notifications, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, PT4H indicates four hours. Minimum- PT1M. Maximum - P30D.
    # @return [String]
    attr_accessor :repeat_notification_duration

    # The format to use for alarm notifications.
    # @return [String]
    attr_reader :message_format

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'description': :'description',
        'destinations': :'destinations',
        'is_alarms_enabled': :'isAlarmsEnabled',
        'is_split_notification_enabled': :'isSplitNotificationEnabled',
        'members': :'members',
        'repeat_notification_duration': :'repeatNotificationDuration',
        'message_format': :'messageFormat',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'compartment_id': :'String',
        'description': :'String',
        'destinations': :'Array<String>',
        'is_alarms_enabled': :'BOOLEAN',
        'is_split_notification_enabled': :'BOOLEAN',
        'members': :'Array<OCI::StackMonitoring::Models::MemberReference>',
        'repeat_notification_duration': :'String',
        'message_format': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Array<String>] :destinations The value to assign to the {#destinations} property
    # @option attributes [BOOLEAN] :is_alarms_enabled The value to assign to the {#is_alarms_enabled} property
    # @option attributes [BOOLEAN] :is_split_notification_enabled The value to assign to the {#is_split_notification_enabled} property
    # @option attributes [Array<OCI::StackMonitoring::Models::MemberReference>] :members The value to assign to the {#members} property
    # @option attributes [String] :repeat_notification_duration The value to assign to the {#repeat_notification_duration} property
    # @option attributes [String] :message_format The value to assign to the {#message_format} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.description = attributes[:'description'] if attributes[:'description']

      self.destinations = attributes[:'destinations'] if attributes[:'destinations']

      self.is_alarms_enabled = attributes[:'isAlarmsEnabled'] unless attributes[:'isAlarmsEnabled'].nil?
      self.is_alarms_enabled = true if is_alarms_enabled.nil? && !attributes.key?(:'isAlarmsEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isAlarmsEnabled and :is_alarms_enabled' if attributes.key?(:'isAlarmsEnabled') && attributes.key?(:'is_alarms_enabled')

      self.is_alarms_enabled = attributes[:'is_alarms_enabled'] unless attributes[:'is_alarms_enabled'].nil?
      self.is_alarms_enabled = true if is_alarms_enabled.nil? && !attributes.key?(:'isAlarmsEnabled') && !attributes.key?(:'is_alarms_enabled') # rubocop:disable Style/StringLiterals

      self.is_split_notification_enabled = attributes[:'isSplitNotificationEnabled'] unless attributes[:'isSplitNotificationEnabled'].nil?
      self.is_split_notification_enabled = true if is_split_notification_enabled.nil? && !attributes.key?(:'isSplitNotificationEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSplitNotificationEnabled and :is_split_notification_enabled' if attributes.key?(:'isSplitNotificationEnabled') && attributes.key?(:'is_split_notification_enabled')

      self.is_split_notification_enabled = attributes[:'is_split_notification_enabled'] unless attributes[:'is_split_notification_enabled'].nil?
      self.is_split_notification_enabled = true if is_split_notification_enabled.nil? && !attributes.key?(:'isSplitNotificationEnabled') && !attributes.key?(:'is_split_notification_enabled') # rubocop:disable Style/StringLiterals

      self.members = attributes[:'members'] if attributes[:'members']

      self.repeat_notification_duration = attributes[:'repeatNotificationDuration'] if attributes[:'repeatNotificationDuration']

      raise 'You cannot provide both :repeatNotificationDuration and :repeat_notification_duration' if attributes.key?(:'repeatNotificationDuration') && attributes.key?(:'repeat_notification_duration')

      self.repeat_notification_duration = attributes[:'repeat_notification_duration'] if attributes[:'repeat_notification_duration']

      self.message_format = attributes[:'messageFormat'] if attributes[:'messageFormat']
      self.message_format = "ONS_OPTIMIZED" if message_format.nil? && !attributes.key?(:'messageFormat') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :messageFormat and :message_format' if attributes.key?(:'messageFormat') && attributes.key?(:'message_format')

      self.message_format = attributes[:'message_format'] if attributes[:'message_format']
      self.message_format = "ONS_OPTIMIZED" if message_format.nil? && !attributes.key?(:'messageFormat') && !attributes.key?(:'message_format') # rubocop:disable Style/StringLiterals

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] message_format Object to be assigned
    def message_format=(message_format)
      raise "Invalid value for 'message_format': this must be one of the values in MESSAGE_FORMAT_ENUM." if message_format && !MESSAGE_FORMAT_ENUM.include?(message_format)

      @message_format = message_format
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        description == other.description &&
        destinations == other.destinations &&
        is_alarms_enabled == other.is_alarms_enabled &&
        is_split_notification_enabled == other.is_split_notification_enabled &&
        members == other.members &&
        repeat_notification_duration == other.repeat_notification_duration &&
        message_format == other.message_format &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, compartment_id, description, destinations, is_alarms_enabled, is_split_notification_enabled, members, repeat_notification_duration, message_format, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
