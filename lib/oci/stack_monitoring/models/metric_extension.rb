# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Detailed information of the Metric Extension resource
  class StackMonitoring::Models::MetricExtension
    STATUS_ENUM = [
      STATUS_DRAFT = 'DRAFT'.freeze,
      STATUS_PUBLISHED = 'PUBLISHED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of Metric Extension resource
    # @return [String]
    attr_accessor :id

    # **[Required]** Metric Extension resource name
    # @return [String]
    attr_accessor :name

    # **[Required]** Metric Extension resource display name
    # @return [String]
    attr_accessor :display_name

    # Description of the metric extension.
    # @return [String]
    attr_accessor :description

    # **[Required]** Resource type to which Metric Extension applies
    # @return [String]
    attr_accessor :resource_type

    # **[Required]** Compartment Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** Tenant Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)
    # @return [String]
    attr_accessor :tenant_id

    # **[Required]** Collection Method  Metric Extension applies
    # @return [String]
    attr_accessor :collection_method

    # **[Required]** The current status of the metric extension i.e. whether it is Draft or Published
    # @return [String]
    attr_reader :status

    # The current lifecycle state of the metric extension
    # @return [String]
    attr_reader :lifecycle_state

    # Created by user
    # @return [String]
    attr_accessor :created_by

    # Last updated by user
    # @return [String]
    attr_accessor :last_updated_by

    # Metric Extension creation time. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # Metric Extension update time. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** Schedule of metric extension should use RFC 5545 format -> recur-rule-part = \"FREQ\";\"INTERVAL\" where FREQ rule part identifies the type of recurrence rule. Valid values are \"MINUTELY\",\"HOURLY\",\"DAILY\" to specify repeating events based on an interval of a minute, an hour and a day or more. Example- FREQ=DAILY;INTERVAL=1
    # @return [String]
    attr_accessor :collection_recurrences

    # **[Required]** List of metrics which are part of this metric extension
    # @return [Array<OCI::StackMonitoring::Models::Metric>]
    attr_accessor :metric_list

    # This attribute is required.
    # @return [OCI::StackMonitoring::Models::MetricExtensionQueryProperties]
    attr_accessor :query_properties

    # List of resource objects on which this metric extension is enabled.
    # @return [Array<OCI::StackMonitoring::Models::EnabledResourceDetails>]
    attr_accessor :enabled_on_resources

    # Count of resources on which this metric extension is enabled.
    # @return [Integer]
    attr_accessor :enabled_on_resources_count

    # The URI path that the user can do a GET on to access the metric extension metadata
    # @return [String]
    attr_accessor :resource_uri

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'name': :'name',
        'display_name': :'displayName',
        'description': :'description',
        'resource_type': :'resourceType',
        'compartment_id': :'compartmentId',
        'tenant_id': :'tenantId',
        'collection_method': :'collectionMethod',
        'status': :'status',
        'lifecycle_state': :'lifecycleState',
        'created_by': :'createdBy',
        'last_updated_by': :'lastUpdatedBy',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'collection_recurrences': :'collectionRecurrences',
        'metric_list': :'metricList',
        'query_properties': :'queryProperties',
        'enabled_on_resources': :'enabledOnResources',
        'enabled_on_resources_count': :'enabledOnResourcesCount',
        'resource_uri': :'resourceUri'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'name': :'String',
        'display_name': :'String',
        'description': :'String',
        'resource_type': :'String',
        'compartment_id': :'String',
        'tenant_id': :'String',
        'collection_method': :'String',
        'status': :'String',
        'lifecycle_state': :'String',
        'created_by': :'String',
        'last_updated_by': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'collection_recurrences': :'String',
        'metric_list': :'Array<OCI::StackMonitoring::Models::Metric>',
        'query_properties': :'OCI::StackMonitoring::Models::MetricExtensionQueryProperties',
        'enabled_on_resources': :'Array<OCI::StackMonitoring::Models::EnabledResourceDetails>',
        'enabled_on_resources_count': :'Integer',
        'resource_uri': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :resource_type The value to assign to the {#resource_type} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :tenant_id The value to assign to the {#tenant_id} property
    # @option attributes [String] :collection_method The value to assign to the {#collection_method} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :created_by The value to assign to the {#created_by} property
    # @option attributes [String] :last_updated_by The value to assign to the {#last_updated_by} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :collection_recurrences The value to assign to the {#collection_recurrences} property
    # @option attributes [Array<OCI::StackMonitoring::Models::Metric>] :metric_list The value to assign to the {#metric_list} property
    # @option attributes [OCI::StackMonitoring::Models::MetricExtensionQueryProperties] :query_properties The value to assign to the {#query_properties} property
    # @option attributes [Array<OCI::StackMonitoring::Models::EnabledResourceDetails>] :enabled_on_resources The value to assign to the {#enabled_on_resources} property
    # @option attributes [Integer] :enabled_on_resources_count The value to assign to the {#enabled_on_resources_count} property
    # @option attributes [String] :resource_uri The value to assign to the {#resource_uri} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.resource_type = attributes[:'resourceType'] if attributes[:'resourceType']

      raise 'You cannot provide both :resourceType and :resource_type' if attributes.key?(:'resourceType') && attributes.key?(:'resource_type')

      self.resource_type = attributes[:'resource_type'] if attributes[:'resource_type']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.tenant_id = attributes[:'tenantId'] if attributes[:'tenantId']

      raise 'You cannot provide both :tenantId and :tenant_id' if attributes.key?(:'tenantId') && attributes.key?(:'tenant_id')

      self.tenant_id = attributes[:'tenant_id'] if attributes[:'tenant_id']

      self.collection_method = attributes[:'collectionMethod'] if attributes[:'collectionMethod']

      raise 'You cannot provide both :collectionMethod and :collection_method' if attributes.key?(:'collectionMethod') && attributes.key?(:'collection_method')

      self.collection_method = attributes[:'collection_method'] if attributes[:'collection_method']

      self.status = attributes[:'status'] if attributes[:'status']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.created_by = attributes[:'createdBy'] if attributes[:'createdBy']

      raise 'You cannot provide both :createdBy and :created_by' if attributes.key?(:'createdBy') && attributes.key?(:'created_by')

      self.created_by = attributes[:'created_by'] if attributes[:'created_by']

      self.last_updated_by = attributes[:'lastUpdatedBy'] if attributes[:'lastUpdatedBy']

      raise 'You cannot provide both :lastUpdatedBy and :last_updated_by' if attributes.key?(:'lastUpdatedBy') && attributes.key?(:'last_updated_by')

      self.last_updated_by = attributes[:'last_updated_by'] if attributes[:'last_updated_by']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.collection_recurrences = attributes[:'collectionRecurrences'] if attributes[:'collectionRecurrences']

      raise 'You cannot provide both :collectionRecurrences and :collection_recurrences' if attributes.key?(:'collectionRecurrences') && attributes.key?(:'collection_recurrences')

      self.collection_recurrences = attributes[:'collection_recurrences'] if attributes[:'collection_recurrences']

      self.metric_list = attributes[:'metricList'] if attributes[:'metricList']

      raise 'You cannot provide both :metricList and :metric_list' if attributes.key?(:'metricList') && attributes.key?(:'metric_list')

      self.metric_list = attributes[:'metric_list'] if attributes[:'metric_list']

      self.query_properties = attributes[:'queryProperties'] if attributes[:'queryProperties']

      raise 'You cannot provide both :queryProperties and :query_properties' if attributes.key?(:'queryProperties') && attributes.key?(:'query_properties')

      self.query_properties = attributes[:'query_properties'] if attributes[:'query_properties']

      self.enabled_on_resources = attributes[:'enabledOnResources'] if attributes[:'enabledOnResources']

      raise 'You cannot provide both :enabledOnResources and :enabled_on_resources' if attributes.key?(:'enabledOnResources') && attributes.key?(:'enabled_on_resources')

      self.enabled_on_resources = attributes[:'enabled_on_resources'] if attributes[:'enabled_on_resources']

      self.enabled_on_resources_count = attributes[:'enabledOnResourcesCount'] if attributes[:'enabledOnResourcesCount']

      raise 'You cannot provide both :enabledOnResourcesCount and :enabled_on_resources_count' if attributes.key?(:'enabledOnResourcesCount') && attributes.key?(:'enabled_on_resources_count')

      self.enabled_on_resources_count = attributes[:'enabled_on_resources_count'] if attributes[:'enabled_on_resources_count']

      self.resource_uri = attributes[:'resourceUri'] if attributes[:'resourceUri']

      raise 'You cannot provide both :resourceUri and :resource_uri' if attributes.key?(:'resourceUri') && attributes.key?(:'resource_uri')

      self.resource_uri = attributes[:'resource_uri'] if attributes[:'resource_uri']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        display_name == other.display_name &&
        description == other.description &&
        resource_type == other.resource_type &&
        compartment_id == other.compartment_id &&
        tenant_id == other.tenant_id &&
        collection_method == other.collection_method &&
        status == other.status &&
        lifecycle_state == other.lifecycle_state &&
        created_by == other.created_by &&
        last_updated_by == other.last_updated_by &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        collection_recurrences == other.collection_recurrences &&
        metric_list == other.metric_list &&
        query_properties == other.query_properties &&
        enabled_on_resources == other.enabled_on_resources &&
        enabled_on_resources_count == other.enabled_on_resources_count &&
        resource_uri == other.resource_uri
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, display_name, description, resource_type, compartment_id, tenant_id, collection_method, status, lifecycle_state, created_by, last_updated_by, time_created, time_updated, collection_recurrences, metric_list, query_properties, enabled_on_resources, enabled_on_resources_count, resource_uri].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
