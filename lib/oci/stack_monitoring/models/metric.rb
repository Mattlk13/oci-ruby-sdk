# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of a metric which is part of this metric extension
  class StackMonitoring::Models::Metric
    DATA_TYPE_ENUM = [
      DATA_TYPE_STRING = 'STRING'.freeze,
      DATA_TYPE_NUMBER = 'NUMBER'.freeze,
      DATA_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    METRIC_CATEGORY_ENUM = [
      METRIC_CATEGORY_LOAD = 'LOAD'.freeze,
      METRIC_CATEGORY_UTILIZATION = 'UTILIZATION'.freeze,
      METRIC_CATEGORY_CAPACITY = 'CAPACITY'.freeze,
      METRIC_CATEGORY_AVAILABILITY = 'AVAILABILITY'.freeze,
      METRIC_CATEGORY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Name of the metric.
    # @return [String]
    attr_accessor :name

    # Display name of the metric.
    # @return [String]
    attr_accessor :display_name

    # Current metric need to be included as dimension or not
    # @return [BOOLEAN]
    attr_accessor :is_dimension

    # Compute Expression to calculate the value of this metric
    # @return [String]
    attr_accessor :compute_expression

    # **[Required]** Data type of value of this metric
    # @return [String]
    attr_reader :data_type

    # Flag to marks whether a metric has to be uploaded or not. When isHidden = false -> Metric is uploaded, isHidden = true -> Metric is NOT uploaded
    # @return [BOOLEAN]
    attr_accessor :is_hidden

    # Metric category
    # @return [String]
    attr_reader :metric_category

    # Unit of metric value
    # @return [String]
    attr_accessor :unit

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'display_name': :'displayName',
        'is_dimension': :'isDimension',
        'compute_expression': :'computeExpression',
        'data_type': :'dataType',
        'is_hidden': :'isHidden',
        'metric_category': :'metricCategory',
        'unit': :'unit'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'display_name': :'String',
        'is_dimension': :'BOOLEAN',
        'compute_expression': :'String',
        'data_type': :'String',
        'is_hidden': :'BOOLEAN',
        'metric_category': :'String',
        'unit': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [BOOLEAN] :is_dimension The value to assign to the {#is_dimension} property
    # @option attributes [String] :compute_expression The value to assign to the {#compute_expression} property
    # @option attributes [String] :data_type The value to assign to the {#data_type} property
    # @option attributes [BOOLEAN] :is_hidden The value to assign to the {#is_hidden} property
    # @option attributes [String] :metric_category The value to assign to the {#metric_category} property
    # @option attributes [String] :unit The value to assign to the {#unit} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.is_dimension = attributes[:'isDimension'] unless attributes[:'isDimension'].nil?
      self.is_dimension = false if is_dimension.nil? && !attributes.key?(:'isDimension') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDimension and :is_dimension' if attributes.key?(:'isDimension') && attributes.key?(:'is_dimension')

      self.is_dimension = attributes[:'is_dimension'] unless attributes[:'is_dimension'].nil?
      self.is_dimension = false if is_dimension.nil? && !attributes.key?(:'isDimension') && !attributes.key?(:'is_dimension') # rubocop:disable Style/StringLiterals

      self.compute_expression = attributes[:'computeExpression'] if attributes[:'computeExpression']

      raise 'You cannot provide both :computeExpression and :compute_expression' if attributes.key?(:'computeExpression') && attributes.key?(:'compute_expression')

      self.compute_expression = attributes[:'compute_expression'] if attributes[:'compute_expression']

      self.data_type = attributes[:'dataType'] if attributes[:'dataType']

      raise 'You cannot provide both :dataType and :data_type' if attributes.key?(:'dataType') && attributes.key?(:'data_type')

      self.data_type = attributes[:'data_type'] if attributes[:'data_type']

      self.is_hidden = attributes[:'isHidden'] unless attributes[:'isHidden'].nil?
      self.is_hidden = false if is_hidden.nil? && !attributes.key?(:'isHidden') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isHidden and :is_hidden' if attributes.key?(:'isHidden') && attributes.key?(:'is_hidden')

      self.is_hidden = attributes[:'is_hidden'] unless attributes[:'is_hidden'].nil?
      self.is_hidden = false if is_hidden.nil? && !attributes.key?(:'isHidden') && !attributes.key?(:'is_hidden') # rubocop:disable Style/StringLiterals

      self.metric_category = attributes[:'metricCategory'] if attributes[:'metricCategory']

      raise 'You cannot provide both :metricCategory and :metric_category' if attributes.key?(:'metricCategory') && attributes.key?(:'metric_category')

      self.metric_category = attributes[:'metric_category'] if attributes[:'metric_category']

      self.unit = attributes[:'unit'] if attributes[:'unit']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_type Object to be assigned
    def data_type=(data_type)
      # rubocop:disable Style/ConditionalAssignment
      if data_type && !DATA_TYPE_ENUM.include?(data_type)
        OCI.logger.debug("Unknown value for 'data_type' [" + data_type + "]. Mapping to 'DATA_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @data_type = DATA_TYPE_UNKNOWN_ENUM_VALUE
      else
        @data_type = data_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metric_category Object to be assigned
    def metric_category=(metric_category)
      # rubocop:disable Style/ConditionalAssignment
      if metric_category && !METRIC_CATEGORY_ENUM.include?(metric_category)
        OCI.logger.debug("Unknown value for 'metric_category' [" + metric_category + "]. Mapping to 'METRIC_CATEGORY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @metric_category = METRIC_CATEGORY_UNKNOWN_ENUM_VALUE
      else
        @metric_category = metric_category
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        display_name == other.display_name &&
        is_dimension == other.is_dimension &&
        compute_expression == other.compute_expression &&
        data_type == other.data_type &&
        is_hidden == other.is_hidden &&
        metric_category == other.metric_category &&
        unit == other.unit
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, display_name, is_dimension, compute_expression, data_type, is_hidden, metric_category, unit].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
