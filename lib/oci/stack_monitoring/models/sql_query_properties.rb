# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'
require 'logger'
require_relative 'metric_extension_query_properties'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Query Properties applicable to SQL type of collection method
  class StackMonitoring::Models::SqlQueryProperties < StackMonitoring::Models::MetricExtensionQueryProperties
    SQL_TYPE_ENUM = [
      SQL_TYPE_STATEMENT = 'STATEMENT'.freeze,
      SQL_TYPE_SQL_SCRIPT = 'SQL_SCRIPT'.freeze,
      SQL_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Type of SQL data collection method i.e. either a Statement or SQL Script File
    # @return [String]
    attr_reader :sql_type

    # This attribute is required.
    # @return [OCI::StackMonitoring::Models::SqlDetails]
    attr_accessor :sql_details

    # List of values and position of PL/SQL procedure IN parameters
    # @return [Array<OCI::StackMonitoring::Models::SqlInParamDetails>]
    attr_accessor :in_param_details

    # @return [OCI::StackMonitoring::Models::SqlOutParamDetails]
    attr_accessor :out_param_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'collection_method': :'collectionMethod',
        'sql_type': :'sqlType',
        'sql_details': :'sqlDetails',
        'in_param_details': :'inParamDetails',
        'out_param_details': :'outParamDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'collection_method': :'String',
        'sql_type': :'String',
        'sql_details': :'OCI::StackMonitoring::Models::SqlDetails',
        'in_param_details': :'Array<OCI::StackMonitoring::Models::SqlInParamDetails>',
        'out_param_details': :'OCI::StackMonitoring::Models::SqlOutParamDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :sql_type The value to assign to the {#sql_type} property
    # @option attributes [OCI::StackMonitoring::Models::SqlDetails] :sql_details The value to assign to the {#sql_details} property
    # @option attributes [Array<OCI::StackMonitoring::Models::SqlInParamDetails>] :in_param_details The value to assign to the {#in_param_details} property
    # @option attributes [OCI::StackMonitoring::Models::SqlOutParamDetails] :out_param_details The value to assign to the {#out_param_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['collectionMethod'] = 'SQL'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.sql_type = attributes[:'sqlType'] if attributes[:'sqlType']

      raise 'You cannot provide both :sqlType and :sql_type' if attributes.key?(:'sqlType') && attributes.key?(:'sql_type')

      self.sql_type = attributes[:'sql_type'] if attributes[:'sql_type']

      self.sql_details = attributes[:'sqlDetails'] if attributes[:'sqlDetails']

      raise 'You cannot provide both :sqlDetails and :sql_details' if attributes.key?(:'sqlDetails') && attributes.key?(:'sql_details')

      self.sql_details = attributes[:'sql_details'] if attributes[:'sql_details']

      self.in_param_details = attributes[:'inParamDetails'] if attributes[:'inParamDetails']

      raise 'You cannot provide both :inParamDetails and :in_param_details' if attributes.key?(:'inParamDetails') && attributes.key?(:'in_param_details')

      self.in_param_details = attributes[:'in_param_details'] if attributes[:'in_param_details']

      self.out_param_details = attributes[:'outParamDetails'] if attributes[:'outParamDetails']

      raise 'You cannot provide both :outParamDetails and :out_param_details' if attributes.key?(:'outParamDetails') && attributes.key?(:'out_param_details')

      self.out_param_details = attributes[:'out_param_details'] if attributes[:'out_param_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sql_type Object to be assigned
    def sql_type=(sql_type)
      # rubocop:disable Style/ConditionalAssignment
      if sql_type && !SQL_TYPE_ENUM.include?(sql_type)
        OCI.logger.debug("Unknown value for 'sql_type' [" + sql_type + "]. Mapping to 'SQL_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @sql_type = SQL_TYPE_UNKNOWN_ENUM_VALUE
      else
        @sql_type = sql_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        collection_method == other.collection_method &&
        sql_type == other.sql_type &&
        sql_details == other.sql_details &&
        in_param_details == other.in_param_details &&
        out_param_details == other.out_param_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [collection_method, sql_type, sql_details, in_param_details, out_param_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
