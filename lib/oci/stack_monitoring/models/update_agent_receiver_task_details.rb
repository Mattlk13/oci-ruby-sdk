# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'
require 'logger'
require_relative 'monitored_resource_task_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Request details for enabling/disabling the metric receiver on the management agent.
  #
  class StackMonitoring::Models::UpdateAgentReceiverTaskDetails < StackMonitoring::Models::MonitoredResourceTaskDetails
    HANDLER_TYPE_ENUM = [
      HANDLER_TYPE_TELEGRAF = 'TELEGRAF'.freeze,
      HANDLER_TYPE_COLLECTD = 'COLLECTD'.freeze,
      HANDLER_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Management Agent Identifier [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
    # @return [String]
    attr_accessor :agent_id

    # **[Required]** Type of the handler.
    # @return [String]
    attr_reader :handler_type

    # **[Required]** True to enable the receiver and false to disable the receiver on the agent.
    #
    # @return [BOOLEAN]
    attr_accessor :is_enable

    # @return [OCI::StackMonitoring::Models::AgentReceiverProperties]
    attr_accessor :receiver_properties

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'type',
        'agent_id': :'agentId',
        'handler_type': :'handlerType',
        'is_enable': :'isEnable',
        'receiver_properties': :'receiverProperties'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'String',
        'agent_id': :'String',
        'handler_type': :'String',
        'is_enable': :'BOOLEAN',
        'receiver_properties': :'OCI::StackMonitoring::Models::AgentReceiverProperties'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :agent_id The value to assign to the {#agent_id} property
    # @option attributes [String] :handler_type The value to assign to the {#handler_type} property
    # @option attributes [BOOLEAN] :is_enable The value to assign to the {#is_enable} property
    # @option attributes [OCI::StackMonitoring::Models::AgentReceiverProperties] :receiver_properties The value to assign to the {#receiver_properties} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['type'] = 'UPDATE_AGENT_RECEIVER'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.agent_id = attributes[:'agentId'] if attributes[:'agentId']

      raise 'You cannot provide both :agentId and :agent_id' if attributes.key?(:'agentId') && attributes.key?(:'agent_id')

      self.agent_id = attributes[:'agent_id'] if attributes[:'agent_id']

      self.handler_type = attributes[:'handlerType'] if attributes[:'handlerType']

      raise 'You cannot provide both :handlerType and :handler_type' if attributes.key?(:'handlerType') && attributes.key?(:'handler_type')

      self.handler_type = attributes[:'handler_type'] if attributes[:'handler_type']

      self.is_enable = attributes[:'isEnable'] unless attributes[:'isEnable'].nil?

      raise 'You cannot provide both :isEnable and :is_enable' if attributes.key?(:'isEnable') && attributes.key?(:'is_enable')

      self.is_enable = attributes[:'is_enable'] unless attributes[:'is_enable'].nil?

      self.receiver_properties = attributes[:'receiverProperties'] if attributes[:'receiverProperties']

      raise 'You cannot provide both :receiverProperties and :receiver_properties' if attributes.key?(:'receiverProperties') && attributes.key?(:'receiver_properties')

      self.receiver_properties = attributes[:'receiver_properties'] if attributes[:'receiver_properties']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] handler_type Object to be assigned
    def handler_type=(handler_type)
      # rubocop:disable Style/ConditionalAssignment
      if handler_type && !HANDLER_TYPE_ENUM.include?(handler_type)
        OCI.logger.debug("Unknown value for 'handler_type' [" + handler_type + "]. Mapping to 'HANDLER_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @handler_type = HANDLER_TYPE_UNKNOWN_ENUM_VALUE
      else
        @handler_type = handler_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        agent_id == other.agent_id &&
        handler_type == other.handler_type &&
        is_enable == other.is_enable &&
        receiver_properties == other.receiver_properties
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, agent_id, handler_type, is_enable, receiver_properties].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
