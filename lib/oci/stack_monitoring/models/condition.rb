# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210330
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The Monitoring Template Alarm Condition.
  class StackMonitoring::Models::Condition
    SEVERITY_ENUM = [
      SEVERITY_CRITICAL = 'CRITICAL'.freeze,
      SEVERITY_WARNING = 'WARNING'.freeze,
      SEVERITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Severity - Critical/Warning
    # @return [String]
    attr_reader :severity

    # **[Required]** The Monitoring Query Language (MQL) expression to evaluate for the alarm.
    # @return [String]
    attr_accessor :query

    # The human-readable content of the delivered alarm notification. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.
    # @return [String]
    attr_accessor :body

    # Whether the note need to add into bottom of the body for mapping the alarms information with template or not.
    # @return [BOOLEAN]
    attr_accessor :should_append_note

    # Whether the URL need to add into bottom of the body for mapping the alarms information with template or not.
    # @return [BOOLEAN]
    attr_accessor :should_append_url

    # The period of time that the condition defined in the alarm must persist before the alarm state changes from \"OK\" to \"FIRING\".
    # @return [String]
    attr_accessor :trigger_delay

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'severity': :'severity',
        'query': :'query',
        'body': :'body',
        'should_append_note': :'shouldAppendNote',
        'should_append_url': :'shouldAppendUrl',
        'trigger_delay': :'triggerDelay'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'severity': :'String',
        'query': :'String',
        'body': :'String',
        'should_append_note': :'BOOLEAN',
        'should_append_url': :'BOOLEAN',
        'trigger_delay': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :severity The value to assign to the {#severity} property
    # @option attributes [String] :query The value to assign to the {#query} property
    # @option attributes [String] :body The value to assign to the {#body} property
    # @option attributes [BOOLEAN] :should_append_note The value to assign to the {#should_append_note} property
    # @option attributes [BOOLEAN] :should_append_url The value to assign to the {#should_append_url} property
    # @option attributes [String] :trigger_delay The value to assign to the {#trigger_delay} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.severity = attributes[:'severity'] if attributes[:'severity']

      self.query = attributes[:'query'] if attributes[:'query']

      self.body = attributes[:'body'] if attributes[:'body']

      self.should_append_note = attributes[:'shouldAppendNote'] unless attributes[:'shouldAppendNote'].nil?
      self.should_append_note = true if should_append_note.nil? && !attributes.key?(:'shouldAppendNote') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldAppendNote and :should_append_note' if attributes.key?(:'shouldAppendNote') && attributes.key?(:'should_append_note')

      self.should_append_note = attributes[:'should_append_note'] unless attributes[:'should_append_note'].nil?
      self.should_append_note = true if should_append_note.nil? && !attributes.key?(:'shouldAppendNote') && !attributes.key?(:'should_append_note') # rubocop:disable Style/StringLiterals

      self.should_append_url = attributes[:'shouldAppendUrl'] unless attributes[:'shouldAppendUrl'].nil?
      self.should_append_url = false if should_append_url.nil? && !attributes.key?(:'shouldAppendUrl') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldAppendUrl and :should_append_url' if attributes.key?(:'shouldAppendUrl') && attributes.key?(:'should_append_url')

      self.should_append_url = attributes[:'should_append_url'] unless attributes[:'should_append_url'].nil?
      self.should_append_url = false if should_append_url.nil? && !attributes.key?(:'shouldAppendUrl') && !attributes.key?(:'should_append_url') # rubocop:disable Style/StringLiterals

      self.trigger_delay = attributes[:'triggerDelay'] if attributes[:'triggerDelay']

      raise 'You cannot provide both :triggerDelay and :trigger_delay' if attributes.key?(:'triggerDelay') && attributes.key?(:'trigger_delay')

      self.trigger_delay = attributes[:'trigger_delay'] if attributes[:'trigger_delay']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      # rubocop:disable Style/ConditionalAssignment
      if severity && !SEVERITY_ENUM.include?(severity)
        OCI.logger.debug("Unknown value for 'severity' [" + severity + "]. Mapping to 'SEVERITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @severity = SEVERITY_UNKNOWN_ENUM_VALUE
      else
        @severity = severity
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        severity == other.severity &&
        query == other.query &&
        body == other.body &&
        should_append_note == other.should_append_note &&
        should_append_url == other.should_append_url &&
        trigger_delay == other.trigger_delay
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [severity, query, body, should_append_note, should_append_url, trigger_delay].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
