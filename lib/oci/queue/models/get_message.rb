# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210201
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A message consumed from a queue.
  class Queue::Models::GetMessage
    # **[Required]** The ID of the message. This ID is only used for tracing and debugging purposes and isn't used as a parameter in any request.
    # @return [Integer]
    attr_accessor :id

    # **[Required]** The content of the message.
    # @return [String]
    attr_accessor :content

    # **[Required]** A receipt is a base64urlencode opaque token, uniquely representing a message.
    # The receipt can be used to delete a message or update its visibility.
    #
    # @return [String]
    attr_accessor :receipt

    # **[Required]** The number of times that the message has been delivered to a consumer.
    # @return [Integer]
    attr_accessor :delivery_count

    # **[Required]** The time after which the message will be visible to other consumers, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
    #
    # Example: `2018-04-20T00:00:07.405Z`
    #
    # @return [DateTime]
    attr_accessor :visible_after

    # **[Required]** The time after which the message will be automatically deleted, expressed in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.
    #
    # Example: `2018-04-20T00:00:07.405Z`
    #
    # @return [DateTime]
    attr_accessor :expire_after

    # @return [OCI::Queue::Models::MessageMetadata]
    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'content': :'content',
        'receipt': :'receipt',
        'delivery_count': :'deliveryCount',
        'visible_after': :'visibleAfter',
        'expire_after': :'expireAfter',
        'metadata': :'metadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'Integer',
        'content': :'String',
        'receipt': :'String',
        'delivery_count': :'Integer',
        'visible_after': :'DateTime',
        'expire_after': :'DateTime',
        'metadata': :'OCI::Queue::Models::MessageMetadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :id The value to assign to the {#id} property
    # @option attributes [String] :content The value to assign to the {#content} property
    # @option attributes [String] :receipt The value to assign to the {#receipt} property
    # @option attributes [Integer] :delivery_count The value to assign to the {#delivery_count} property
    # @option attributes [DateTime] :visible_after The value to assign to the {#visible_after} property
    # @option attributes [DateTime] :expire_after The value to assign to the {#expire_after} property
    # @option attributes [OCI::Queue::Models::MessageMetadata] :metadata The value to assign to the {#metadata} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.content = attributes[:'content'] if attributes[:'content']

      self.receipt = attributes[:'receipt'] if attributes[:'receipt']

      self.delivery_count = attributes[:'deliveryCount'] if attributes[:'deliveryCount']

      raise 'You cannot provide both :deliveryCount and :delivery_count' if attributes.key?(:'deliveryCount') && attributes.key?(:'delivery_count')

      self.delivery_count = attributes[:'delivery_count'] if attributes[:'delivery_count']

      self.visible_after = attributes[:'visibleAfter'] if attributes[:'visibleAfter']

      raise 'You cannot provide both :visibleAfter and :visible_after' if attributes.key?(:'visibleAfter') && attributes.key?(:'visible_after')

      self.visible_after = attributes[:'visible_after'] if attributes[:'visible_after']

      self.expire_after = attributes[:'expireAfter'] if attributes[:'expireAfter']

      raise 'You cannot provide both :expireAfter and :expire_after' if attributes.key?(:'expireAfter') && attributes.key?(:'expire_after')

      self.expire_after = attributes[:'expire_after'] if attributes[:'expire_after']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        content == other.content &&
        receipt == other.receipt &&
        delivery_count == other.delivery_count &&
        visible_after == other.visible_after &&
        expire_after == other.expire_after &&
        metadata == other.metadata
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, content, receipt, delivery_count, visible_after, expire_after, metadata].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
