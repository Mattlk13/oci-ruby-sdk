# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Query parameters to filter indicators
  class ThreatIntelligence::Models::SummarizeIndicatorsDetails
    INDICATOR_TYPE_ENUM = [
      INDICATOR_TYPE_DOMAIN_NAME = 'DOMAIN_NAME'.freeze,
      INDICATOR_TYPE_FILE_NAME = 'FILE_NAME'.freeze,
      INDICATOR_TYPE_MD5_HASH = 'MD5_HASH'.freeze,
      INDICATOR_TYPE_SHA1_HASH = 'SHA1_HASH'.freeze,
      INDICATOR_TYPE_SHA256_HASH = 'SHA256_HASH'.freeze,
      INDICATOR_TYPE_IP_ADDRESS = 'IP_ADDRESS'.freeze,
      INDICATOR_TYPE_URL = 'URL'.freeze
    ].freeze

    SORT_ORDER_ENUM = [
      SORT_ORDER_ASC = 'ASC'.freeze,
      SORT_ORDER_DESC = 'DESC'.freeze
    ].freeze

    SORT_BY_ENUM = [
      SORT_BY_CONFIDENCE = 'CONFIDENCE'.freeze,
      SORT_BY_TIMECREATED = 'TIMECREATED'.freeze,
      SORT_BY_TIMEUPDATED = 'TIMEUPDATED'.freeze,
      SORT_BY_TIMELASTSEEN = 'TIMELASTSEEN'.freeze
    ].freeze

    # The type of indicator this is
    # @return [String]
    attr_reader :indicator_type

    # The value for the type of indicator this is
    # @return [String]
    attr_accessor :indicator_value

    # The threat type of entites to be returned.
    # @return [Array<String>]
    attr_accessor :threat_types

    # The minimum level of confidence to return
    # @return [Integer]
    attr_accessor :confidence_greater_than_or_equal_to

    # The oldest update time of entities to be returned.
    # @return [DateTime]
    attr_accessor :time_updated_greater_than_or_equal_to

    # The newest update time of entities to be returned.
    # @return [DateTime]
    attr_accessor :time_updated_less_than

    # The oldest last seen time of entities to be returned.
    # @return [DateTime]
    attr_accessor :time_last_seen_greater_than_or_equal_to

    # The newest last seen time of entities to be returned.
    # @return [DateTime]
    attr_accessor :time_last_seen_less_than

    # The oldest creation time of entities to be returned.
    # @return [DateTime]
    attr_accessor :time_created_greater_than_or_equal_to

    # The newest creation time of entities to be returned.
    # @return [DateTime]
    attr_accessor :time_created_less_than

    # Filter to include indicators that have been seen by the provided source.
    # @return [String]
    attr_accessor :indicator_seen_by

    # Filter to include indicators associated with the provided malware.
    # @return [String]
    attr_accessor :malware

    # Filter to included indicators associated with the provided threat actor.
    # @return [String]
    attr_accessor :threat_actor

    # The sort order to use, either 'ASC' or 'DESC'.
    # @return [String]
    attr_reader :sort_order

    # The field to sort by. Only one field to sort by may be provided
    # @return [String]
    attr_reader :sort_by

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'indicator_type': :'indicatorType',
        'indicator_value': :'indicatorValue',
        'threat_types': :'threatTypes',
        'confidence_greater_than_or_equal_to': :'confidenceGreaterThanOrEqualTo',
        'time_updated_greater_than_or_equal_to': :'timeUpdatedGreaterThanOrEqualTo',
        'time_updated_less_than': :'timeUpdatedLessThan',
        'time_last_seen_greater_than_or_equal_to': :'timeLastSeenGreaterThanOrEqualTo',
        'time_last_seen_less_than': :'timeLastSeenLessThan',
        'time_created_greater_than_or_equal_to': :'timeCreatedGreaterThanOrEqualTo',
        'time_created_less_than': :'timeCreatedLessThan',
        'indicator_seen_by': :'indicatorSeenBy',
        'malware': :'malware',
        'threat_actor': :'threatActor',
        'sort_order': :'sortOrder',
        'sort_by': :'sortBy'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'indicator_type': :'String',
        'indicator_value': :'String',
        'threat_types': :'Array<String>',
        'confidence_greater_than_or_equal_to': :'Integer',
        'time_updated_greater_than_or_equal_to': :'DateTime',
        'time_updated_less_than': :'DateTime',
        'time_last_seen_greater_than_or_equal_to': :'DateTime',
        'time_last_seen_less_than': :'DateTime',
        'time_created_greater_than_or_equal_to': :'DateTime',
        'time_created_less_than': :'DateTime',
        'indicator_seen_by': :'String',
        'malware': :'String',
        'threat_actor': :'String',
        'sort_order': :'String',
        'sort_by': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :indicator_type The value to assign to the {#indicator_type} property
    # @option attributes [String] :indicator_value The value to assign to the {#indicator_value} property
    # @option attributes [Array<String>] :threat_types The value to assign to the {#threat_types} property
    # @option attributes [Integer] :confidence_greater_than_or_equal_to The value to assign to the {#confidence_greater_than_or_equal_to} property
    # @option attributes [DateTime] :time_updated_greater_than_or_equal_to The value to assign to the {#time_updated_greater_than_or_equal_to} property
    # @option attributes [DateTime] :time_updated_less_than The value to assign to the {#time_updated_less_than} property
    # @option attributes [DateTime] :time_last_seen_greater_than_or_equal_to The value to assign to the {#time_last_seen_greater_than_or_equal_to} property
    # @option attributes [DateTime] :time_last_seen_less_than The value to assign to the {#time_last_seen_less_than} property
    # @option attributes [DateTime] :time_created_greater_than_or_equal_to The value to assign to the {#time_created_greater_than_or_equal_to} property
    # @option attributes [DateTime] :time_created_less_than The value to assign to the {#time_created_less_than} property
    # @option attributes [String] :indicator_seen_by The value to assign to the {#indicator_seen_by} property
    # @option attributes [String] :malware The value to assign to the {#malware} property
    # @option attributes [String] :threat_actor The value to assign to the {#threat_actor} property
    # @option attributes [String] :sort_order The value to assign to the {#sort_order} property
    # @option attributes [String] :sort_by The value to assign to the {#sort_by} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.indicator_type = attributes[:'indicatorType'] if attributes[:'indicatorType']

      raise 'You cannot provide both :indicatorType and :indicator_type' if attributes.key?(:'indicatorType') && attributes.key?(:'indicator_type')

      self.indicator_type = attributes[:'indicator_type'] if attributes[:'indicator_type']

      self.indicator_value = attributes[:'indicatorValue'] if attributes[:'indicatorValue']

      raise 'You cannot provide both :indicatorValue and :indicator_value' if attributes.key?(:'indicatorValue') && attributes.key?(:'indicator_value')

      self.indicator_value = attributes[:'indicator_value'] if attributes[:'indicator_value']

      self.threat_types = attributes[:'threatTypes'] if attributes[:'threatTypes']

      raise 'You cannot provide both :threatTypes and :threat_types' if attributes.key?(:'threatTypes') && attributes.key?(:'threat_types')

      self.threat_types = attributes[:'threat_types'] if attributes[:'threat_types']

      self.confidence_greater_than_or_equal_to = attributes[:'confidenceGreaterThanOrEqualTo'] if attributes[:'confidenceGreaterThanOrEqualTo']

      raise 'You cannot provide both :confidenceGreaterThanOrEqualTo and :confidence_greater_than_or_equal_to' if attributes.key?(:'confidenceGreaterThanOrEqualTo') && attributes.key?(:'confidence_greater_than_or_equal_to')

      self.confidence_greater_than_or_equal_to = attributes[:'confidence_greater_than_or_equal_to'] if attributes[:'confidence_greater_than_or_equal_to']

      self.time_updated_greater_than_or_equal_to = attributes[:'timeUpdatedGreaterThanOrEqualTo'] if attributes[:'timeUpdatedGreaterThanOrEqualTo']

      raise 'You cannot provide both :timeUpdatedGreaterThanOrEqualTo and :time_updated_greater_than_or_equal_to' if attributes.key?(:'timeUpdatedGreaterThanOrEqualTo') && attributes.key?(:'time_updated_greater_than_or_equal_to')

      self.time_updated_greater_than_or_equal_to = attributes[:'time_updated_greater_than_or_equal_to'] if attributes[:'time_updated_greater_than_or_equal_to']

      self.time_updated_less_than = attributes[:'timeUpdatedLessThan'] if attributes[:'timeUpdatedLessThan']

      raise 'You cannot provide both :timeUpdatedLessThan and :time_updated_less_than' if attributes.key?(:'timeUpdatedLessThan') && attributes.key?(:'time_updated_less_than')

      self.time_updated_less_than = attributes[:'time_updated_less_than'] if attributes[:'time_updated_less_than']

      self.time_last_seen_greater_than_or_equal_to = attributes[:'timeLastSeenGreaterThanOrEqualTo'] if attributes[:'timeLastSeenGreaterThanOrEqualTo']

      raise 'You cannot provide both :timeLastSeenGreaterThanOrEqualTo and :time_last_seen_greater_than_or_equal_to' if attributes.key?(:'timeLastSeenGreaterThanOrEqualTo') && attributes.key?(:'time_last_seen_greater_than_or_equal_to')

      self.time_last_seen_greater_than_or_equal_to = attributes[:'time_last_seen_greater_than_or_equal_to'] if attributes[:'time_last_seen_greater_than_or_equal_to']

      self.time_last_seen_less_than = attributes[:'timeLastSeenLessThan'] if attributes[:'timeLastSeenLessThan']

      raise 'You cannot provide both :timeLastSeenLessThan and :time_last_seen_less_than' if attributes.key?(:'timeLastSeenLessThan') && attributes.key?(:'time_last_seen_less_than')

      self.time_last_seen_less_than = attributes[:'time_last_seen_less_than'] if attributes[:'time_last_seen_less_than']

      self.time_created_greater_than_or_equal_to = attributes[:'timeCreatedGreaterThanOrEqualTo'] if attributes[:'timeCreatedGreaterThanOrEqualTo']

      raise 'You cannot provide both :timeCreatedGreaterThanOrEqualTo and :time_created_greater_than_or_equal_to' if attributes.key?(:'timeCreatedGreaterThanOrEqualTo') && attributes.key?(:'time_created_greater_than_or_equal_to')

      self.time_created_greater_than_or_equal_to = attributes[:'time_created_greater_than_or_equal_to'] if attributes[:'time_created_greater_than_or_equal_to']

      self.time_created_less_than = attributes[:'timeCreatedLessThan'] if attributes[:'timeCreatedLessThan']

      raise 'You cannot provide both :timeCreatedLessThan and :time_created_less_than' if attributes.key?(:'timeCreatedLessThan') && attributes.key?(:'time_created_less_than')

      self.time_created_less_than = attributes[:'time_created_less_than'] if attributes[:'time_created_less_than']

      self.indicator_seen_by = attributes[:'indicatorSeenBy'] if attributes[:'indicatorSeenBy']

      raise 'You cannot provide both :indicatorSeenBy and :indicator_seen_by' if attributes.key?(:'indicatorSeenBy') && attributes.key?(:'indicator_seen_by')

      self.indicator_seen_by = attributes[:'indicator_seen_by'] if attributes[:'indicator_seen_by']

      self.malware = attributes[:'malware'] if attributes[:'malware']

      self.threat_actor = attributes[:'threatActor'] if attributes[:'threatActor']

      raise 'You cannot provide both :threatActor and :threat_actor' if attributes.key?(:'threatActor') && attributes.key?(:'threat_actor')

      self.threat_actor = attributes[:'threat_actor'] if attributes[:'threat_actor']

      self.sort_order = attributes[:'sortOrder'] if attributes[:'sortOrder']

      raise 'You cannot provide both :sortOrder and :sort_order' if attributes.key?(:'sortOrder') && attributes.key?(:'sort_order')

      self.sort_order = attributes[:'sort_order'] if attributes[:'sort_order']

      self.sort_by = attributes[:'sortBy'] if attributes[:'sortBy']

      raise 'You cannot provide both :sortBy and :sort_by' if attributes.key?(:'sortBy') && attributes.key?(:'sort_by')

      self.sort_by = attributes[:'sort_by'] if attributes[:'sort_by']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] indicator_type Object to be assigned
    def indicator_type=(indicator_type)
      raise "Invalid value for 'indicator_type': this must be one of the values in INDICATOR_TYPE_ENUM." if indicator_type && !INDICATOR_TYPE_ENUM.include?(indicator_type)

      @indicator_type = indicator_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort_order Object to be assigned
    def sort_order=(sort_order)
      raise "Invalid value for 'sort_order': this must be one of the values in SORT_ORDER_ENUM." if sort_order && !SORT_ORDER_ENUM.include?(sort_order)

      @sort_order = sort_order
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort_by Object to be assigned
    def sort_by=(sort_by)
      raise "Invalid value for 'sort_by': this must be one of the values in SORT_BY_ENUM." if sort_by && !SORT_BY_ENUM.include?(sort_by)

      @sort_by = sort_by
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        indicator_type == other.indicator_type &&
        indicator_value == other.indicator_value &&
        threat_types == other.threat_types &&
        confidence_greater_than_or_equal_to == other.confidence_greater_than_or_equal_to &&
        time_updated_greater_than_or_equal_to == other.time_updated_greater_than_or_equal_to &&
        time_updated_less_than == other.time_updated_less_than &&
        time_last_seen_greater_than_or_equal_to == other.time_last_seen_greater_than_or_equal_to &&
        time_last_seen_less_than == other.time_last_seen_less_than &&
        time_created_greater_than_or_equal_to == other.time_created_greater_than_or_equal_to &&
        time_created_less_than == other.time_created_less_than &&
        indicator_seen_by == other.indicator_seen_by &&
        malware == other.malware &&
        threat_actor == other.threat_actor &&
        sort_order == other.sort_order &&
        sort_by == other.sort_by
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [indicator_type, indicator_value, threat_types, confidence_greater_than_or_equal_to, time_updated_greater_than_or_equal_to, time_updated_less_than, time_last_seen_greater_than_or_equal_to, time_last_seen_less_than, time_created_greater_than_or_equal_to, time_created_less_than, indicator_seen_by, malware, threat_actor, sort_order, sort_by].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
