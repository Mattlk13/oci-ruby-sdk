# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A summary of the Java release properties.
  class Jms::Models::JavaReleaseSummary
    SECURITY_STATUS_ENUM = [
      SECURITY_STATUS_EARLY_ACCESS = 'EARLY_ACCESS'.freeze,
      SECURITY_STATUS_UNKNOWN = 'UNKNOWN'.freeze,
      SECURITY_STATUS_UP_TO_DATE = 'UP_TO_DATE'.freeze,
      SECURITY_STATUS_UPDATE_REQUIRED = 'UPDATE_REQUIRED'.freeze,
      SECURITY_STATUS_UPGRADE_REQUIRED = 'UPGRADE_REQUIRED'.freeze,
      SECURITY_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    RELEASE_TYPE_ENUM = [
      RELEASE_TYPE_CPU = 'CPU'.freeze,
      RELEASE_TYPE_FEATURE = 'FEATURE'.freeze,
      RELEASE_TYPE_BPR = 'BPR'.freeze,
      RELEASE_TYPE_PATCH_RELEASE = 'PATCH_RELEASE'.freeze,
      RELEASE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LICENSE_TYPE_ENUM = [
      LICENSE_TYPE_OTN = 'OTN'.freeze,
      LICENSE_TYPE_NFTC = 'NFTC'.freeze,
      LICENSE_TYPE_RESTRICTED = 'RESTRICTED'.freeze,
      LICENSE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ARTIFACT_CONTENT_TYPES_ENUM = [
      ARTIFACT_CONTENT_TYPES_JDK = 'JDK'.freeze,
      ARTIFACT_CONTENT_TYPES_JRE = 'JRE'.freeze,
      ARTIFACT_CONTENT_TYPES_SERVER_JRE = 'SERVER_JRE'.freeze,
      ARTIFACT_CONTENT_TYPES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Java release version identifier.
    # @return [String]
    attr_accessor :release_version

    # **[Required]** Java release family identifier.
    # @return [String]
    attr_accessor :family_version

    # Parent Java release version identifier. This is applicable for BPR releases.
    # @return [String]
    attr_accessor :parent_release_version

    # **[Required]** The security status of the Java version.
    # @return [String]
    attr_reader :security_status

    # **[Required]** Release category of the Java version.
    # @return [String]
    attr_reader :release_type

    # **[Required]** License type for the Java version.
    # @return [String]
    attr_reader :license_type

    # @return [OCI::Jms::Models::JavaFamily]
    attr_accessor :family_details

    # @return [OCI::Jms::Models::JavaLicense]
    attr_accessor :license_details

    # **[Required]** The release date of the Java version (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    # @return [DateTime]
    attr_accessor :release_date

    # **[Required]** Release notes associated with the Java version.
    # @return [String]
    attr_accessor :release_notes_url

    # **[Required]** Artifact content types for the Java version.
    # @return [Array<String>]
    attr_reader :artifact_content_types

    # List of My Oracle Support(MoS) patches available for this release.
    # This information is only available for `BPR` release type.
    #
    # @return [Array<OCI::Jms::Models::PatchDetail>]
    attr_accessor :mos_patches

    # The number of days since this release has been under the security baseline.
    # @return [Integer]
    attr_accessor :days_under_security_baseline

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'release_version': :'releaseVersion',
        'family_version': :'familyVersion',
        'parent_release_version': :'parentReleaseVersion',
        'security_status': :'securityStatus',
        'release_type': :'releaseType',
        'license_type': :'licenseType',
        'family_details': :'familyDetails',
        'license_details': :'licenseDetails',
        'release_date': :'releaseDate',
        'release_notes_url': :'releaseNotesUrl',
        'artifact_content_types': :'artifactContentTypes',
        'mos_patches': :'mosPatches',
        'days_under_security_baseline': :'daysUnderSecurityBaseline'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'release_version': :'String',
        'family_version': :'String',
        'parent_release_version': :'String',
        'security_status': :'String',
        'release_type': :'String',
        'license_type': :'String',
        'family_details': :'OCI::Jms::Models::JavaFamily',
        'license_details': :'OCI::Jms::Models::JavaLicense',
        'release_date': :'DateTime',
        'release_notes_url': :'String',
        'artifact_content_types': :'Array<String>',
        'mos_patches': :'Array<OCI::Jms::Models::PatchDetail>',
        'days_under_security_baseline': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :release_version The value to assign to the {#release_version} property
    # @option attributes [String] :family_version The value to assign to the {#family_version} property
    # @option attributes [String] :parent_release_version The value to assign to the {#parent_release_version} property
    # @option attributes [String] :security_status The value to assign to the {#security_status} property
    # @option attributes [String] :release_type The value to assign to the {#release_type} property
    # @option attributes [String] :license_type The value to assign to the {#license_type} property
    # @option attributes [OCI::Jms::Models::JavaFamily] :family_details The value to assign to the {#family_details} property
    # @option attributes [OCI::Jms::Models::JavaLicense] :license_details The value to assign to the {#license_details} property
    # @option attributes [DateTime] :release_date The value to assign to the {#release_date} property
    # @option attributes [String] :release_notes_url The value to assign to the {#release_notes_url} property
    # @option attributes [Array<String>] :artifact_content_types The value to assign to the {#artifact_content_types} property
    # @option attributes [Array<OCI::Jms::Models::PatchDetail>] :mos_patches The value to assign to the {#mos_patches} property
    # @option attributes [Integer] :days_under_security_baseline The value to assign to the {#days_under_security_baseline} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.release_version = attributes[:'releaseVersion'] if attributes[:'releaseVersion']

      raise 'You cannot provide both :releaseVersion and :release_version' if attributes.key?(:'releaseVersion') && attributes.key?(:'release_version')

      self.release_version = attributes[:'release_version'] if attributes[:'release_version']

      self.family_version = attributes[:'familyVersion'] if attributes[:'familyVersion']

      raise 'You cannot provide both :familyVersion and :family_version' if attributes.key?(:'familyVersion') && attributes.key?(:'family_version')

      self.family_version = attributes[:'family_version'] if attributes[:'family_version']

      self.parent_release_version = attributes[:'parentReleaseVersion'] if attributes[:'parentReleaseVersion']

      raise 'You cannot provide both :parentReleaseVersion and :parent_release_version' if attributes.key?(:'parentReleaseVersion') && attributes.key?(:'parent_release_version')

      self.parent_release_version = attributes[:'parent_release_version'] if attributes[:'parent_release_version']

      self.security_status = attributes[:'securityStatus'] if attributes[:'securityStatus']

      raise 'You cannot provide both :securityStatus and :security_status' if attributes.key?(:'securityStatus') && attributes.key?(:'security_status')

      self.security_status = attributes[:'security_status'] if attributes[:'security_status']

      self.release_type = attributes[:'releaseType'] if attributes[:'releaseType']

      raise 'You cannot provide both :releaseType and :release_type' if attributes.key?(:'releaseType') && attributes.key?(:'release_type')

      self.release_type = attributes[:'release_type'] if attributes[:'release_type']

      self.license_type = attributes[:'licenseType'] if attributes[:'licenseType']

      raise 'You cannot provide both :licenseType and :license_type' if attributes.key?(:'licenseType') && attributes.key?(:'license_type')

      self.license_type = attributes[:'license_type'] if attributes[:'license_type']

      self.family_details = attributes[:'familyDetails'] if attributes[:'familyDetails']

      raise 'You cannot provide both :familyDetails and :family_details' if attributes.key?(:'familyDetails') && attributes.key?(:'family_details')

      self.family_details = attributes[:'family_details'] if attributes[:'family_details']

      self.license_details = attributes[:'licenseDetails'] if attributes[:'licenseDetails']

      raise 'You cannot provide both :licenseDetails and :license_details' if attributes.key?(:'licenseDetails') && attributes.key?(:'license_details')

      self.license_details = attributes[:'license_details'] if attributes[:'license_details']

      self.release_date = attributes[:'releaseDate'] if attributes[:'releaseDate']

      raise 'You cannot provide both :releaseDate and :release_date' if attributes.key?(:'releaseDate') && attributes.key?(:'release_date')

      self.release_date = attributes[:'release_date'] if attributes[:'release_date']

      self.release_notes_url = attributes[:'releaseNotesUrl'] if attributes[:'releaseNotesUrl']

      raise 'You cannot provide both :releaseNotesUrl and :release_notes_url' if attributes.key?(:'releaseNotesUrl') && attributes.key?(:'release_notes_url')

      self.release_notes_url = attributes[:'release_notes_url'] if attributes[:'release_notes_url']

      self.artifact_content_types = attributes[:'artifactContentTypes'] if attributes[:'artifactContentTypes']

      raise 'You cannot provide both :artifactContentTypes and :artifact_content_types' if attributes.key?(:'artifactContentTypes') && attributes.key?(:'artifact_content_types')

      self.artifact_content_types = attributes[:'artifact_content_types'] if attributes[:'artifact_content_types']

      self.mos_patches = attributes[:'mosPatches'] if attributes[:'mosPatches']

      raise 'You cannot provide both :mosPatches and :mos_patches' if attributes.key?(:'mosPatches') && attributes.key?(:'mos_patches')

      self.mos_patches = attributes[:'mos_patches'] if attributes[:'mos_patches']

      self.days_under_security_baseline = attributes[:'daysUnderSecurityBaseline'] if attributes[:'daysUnderSecurityBaseline']

      raise 'You cannot provide both :daysUnderSecurityBaseline and :days_under_security_baseline' if attributes.key?(:'daysUnderSecurityBaseline') && attributes.key?(:'days_under_security_baseline')

      self.days_under_security_baseline = attributes[:'days_under_security_baseline'] if attributes[:'days_under_security_baseline']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] security_status Object to be assigned
    def security_status=(security_status)
      # rubocop:disable Style/ConditionalAssignment
      if security_status && !SECURITY_STATUS_ENUM.include?(security_status)
        OCI.logger.debug("Unknown value for 'security_status' [" + security_status + "]. Mapping to 'SECURITY_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @security_status = SECURITY_STATUS_UNKNOWN_ENUM_VALUE
      else
        @security_status = security_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] release_type Object to be assigned
    def release_type=(release_type)
      # rubocop:disable Style/ConditionalAssignment
      if release_type && !RELEASE_TYPE_ENUM.include?(release_type)
        OCI.logger.debug("Unknown value for 'release_type' [" + release_type + "]. Mapping to 'RELEASE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @release_type = RELEASE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @release_type = release_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_type Object to be assigned
    def license_type=(license_type)
      # rubocop:disable Style/ConditionalAssignment
      if license_type && !LICENSE_TYPE_ENUM.include?(license_type)
        OCI.logger.debug("Unknown value for 'license_type' [" + license_type + "]. Mapping to 'LICENSE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @license_type = LICENSE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @license_type = license_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] artifact_content_types Object to be assigned
    def artifact_content_types=(artifact_content_types)
      # rubocop:disable Style/ConditionalAssignment
      if artifact_content_types.nil?
        @artifact_content_types = nil
      else
        @artifact_content_types =
          artifact_content_types.collect do |item|
            if ARTIFACT_CONTENT_TYPES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'artifact_content_types' [#{item}]. Mapping to 'ARTIFACT_CONTENT_TYPES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              ARTIFACT_CONTENT_TYPES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        release_version == other.release_version &&
        family_version == other.family_version &&
        parent_release_version == other.parent_release_version &&
        security_status == other.security_status &&
        release_type == other.release_type &&
        license_type == other.license_type &&
        family_details == other.family_details &&
        license_details == other.license_details &&
        release_date == other.release_date &&
        release_notes_url == other.release_notes_url &&
        artifact_content_types == other.artifact_content_types &&
        mos_patches == other.mos_patches &&
        days_under_security_baseline == other.days_under_security_baseline
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [release_version, family_version, parent_release_version, security_status, release_type, license_type, family_details, license_details, release_date, release_notes_url, artifact_content_types, mos_patches, days_under_security_baseline].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
