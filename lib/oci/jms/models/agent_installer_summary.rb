# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Supported agent installer downloads.
  #
  class Jms::Models::AgentInstallerSummary
    OS_FAMILY_ENUM = [
      OS_FAMILY_LINUX = 'LINUX'.freeze,
      OS_FAMILY_WINDOWS = 'WINDOWS'.freeze,
      OS_FAMILY_MACOS = 'MACOS'.freeze,
      OS_FAMILY_UNKNOWN = 'UNKNOWN'.freeze,
      OS_FAMILY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PLATFORM_ARCHITECTURE_ENUM = [
      PLATFORM_ARCHITECTURE_X86_64 = 'X86_64'.freeze,
      PLATFORM_ARCHITECTURE_X86 = 'X86'.freeze,
      PLATFORM_ARCHITECTURE_AARCH64 = 'AARCH64'.freeze,
      PLATFORM_ARCHITECTURE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PACKAGE_TYPE_ENUM = [
      PACKAGE_TYPE_RPM = 'RPM'.freeze,
      PACKAGE_TYPE_ZIP = 'ZIP'.freeze,
      PACKAGE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique identifier for the agent installer.
    # @return [Integer]
    attr_accessor :agent_installer_id

    # **[Required]** Description of the agent installer artifact. The description typically includes the OS, architecture, and agent installer type.
    # @return [String]
    attr_accessor :agent_installer_description

    # **[Required]** Approximate compressed file size in bytes.
    # @return [Integer]
    attr_accessor :approximate_file_size_in_bytes

    # **[Required]** SHA256 checksum of the agent installer.
    # @return [String]
    attr_accessor :sha256

    # **[Required]** The target operating system family for the agent installer.
    # @return [String]
    attr_reader :os_family

    # **[Required]** The target operating system architecture for the installer.
    # @return [String]
    attr_reader :platform_architecture

    # **[Required]** The package type (typically the file extension) of the agent software included in the installer.
    # @return [String]
    attr_reader :package_type

    # **[Required]** Agent image version.
    # @return [String]
    attr_accessor :agent_version

    # **[Required]** Java version.
    # @return [String]
    attr_accessor :java_version

    # **[Required]** Agent installer version.
    # @return [String]
    attr_accessor :agent_installer_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'agent_installer_id': :'agentInstallerId',
        'agent_installer_description': :'agentInstallerDescription',
        'approximate_file_size_in_bytes': :'approximateFileSizeInBytes',
        'sha256': :'sha256',
        'os_family': :'osFamily',
        'platform_architecture': :'platformArchitecture',
        'package_type': :'packageType',
        'agent_version': :'agentVersion',
        'java_version': :'javaVersion',
        'agent_installer_version': :'agentInstallerVersion'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'agent_installer_id': :'Integer',
        'agent_installer_description': :'String',
        'approximate_file_size_in_bytes': :'Integer',
        'sha256': :'String',
        'os_family': :'String',
        'platform_architecture': :'String',
        'package_type': :'String',
        'agent_version': :'String',
        'java_version': :'String',
        'agent_installer_version': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :agent_installer_id The value to assign to the {#agent_installer_id} property
    # @option attributes [String] :agent_installer_description The value to assign to the {#agent_installer_description} property
    # @option attributes [Integer] :approximate_file_size_in_bytes The value to assign to the {#approximate_file_size_in_bytes} property
    # @option attributes [String] :sha256 The value to assign to the {#sha256} property
    # @option attributes [String] :os_family The value to assign to the {#os_family} property
    # @option attributes [String] :platform_architecture The value to assign to the {#platform_architecture} property
    # @option attributes [String] :package_type The value to assign to the {#package_type} property
    # @option attributes [String] :agent_version The value to assign to the {#agent_version} property
    # @option attributes [String] :java_version The value to assign to the {#java_version} property
    # @option attributes [String] :agent_installer_version The value to assign to the {#agent_installer_version} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.agent_installer_id = attributes[:'agentInstallerId'] if attributes[:'agentInstallerId']

      raise 'You cannot provide both :agentInstallerId and :agent_installer_id' if attributes.key?(:'agentInstallerId') && attributes.key?(:'agent_installer_id')

      self.agent_installer_id = attributes[:'agent_installer_id'] if attributes[:'agent_installer_id']

      self.agent_installer_description = attributes[:'agentInstallerDescription'] if attributes[:'agentInstallerDescription']

      raise 'You cannot provide both :agentInstallerDescription and :agent_installer_description' if attributes.key?(:'agentInstallerDescription') && attributes.key?(:'agent_installer_description')

      self.agent_installer_description = attributes[:'agent_installer_description'] if attributes[:'agent_installer_description']

      self.approximate_file_size_in_bytes = attributes[:'approximateFileSizeInBytes'] if attributes[:'approximateFileSizeInBytes']

      raise 'You cannot provide both :approximateFileSizeInBytes and :approximate_file_size_in_bytes' if attributes.key?(:'approximateFileSizeInBytes') && attributes.key?(:'approximate_file_size_in_bytes')

      self.approximate_file_size_in_bytes = attributes[:'approximate_file_size_in_bytes'] if attributes[:'approximate_file_size_in_bytes']

      self.sha256 = attributes[:'sha256'] if attributes[:'sha256']

      self.os_family = attributes[:'osFamily'] if attributes[:'osFamily']

      raise 'You cannot provide both :osFamily and :os_family' if attributes.key?(:'osFamily') && attributes.key?(:'os_family')

      self.os_family = attributes[:'os_family'] if attributes[:'os_family']

      self.platform_architecture = attributes[:'platformArchitecture'] if attributes[:'platformArchitecture']

      raise 'You cannot provide both :platformArchitecture and :platform_architecture' if attributes.key?(:'platformArchitecture') && attributes.key?(:'platform_architecture')

      self.platform_architecture = attributes[:'platform_architecture'] if attributes[:'platform_architecture']

      self.package_type = attributes[:'packageType'] if attributes[:'packageType']

      raise 'You cannot provide both :packageType and :package_type' if attributes.key?(:'packageType') && attributes.key?(:'package_type')

      self.package_type = attributes[:'package_type'] if attributes[:'package_type']

      self.agent_version = attributes[:'agentVersion'] if attributes[:'agentVersion']

      raise 'You cannot provide both :agentVersion and :agent_version' if attributes.key?(:'agentVersion') && attributes.key?(:'agent_version')

      self.agent_version = attributes[:'agent_version'] if attributes[:'agent_version']

      self.java_version = attributes[:'javaVersion'] if attributes[:'javaVersion']

      raise 'You cannot provide both :javaVersion and :java_version' if attributes.key?(:'javaVersion') && attributes.key?(:'java_version')

      self.java_version = attributes[:'java_version'] if attributes[:'java_version']

      self.agent_installer_version = attributes[:'agentInstallerVersion'] if attributes[:'agentInstallerVersion']

      raise 'You cannot provide both :agentInstallerVersion and :agent_installer_version' if attributes.key?(:'agentInstallerVersion') && attributes.key?(:'agent_installer_version')

      self.agent_installer_version = attributes[:'agent_installer_version'] if attributes[:'agent_installer_version']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_family Object to be assigned
    def os_family=(os_family)
      # rubocop:disable Style/ConditionalAssignment
      if os_family && !OS_FAMILY_ENUM.include?(os_family)
        OCI.logger.debug("Unknown value for 'os_family' [" + os_family + "]. Mapping to 'OS_FAMILY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @os_family = OS_FAMILY_UNKNOWN_ENUM_VALUE
      else
        @os_family = os_family
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform_architecture Object to be assigned
    def platform_architecture=(platform_architecture)
      # rubocop:disable Style/ConditionalAssignment
      if platform_architecture && !PLATFORM_ARCHITECTURE_ENUM.include?(platform_architecture)
        OCI.logger.debug("Unknown value for 'platform_architecture' [" + platform_architecture + "]. Mapping to 'PLATFORM_ARCHITECTURE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @platform_architecture = PLATFORM_ARCHITECTURE_UNKNOWN_ENUM_VALUE
      else
        @platform_architecture = platform_architecture
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] package_type Object to be assigned
    def package_type=(package_type)
      # rubocop:disable Style/ConditionalAssignment
      if package_type && !PACKAGE_TYPE_ENUM.include?(package_type)
        OCI.logger.debug("Unknown value for 'package_type' [" + package_type + "]. Mapping to 'PACKAGE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @package_type = PACKAGE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @package_type = package_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        agent_installer_id == other.agent_installer_id &&
        agent_installer_description == other.agent_installer_description &&
        approximate_file_size_in_bytes == other.approximate_file_size_in_bytes &&
        sha256 == other.sha256 &&
        os_family == other.os_family &&
        platform_architecture == other.platform_architecture &&
        package_type == other.package_type &&
        agent_version == other.agent_version &&
        java_version == other.java_version &&
        agent_installer_version == other.agent_installer_version
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [agent_installer_id, agent_installer_description, approximate_file_size_in_bytes, sha256, os_family, platform_architecture, package_type, agent_version, java_version, agent_installer_version].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
