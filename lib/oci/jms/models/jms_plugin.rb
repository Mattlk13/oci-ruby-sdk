# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Information about a JmsPlugin that has been registered.
  #
  class Jms::Models::JmsPlugin
    AGENT_TYPE_ENUM = [
      AGENT_TYPE_OMA = 'OMA'.freeze,
      AGENT_TYPE_OCA = 'OCA'.freeze,
      AGENT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AVAILABILITY_STATUS_ENUM = [
      AVAILABILITY_STATUS_ACTIVE = 'ACTIVE'.freeze,
      AVAILABILITY_STATUS_SILENT = 'SILENT'.freeze,
      AVAILABILITY_STATUS_NOT_AVAILABLE = 'NOT_AVAILABLE'.freeze,
      AVAILABILITY_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    OS_FAMILY_ENUM = [
      OS_FAMILY_LINUX = 'LINUX'.freeze,
      OS_FAMILY_WINDOWS = 'WINDOWS'.freeze,
      OS_FAMILY_MACOS = 'MACOS'.freeze,
      OS_FAMILY_UNKNOWN = 'UNKNOWN'.freeze,
      OS_FAMILY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) to identify this JmsPlugin.
    # @return [String]
    attr_accessor :id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Management Agent (OMA) or the Oracle Cloud Agent (OCA) instance where the JMS plugin is deployed.
    # @return [String]
    attr_accessor :agent_id

    # **[Required]** The agent type.
    # @return [String]
    attr_reader :agent_type

    # **[Required]** The lifecycle state.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The availability status.
    # @return [String]
    attr_reader :availability_status

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the fleet.
    #
    # @return [String]
    attr_accessor :fleet_id

    # The OMA/OCA agent's compartment [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
    #
    # @return [String]
    attr_accessor :compartment_id

    # The hostname of the agent.
    #
    # @return [String]
    attr_accessor :hostname

    # The operating system family for the plugin.
    # @return [String]
    attr_reader :os_family

    # The architecture of the operating system of the plugin.
    # @return [String]
    attr_accessor :os_architecture

    # The distribution of the operating system of the plugin.
    # @return [String]
    attr_accessor :os_distribution

    # The version of the plugin.
    # @return [String]
    attr_accessor :plugin_version

    # **[Required]** The date and time the plugin was registered.
    #
    # @return [DateTime]
    attr_accessor :time_registered

    # The date and time the resource was _last_ reported to JMS.
    # This is potentially _after_ the specified time period provided by the filters.
    # For example, a resource can be last reported to JMS before the start of a specified time period,
    # if it is also reported during the time period.
    #
    # @return [DateTime]
    attr_accessor :time_last_seen

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`. (See [Understanding Free-form Tags](https://docs.cloud.oracle.com/Content/Tagging/Tasks/managingtagsandtagnamespaces.htm)).
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`. (See [Managing Tags and Tag Namespaces](https://docs.cloud.oracle.com/Content/Tagging/Concepts/understandingfreeformtags.htm).)
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    # System tags can be viewed by users, but can only be created by the system.
    #
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'agent_id': :'agentId',
        'agent_type': :'agentType',
        'lifecycle_state': :'lifecycleState',
        'availability_status': :'availabilityStatus',
        'fleet_id': :'fleetId',
        'compartment_id': :'compartmentId',
        'hostname': :'hostname',
        'os_family': :'osFamily',
        'os_architecture': :'osArchitecture',
        'os_distribution': :'osDistribution',
        'plugin_version': :'pluginVersion',
        'time_registered': :'timeRegistered',
        'time_last_seen': :'timeLastSeen',
        'defined_tags': :'definedTags',
        'freeform_tags': :'freeformTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'agent_id': :'String',
        'agent_type': :'String',
        'lifecycle_state': :'String',
        'availability_status': :'String',
        'fleet_id': :'String',
        'compartment_id': :'String',
        'hostname': :'String',
        'os_family': :'String',
        'os_architecture': :'String',
        'os_distribution': :'String',
        'plugin_version': :'String',
        'time_registered': :'DateTime',
        'time_last_seen': :'DateTime',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'freeform_tags': :'Hash<String, String>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :agent_id The value to assign to the {#agent_id} property
    # @option attributes [String] :agent_type The value to assign to the {#agent_type} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :availability_status The value to assign to the {#availability_status} property
    # @option attributes [String] :fleet_id The value to assign to the {#fleet_id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :hostname The value to assign to the {#hostname} property
    # @option attributes [String] :os_family The value to assign to the {#os_family} property
    # @option attributes [String] :os_architecture The value to assign to the {#os_architecture} property
    # @option attributes [String] :os_distribution The value to assign to the {#os_distribution} property
    # @option attributes [String] :plugin_version The value to assign to the {#plugin_version} property
    # @option attributes [DateTime] :time_registered The value to assign to the {#time_registered} property
    # @option attributes [DateTime] :time_last_seen The value to assign to the {#time_last_seen} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.agent_id = attributes[:'agentId'] if attributes[:'agentId']

      raise 'You cannot provide both :agentId and :agent_id' if attributes.key?(:'agentId') && attributes.key?(:'agent_id')

      self.agent_id = attributes[:'agent_id'] if attributes[:'agent_id']

      self.agent_type = attributes[:'agentType'] if attributes[:'agentType']

      raise 'You cannot provide both :agentType and :agent_type' if attributes.key?(:'agentType') && attributes.key?(:'agent_type')

      self.agent_type = attributes[:'agent_type'] if attributes[:'agent_type']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.availability_status = attributes[:'availabilityStatus'] if attributes[:'availabilityStatus']

      raise 'You cannot provide both :availabilityStatus and :availability_status' if attributes.key?(:'availabilityStatus') && attributes.key?(:'availability_status')

      self.availability_status = attributes[:'availability_status'] if attributes[:'availability_status']

      self.fleet_id = attributes[:'fleetId'] if attributes[:'fleetId']

      raise 'You cannot provide both :fleetId and :fleet_id' if attributes.key?(:'fleetId') && attributes.key?(:'fleet_id')

      self.fleet_id = attributes[:'fleet_id'] if attributes[:'fleet_id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.hostname = attributes[:'hostname'] if attributes[:'hostname']

      self.os_family = attributes[:'osFamily'] if attributes[:'osFamily']

      raise 'You cannot provide both :osFamily and :os_family' if attributes.key?(:'osFamily') && attributes.key?(:'os_family')

      self.os_family = attributes[:'os_family'] if attributes[:'os_family']

      self.os_architecture = attributes[:'osArchitecture'] if attributes[:'osArchitecture']

      raise 'You cannot provide both :osArchitecture and :os_architecture' if attributes.key?(:'osArchitecture') && attributes.key?(:'os_architecture')

      self.os_architecture = attributes[:'os_architecture'] if attributes[:'os_architecture']

      self.os_distribution = attributes[:'osDistribution'] if attributes[:'osDistribution']

      raise 'You cannot provide both :osDistribution and :os_distribution' if attributes.key?(:'osDistribution') && attributes.key?(:'os_distribution')

      self.os_distribution = attributes[:'os_distribution'] if attributes[:'os_distribution']

      self.plugin_version = attributes[:'pluginVersion'] if attributes[:'pluginVersion']

      raise 'You cannot provide both :pluginVersion and :plugin_version' if attributes.key?(:'pluginVersion') && attributes.key?(:'plugin_version')

      self.plugin_version = attributes[:'plugin_version'] if attributes[:'plugin_version']

      self.time_registered = attributes[:'timeRegistered'] if attributes[:'timeRegistered']

      raise 'You cannot provide both :timeRegistered and :time_registered' if attributes.key?(:'timeRegistered') && attributes.key?(:'time_registered')

      self.time_registered = attributes[:'time_registered'] if attributes[:'time_registered']

      self.time_last_seen = attributes[:'timeLastSeen'] if attributes[:'timeLastSeen']

      raise 'You cannot provide both :timeLastSeen and :time_last_seen' if attributes.key?(:'timeLastSeen') && attributes.key?(:'time_last_seen')

      self.time_last_seen = attributes[:'time_last_seen'] if attributes[:'time_last_seen']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] agent_type Object to be assigned
    def agent_type=(agent_type)
      # rubocop:disable Style/ConditionalAssignment
      if agent_type && !AGENT_TYPE_ENUM.include?(agent_type)
        OCI.logger.debug("Unknown value for 'agent_type' [" + agent_type + "]. Mapping to 'AGENT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @agent_type = AGENT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @agent_type = agent_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] availability_status Object to be assigned
    def availability_status=(availability_status)
      # rubocop:disable Style/ConditionalAssignment
      if availability_status && !AVAILABILITY_STATUS_ENUM.include?(availability_status)
        OCI.logger.debug("Unknown value for 'availability_status' [" + availability_status + "]. Mapping to 'AVAILABILITY_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @availability_status = AVAILABILITY_STATUS_UNKNOWN_ENUM_VALUE
      else
        @availability_status = availability_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_family Object to be assigned
    def os_family=(os_family)
      # rubocop:disable Style/ConditionalAssignment
      if os_family && !OS_FAMILY_ENUM.include?(os_family)
        OCI.logger.debug("Unknown value for 'os_family' [" + os_family + "]. Mapping to 'OS_FAMILY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @os_family = OS_FAMILY_UNKNOWN_ENUM_VALUE
      else
        @os_family = os_family
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        agent_id == other.agent_id &&
        agent_type == other.agent_type &&
        lifecycle_state == other.lifecycle_state &&
        availability_status == other.availability_status &&
        fleet_id == other.fleet_id &&
        compartment_id == other.compartment_id &&
        hostname == other.hostname &&
        os_family == other.os_family &&
        os_architecture == other.os_architecture &&
        os_distribution == other.os_distribution &&
        plugin_version == other.plugin_version &&
        time_registered == other.time_registered &&
        time_last_seen == other.time_last_seen &&
        defined_tags == other.defined_tags &&
        freeform_tags == other.freeform_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, agent_id, agent_type, lifecycle_state, availability_status, fleet_id, compartment_id, hostname, os_family, os_architecture, os_distribution, plugin_version, time_registered, time_last_seen, defined_tags, freeform_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
