# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The properties of a new Java installation site.
  class Jms::Models::NewInstallationSite
    ARTIFACT_CONTENT_TYPE_ENUM = [
      ARTIFACT_CONTENT_TYPE_JDK = 'JDK'.freeze,
      ARTIFACT_CONTENT_TYPE_JRE = 'JRE'.freeze,
      ARTIFACT_CONTENT_TYPE_SERVER_JRE = 'SERVER_JRE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the related managed instance.
    #
    # @return [String]
    attr_accessor :managed_instance_id

    # **[Required]** The release version of the Java Runtime.
    # @return [String]
    attr_accessor :release_version

    # Artifact content type for the Java version.
    # @return [String]
    attr_reader :artifact_content_type

    # Custom path to install new Java installation site.
    # @return [String]
    attr_accessor :installation_path

    # Flag to install headless or headful Java installation. Only valid for Oracle Linux in OCI.
    # @return [BOOLEAN]
    attr_accessor :headless_mode

    # Forces the installation request even if a more recent release is already present in the host.
    # @return [BOOLEAN]
    attr_accessor :force_install

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'managed_instance_id': :'managedInstanceId',
        'release_version': :'releaseVersion',
        'artifact_content_type': :'artifactContentType',
        'installation_path': :'installationPath',
        'headless_mode': :'headlessMode',
        'force_install': :'forceInstall'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'managed_instance_id': :'String',
        'release_version': :'String',
        'artifact_content_type': :'String',
        'installation_path': :'String',
        'headless_mode': :'BOOLEAN',
        'force_install': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :managed_instance_id The value to assign to the {#managed_instance_id} property
    # @option attributes [String] :release_version The value to assign to the {#release_version} property
    # @option attributes [String] :artifact_content_type The value to assign to the {#artifact_content_type} property
    # @option attributes [String] :installation_path The value to assign to the {#installation_path} property
    # @option attributes [BOOLEAN] :headless_mode The value to assign to the {#headless_mode} property
    # @option attributes [BOOLEAN] :force_install The value to assign to the {#force_install} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.managed_instance_id = attributes[:'managedInstanceId'] if attributes[:'managedInstanceId']

      raise 'You cannot provide both :managedInstanceId and :managed_instance_id' if attributes.key?(:'managedInstanceId') && attributes.key?(:'managed_instance_id')

      self.managed_instance_id = attributes[:'managed_instance_id'] if attributes[:'managed_instance_id']

      self.release_version = attributes[:'releaseVersion'] if attributes[:'releaseVersion']

      raise 'You cannot provide both :releaseVersion and :release_version' if attributes.key?(:'releaseVersion') && attributes.key?(:'release_version')

      self.release_version = attributes[:'release_version'] if attributes[:'release_version']

      self.artifact_content_type = attributes[:'artifactContentType'] if attributes[:'artifactContentType']

      raise 'You cannot provide both :artifactContentType and :artifact_content_type' if attributes.key?(:'artifactContentType') && attributes.key?(:'artifact_content_type')

      self.artifact_content_type = attributes[:'artifact_content_type'] if attributes[:'artifact_content_type']

      self.installation_path = attributes[:'installationPath'] if attributes[:'installationPath']

      raise 'You cannot provide both :installationPath and :installation_path' if attributes.key?(:'installationPath') && attributes.key?(:'installation_path')

      self.installation_path = attributes[:'installation_path'] if attributes[:'installation_path']

      self.headless_mode = attributes[:'headlessMode'] unless attributes[:'headlessMode'].nil?
      self.headless_mode = false if headless_mode.nil? && !attributes.key?(:'headlessMode') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :headlessMode and :headless_mode' if attributes.key?(:'headlessMode') && attributes.key?(:'headless_mode')

      self.headless_mode = attributes[:'headless_mode'] unless attributes[:'headless_mode'].nil?
      self.headless_mode = false if headless_mode.nil? && !attributes.key?(:'headlessMode') && !attributes.key?(:'headless_mode') # rubocop:disable Style/StringLiterals

      self.force_install = attributes[:'forceInstall'] unless attributes[:'forceInstall'].nil?
      self.force_install = false if force_install.nil? && !attributes.key?(:'forceInstall') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :forceInstall and :force_install' if attributes.key?(:'forceInstall') && attributes.key?(:'force_install')

      self.force_install = attributes[:'force_install'] unless attributes[:'force_install'].nil?
      self.force_install = false if force_install.nil? && !attributes.key?(:'forceInstall') && !attributes.key?(:'force_install') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] artifact_content_type Object to be assigned
    def artifact_content_type=(artifact_content_type)
      raise "Invalid value for 'artifact_content_type': this must be one of the values in ARTIFACT_CONTENT_TYPE_ENUM." if artifact_content_type && !ARTIFACT_CONTENT_TYPE_ENUM.include?(artifact_content_type)

      @artifact_content_type = artifact_content_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        managed_instance_id == other.managed_instance_id &&
        release_version == other.release_version &&
        artifact_content_type == other.artifact_content_type &&
        installation_path == other.installation_path &&
        headless_mode == other.headless_mode &&
        force_install == other.force_install
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [managed_instance_id, release_version, artifact_content_type, installation_path, headless_mode, force_install].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
