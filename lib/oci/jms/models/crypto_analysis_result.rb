# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Metadata for the result of a crypto event analysis. The analysis result is stored in an Object Storage bucket.
  class Jms::Models::CryptoAnalysisResult
    AGGREGATION_MODE_ENUM = [
      AGGREGATION_MODE_JFR = 'JFR'.freeze,
      AGGREGATION_MODE_MANAGED_INSTANCE = 'MANAGED_INSTANCE'.freeze,
      AGGREGATION_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID to identify this analysis results.
    # @return [String]
    attr_accessor :id

    # The OCID of the work request to start the analysis.
    # @return [String]
    attr_accessor :work_request_id

    # **[Required]** The result aggregation mode
    # @return [String]
    attr_reader :aggregation_mode

    # **[Required]** The fleet OCID.
    # @return [String]
    attr_accessor :fleet_id

    # The managed instance OCID.
    # @return [String]
    attr_accessor :managed_instance_id

    # The hostname of the managed instance.
    # @return [String]
    attr_accessor :host_name

    # Time of the first event in the analysis.
    # @return [DateTime]
    attr_accessor :time_first_event

    # Time of the last event in the analysis.
    # @return [DateTime]
    attr_accessor :time_last_event

    # **[Required]** Total number of events in the analysis.
    # @return [Integer]
    attr_accessor :total_event_count

    # **[Required]** Total number of summarized events. Summarized events are deduplicated events of interest.
    # @return [Integer]
    attr_accessor :summarized_event_count

    # **[Required]** Total number of findings with the analysis.
    # @return [Integer]
    attr_accessor :finding_count

    # **[Required]** Total number of non-compliant findings with the analysis. A non-compliant finding means the
    # application won't work properly with the changes introduced by the Crypto Roadmap version
    # used by the analysis.
    #
    # @return [Integer]
    attr_accessor :non_compliant_finding_count

    # The time the result is compiled.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The Crypto Roadmap version used to perform the analysis.
    # @return [String]
    attr_accessor :crypto_roadmap_version

    # **[Required]** The Object Storage namespace of this analysis result.
    # @return [String]
    attr_accessor :namespace

    # **[Required]** The Object Storage bucket name of this analysis result.
    # @return [String]
    attr_accessor :bucket_name

    # **[Required]** The Object Storage object name of this analysis result.
    # @return [String]
    attr_accessor :object_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'work_request_id': :'workRequestId',
        'aggregation_mode': :'aggregationMode',
        'fleet_id': :'fleetId',
        'managed_instance_id': :'managedInstanceId',
        'host_name': :'hostName',
        'time_first_event': :'timeFirstEvent',
        'time_last_event': :'timeLastEvent',
        'total_event_count': :'totalEventCount',
        'summarized_event_count': :'summarizedEventCount',
        'finding_count': :'findingCount',
        'non_compliant_finding_count': :'nonCompliantFindingCount',
        'time_created': :'timeCreated',
        'crypto_roadmap_version': :'cryptoRoadmapVersion',
        'namespace': :'namespace',
        'bucket_name': :'bucketName',
        'object_name': :'objectName'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'work_request_id': :'String',
        'aggregation_mode': :'String',
        'fleet_id': :'String',
        'managed_instance_id': :'String',
        'host_name': :'String',
        'time_first_event': :'DateTime',
        'time_last_event': :'DateTime',
        'total_event_count': :'Integer',
        'summarized_event_count': :'Integer',
        'finding_count': :'Integer',
        'non_compliant_finding_count': :'Integer',
        'time_created': :'DateTime',
        'crypto_roadmap_version': :'String',
        'namespace': :'String',
        'bucket_name': :'String',
        'object_name': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :work_request_id The value to assign to the {#work_request_id} property
    # @option attributes [String] :aggregation_mode The value to assign to the {#aggregation_mode} property
    # @option attributes [String] :fleet_id The value to assign to the {#fleet_id} property
    # @option attributes [String] :managed_instance_id The value to assign to the {#managed_instance_id} property
    # @option attributes [String] :host_name The value to assign to the {#host_name} property
    # @option attributes [DateTime] :time_first_event The value to assign to the {#time_first_event} property
    # @option attributes [DateTime] :time_last_event The value to assign to the {#time_last_event} property
    # @option attributes [Integer] :total_event_count The value to assign to the {#total_event_count} property
    # @option attributes [Integer] :summarized_event_count The value to assign to the {#summarized_event_count} property
    # @option attributes [Integer] :finding_count The value to assign to the {#finding_count} property
    # @option attributes [Integer] :non_compliant_finding_count The value to assign to the {#non_compliant_finding_count} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :crypto_roadmap_version The value to assign to the {#crypto_roadmap_version} property
    # @option attributes [String] :namespace The value to assign to the {#namespace} property
    # @option attributes [String] :bucket_name The value to assign to the {#bucket_name} property
    # @option attributes [String] :object_name The value to assign to the {#object_name} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      self.id = attributes[:'id'] if attributes[:'id']

      self.work_request_id = attributes[:'workRequestId'] if attributes[:'workRequestId']

      raise 'You cannot provide both :workRequestId and :work_request_id' if attributes.key?(:'workRequestId') && attributes.key?(:'work_request_id')

      self.work_request_id = attributes[:'work_request_id'] if attributes[:'work_request_id']

      self.aggregation_mode = attributes[:'aggregationMode'] if attributes[:'aggregationMode']

      raise 'You cannot provide both :aggregationMode and :aggregation_mode' if attributes.key?(:'aggregationMode') && attributes.key?(:'aggregation_mode')

      self.aggregation_mode = attributes[:'aggregation_mode'] if attributes[:'aggregation_mode']

      self.fleet_id = attributes[:'fleetId'] if attributes[:'fleetId']

      raise 'You cannot provide both :fleetId and :fleet_id' if attributes.key?(:'fleetId') && attributes.key?(:'fleet_id')

      self.fleet_id = attributes[:'fleet_id'] if attributes[:'fleet_id']

      self.managed_instance_id = attributes[:'managedInstanceId'] if attributes[:'managedInstanceId']

      raise 'You cannot provide both :managedInstanceId and :managed_instance_id' if attributes.key?(:'managedInstanceId') && attributes.key?(:'managed_instance_id')

      self.managed_instance_id = attributes[:'managed_instance_id'] if attributes[:'managed_instance_id']

      self.host_name = attributes[:'hostName'] if attributes[:'hostName']

      raise 'You cannot provide both :hostName and :host_name' if attributes.key?(:'hostName') && attributes.key?(:'host_name')

      self.host_name = attributes[:'host_name'] if attributes[:'host_name']

      self.time_first_event = attributes[:'timeFirstEvent'] if attributes[:'timeFirstEvent']

      raise 'You cannot provide both :timeFirstEvent and :time_first_event' if attributes.key?(:'timeFirstEvent') && attributes.key?(:'time_first_event')

      self.time_first_event = attributes[:'time_first_event'] if attributes[:'time_first_event']

      self.time_last_event = attributes[:'timeLastEvent'] if attributes[:'timeLastEvent']

      raise 'You cannot provide both :timeLastEvent and :time_last_event' if attributes.key?(:'timeLastEvent') && attributes.key?(:'time_last_event')

      self.time_last_event = attributes[:'time_last_event'] if attributes[:'time_last_event']

      self.total_event_count = attributes[:'totalEventCount'] if attributes[:'totalEventCount']

      raise 'You cannot provide both :totalEventCount and :total_event_count' if attributes.key?(:'totalEventCount') && attributes.key?(:'total_event_count')

      self.total_event_count = attributes[:'total_event_count'] if attributes[:'total_event_count']

      self.summarized_event_count = attributes[:'summarizedEventCount'] if attributes[:'summarizedEventCount']

      raise 'You cannot provide both :summarizedEventCount and :summarized_event_count' if attributes.key?(:'summarizedEventCount') && attributes.key?(:'summarized_event_count')

      self.summarized_event_count = attributes[:'summarized_event_count'] if attributes[:'summarized_event_count']

      self.finding_count = attributes[:'findingCount'] if attributes[:'findingCount']

      raise 'You cannot provide both :findingCount and :finding_count' if attributes.key?(:'findingCount') && attributes.key?(:'finding_count')

      self.finding_count = attributes[:'finding_count'] if attributes[:'finding_count']

      self.non_compliant_finding_count = attributes[:'nonCompliantFindingCount'] if attributes[:'nonCompliantFindingCount']

      raise 'You cannot provide both :nonCompliantFindingCount and :non_compliant_finding_count' if attributes.key?(:'nonCompliantFindingCount') && attributes.key?(:'non_compliant_finding_count')

      self.non_compliant_finding_count = attributes[:'non_compliant_finding_count'] if attributes[:'non_compliant_finding_count']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.crypto_roadmap_version = attributes[:'cryptoRoadmapVersion'] if attributes[:'cryptoRoadmapVersion']

      raise 'You cannot provide both :cryptoRoadmapVersion and :crypto_roadmap_version' if attributes.key?(:'cryptoRoadmapVersion') && attributes.key?(:'crypto_roadmap_version')

      self.crypto_roadmap_version = attributes[:'crypto_roadmap_version'] if attributes[:'crypto_roadmap_version']

      self.namespace = attributes[:'namespace'] if attributes[:'namespace']

      self.bucket_name = attributes[:'bucketName'] if attributes[:'bucketName']

      raise 'You cannot provide both :bucketName and :bucket_name' if attributes.key?(:'bucketName') && attributes.key?(:'bucket_name')

      self.bucket_name = attributes[:'bucket_name'] if attributes[:'bucket_name']

      self.object_name = attributes[:'objectName'] if attributes[:'objectName']

      raise 'You cannot provide both :objectName and :object_name' if attributes.key?(:'objectName') && attributes.key?(:'object_name')

      self.object_name = attributes[:'object_name'] if attributes[:'object_name']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aggregation_mode Object to be assigned
    def aggregation_mode=(aggregation_mode)
      # rubocop:disable Style/ConditionalAssignment
      if aggregation_mode && !AGGREGATION_MODE_ENUM.include?(aggregation_mode)
        OCI.logger.debug("Unknown value for 'aggregation_mode' [" + aggregation_mode + "]. Mapping to 'AGGREGATION_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @aggregation_mode = AGGREGATION_MODE_UNKNOWN_ENUM_VALUE
      else
        @aggregation_mode = aggregation_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        work_request_id == other.work_request_id &&
        aggregation_mode == other.aggregation_mode &&
        fleet_id == other.fleet_id &&
        managed_instance_id == other.managed_instance_id &&
        host_name == other.host_name &&
        time_first_event == other.time_first_event &&
        time_last_event == other.time_last_event &&
        total_event_count == other.total_event_count &&
        summarized_event_count == other.summarized_event_count &&
        finding_count == other.finding_count &&
        non_compliant_finding_count == other.non_compliant_finding_count &&
        time_created == other.time_created &&
        crypto_roadmap_version == other.crypto_roadmap_version &&
        namespace == other.namespace &&
        bucket_name == other.bucket_name &&
        object_name == other.object_name
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, work_request_id, aggregation_mode, fleet_id, managed_instance_id, host_name, time_first_event, time_last_event, total_event_count, summarized_event_count, finding_count, non_compliant_finding_count, time_created, crypto_roadmap_version, namespace, bucket_name, object_name].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
