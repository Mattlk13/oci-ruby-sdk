# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # List of proxy properties to be configured in net.properties file.
  #
  class Jms::Models::Proxies
    # Sets \"java.net.useSystemProxies=true\" in net.properties when they exist.
    #
    # @return [BOOLEAN]
    attr_accessor :use_system_proxies

    # Http host to be set in net.properties file.
    #
    # @return [String]
    attr_accessor :http_proxy_host

    # Http port number to be set in net.properties file.
    #
    # @return [Integer]
    attr_accessor :http_proxy_port

    # Https host to be set in net.properties file.
    #
    # @return [String]
    attr_accessor :https_proxy_host

    # Https port number to be set in net.properties file.
    #
    # @return [Integer]
    attr_accessor :https_proxy_port

    # Ftp host to be set in net.properties file.
    #
    # @return [String]
    attr_accessor :ftp_proxy_host

    # Ftp port number to be set in net.properties file.
    #
    # @return [Integer]
    attr_accessor :ftp_proxy_port

    # Socks host to be set in net.properties file.
    #
    # @return [String]
    attr_accessor :socks_proxy_host

    # Socks port number to be set in net.properties file.
    #
    # @return [Integer]
    attr_accessor :socks_proxy_port

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'use_system_proxies': :'useSystemProxies',
        'http_proxy_host': :'httpProxyHost',
        'http_proxy_port': :'httpProxyPort',
        'https_proxy_host': :'httpsProxyHost',
        'https_proxy_port': :'httpsProxyPort',
        'ftp_proxy_host': :'ftpProxyHost',
        'ftp_proxy_port': :'ftpProxyPort',
        'socks_proxy_host': :'socksProxyHost',
        'socks_proxy_port': :'socksProxyPort'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'use_system_proxies': :'BOOLEAN',
        'http_proxy_host': :'String',
        'http_proxy_port': :'Integer',
        'https_proxy_host': :'String',
        'https_proxy_port': :'Integer',
        'ftp_proxy_host': :'String',
        'ftp_proxy_port': :'Integer',
        'socks_proxy_host': :'String',
        'socks_proxy_port': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :use_system_proxies The value to assign to the {#use_system_proxies} property
    # @option attributes [String] :http_proxy_host The value to assign to the {#http_proxy_host} property
    # @option attributes [Integer] :http_proxy_port The value to assign to the {#http_proxy_port} property
    # @option attributes [String] :https_proxy_host The value to assign to the {#https_proxy_host} property
    # @option attributes [Integer] :https_proxy_port The value to assign to the {#https_proxy_port} property
    # @option attributes [String] :ftp_proxy_host The value to assign to the {#ftp_proxy_host} property
    # @option attributes [Integer] :ftp_proxy_port The value to assign to the {#ftp_proxy_port} property
    # @option attributes [String] :socks_proxy_host The value to assign to the {#socks_proxy_host} property
    # @option attributes [Integer] :socks_proxy_port The value to assign to the {#socks_proxy_port} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.use_system_proxies = attributes[:'useSystemProxies'] unless attributes[:'useSystemProxies'].nil?
      self.use_system_proxies = false if use_system_proxies.nil? && !attributes.key?(:'useSystemProxies') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :useSystemProxies and :use_system_proxies' if attributes.key?(:'useSystemProxies') && attributes.key?(:'use_system_proxies')

      self.use_system_proxies = attributes[:'use_system_proxies'] unless attributes[:'use_system_proxies'].nil?
      self.use_system_proxies = false if use_system_proxies.nil? && !attributes.key?(:'useSystemProxies') && !attributes.key?(:'use_system_proxies') # rubocop:disable Style/StringLiterals

      self.http_proxy_host = attributes[:'httpProxyHost'] if attributes[:'httpProxyHost']

      raise 'You cannot provide both :httpProxyHost and :http_proxy_host' if attributes.key?(:'httpProxyHost') && attributes.key?(:'http_proxy_host')

      self.http_proxy_host = attributes[:'http_proxy_host'] if attributes[:'http_proxy_host']

      self.http_proxy_port = attributes[:'httpProxyPort'] if attributes[:'httpProxyPort']

      raise 'You cannot provide both :httpProxyPort and :http_proxy_port' if attributes.key?(:'httpProxyPort') && attributes.key?(:'http_proxy_port')

      self.http_proxy_port = attributes[:'http_proxy_port'] if attributes[:'http_proxy_port']

      self.https_proxy_host = attributes[:'httpsProxyHost'] if attributes[:'httpsProxyHost']

      raise 'You cannot provide both :httpsProxyHost and :https_proxy_host' if attributes.key?(:'httpsProxyHost') && attributes.key?(:'https_proxy_host')

      self.https_proxy_host = attributes[:'https_proxy_host'] if attributes[:'https_proxy_host']

      self.https_proxy_port = attributes[:'httpsProxyPort'] if attributes[:'httpsProxyPort']

      raise 'You cannot provide both :httpsProxyPort and :https_proxy_port' if attributes.key?(:'httpsProxyPort') && attributes.key?(:'https_proxy_port')

      self.https_proxy_port = attributes[:'https_proxy_port'] if attributes[:'https_proxy_port']

      self.ftp_proxy_host = attributes[:'ftpProxyHost'] if attributes[:'ftpProxyHost']

      raise 'You cannot provide both :ftpProxyHost and :ftp_proxy_host' if attributes.key?(:'ftpProxyHost') && attributes.key?(:'ftp_proxy_host')

      self.ftp_proxy_host = attributes[:'ftp_proxy_host'] if attributes[:'ftp_proxy_host']

      self.ftp_proxy_port = attributes[:'ftpProxyPort'] if attributes[:'ftpProxyPort']

      raise 'You cannot provide both :ftpProxyPort and :ftp_proxy_port' if attributes.key?(:'ftpProxyPort') && attributes.key?(:'ftp_proxy_port')

      self.ftp_proxy_port = attributes[:'ftp_proxy_port'] if attributes[:'ftp_proxy_port']

      self.socks_proxy_host = attributes[:'socksProxyHost'] if attributes[:'socksProxyHost']

      raise 'You cannot provide both :socksProxyHost and :socks_proxy_host' if attributes.key?(:'socksProxyHost') && attributes.key?(:'socks_proxy_host')

      self.socks_proxy_host = attributes[:'socks_proxy_host'] if attributes[:'socks_proxy_host']

      self.socks_proxy_port = attributes[:'socksProxyPort'] if attributes[:'socksProxyPort']

      raise 'You cannot provide both :socksProxyPort and :socks_proxy_port' if attributes.key?(:'socksProxyPort') && attributes.key?(:'socks_proxy_port')

      self.socks_proxy_port = attributes[:'socks_proxy_port'] if attributes[:'socks_proxy_port']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        use_system_proxies == other.use_system_proxies &&
        http_proxy_host == other.http_proxy_host &&
        http_proxy_port == other.http_proxy_port &&
        https_proxy_host == other.https_proxy_host &&
        https_proxy_port == other.https_proxy_port &&
        ftp_proxy_host == other.ftp_proxy_host &&
        ftp_proxy_port == other.ftp_proxy_port &&
        socks_proxy_host == other.socks_proxy_host &&
        socks_proxy_port == other.socks_proxy_port
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [use_system_proxies, http_proxy_host, http_proxy_port, https_proxy_host, https_proxy_port, ftp_proxy_host, ftp_proxy_port, socks_proxy_host, socks_proxy_port].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
