# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the request to start JFR recordings.
  # When the targets aren't specified, then all managed instances currently in the Fleet are selected.
  #
  class Jms::Models::RequestJfrRecordingsDetails
    # The attachment targets to start JFR.
    # @return [Array<OCI::Jms::Models::JfrAttachmentTarget>]
    attr_accessor :targets

    # **[Required]** The profile used for JFR events selection. If the name isn't recognized, the settings from jfcV1 or jfcV2
    # will be used depending on the JVM version.
    # Both jfcV2 and jfcV1 should be provided to ensure JFR collection on different JVM versions.
    #
    # @return [String]
    attr_accessor :jfc_profile_name

    # The BASE64 encoded string of JFR settings XML with schema used by JDK 8.
    # @return [String]
    attr_accessor :jfc_v1

    # The BASE64 encoded string of JFR settings XML with [schema used by JDK 9 and after](https://raw.githubusercontent.com/openjdk/jdk/master/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/jfc.xsd).
    #
    # @return [String]
    attr_accessor :jfc_v2

    # Duration of the JFR recording in minutes.
    # @return [Integer]
    attr_accessor :recording_duration_in_minutes

    # The maximum size limit for the JFR file collected.
    # @return [Integer]
    attr_accessor :recording_size_in_mb

    # Period to looking for JVMs. In addition to attach to running JVMs when given the command,
    # JVM started within the waiting period will also be attached for JFR. The value should be
    # larger than the agent polling interval setting for the fleet to ensure agent can get the
    # instructions. If not specified, the agent polling interval for the fleet is used.
    #
    # @return [Integer]
    attr_accessor :waiting_period_in_minutes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'targets': :'targets',
        'jfc_profile_name': :'jfcProfileName',
        'jfc_v1': :'jfcV1',
        'jfc_v2': :'jfcV2',
        'recording_duration_in_minutes': :'recordingDurationInMinutes',
        'recording_size_in_mb': :'recordingSizeInMb',
        'waiting_period_in_minutes': :'waitingPeriodInMinutes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'targets': :'Array<OCI::Jms::Models::JfrAttachmentTarget>',
        'jfc_profile_name': :'String',
        'jfc_v1': :'String',
        'jfc_v2': :'String',
        'recording_duration_in_minutes': :'Integer',
        'recording_size_in_mb': :'Integer',
        'waiting_period_in_minutes': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<OCI::Jms::Models::JfrAttachmentTarget>] :targets The value to assign to the {#targets} property
    # @option attributes [String] :jfc_profile_name The value to assign to the {#jfc_profile_name} property
    # @option attributes [String] :jfc_v1 The value to assign to the {#jfc_v1} property
    # @option attributes [String] :jfc_v2 The value to assign to the {#jfc_v2} property
    # @option attributes [Integer] :recording_duration_in_minutes The value to assign to the {#recording_duration_in_minutes} property
    # @option attributes [Integer] :recording_size_in_mb The value to assign to the {#recording_size_in_mb} property
    # @option attributes [Integer] :waiting_period_in_minutes The value to assign to the {#waiting_period_in_minutes} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.targets = attributes[:'targets'] if attributes[:'targets']

      self.jfc_profile_name = attributes[:'jfcProfileName'] if attributes[:'jfcProfileName']

      raise 'You cannot provide both :jfcProfileName and :jfc_profile_name' if attributes.key?(:'jfcProfileName') && attributes.key?(:'jfc_profile_name')

      self.jfc_profile_name = attributes[:'jfc_profile_name'] if attributes[:'jfc_profile_name']

      self.jfc_v1 = attributes[:'jfcV1'] if attributes[:'jfcV1']

      raise 'You cannot provide both :jfcV1 and :jfc_v1' if attributes.key?(:'jfcV1') && attributes.key?(:'jfc_v1')

      self.jfc_v1 = attributes[:'jfc_v1'] if attributes[:'jfc_v1']

      self.jfc_v2 = attributes[:'jfcV2'] if attributes[:'jfcV2']

      raise 'You cannot provide both :jfcV2 and :jfc_v2' if attributes.key?(:'jfcV2') && attributes.key?(:'jfc_v2')

      self.jfc_v2 = attributes[:'jfc_v2'] if attributes[:'jfc_v2']

      self.recording_duration_in_minutes = attributes[:'recordingDurationInMinutes'] if attributes[:'recordingDurationInMinutes']

      raise 'You cannot provide both :recordingDurationInMinutes and :recording_duration_in_minutes' if attributes.key?(:'recordingDurationInMinutes') && attributes.key?(:'recording_duration_in_minutes')

      self.recording_duration_in_minutes = attributes[:'recording_duration_in_minutes'] if attributes[:'recording_duration_in_minutes']

      self.recording_size_in_mb = attributes[:'recordingSizeInMb'] if attributes[:'recordingSizeInMb']

      raise 'You cannot provide both :recordingSizeInMb and :recording_size_in_mb' if attributes.key?(:'recordingSizeInMb') && attributes.key?(:'recording_size_in_mb')

      self.recording_size_in_mb = attributes[:'recording_size_in_mb'] if attributes[:'recording_size_in_mb']

      self.waiting_period_in_minutes = attributes[:'waitingPeriodInMinutes'] if attributes[:'waitingPeriodInMinutes']

      raise 'You cannot provide both :waitingPeriodInMinutes and :waiting_period_in_minutes' if attributes.key?(:'waitingPeriodInMinutes') && attributes.key?(:'waiting_period_in_minutes')

      self.waiting_period_in_minutes = attributes[:'waiting_period_in_minutes'] if attributes[:'waiting_period_in_minutes']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        targets == other.targets &&
        jfc_profile_name == other.jfc_profile_name &&
        jfc_v1 == other.jfc_v1 &&
        jfc_v2 == other.jfc_v2 &&
        recording_duration_in_minutes == other.recording_duration_in_minutes &&
        recording_size_in_mb == other.recording_size_in_mb &&
        waiting_period_in_minutes == other.waiting_period_in_minutes
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [targets, jfc_profile_name, jfc_v1, jfc_v2, recording_duration_in_minutes, recording_size_in_mb, waiting_period_in_minutes].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
