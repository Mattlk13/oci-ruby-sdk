# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details object containing advanced feature configurations to be updated.
  # Ensure that the namespace and bucket storage are created prior to turning on the JfrRecording or CryptoEventAnalysis feature.
  #
  class Jms::Models::UpdateFleetAdvancedFeatureConfigurationDetails
    # Namespace for the Fleet advanced feature.
    # @return [String]
    attr_accessor :analytic_namespace

    # Bucket name required to store JFR and related data.
    # @return [String]
    attr_accessor :analytic_bucket_name

    # @return [OCI::Jms::Models::Lcm]
    attr_accessor :lcm

    # @return [OCI::Jms::Models::CryptoEventAnalysis]
    attr_accessor :crypto_event_analysis

    # @return [OCI::Jms::Models::AdvancedUsageTracking]
    attr_accessor :advanced_usage_tracking

    # @return [OCI::Jms::Models::JfrRecording]
    attr_accessor :jfr_recording

    # @return [OCI::Jms::Models::PerformanceTuningAnalysis]
    attr_accessor :performance_tuning_analysis

    # @return [OCI::Jms::Models::JavaMigrationAnalysis]
    attr_accessor :java_migration_analysis

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'analytic_namespace': :'analyticNamespace',
        'analytic_bucket_name': :'analyticBucketName',
        'lcm': :'lcm',
        'crypto_event_analysis': :'cryptoEventAnalysis',
        'advanced_usage_tracking': :'advancedUsageTracking',
        'jfr_recording': :'jfrRecording',
        'performance_tuning_analysis': :'performanceTuningAnalysis',
        'java_migration_analysis': :'javaMigrationAnalysis'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'analytic_namespace': :'String',
        'analytic_bucket_name': :'String',
        'lcm': :'OCI::Jms::Models::Lcm',
        'crypto_event_analysis': :'OCI::Jms::Models::CryptoEventAnalysis',
        'advanced_usage_tracking': :'OCI::Jms::Models::AdvancedUsageTracking',
        'jfr_recording': :'OCI::Jms::Models::JfrRecording',
        'performance_tuning_analysis': :'OCI::Jms::Models::PerformanceTuningAnalysis',
        'java_migration_analysis': :'OCI::Jms::Models::JavaMigrationAnalysis'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :analytic_namespace The value to assign to the {#analytic_namespace} property
    # @option attributes [String] :analytic_bucket_name The value to assign to the {#analytic_bucket_name} property
    # @option attributes [OCI::Jms::Models::Lcm] :lcm The value to assign to the {#lcm} property
    # @option attributes [OCI::Jms::Models::CryptoEventAnalysis] :crypto_event_analysis The value to assign to the {#crypto_event_analysis} property
    # @option attributes [OCI::Jms::Models::AdvancedUsageTracking] :advanced_usage_tracking The value to assign to the {#advanced_usage_tracking} property
    # @option attributes [OCI::Jms::Models::JfrRecording] :jfr_recording The value to assign to the {#jfr_recording} property
    # @option attributes [OCI::Jms::Models::PerformanceTuningAnalysis] :performance_tuning_analysis The value to assign to the {#performance_tuning_analysis} property
    # @option attributes [OCI::Jms::Models::JavaMigrationAnalysis] :java_migration_analysis The value to assign to the {#java_migration_analysis} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.analytic_namespace = attributes[:'analyticNamespace'] if attributes[:'analyticNamespace']

      raise 'You cannot provide both :analyticNamespace and :analytic_namespace' if attributes.key?(:'analyticNamespace') && attributes.key?(:'analytic_namespace')

      self.analytic_namespace = attributes[:'analytic_namespace'] if attributes[:'analytic_namespace']

      self.analytic_bucket_name = attributes[:'analyticBucketName'] if attributes[:'analyticBucketName']

      raise 'You cannot provide both :analyticBucketName and :analytic_bucket_name' if attributes.key?(:'analyticBucketName') && attributes.key?(:'analytic_bucket_name')

      self.analytic_bucket_name = attributes[:'analytic_bucket_name'] if attributes[:'analytic_bucket_name']

      self.lcm = attributes[:'lcm'] if attributes[:'lcm']

      self.crypto_event_analysis = attributes[:'cryptoEventAnalysis'] if attributes[:'cryptoEventAnalysis']

      raise 'You cannot provide both :cryptoEventAnalysis and :crypto_event_analysis' if attributes.key?(:'cryptoEventAnalysis') && attributes.key?(:'crypto_event_analysis')

      self.crypto_event_analysis = attributes[:'crypto_event_analysis'] if attributes[:'crypto_event_analysis']

      self.advanced_usage_tracking = attributes[:'advancedUsageTracking'] if attributes[:'advancedUsageTracking']

      raise 'You cannot provide both :advancedUsageTracking and :advanced_usage_tracking' if attributes.key?(:'advancedUsageTracking') && attributes.key?(:'advanced_usage_tracking')

      self.advanced_usage_tracking = attributes[:'advanced_usage_tracking'] if attributes[:'advanced_usage_tracking']

      self.jfr_recording = attributes[:'jfrRecording'] if attributes[:'jfrRecording']

      raise 'You cannot provide both :jfrRecording and :jfr_recording' if attributes.key?(:'jfrRecording') && attributes.key?(:'jfr_recording')

      self.jfr_recording = attributes[:'jfr_recording'] if attributes[:'jfr_recording']

      self.performance_tuning_analysis = attributes[:'performanceTuningAnalysis'] if attributes[:'performanceTuningAnalysis']

      raise 'You cannot provide both :performanceTuningAnalysis and :performance_tuning_analysis' if attributes.key?(:'performanceTuningAnalysis') && attributes.key?(:'performance_tuning_analysis')

      self.performance_tuning_analysis = attributes[:'performance_tuning_analysis'] if attributes[:'performance_tuning_analysis']

      self.java_migration_analysis = attributes[:'javaMigrationAnalysis'] if attributes[:'javaMigrationAnalysis']

      raise 'You cannot provide both :javaMigrationAnalysis and :java_migration_analysis' if attributes.key?(:'javaMigrationAnalysis') && attributes.key?(:'java_migration_analysis')

      self.java_migration_analysis = attributes[:'java_migration_analysis'] if attributes[:'java_migration_analysis']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        analytic_namespace == other.analytic_namespace &&
        analytic_bucket_name == other.analytic_bucket_name &&
        lcm == other.lcm &&
        crypto_event_analysis == other.crypto_event_analysis &&
        advanced_usage_tracking == other.advanced_usage_tracking &&
        jfr_recording == other.jfr_recording &&
        performance_tuning_analysis == other.performance_tuning_analysis &&
        java_migration_analysis == other.java_migration_analysis
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [analytic_namespace, analytic_bucket_name, lcm, crypto_event_analysis, advanced_usage_tracking, jfr_recording, performance_tuning_analysis, java_migration_analysis].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
