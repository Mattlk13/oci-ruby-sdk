# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Information about the agent.
  #
  class Jms::Models::Agent
    TYPE_ENUM = [
      TYPE_OMA = 'OMA'.freeze,
      TYPE_OCA = 'OCA'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    JAVA_SECURITY_STATUS_ENUM = [
      JAVA_SECURITY_STATUS_EARLY_ACCESS = 'EARLY_ACCESS'.freeze,
      JAVA_SECURITY_STATUS_UNKNOWN = 'UNKNOWN'.freeze,
      JAVA_SECURITY_STATUS_UP_TO_DATE = 'UP_TO_DATE'.freeze,
      JAVA_SECURITY_STATUS_UPDATE_REQUIRED = 'UPDATE_REQUIRED'.freeze,
      JAVA_SECURITY_STATUS_UPGRADE_REQUIRED = 'UPGRADE_REQUIRED'.freeze,
      JAVA_SECURITY_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The name of the agent.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The agent type.
    # @return [String]
    attr_reader :type

    # **[Required]** The java version.
    # @return [String]
    attr_accessor :java_version

    # **[Required]** The security status of the Java Runtime.
    # @return [String]
    attr_reader :java_security_status

    # **[Required]** A list of plugins installed on this agent.
    #
    # @return [Array<OCI::Jms::Models::Plugin>]
    attr_accessor :plugins

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'type': :'type',
        'java_version': :'javaVersion',
        'java_security_status': :'javaSecurityStatus',
        'plugins': :'plugins'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'type': :'String',
        'java_version': :'String',
        'java_security_status': :'String',
        'plugins': :'Array<OCI::Jms::Models::Plugin>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :java_version The value to assign to the {#java_version} property
    # @option attributes [String] :java_security_status The value to assign to the {#java_security_status} property
    # @option attributes [Array<OCI::Jms::Models::Plugin>] :plugins The value to assign to the {#plugins} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.type = attributes[:'type'] if attributes[:'type']

      self.java_version = attributes[:'javaVersion'] if attributes[:'javaVersion']

      raise 'You cannot provide both :javaVersion and :java_version' if attributes.key?(:'javaVersion') && attributes.key?(:'java_version')

      self.java_version = attributes[:'java_version'] if attributes[:'java_version']

      self.java_security_status = attributes[:'javaSecurityStatus'] if attributes[:'javaSecurityStatus']

      raise 'You cannot provide both :javaSecurityStatus and :java_security_status' if attributes.key?(:'javaSecurityStatus') && attributes.key?(:'java_security_status')

      self.java_security_status = attributes[:'java_security_status'] if attributes[:'java_security_status']

      self.plugins = attributes[:'plugins'] if attributes[:'plugins']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] java_security_status Object to be assigned
    def java_security_status=(java_security_status)
      # rubocop:disable Style/ConditionalAssignment
      if java_security_status && !JAVA_SECURITY_STATUS_ENUM.include?(java_security_status)
        OCI.logger.debug("Unknown value for 'java_security_status' [" + java_security_status + "]. Mapping to 'JAVA_SECURITY_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @java_security_status = JAVA_SECURITY_STATUS_UNKNOWN_ENUM_VALUE
      else
        @java_security_status = java_security_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        type == other.type &&
        java_version == other.java_version &&
        java_security_status == other.java_security_status &&
        plugins == other.plugins
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, type, java_version, java_security_status, plugins].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
