# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Attributes to update a Export setting.
  class Jms::Models::UpdateExportSettingDetails
    EXPORT_DURATION_ENUM = [
      EXPORT_DURATION_LAST_30_DAYS = 'LAST_30_DAYS'.freeze,
      EXPORT_DURATION_LAST_60_DAYS = 'LAST_60_DAYS'.freeze,
      EXPORT_DURATION_LAST_90_DAYS = 'LAST_90_DAYS'.freeze
    ].freeze

    EXPORT_RESOURCES_ENUM = [
      EXPORT_RESOURCES_MANAGED_INSTANCE = 'MANAGED_INSTANCE'.freeze,
      EXPORT_RESOURCES_MANAGED_INSTANCE_PLUS_JAVA_RUNTIME = 'MANAGED_INSTANCE_PLUS_JAVA_RUNTIME'.freeze,
      EXPORT_RESOURCES_MANAGED_INSTANCE_PLUS_JAVA_RUNTIME_PLUS_APPLICATION = 'MANAGED_INSTANCE_PLUS_JAVA_RUNTIME_PLUS_APPLICATION'.freeze
    ].freeze

    EXPORT_FREQUENCY_ENUM = [
      EXPORT_FREQUENCY_DAILY = 'DAILY'.freeze,
      EXPORT_FREQUENCY_WEEKLY = 'WEEKLY'.freeze,
      EXPORT_FREQUENCY_MONTHLY = 'MONTHLY'.freeze
    ].freeze

    # The duration of data to be exported for fleets.
    #
    # @return [String]
    attr_reader :export_duration

    # Resource to export data associated from the fleets.
    #
    # @return [String]
    attr_reader :export_resources

    # Acknowledgement for cross region target bucket configuration.
    #
    # @return [BOOLEAN]
    attr_accessor :is_cross_region_acknowledged

    # The name of the bucket where data will be exported.
    #
    # @return [String]
    attr_accessor :target_bucket_name

    # The namespace of the bucket where data will be exported.
    #
    # @return [String]
    attr_accessor :target_bucket_namespace

    # The namespace of the bucket where data will be exported.
    #
    # @return [String]
    attr_accessor :target_bucket_region

    # Schedule at which data will be exported.
    #
    # @return [String]
    attr_reader :export_frequency

    # **[Required]** ExportSetting flag to store enabled or disabled status.
    # @return [BOOLEAN]
    attr_accessor :is_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'export_duration': :'exportDuration',
        'export_resources': :'exportResources',
        'is_cross_region_acknowledged': :'isCrossRegionAcknowledged',
        'target_bucket_name': :'targetBucketName',
        'target_bucket_namespace': :'targetBucketNamespace',
        'target_bucket_region': :'targetBucketRegion',
        'export_frequency': :'exportFrequency',
        'is_enabled': :'isEnabled'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'export_duration': :'String',
        'export_resources': :'String',
        'is_cross_region_acknowledged': :'BOOLEAN',
        'target_bucket_name': :'String',
        'target_bucket_namespace': :'String',
        'target_bucket_region': :'String',
        'export_frequency': :'String',
        'is_enabled': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :export_duration The value to assign to the {#export_duration} property
    # @option attributes [String] :export_resources The value to assign to the {#export_resources} property
    # @option attributes [BOOLEAN] :is_cross_region_acknowledged The value to assign to the {#is_cross_region_acknowledged} property
    # @option attributes [String] :target_bucket_name The value to assign to the {#target_bucket_name} property
    # @option attributes [String] :target_bucket_namespace The value to assign to the {#target_bucket_namespace} property
    # @option attributes [String] :target_bucket_region The value to assign to the {#target_bucket_region} property
    # @option attributes [String] :export_frequency The value to assign to the {#export_frequency} property
    # @option attributes [BOOLEAN] :is_enabled The value to assign to the {#is_enabled} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.export_duration = attributes[:'exportDuration'] if attributes[:'exportDuration']

      raise 'You cannot provide both :exportDuration and :export_duration' if attributes.key?(:'exportDuration') && attributes.key?(:'export_duration')

      self.export_duration = attributes[:'export_duration'] if attributes[:'export_duration']

      self.export_resources = attributes[:'exportResources'] if attributes[:'exportResources']

      raise 'You cannot provide both :exportResources and :export_resources' if attributes.key?(:'exportResources') && attributes.key?(:'export_resources')

      self.export_resources = attributes[:'export_resources'] if attributes[:'export_resources']

      self.is_cross_region_acknowledged = attributes[:'isCrossRegionAcknowledged'] unless attributes[:'isCrossRegionAcknowledged'].nil?
      self.is_cross_region_acknowledged = false if is_cross_region_acknowledged.nil? && !attributes.key?(:'isCrossRegionAcknowledged') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isCrossRegionAcknowledged and :is_cross_region_acknowledged' if attributes.key?(:'isCrossRegionAcknowledged') && attributes.key?(:'is_cross_region_acknowledged')

      self.is_cross_region_acknowledged = attributes[:'is_cross_region_acknowledged'] unless attributes[:'is_cross_region_acknowledged'].nil?
      self.is_cross_region_acknowledged = false if is_cross_region_acknowledged.nil? && !attributes.key?(:'isCrossRegionAcknowledged') && !attributes.key?(:'is_cross_region_acknowledged') # rubocop:disable Style/StringLiterals

      self.target_bucket_name = attributes[:'targetBucketName'] if attributes[:'targetBucketName']

      raise 'You cannot provide both :targetBucketName and :target_bucket_name' if attributes.key?(:'targetBucketName') && attributes.key?(:'target_bucket_name')

      self.target_bucket_name = attributes[:'target_bucket_name'] if attributes[:'target_bucket_name']

      self.target_bucket_namespace = attributes[:'targetBucketNamespace'] if attributes[:'targetBucketNamespace']

      raise 'You cannot provide both :targetBucketNamespace and :target_bucket_namespace' if attributes.key?(:'targetBucketNamespace') && attributes.key?(:'target_bucket_namespace')

      self.target_bucket_namespace = attributes[:'target_bucket_namespace'] if attributes[:'target_bucket_namespace']

      self.target_bucket_region = attributes[:'targetBucketRegion'] if attributes[:'targetBucketRegion']

      raise 'You cannot provide both :targetBucketRegion and :target_bucket_region' if attributes.key?(:'targetBucketRegion') && attributes.key?(:'target_bucket_region')

      self.target_bucket_region = attributes[:'target_bucket_region'] if attributes[:'target_bucket_region']

      self.export_frequency = attributes[:'exportFrequency'] if attributes[:'exportFrequency']

      raise 'You cannot provide both :exportFrequency and :export_frequency' if attributes.key?(:'exportFrequency') && attributes.key?(:'export_frequency')

      self.export_frequency = attributes[:'export_frequency'] if attributes[:'export_frequency']

      self.is_enabled = attributes[:'isEnabled'] unless attributes[:'isEnabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEnabled and :is_enabled' if attributes.key?(:'isEnabled') && attributes.key?(:'is_enabled')

      self.is_enabled = attributes[:'is_enabled'] unless attributes[:'is_enabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') && !attributes.key?(:'is_enabled') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] export_duration Object to be assigned
    def export_duration=(export_duration)
      raise "Invalid value for 'export_duration': this must be one of the values in EXPORT_DURATION_ENUM." if export_duration && !EXPORT_DURATION_ENUM.include?(export_duration)

      @export_duration = export_duration
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] export_resources Object to be assigned
    def export_resources=(export_resources)
      raise "Invalid value for 'export_resources': this must be one of the values in EXPORT_RESOURCES_ENUM." if export_resources && !EXPORT_RESOURCES_ENUM.include?(export_resources)

      @export_resources = export_resources
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] export_frequency Object to be assigned
    def export_frequency=(export_frequency)
      raise "Invalid value for 'export_frequency': this must be one of the values in EXPORT_FREQUENCY_ENUM." if export_frequency && !EXPORT_FREQUENCY_ENUM.include?(export_frequency)

      @export_frequency = export_frequency
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        export_duration == other.export_duration &&
        export_resources == other.export_resources &&
        is_cross_region_acknowledged == other.is_cross_region_acknowledged &&
        target_bucket_name == other.target_bucket_name &&
        target_bucket_namespace == other.target_bucket_namespace &&
        target_bucket_region == other.target_bucket_region &&
        export_frequency == other.export_frequency &&
        is_enabled == other.is_enabled
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [export_duration, export_resources, is_cross_region_acknowledged, target_bucket_name, target_bucket_namespace, target_bucket_region, export_frequency, is_enabled].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
