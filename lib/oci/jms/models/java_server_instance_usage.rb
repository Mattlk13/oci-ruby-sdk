# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210610
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Java Server instance usage during a specified time period.
  #
  class Jms::Models::JavaServerInstanceUsage
    JVM_SECURITY_STATUS_ENUM = [
      JVM_SECURITY_STATUS_EARLY_ACCESS = 'EARLY_ACCESS'.freeze,
      JVM_SECURITY_STATUS_UNKNOWN = 'UNKNOWN'.freeze,
      JVM_SECURITY_STATUS_UP_TO_DATE = 'UP_TO_DATE'.freeze,
      JVM_SECURITY_STATUS_UPDATE_REQUIRED = 'UPDATE_REQUIRED'.freeze,
      JVM_SECURITY_STATUS_UPGRADE_REQUIRED = 'UPGRADE_REQUIRED'.freeze,
      JVM_SECURITY_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The internal identifier of the Java Server instance.
    #
    # @return [String]
    attr_accessor :server_instance_key

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the related Fleet.
    #
    # @return [String]
    attr_accessor :fleet_id

    # **[Required]** The name of the Java Server instance.
    #
    # @return [String]
    attr_accessor :server_instance_name

    # **[Required]** The internal identifier of the related Java Server.
    #
    # @return [String]
    attr_accessor :server_key

    # The name of the Java Server.
    #
    # @return [String]
    attr_accessor :server_name

    # The version of the Java Server.
    #
    # @return [String]
    attr_accessor :server_version

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the related managed instance.
    #
    # @return [String]
    attr_accessor :managed_instance_id

    # The host name of the related managed instance.
    #
    # @return [String]
    attr_accessor :host_name

    # The internal identifier of the related Java Runtime.
    #
    # @return [String]
    attr_accessor :jvm_key

    # The vendor of the Java Runtime.
    #
    # @return [String]
    attr_accessor :jvm_vendor

    # The distribution of the Java Runtime.
    #
    # @return [String]
    attr_accessor :jvm_distribution

    # The version of the Java Runtime.
    #
    # @return [String]
    attr_accessor :jvm_version

    # The security status of the Java Runtime.
    # @return [String]
    attr_reader :jvm_security_status

    # The approximate count of deployed applications in the Java Server instance.
    #
    # @return [Integer]
    attr_accessor :approximate_deployed_application_count

    # Lower bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
    # @return [DateTime]
    attr_accessor :time_start

    # Upper bound of the specified time period filter. JMS provides a view of the data that is _per day_. The query uses only the date element of the parameter.
    # @return [DateTime]
    attr_accessor :time_end

    # The date and time the resource was _first_ reported to JMS.
    # This is potentially _before_ the specified time period provided by the filters.
    # For example, a resource can be first reported to JMS before the start of a specified time period,
    # if it is also reported during the time period.
    #
    # @return [DateTime]
    attr_accessor :time_first_seen

    # The date and time the resource was _last_ reported to JMS.
    # This is potentially _after_ the specified time period provided by the filters.
    # For example, a resource can be last reported to JMS before the start of a specified time period,
    # if it is also reported during the time period.
    #
    # @return [DateTime]
    attr_accessor :time_last_seen

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'server_instance_key': :'serverInstanceKey',
        'fleet_id': :'fleetId',
        'server_instance_name': :'serverInstanceName',
        'server_key': :'serverKey',
        'server_name': :'serverName',
        'server_version': :'serverVersion',
        'managed_instance_id': :'managedInstanceId',
        'host_name': :'hostName',
        'jvm_key': :'jvmKey',
        'jvm_vendor': :'jvmVendor',
        'jvm_distribution': :'jvmDistribution',
        'jvm_version': :'jvmVersion',
        'jvm_security_status': :'jvmSecurityStatus',
        'approximate_deployed_application_count': :'approximateDeployedApplicationCount',
        'time_start': :'timeStart',
        'time_end': :'timeEnd',
        'time_first_seen': :'timeFirstSeen',
        'time_last_seen': :'timeLastSeen'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'server_instance_key': :'String',
        'fleet_id': :'String',
        'server_instance_name': :'String',
        'server_key': :'String',
        'server_name': :'String',
        'server_version': :'String',
        'managed_instance_id': :'String',
        'host_name': :'String',
        'jvm_key': :'String',
        'jvm_vendor': :'String',
        'jvm_distribution': :'String',
        'jvm_version': :'String',
        'jvm_security_status': :'String',
        'approximate_deployed_application_count': :'Integer',
        'time_start': :'DateTime',
        'time_end': :'DateTime',
        'time_first_seen': :'DateTime',
        'time_last_seen': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :server_instance_key The value to assign to the {#server_instance_key} property
    # @option attributes [String] :fleet_id The value to assign to the {#fleet_id} property
    # @option attributes [String] :server_instance_name The value to assign to the {#server_instance_name} property
    # @option attributes [String] :server_key The value to assign to the {#server_key} property
    # @option attributes [String] :server_name The value to assign to the {#server_name} property
    # @option attributes [String] :server_version The value to assign to the {#server_version} property
    # @option attributes [String] :managed_instance_id The value to assign to the {#managed_instance_id} property
    # @option attributes [String] :host_name The value to assign to the {#host_name} property
    # @option attributes [String] :jvm_key The value to assign to the {#jvm_key} property
    # @option attributes [String] :jvm_vendor The value to assign to the {#jvm_vendor} property
    # @option attributes [String] :jvm_distribution The value to assign to the {#jvm_distribution} property
    # @option attributes [String] :jvm_version The value to assign to the {#jvm_version} property
    # @option attributes [String] :jvm_security_status The value to assign to the {#jvm_security_status} property
    # @option attributes [Integer] :approximate_deployed_application_count The value to assign to the {#approximate_deployed_application_count} property
    # @option attributes [DateTime] :time_start The value to assign to the {#time_start} property
    # @option attributes [DateTime] :time_end The value to assign to the {#time_end} property
    # @option attributes [DateTime] :time_first_seen The value to assign to the {#time_first_seen} property
    # @option attributes [DateTime] :time_last_seen The value to assign to the {#time_last_seen} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.server_instance_key = attributes[:'serverInstanceKey'] if attributes[:'serverInstanceKey']

      raise 'You cannot provide both :serverInstanceKey and :server_instance_key' if attributes.key?(:'serverInstanceKey') && attributes.key?(:'server_instance_key')

      self.server_instance_key = attributes[:'server_instance_key'] if attributes[:'server_instance_key']

      self.fleet_id = attributes[:'fleetId'] if attributes[:'fleetId']

      raise 'You cannot provide both :fleetId and :fleet_id' if attributes.key?(:'fleetId') && attributes.key?(:'fleet_id')

      self.fleet_id = attributes[:'fleet_id'] if attributes[:'fleet_id']

      self.server_instance_name = attributes[:'serverInstanceName'] if attributes[:'serverInstanceName']

      raise 'You cannot provide both :serverInstanceName and :server_instance_name' if attributes.key?(:'serverInstanceName') && attributes.key?(:'server_instance_name')

      self.server_instance_name = attributes[:'server_instance_name'] if attributes[:'server_instance_name']

      self.server_key = attributes[:'serverKey'] if attributes[:'serverKey']

      raise 'You cannot provide both :serverKey and :server_key' if attributes.key?(:'serverKey') && attributes.key?(:'server_key')

      self.server_key = attributes[:'server_key'] if attributes[:'server_key']

      self.server_name = attributes[:'serverName'] if attributes[:'serverName']

      raise 'You cannot provide both :serverName and :server_name' if attributes.key?(:'serverName') && attributes.key?(:'server_name')

      self.server_name = attributes[:'server_name'] if attributes[:'server_name']

      self.server_version = attributes[:'serverVersion'] if attributes[:'serverVersion']

      raise 'You cannot provide both :serverVersion and :server_version' if attributes.key?(:'serverVersion') && attributes.key?(:'server_version')

      self.server_version = attributes[:'server_version'] if attributes[:'server_version']

      self.managed_instance_id = attributes[:'managedInstanceId'] if attributes[:'managedInstanceId']

      raise 'You cannot provide both :managedInstanceId and :managed_instance_id' if attributes.key?(:'managedInstanceId') && attributes.key?(:'managed_instance_id')

      self.managed_instance_id = attributes[:'managed_instance_id'] if attributes[:'managed_instance_id']

      self.host_name = attributes[:'hostName'] if attributes[:'hostName']

      raise 'You cannot provide both :hostName and :host_name' if attributes.key?(:'hostName') && attributes.key?(:'host_name')

      self.host_name = attributes[:'host_name'] if attributes[:'host_name']

      self.jvm_key = attributes[:'jvmKey'] if attributes[:'jvmKey']

      raise 'You cannot provide both :jvmKey and :jvm_key' if attributes.key?(:'jvmKey') && attributes.key?(:'jvm_key')

      self.jvm_key = attributes[:'jvm_key'] if attributes[:'jvm_key']

      self.jvm_vendor = attributes[:'jvmVendor'] if attributes[:'jvmVendor']

      raise 'You cannot provide both :jvmVendor and :jvm_vendor' if attributes.key?(:'jvmVendor') && attributes.key?(:'jvm_vendor')

      self.jvm_vendor = attributes[:'jvm_vendor'] if attributes[:'jvm_vendor']

      self.jvm_distribution = attributes[:'jvmDistribution'] if attributes[:'jvmDistribution']

      raise 'You cannot provide both :jvmDistribution and :jvm_distribution' if attributes.key?(:'jvmDistribution') && attributes.key?(:'jvm_distribution')

      self.jvm_distribution = attributes[:'jvm_distribution'] if attributes[:'jvm_distribution']

      self.jvm_version = attributes[:'jvmVersion'] if attributes[:'jvmVersion']

      raise 'You cannot provide both :jvmVersion and :jvm_version' if attributes.key?(:'jvmVersion') && attributes.key?(:'jvm_version')

      self.jvm_version = attributes[:'jvm_version'] if attributes[:'jvm_version']

      self.jvm_security_status = attributes[:'jvmSecurityStatus'] if attributes[:'jvmSecurityStatus']

      raise 'You cannot provide both :jvmSecurityStatus and :jvm_security_status' if attributes.key?(:'jvmSecurityStatus') && attributes.key?(:'jvm_security_status')

      self.jvm_security_status = attributes[:'jvm_security_status'] if attributes[:'jvm_security_status']

      self.approximate_deployed_application_count = attributes[:'approximateDeployedApplicationCount'] if attributes[:'approximateDeployedApplicationCount']

      raise 'You cannot provide both :approximateDeployedApplicationCount and :approximate_deployed_application_count' if attributes.key?(:'approximateDeployedApplicationCount') && attributes.key?(:'approximate_deployed_application_count')

      self.approximate_deployed_application_count = attributes[:'approximate_deployed_application_count'] if attributes[:'approximate_deployed_application_count']

      self.time_start = attributes[:'timeStart'] if attributes[:'timeStart']

      raise 'You cannot provide both :timeStart and :time_start' if attributes.key?(:'timeStart') && attributes.key?(:'time_start')

      self.time_start = attributes[:'time_start'] if attributes[:'time_start']

      self.time_end = attributes[:'timeEnd'] if attributes[:'timeEnd']

      raise 'You cannot provide both :timeEnd and :time_end' if attributes.key?(:'timeEnd') && attributes.key?(:'time_end')

      self.time_end = attributes[:'time_end'] if attributes[:'time_end']

      self.time_first_seen = attributes[:'timeFirstSeen'] if attributes[:'timeFirstSeen']

      raise 'You cannot provide both :timeFirstSeen and :time_first_seen' if attributes.key?(:'timeFirstSeen') && attributes.key?(:'time_first_seen')

      self.time_first_seen = attributes[:'time_first_seen'] if attributes[:'time_first_seen']

      self.time_last_seen = attributes[:'timeLastSeen'] if attributes[:'timeLastSeen']

      raise 'You cannot provide both :timeLastSeen and :time_last_seen' if attributes.key?(:'timeLastSeen') && attributes.key?(:'time_last_seen')

      self.time_last_seen = attributes[:'time_last_seen'] if attributes[:'time_last_seen']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jvm_security_status Object to be assigned
    def jvm_security_status=(jvm_security_status)
      # rubocop:disable Style/ConditionalAssignment
      if jvm_security_status && !JVM_SECURITY_STATUS_ENUM.include?(jvm_security_status)
        OCI.logger.debug("Unknown value for 'jvm_security_status' [" + jvm_security_status + "]. Mapping to 'JVM_SECURITY_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @jvm_security_status = JVM_SECURITY_STATUS_UNKNOWN_ENUM_VALUE
      else
        @jvm_security_status = jvm_security_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        server_instance_key == other.server_instance_key &&
        fleet_id == other.fleet_id &&
        server_instance_name == other.server_instance_name &&
        server_key == other.server_key &&
        server_name == other.server_name &&
        server_version == other.server_version &&
        managed_instance_id == other.managed_instance_id &&
        host_name == other.host_name &&
        jvm_key == other.jvm_key &&
        jvm_vendor == other.jvm_vendor &&
        jvm_distribution == other.jvm_distribution &&
        jvm_version == other.jvm_version &&
        jvm_security_status == other.jvm_security_status &&
        approximate_deployed_application_count == other.approximate_deployed_application_count &&
        time_start == other.time_start &&
        time_end == other.time_end &&
        time_first_seen == other.time_first_seen &&
        time_last_seen == other.time_last_seen
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [server_instance_key, fleet_id, server_instance_name, server_key, server_name, server_version, managed_instance_id, host_name, jvm_key, jvm_vendor, jvm_distribution, jvm_version, jvm_security_status, approximate_deployed_application_count, time_start, time_end, time_first_seen, time_last_seen].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
