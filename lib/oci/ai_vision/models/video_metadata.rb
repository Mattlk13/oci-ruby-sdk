# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Video information.
  class AiVision::Models::VideoMetadata
    # **[Required]** Total number of frames.
    # @return [Integer]
    attr_accessor :frame_count

    # **[Required]** Video framerate.
    # @return [Float]
    attr_accessor :frame_rate

    # **[Required]** Width of each frame.
    # @return [Integer]
    attr_accessor :frame_width

    # **[Required]** Height of each frame.
    # @return [Integer]
    attr_accessor :frame_height

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'frame_count': :'frameCount',
        'frame_rate': :'frameRate',
        'frame_width': :'frameWidth',
        'frame_height': :'frameHeight'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'frame_count': :'Integer',
        'frame_rate': :'Float',
        'frame_width': :'Integer',
        'frame_height': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :frame_count The value to assign to the {#frame_count} property
    # @option attributes [Float] :frame_rate The value to assign to the {#frame_rate} property
    # @option attributes [Integer] :frame_width The value to assign to the {#frame_width} property
    # @option attributes [Integer] :frame_height The value to assign to the {#frame_height} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.frame_count = attributes[:'frameCount'] if attributes[:'frameCount']

      raise 'You cannot provide both :frameCount and :frame_count' if attributes.key?(:'frameCount') && attributes.key?(:'frame_count')

      self.frame_count = attributes[:'frame_count'] if attributes[:'frame_count']

      self.frame_rate = attributes[:'frameRate'] if attributes[:'frameRate']

      raise 'You cannot provide both :frameRate and :frame_rate' if attributes.key?(:'frameRate') && attributes.key?(:'frame_rate')

      self.frame_rate = attributes[:'frame_rate'] if attributes[:'frame_rate']

      self.frame_width = attributes[:'frameWidth'] if attributes[:'frameWidth']

      raise 'You cannot provide both :frameWidth and :frame_width' if attributes.key?(:'frameWidth') && attributes.key?(:'frame_width')

      self.frame_width = attributes[:'frame_width'] if attributes[:'frame_width']

      self.frame_height = attributes[:'frameHeight'] if attributes[:'frameHeight']

      raise 'You cannot provide both :frameHeight and :frame_height' if attributes.key?(:'frameHeight') && attributes.key?(:'frame_height')

      self.frame_height = attributes[:'frame_height'] if attributes[:'frame_height']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        frame_count == other.frame_count &&
        frame_rate == other.frame_rate &&
        frame_width == other.frame_width &&
        frame_height == other.frame_height
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [frame_count, frame_rate, frame_width, frame_height].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
