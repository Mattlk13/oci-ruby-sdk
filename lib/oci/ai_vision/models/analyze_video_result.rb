# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Video analysis results.
  class AiVision::Models::AnalyzeVideoResult
    # This attribute is required.
    # @return [OCI::AiVision::Models::VideoMetadata]
    attr_accessor :video_metadata

    # Detected labels in a video.
    # @return [Array<OCI::AiVision::Models::VideoLabel>]
    attr_accessor :video_labels

    # Detected objects in a video.
    # @return [Array<OCI::AiVision::Models::VideoObject>]
    attr_accessor :video_objects

    # Tracked objects in a video.
    # @return [Array<OCI::AiVision::Models::VideoTrackedObject>]
    attr_accessor :video_tracked_objects

    # Detected text in a video.
    # @return [Array<OCI::AiVision::Models::VideoText>]
    attr_accessor :video_text

    # Detected faces in a video.
    # @return [Array<OCI::AiVision::Models::VideoFace>]
    attr_accessor :video_faces

    # The ontologyClasses of video labels.
    # @return [Array<OCI::AiVision::Models::OntologyClass>]
    attr_accessor :ontology_classes

    # Label Detection model version.
    # @return [String]
    attr_accessor :label_detection_model_version

    # Object Detection model version.
    # @return [String]
    attr_accessor :object_detection_model_version

    # Object Tracking model version.
    # @return [String]
    attr_accessor :object_tracking_model_version

    # Text Detection model version.
    # @return [String]
    attr_accessor :text_detection_model_version

    # Face Detection model version.
    # @return [String]
    attr_accessor :face_detection_model_version

    # Array of possible errors.
    # @return [Array<OCI::AiVision::Models::ProcessingError>]
    attr_accessor :errors

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'video_metadata': :'videoMetadata',
        'video_labels': :'videoLabels',
        'video_objects': :'videoObjects',
        'video_tracked_objects': :'videoTrackedObjects',
        'video_text': :'videoText',
        'video_faces': :'videoFaces',
        'ontology_classes': :'ontologyClasses',
        'label_detection_model_version': :'labelDetectionModelVersion',
        'object_detection_model_version': :'objectDetectionModelVersion',
        'object_tracking_model_version': :'objectTrackingModelVersion',
        'text_detection_model_version': :'textDetectionModelVersion',
        'face_detection_model_version': :'faceDetectionModelVersion',
        'errors': :'errors'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'video_metadata': :'OCI::AiVision::Models::VideoMetadata',
        'video_labels': :'Array<OCI::AiVision::Models::VideoLabel>',
        'video_objects': :'Array<OCI::AiVision::Models::VideoObject>',
        'video_tracked_objects': :'Array<OCI::AiVision::Models::VideoTrackedObject>',
        'video_text': :'Array<OCI::AiVision::Models::VideoText>',
        'video_faces': :'Array<OCI::AiVision::Models::VideoFace>',
        'ontology_classes': :'Array<OCI::AiVision::Models::OntologyClass>',
        'label_detection_model_version': :'String',
        'object_detection_model_version': :'String',
        'object_tracking_model_version': :'String',
        'text_detection_model_version': :'String',
        'face_detection_model_version': :'String',
        'errors': :'Array<OCI::AiVision::Models::ProcessingError>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::AiVision::Models::VideoMetadata] :video_metadata The value to assign to the {#video_metadata} property
    # @option attributes [Array<OCI::AiVision::Models::VideoLabel>] :video_labels The value to assign to the {#video_labels} property
    # @option attributes [Array<OCI::AiVision::Models::VideoObject>] :video_objects The value to assign to the {#video_objects} property
    # @option attributes [Array<OCI::AiVision::Models::VideoTrackedObject>] :video_tracked_objects The value to assign to the {#video_tracked_objects} property
    # @option attributes [Array<OCI::AiVision::Models::VideoText>] :video_text The value to assign to the {#video_text} property
    # @option attributes [Array<OCI::AiVision::Models::VideoFace>] :video_faces The value to assign to the {#video_faces} property
    # @option attributes [Array<OCI::AiVision::Models::OntologyClass>] :ontology_classes The value to assign to the {#ontology_classes} property
    # @option attributes [String] :label_detection_model_version The value to assign to the {#label_detection_model_version} property
    # @option attributes [String] :object_detection_model_version The value to assign to the {#object_detection_model_version} property
    # @option attributes [String] :object_tracking_model_version The value to assign to the {#object_tracking_model_version} property
    # @option attributes [String] :text_detection_model_version The value to assign to the {#text_detection_model_version} property
    # @option attributes [String] :face_detection_model_version The value to assign to the {#face_detection_model_version} property
    # @option attributes [Array<OCI::AiVision::Models::ProcessingError>] :errors The value to assign to the {#errors} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.video_metadata = attributes[:'videoMetadata'] if attributes[:'videoMetadata']

      raise 'You cannot provide both :videoMetadata and :video_metadata' if attributes.key?(:'videoMetadata') && attributes.key?(:'video_metadata')

      self.video_metadata = attributes[:'video_metadata'] if attributes[:'video_metadata']

      self.video_labels = attributes[:'videoLabels'] if attributes[:'videoLabels']

      raise 'You cannot provide both :videoLabels and :video_labels' if attributes.key?(:'videoLabels') && attributes.key?(:'video_labels')

      self.video_labels = attributes[:'video_labels'] if attributes[:'video_labels']

      self.video_objects = attributes[:'videoObjects'] if attributes[:'videoObjects']

      raise 'You cannot provide both :videoObjects and :video_objects' if attributes.key?(:'videoObjects') && attributes.key?(:'video_objects')

      self.video_objects = attributes[:'video_objects'] if attributes[:'video_objects']

      self.video_tracked_objects = attributes[:'videoTrackedObjects'] if attributes[:'videoTrackedObjects']

      raise 'You cannot provide both :videoTrackedObjects and :video_tracked_objects' if attributes.key?(:'videoTrackedObjects') && attributes.key?(:'video_tracked_objects')

      self.video_tracked_objects = attributes[:'video_tracked_objects'] if attributes[:'video_tracked_objects']

      self.video_text = attributes[:'videoText'] if attributes[:'videoText']

      raise 'You cannot provide both :videoText and :video_text' if attributes.key?(:'videoText') && attributes.key?(:'video_text')

      self.video_text = attributes[:'video_text'] if attributes[:'video_text']

      self.video_faces = attributes[:'videoFaces'] if attributes[:'videoFaces']

      raise 'You cannot provide both :videoFaces and :video_faces' if attributes.key?(:'videoFaces') && attributes.key?(:'video_faces')

      self.video_faces = attributes[:'video_faces'] if attributes[:'video_faces']

      self.ontology_classes = attributes[:'ontologyClasses'] if attributes[:'ontologyClasses']

      raise 'You cannot provide both :ontologyClasses and :ontology_classes' if attributes.key?(:'ontologyClasses') && attributes.key?(:'ontology_classes')

      self.ontology_classes = attributes[:'ontology_classes'] if attributes[:'ontology_classes']

      self.label_detection_model_version = attributes[:'labelDetectionModelVersion'] if attributes[:'labelDetectionModelVersion']

      raise 'You cannot provide both :labelDetectionModelVersion and :label_detection_model_version' if attributes.key?(:'labelDetectionModelVersion') && attributes.key?(:'label_detection_model_version')

      self.label_detection_model_version = attributes[:'label_detection_model_version'] if attributes[:'label_detection_model_version']

      self.object_detection_model_version = attributes[:'objectDetectionModelVersion'] if attributes[:'objectDetectionModelVersion']

      raise 'You cannot provide both :objectDetectionModelVersion and :object_detection_model_version' if attributes.key?(:'objectDetectionModelVersion') && attributes.key?(:'object_detection_model_version')

      self.object_detection_model_version = attributes[:'object_detection_model_version'] if attributes[:'object_detection_model_version']

      self.object_tracking_model_version = attributes[:'objectTrackingModelVersion'] if attributes[:'objectTrackingModelVersion']

      raise 'You cannot provide both :objectTrackingModelVersion and :object_tracking_model_version' if attributes.key?(:'objectTrackingModelVersion') && attributes.key?(:'object_tracking_model_version')

      self.object_tracking_model_version = attributes[:'object_tracking_model_version'] if attributes[:'object_tracking_model_version']

      self.text_detection_model_version = attributes[:'textDetectionModelVersion'] if attributes[:'textDetectionModelVersion']

      raise 'You cannot provide both :textDetectionModelVersion and :text_detection_model_version' if attributes.key?(:'textDetectionModelVersion') && attributes.key?(:'text_detection_model_version')

      self.text_detection_model_version = attributes[:'text_detection_model_version'] if attributes[:'text_detection_model_version']

      self.face_detection_model_version = attributes[:'faceDetectionModelVersion'] if attributes[:'faceDetectionModelVersion']

      raise 'You cannot provide both :faceDetectionModelVersion and :face_detection_model_version' if attributes.key?(:'faceDetectionModelVersion') && attributes.key?(:'face_detection_model_version')

      self.face_detection_model_version = attributes[:'face_detection_model_version'] if attributes[:'face_detection_model_version']

      self.errors = attributes[:'errors'] if attributes[:'errors']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        video_metadata == other.video_metadata &&
        video_labels == other.video_labels &&
        video_objects == other.video_objects &&
        video_tracked_objects == other.video_tracked_objects &&
        video_text == other.video_text &&
        video_faces == other.video_faces &&
        ontology_classes == other.ontology_classes &&
        label_detection_model_version == other.label_detection_model_version &&
        object_detection_model_version == other.object_detection_model_version &&
        object_tracking_model_version == other.object_tracking_model_version &&
        text_detection_model_version == other.text_detection_model_version &&
        face_detection_model_version == other.face_detection_model_version &&
        errors == other.errors
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [video_metadata, video_labels, video_objects, video_tracked_objects, video_text, video_faces, ontology_classes, label_detection_model_version, object_detection_model_version, object_tracking_model_version, text_detection_model_version, face_detection_model_version, errors].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
