# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the OS Management Hub API to manage and monitor updates and patches for instances in OCI, your private data center, or 3rd-party clouds.
  # For more information, see [Overview of OS Management Hub](https://docs.cloud.oracle.com/iaas/osmh/doc/overview.htm).
  class OsManagementHub::SoftwareSourceClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new SoftwareSourceClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20220901'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "SoftwareSourceClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://osmh.{region}.oci.{secondLevelDomain}') + '/20220901'
      logger.info "SoftwareSourceClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Adds packages to a software source. This operation can only be done for custom and versioned custom software sources that are not created using filters.
    # For a versioned custom software source, you can only add packages when the source is created. Once content is added to a versioned custom software source, it is immutable.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [OCI::OsManagementHub::Models::AddPackagesToSoftwareSourceDetails] add_packages_to_software_source_details A list of packages to be added to the software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/add_packages_to_software_source.rb.html) to see an example of how to use add_packages_to_software_source API.
    def add_packages_to_software_source(software_source_id, add_packages_to_software_source_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#add_packages_to_software_source.' if logger

      raise "Missing the required parameter 'software_source_id' when calling add_packages_to_software_source." if software_source_id.nil?
      raise "Missing the required parameter 'add_packages_to_software_source_details' when calling add_packages_to_software_source." if add_packages_to_software_source_details.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}/actions/addPackages'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(add_packages_to_software_source_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#add_packages_to_software_source') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the availability for a list of specified software sources.
    #
    # @param [OCI::OsManagementHub::Models::ChangeAvailabilityOfSoftwareSourcesDetails] change_availability_of_software_sources_details Request body that contains a list of software sources whose availability needs to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/change_availability_of_software_sources.rb.html) to see an example of how to use change_availability_of_software_sources API.
    def change_availability_of_software_sources(change_availability_of_software_sources_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#change_availability_of_software_sources.' if logger

      raise "Missing the required parameter 'change_availability_of_software_sources_details' when calling change_availability_of_software_sources." if change_availability_of_software_sources_details.nil?

      path = '/softwareSources/actions/changeAvailability'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_availability_of_software_sources_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#change_availability_of_software_sources') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves the specified software sources to a different compartment within the same tenancy.
    # For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [OCI::OsManagementHub::Models::ChangeSoftwareSourceCompartmentDetails] change_software_source_compartment_details The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment to move the software source to.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/change_software_source_compartment.rb.html) to see an example of how to use change_software_source_compartment API.
    def change_software_source_compartment(software_source_id, change_software_source_compartment_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#change_software_source_compartment.' if logger

      raise "Missing the required parameter 'software_source_id' when calling change_software_source_compartment." if software_source_id.nil?
      raise "Missing the required parameter 'change_software_source_compartment_details' when calling change_software_source_compartment." if change_software_source_compartment_details.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}/actions/changeCompartment'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_software_source_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#change_software_source_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Registers the necessary entitlement credentials for OS vendor software sources.
    #
    # @param [OCI::OsManagementHub::Models::CreateEntitlementDetails] create_entitlement_details Details for creating entitlements.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/create_entitlement.rb.html) to see an example of how to use create_entitlement API.
    def create_entitlement(create_entitlement_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#create_entitlement.' if logger

      raise "Missing the required parameter 'create_entitlement_details' when calling create_entitlement." if create_entitlement_details.nil?

      path = '/entitlements'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_entitlement_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#create_entitlement') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a new versioned or custom software source.
    #
    # @param [OCI::OsManagementHub::Models::CreateSoftwareSourceDetails] create_software_source_details Details for the new software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwareSource SoftwareSource}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/create_software_source.rb.html) to see an example of how to use create_software_source API.
    def create_software_source(create_software_source_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#create_software_source.' if logger

      raise "Missing the required parameter 'create_software_source_details' when calling create_software_source." if create_software_source_details.nil?

      path = '/softwareSources'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_software_source_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#create_software_source') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwareSource'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes the specified software source.
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/delete_software_source.rb.html) to see an example of how to use delete_software_source API.
    def delete_software_source(software_source_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#delete_software_source.' if logger

      raise "Missing the required parameter 'software_source_id' when calling delete_software_source." if software_source_id.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#delete_software_source') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns information about the specified erratum based on its advisory name.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
    # @param [String] name The erratum name (such as ELSA-2023-34678).
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::Erratum Erratum}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/get_erratum.rb.html) to see an example of how to use get_erratum API.
    def get_erratum(compartment_id, name, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#get_erratum.' if logger

      raise "Missing the required parameter 'compartment_id' when calling get_erratum." if compartment_id.nil?
      raise "Missing the required parameter 'name' when calling get_erratum." if name.nil?
      raise "Parameter value for 'name' must not be blank" if OCI::Internal::Util.blank_string?(name)

      path = '/errata/{name}'.sub('{name}', name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#get_erratum') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::Erratum'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns information about the specified module stream in a software source.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [String] module_name The name of the module.
    # @param [String] stream_name The name of the stream of the containing module.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::ModuleStream ModuleStream}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/get_module_stream.rb.html) to see an example of how to use get_module_stream API.
    def get_module_stream(software_source_id, module_name, stream_name, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#get_module_stream.' if logger

      raise "Missing the required parameter 'software_source_id' when calling get_module_stream." if software_source_id.nil?
      raise "Missing the required parameter 'module_name' when calling get_module_stream." if module_name.nil?
      raise "Missing the required parameter 'stream_name' when calling get_module_stream." if stream_name.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)
      raise "Parameter value for 'module_name' must not be blank" if OCI::Internal::Util.blank_string?(module_name)

      path = '/softwareSources/{softwareSourceId}/moduleStreams/{moduleName}'.sub('{softwareSourceId}', software_source_id.to_s).sub('{moduleName}', module_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:streamName] = stream_name

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#get_module_stream') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::ModuleStream'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns information about the specified module stream profile in a software source.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [String] profile_name The name of the module stream profile.
    # @param [String] module_name The name of a module.
    #
    # @param [String] stream_name The name of the stream of the containing module.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::ModuleStreamProfile ModuleStreamProfile}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/get_module_stream_profile.rb.html) to see an example of how to use get_module_stream_profile API.
    def get_module_stream_profile(software_source_id, profile_name, module_name, stream_name, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#get_module_stream_profile.' if logger

      raise "Missing the required parameter 'software_source_id' when calling get_module_stream_profile." if software_source_id.nil?
      raise "Missing the required parameter 'profile_name' when calling get_module_stream_profile." if profile_name.nil?
      raise "Missing the required parameter 'module_name' when calling get_module_stream_profile." if module_name.nil?
      raise "Missing the required parameter 'stream_name' when calling get_module_stream_profile." if stream_name.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)
      raise "Parameter value for 'profile_name' must not be blank" if OCI::Internal::Util.blank_string?(profile_name)

      path = '/softwareSources/{softwareSourceId}/moduleStreamProfiles/{profileName}'.sub('{softwareSourceId}', software_source_id.to_s).sub('{profileName}', profile_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:moduleName] = module_name
      query_params[:streamName] = stream_name

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#get_module_stream_profile') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::ModuleStreamProfile'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns information about the specified package group from a software source.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [String] package_group_id The unique package group identifier.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::PackageGroup PackageGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/get_package_group.rb.html) to see an example of how to use get_package_group API.
    def get_package_group(software_source_id, package_group_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#get_package_group.' if logger

      raise "Missing the required parameter 'software_source_id' when calling get_package_group." if software_source_id.nil?
      raise "Missing the required parameter 'package_group_id' when calling get_package_group." if package_group_id.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)
      raise "Parameter value for 'package_group_id' must not be blank" if OCI::Internal::Util.blank_string?(package_group_id)

      path = '/softwareSources/{softwareSourceId}/packageGroups/{packageGroupId}'.sub('{softwareSourceId}', software_source_id.to_s).sub('{packageGroupId}', package_group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#get_package_group') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::PackageGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns information about the specified software package.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [String] software_package_name The name of the software package.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwarePackage SoftwarePackage}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/get_software_package.rb.html) to see an example of how to use get_software_package API.
    def get_software_package(software_source_id, software_package_name, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#get_software_package.' if logger

      raise "Missing the required parameter 'software_source_id' when calling get_software_package." if software_source_id.nil?
      raise "Missing the required parameter 'software_package_name' when calling get_software_package." if software_package_name.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)
      raise "Parameter value for 'software_package_name' must not be blank" if OCI::Internal::Util.blank_string?(software_package_name)

      path = '/softwareSources/{softwareSourceId}/softwarePackages/{softwarePackageName}'.sub('{softwareSourceId}', software_source_id.to_s).sub('{softwarePackageName}', software_package_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#get_software_package') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwarePackage'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns information about the specified software package based on its fully qualified name.
    # @param [String] software_package_name The name of the software package.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwarePackage SoftwarePackage}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/get_software_package_by_name.rb.html) to see an example of how to use get_software_package_by_name API.
    def get_software_package_by_name(software_package_name, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#get_software_package_by_name.' if logger

      raise "Missing the required parameter 'software_package_name' when calling get_software_package_by_name." if software_package_name.nil?
      raise "Parameter value for 'software_package_name' must not be blank" if OCI::Internal::Util.blank_string?(software_package_name)

      path = '/softwarePackages/{softwarePackageName}'.sub('{softwarePackageName}', software_package_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#get_software_package_by_name') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwarePackage'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns information about the specified software source.
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwareSource SoftwareSource}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/get_software_source.rb.html) to see an example of how to use get_software_source API.
    def get_software_source(software_source_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#get_software_source.' if logger

      raise "Missing the required parameter 'software_source_id' when calling get_software_source." if software_source_id.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#get_software_source') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwareSource'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists software packages available through the OS Management Hub service.  Filter the list against a variety of criteria
    # including but not limited to its name.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :display_name A filter to return resources that match the given user-friendly name.
    # @option opts [String] :display_name_contains A filter to return resources that may partially match the given display name.
    # @option opts [String] :version A filter to return software packages that match the given version.
    # @option opts [String] :architecture A filter to return software packages that match the given architecture.
    # @option opts [BOOLEAN] :is_latest Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
    # @option opts [String] :os_family A filter to return only resources that match the given operating system family.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort packages by. Only one sort order may be provided. Default order for displayName is ascending. If no value is specified displayName is default.
    #    (default to displayName)
    #   Allowed values are: displayName
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwarePackageCollection SoftwarePackageCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_all_software_packages.rb.html) to see an example of how to use list_all_software_packages API.
    def list_all_software_packages(opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_all_software_packages.' if logger


      if opts[:architecture] && !OCI::OsManagementHub::Models::SOFTWARE_PACKAGE_ARCHITECTURE_ENUM.include?(opts[:architecture])
        raise 'Invalid value for "architecture", must be one of the values in OCI::OsManagementHub::Models::SOFTWARE_PACKAGE_ARCHITECTURE_ENUM.'
      end

      if opts[:os_family] && !OCI::OsManagementHub::Models::OS_FAMILY_ENUM.include?(opts[:os_family])
        raise 'Invalid value for "os_family", must be one of the values in OCI::OsManagementHub::Models::OS_FAMILY_ENUM.'
      end

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of displayName.'
      end

      path = '/softwarePackages'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:displayNameContains] = opts[:display_name_contains] if opts[:display_name_contains]
      query_params[:version] = opts[:version] if opts[:version]
      query_params[:architecture] = opts[:architecture] if opts[:architecture]
      query_params[:isLatest] = opts[:is_latest] if !opts[:is_latest].nil?
      query_params[:osFamily] = opts[:os_family] if opts[:os_family]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_all_software_packages') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwarePackageCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists entitlements in the specified tenancy [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of criteria including but
    # not limited to its Customer Support Identifier (CSI), and vendor name.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :csi A filter to return entitlements that match the given CSI.
    # @option opts [String] :vendor_name A filter to return only resources that match the given vendor name.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort entitlements by. Only one sort order may be provided.
    #    (default to vendorName)
    #   Allowed values are: csi, vendorName
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::EntitlementCollection EntitlementCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_entitlements.rb.html) to see an example of how to use list_entitlements API.
    def list_entitlements(compartment_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_entitlements.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_entitlements." if compartment_id.nil?

      if opts[:vendor_name] && !OCI::OsManagementHub::Models::VENDOR_NAME_ENUM.include?(opts[:vendor_name])
        raise 'Invalid value for "vendor_name", must be one of the values in OCI::OsManagementHub::Models::VENDOR_NAME_ENUM.'
      end

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[csi vendorName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of csi, vendorName.'
      end

      path = '/entitlements'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:csi] = opts[:csi] if opts[:csi]
      query_params[:vendorName] = opts[:vendor_name] if opts[:vendor_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_entitlements') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::EntitlementCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all of the currently available errata. Filter the list against a variety of criteria including but not
    # limited to its name, classification type, advisory severity, and OS family.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Array<String>] :name The assigned erratum name. It's unique and not changeable.
    #
    #   Example: `ELSA-2020-5804`
    #
    # @option opts [String] :name_contains A filter to return resources that may partially match the erratum name given.
    # @option opts [Array<String>] :classification_type A filter to return only packages that match the given update classification type.
    #   Allowed values are: SECURITY, BUGFIX, ENHANCEMENT, OTHER
    # @option opts [Array<String>] :advisory_type A filter to return only errata that match the given advisory types.
    #   Allowed values are: SECURITY, BUGFIX, ENHANCEMENT
    # @option opts [String] :os_family A filter to return only resources that match the given operating system family.
    # @option opts [Array<String>] :advisory_severity The advisory severity.
    #
    #   Allowed values are: LOW, MODERATE, IMPORTANT, CRITICAL
    # @option opts [DateTime] :time_issue_date_start The issue date after which to list all errata, in ISO 8601 format
    #
    #   Example: 2017-07-14T02:40:00.000Z
    #
    # @option opts [DateTime] :time_issue_date_end The issue date before which to list all errata, in ISO 8601 format
    #
    #   Example: 2017-07-14T02:40:00.000Z
    #
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort errata by. Only one sort order may be provided. Default order for timeIssued is descending. Default order for name is ascending. If no value is specified timeIssued is default.
    #    (default to timeIssued)
    #   Allowed values are: timeIssued, name
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::ErratumCollection ErratumCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_errata.rb.html) to see an example of how to use list_errata API.
    def list_errata(compartment_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_errata.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_errata." if compartment_id.nil?


      classification_type_allowable_values = %w[SECURITY BUGFIX ENHANCEMENT OTHER]
      if opts[:classification_type] && !opts[:classification_type].empty?
        opts[:classification_type].each do |val_to_check|
          unless classification_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "classification_type", must be one of SECURITY, BUGFIX, ENHANCEMENT, OTHER.'
          end
        end
      end


      advisory_type_allowable_values = %w[SECURITY BUGFIX ENHANCEMENT]
      if opts[:advisory_type] && !opts[:advisory_type].empty?
        opts[:advisory_type].each do |val_to_check|
          unless advisory_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "advisory_type", must be one of SECURITY, BUGFIX, ENHANCEMENT.'
          end
        end
      end

      if opts[:os_family] && !OCI::OsManagementHub::Models::OS_FAMILY_ENUM.include?(opts[:os_family])
        raise 'Invalid value for "os_family", must be one of the values in OCI::OsManagementHub::Models::OS_FAMILY_ENUM.'
      end


      advisory_severity_allowable_values = %w[LOW MODERATE IMPORTANT CRITICAL]
      if opts[:advisory_severity] && !opts[:advisory_severity].empty?
        opts[:advisory_severity].each do |val_to_check|
          unless advisory_severity_allowable_values.include?(val_to_check)
            raise 'Invalid value for "advisory_severity", must be one of LOW, MODERATE, IMPORTANT, CRITICAL.'
          end
        end
      end

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeIssued name].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeIssued, name.'
      end

      path = '/errata'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:name] = OCI::ApiClient.build_collection_params(opts[:name], :multi) if opts[:name] && !opts[:name].empty?
      query_params[:nameContains] = opts[:name_contains] if opts[:name_contains]
      query_params[:classificationType] = OCI::ApiClient.build_collection_params(opts[:classification_type], :multi) if opts[:classification_type] && !opts[:classification_type].empty?
      query_params[:advisoryType] = OCI::ApiClient.build_collection_params(opts[:advisory_type], :multi) if opts[:advisory_type] && !opts[:advisory_type].empty?
      query_params[:osFamily] = opts[:os_family] if opts[:os_family]
      query_params[:advisorySeverity] = OCI::ApiClient.build_collection_params(opts[:advisory_severity], :multi) if opts[:advisory_severity] && !opts[:advisory_severity].empty?
      query_params[:timeIssueDateStart] = opts[:time_issue_date_start] if opts[:time_issue_date_start]
      query_params[:timeIssueDateEnd] = opts[:time_issue_date_end] if opts[:time_issue_date_end]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_errata') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::ErratumCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists module stream profiles from the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a variety of
    # criteria including but not limited to its module name, stream name, and profile name.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :module_name The name of a module. This parameter is required if a
    #   streamName is specified.
    #
    # @option opts [String] :stream_name The name of the module stream. This parameter is required if a profile name is specified.
    # @option opts [String] :name The name of the entity to be queried.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for moduleName is ascending.
    #    (default to moduleName)
    #   Allowed values are: moduleName
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::ModuleStreamProfileCollection ModuleStreamProfileCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_module_stream_profiles.rb.html) to see an example of how to use list_module_stream_profiles API.
    def list_module_stream_profiles(software_source_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_module_stream_profiles.' if logger

      raise "Missing the required parameter 'software_source_id' when calling list_module_stream_profiles." if software_source_id.nil?

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[moduleName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of moduleName.'
      end
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}/moduleStreamProfiles'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:moduleName] = opts[:module_name] if opts[:module_name]
      query_params[:streamName] = opts[:stream_name] if opts[:stream_name]
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_module_stream_profiles') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::ModuleStreamProfileCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists module streams from the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    # Filter the list against a variety of criteria including but not limited to its module name and (stream) name.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :module_name The name of a module. This parameter is required if a
    #   streamName is specified.
    #
    # @option opts [String] :name The name of the entity to be queried.
    # @option opts [BOOLEAN] :is_latest Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for moduleName is ascending.
    #    (default to moduleName)
    #   Allowed values are: moduleName
    # @option opts [String] :module_name_contains A filter to return resources that may partially match the module name given.
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::ModuleStreamCollection ModuleStreamCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_module_streams.rb.html) to see an example of how to use list_module_streams API.
    def list_module_streams(software_source_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_module_streams.' if logger

      raise "Missing the required parameter 'software_source_id' when calling list_module_streams." if software_source_id.nil?

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[moduleName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of moduleName.'
      end
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}/moduleStreams'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:moduleName] = opts[:module_name] if opts[:module_name]
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:isLatest] = opts[:is_latest] if !opts[:is_latest].nil?
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:moduleNameContains] = opts[:module_name_contains] if opts[:module_name_contains]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_module_streams') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::ModuleStreamCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists package groups that are associated with the specified software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a
    # variety of criteria including but not limited to its name, and package group type.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
    # @option opts [String] :name The name of the entity to be queried.
    # @option opts [String] :name_contains A filter to return resources that may partially match the name given.
    # @option opts [Array<OCI::OsManagementHub::Models::OCI::OsManagementHub::Models::PackageGroupGroupType>] :group_type A filter to return only package groups of the specified type.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::PackageGroupCollection PackageGroupCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_package_groups.rb.html) to see an example of how to use list_package_groups API.
    def list_package_groups(software_source_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_package_groups.' if logger

      raise "Missing the required parameter 'software_source_id' when calling list_package_groups." if software_source_id.nil?

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}/packageGroups'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:nameContains] = opts[:name_contains] if opts[:name_contains]
      query_params[:groupType] = OCI::ApiClient.build_collection_params(opts[:group_type], :multi) if opts[:group_type] && !opts[:group_type].empty?
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_package_groups') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::PackageGroupCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the software sources in the tenancy that contain the software package. Filter the list against a
    # variety of criteria including but not limited to its name, type, architecture, and OS family.
    #
    # @param [String] software_package_name The name of the software package.
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Array<String>] :software_source_type The type of the software source.
    #   Allowed values are: VENDOR, CUSTOM, VERSIONED
    # @option opts [Array<String>] :os_family A filter to return only resources that match the given operating system family.
    #   Allowed values are: ORACLE_LINUX_9, ORACLE_LINUX_8, ORACLE_LINUX_7, ORACLE_LINUX_6, WINDOWS_SERVER_2016, WINDOWS_SERVER_2019, WINDOWS_SERVER_2022, ALL
    # @option opts [Array<String>] :arch_type A filter to return only instances whose architecture type matches the given architecture.
    #   Allowed values are: X86_64, AARCH64, I686, NOARCH, SRC
    # @option opts [Array<String>] :availability The availabilities of the software source in a non-OCI environment for a tenancy.
    #   Allowed values are: AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE
    # @option opts [Array<String>] :availability_at_oci The availabilities of the software source in an OCI environment for a tenancy.
    #   Allowed values are: AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE
    # @option opts [Array<String>] :availability_anywhere The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
    #   Allowed values are: AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE
    # @option opts [String] :display_name A filter to return resources that match the given user-friendly name.
    # @option opts [String] :display_name_contains A filter to return resources that may partially match the given display name.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [Array<OCI::OsManagementHub::Models::OCI::OsManagementHub::Models::SoftwareSourceLifecycleState>] :lifecycle_state A filter to return only software sources whose state matches the given state.
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwareSourceCollection SoftwareSourceCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_software_package_software_sources.rb.html) to see an example of how to use list_software_package_software_sources API.
    def list_software_package_software_sources(software_package_name, compartment_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_software_package_software_sources.' if logger

      raise "Missing the required parameter 'software_package_name' when calling list_software_package_software_sources." if software_package_name.nil?
      raise "Missing the required parameter 'compartment_id' when calling list_software_package_software_sources." if compartment_id.nil?


      software_source_type_allowable_values = %w[VENDOR CUSTOM VERSIONED]
      if opts[:software_source_type] && !opts[:software_source_type].empty?
        opts[:software_source_type].each do |val_to_check|
          unless software_source_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "software_source_type", must be one of VENDOR, CUSTOM, VERSIONED.'
          end
        end
      end


      os_family_allowable_values = %w[ORACLE_LINUX_9 ORACLE_LINUX_8 ORACLE_LINUX_7 ORACLE_LINUX_6 WINDOWS_SERVER_2016 WINDOWS_SERVER_2019 WINDOWS_SERVER_2022 ALL]
      if opts[:os_family] && !opts[:os_family].empty?
        opts[:os_family].each do |val_to_check|
          unless os_family_allowable_values.include?(val_to_check)
            raise 'Invalid value for "os_family", must be one of ORACLE_LINUX_9, ORACLE_LINUX_8, ORACLE_LINUX_7, ORACLE_LINUX_6, WINDOWS_SERVER_2016, WINDOWS_SERVER_2019, WINDOWS_SERVER_2022, ALL.'
          end
        end
      end


      arch_type_allowable_values = %w[X86_64 AARCH64 I686 NOARCH SRC]
      if opts[:arch_type] && !opts[:arch_type].empty?
        opts[:arch_type].each do |val_to_check|
          unless arch_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "arch_type", must be one of X86_64, AARCH64, I686, NOARCH, SRC.'
          end
        end
      end


      availability_allowable_values = %w[AVAILABLE SELECTED RESTRICTED UNAVAILABLE]
      if opts[:availability] && !opts[:availability].empty?
        opts[:availability].each do |val_to_check|
          unless availability_allowable_values.include?(val_to_check)
            raise 'Invalid value for "availability", must be one of AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE.'
          end
        end
      end


      availability_at_oci_allowable_values = %w[AVAILABLE SELECTED RESTRICTED UNAVAILABLE]
      if opts[:availability_at_oci] && !opts[:availability_at_oci].empty?
        opts[:availability_at_oci].each do |val_to_check|
          unless availability_at_oci_allowable_values.include?(val_to_check)
            raise 'Invalid value for "availability_at_oci", must be one of AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE.'
          end
        end
      end


      availability_anywhere_allowable_values = %w[AVAILABLE SELECTED RESTRICTED UNAVAILABLE]
      if opts[:availability_anywhere] && !opts[:availability_anywhere].empty?
        opts[:availability_anywhere].each do |val_to_check|
          unless availability_anywhere_allowable_values.include?(val_to_check)
            raise 'Invalid value for "availability_anywhere", must be one of AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE.'
          end
        end
      end

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'software_package_name' must not be blank" if OCI::Internal::Util.blank_string?(software_package_name)

      path = '/softwarePackages/{softwarePackageName}/softwareSources'.sub('{softwarePackageName}', software_package_name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:softwareSourceType] = OCI::ApiClient.build_collection_params(opts[:software_source_type], :multi) if opts[:software_source_type] && !opts[:software_source_type].empty?
      query_params[:osFamily] = OCI::ApiClient.build_collection_params(opts[:os_family], :multi) if opts[:os_family] && !opts[:os_family].empty?
      query_params[:archType] = OCI::ApiClient.build_collection_params(opts[:arch_type], :multi) if opts[:arch_type] && !opts[:arch_type].empty?
      query_params[:availability] = OCI::ApiClient.build_collection_params(opts[:availability], :multi) if opts[:availability] && !opts[:availability].empty?
      query_params[:availabilityAtOci] = OCI::ApiClient.build_collection_params(opts[:availability_at_oci], :multi) if opts[:availability_at_oci] && !opts[:availability_at_oci].empty?
      query_params[:availabilityAnywhere] = OCI::ApiClient.build_collection_params(opts[:availability_anywhere], :multi) if opts[:availability_anywhere] && !opts[:availability_anywhere].empty?
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:displayNameContains] = opts[:display_name_contains] if opts[:display_name_contains]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:lifecycleState] = OCI::ApiClient.build_collection_params(opts[:lifecycle_state], :multi) if opts[:lifecycle_state] && !opts[:lifecycle_state].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_software_package_software_sources') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwareSourceCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists software packages in the specified software source.  Filter the list against a variety of criteria
    # including but not limited to its name.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :display_name A filter to return resources that match the given user-friendly name.
    # @option opts [String] :display_name_contains A filter to return resources that may partially match the given display name.
    # @option opts [BOOLEAN] :is_latest Indicates whether to list only the latest versions of packages, module streams, and stream profiles.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwarePackageCollection SoftwarePackageCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_software_packages.rb.html) to see an example of how to use list_software_packages API.
    def list_software_packages(software_source_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_software_packages.' if logger

      raise "Missing the required parameter 'software_source_id' when calling list_software_packages." if software_source_id.nil?

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}/softwarePackages'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:displayNameContains] = opts[:display_name_contains] if opts[:display_name_contains]
      query_params[:isLatest] = opts[:is_latest] if !opts[:is_latest].nil?
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_software_packages') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwarePackageCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists available software source vendors. Filter the list against a variety of criteria including but not limited
    # to its name.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment. This parameter is required and returns only resources contained within the specified compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort software source vendors by. Only one sort order may be provided. Default order for name is ascending.
    #    (default to name)
    #   Allowed values are: name
    # @option opts [String] :name The name of the entity to be queried.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwareSourceVendorCollection SoftwareSourceVendorCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_software_source_vendors.rb.html) to see an example of how to use list_software_source_vendors API.
    def list_software_source_vendors(compartment_id, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_software_source_vendors.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_software_source_vendors." if compartment_id.nil?

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[name].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of name.'
      end

      path = '/softwareSourceVendors'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:name] = opts[:name] if opts[:name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_software_source_vendors') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwareSourceVendorCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists software sources that match the specified tenancy or software source [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Filter the list against a
    # variety of criteria including but not limited to its name, status, architecture, and OS family.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The OCID of the compartment that contains the resources to list. This filter returns only resources contained within the specified compartment.
    # @option opts [String] :software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the software source.
    # @option opts [Array<String>] :software_source_type The type of the software source.
    #   Allowed values are: VENDOR, CUSTOM, VERSIONED
    # @option opts [String] :vendor_name A filter to return only resources that match the given vendor name.
    # @option opts [Array<String>] :os_family A filter to return only resources that match the given operating system family.
    #   Allowed values are: ORACLE_LINUX_9, ORACLE_LINUX_8, ORACLE_LINUX_7, ORACLE_LINUX_6, WINDOWS_SERVER_2016, WINDOWS_SERVER_2019, WINDOWS_SERVER_2022, ALL
    # @option opts [Array<String>] :arch_type A filter to return only instances whose architecture type matches the given architecture.
    #   Allowed values are: X86_64, AARCH64, I686, NOARCH, SRC
    # @option opts [Array<String>] :availability The availabilities of the software source in a non-OCI environment for a tenancy.
    #   Allowed values are: AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE
    # @option opts [Array<String>] :availability_at_oci The availabilities of the software source in an OCI environment for a tenancy.
    #   Allowed values are: AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE
    # @option opts [Array<String>] :availability_anywhere The availabilities of the software source. Use this query parameter to filter across availabilities in different environments.
    #   Allowed values are: AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE
    # @option opts [BOOLEAN] :is_mandatory_for_autonomous_linux Indicates whether the software source is mandatory for the Autonomous Linux service.
    # @option opts [String] :display_name A filter to return resources that match the given user-friendly name.
    # @option opts [String] :display_name_contains A filter to return resources that may partially match the given display name.
    # @option opts [Array<String>] :display_name_not_equal_to A multi filter to return resources that do not contains the given display names.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [Array<OCI::OsManagementHub::Models::OCI::OsManagementHub::Models::SoftwareSourceLifecycleState>] :lifecycle_state A filter to return only software sources whose state matches the given state.
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwareSourceCollection SoftwareSourceCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/list_software_sources.rb.html) to see an example of how to use list_software_sources API.
    def list_software_sources(opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#list_software_sources.' if logger



      software_source_type_allowable_values = %w[VENDOR CUSTOM VERSIONED]
      if opts[:software_source_type] && !opts[:software_source_type].empty?
        opts[:software_source_type].each do |val_to_check|
          unless software_source_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "software_source_type", must be one of VENDOR, CUSTOM, VERSIONED.'
          end
        end
      end

      if opts[:vendor_name] && !OCI::OsManagementHub::Models::VENDOR_NAME_ENUM.include?(opts[:vendor_name])
        raise 'Invalid value for "vendor_name", must be one of the values in OCI::OsManagementHub::Models::VENDOR_NAME_ENUM.'
      end


      os_family_allowable_values = %w[ORACLE_LINUX_9 ORACLE_LINUX_8 ORACLE_LINUX_7 ORACLE_LINUX_6 WINDOWS_SERVER_2016 WINDOWS_SERVER_2019 WINDOWS_SERVER_2022 ALL]
      if opts[:os_family] && !opts[:os_family].empty?
        opts[:os_family].each do |val_to_check|
          unless os_family_allowable_values.include?(val_to_check)
            raise 'Invalid value for "os_family", must be one of ORACLE_LINUX_9, ORACLE_LINUX_8, ORACLE_LINUX_7, ORACLE_LINUX_6, WINDOWS_SERVER_2016, WINDOWS_SERVER_2019, WINDOWS_SERVER_2022, ALL.'
          end
        end
      end


      arch_type_allowable_values = %w[X86_64 AARCH64 I686 NOARCH SRC]
      if opts[:arch_type] && !opts[:arch_type].empty?
        opts[:arch_type].each do |val_to_check|
          unless arch_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "arch_type", must be one of X86_64, AARCH64, I686, NOARCH, SRC.'
          end
        end
      end


      availability_allowable_values = %w[AVAILABLE SELECTED RESTRICTED UNAVAILABLE]
      if opts[:availability] && !opts[:availability].empty?
        opts[:availability].each do |val_to_check|
          unless availability_allowable_values.include?(val_to_check)
            raise 'Invalid value for "availability", must be one of AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE.'
          end
        end
      end


      availability_at_oci_allowable_values = %w[AVAILABLE SELECTED RESTRICTED UNAVAILABLE]
      if opts[:availability_at_oci] && !opts[:availability_at_oci].empty?
        opts[:availability_at_oci].each do |val_to_check|
          unless availability_at_oci_allowable_values.include?(val_to_check)
            raise 'Invalid value for "availability_at_oci", must be one of AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE.'
          end
        end
      end


      availability_anywhere_allowable_values = %w[AVAILABLE SELECTED RESTRICTED UNAVAILABLE]
      if opts[:availability_anywhere] && !opts[:availability_anywhere].empty?
        opts[:availability_anywhere].each do |val_to_check|
          unless availability_anywhere_allowable_values.include?(val_to_check)
            raise 'Invalid value for "availability_anywhere", must be one of AVAILABLE, SELECTED, RESTRICTED, UNAVAILABLE.'
          end
        end
      end

      if opts[:sort_order] && !OCI::OsManagementHub::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::OsManagementHub::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/softwareSources'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:softwareSourceId] = opts[:software_source_id] if opts[:software_source_id]
      query_params[:softwareSourceType] = OCI::ApiClient.build_collection_params(opts[:software_source_type], :multi) if opts[:software_source_type] && !opts[:software_source_type].empty?
      query_params[:vendorName] = opts[:vendor_name] if opts[:vendor_name]
      query_params[:osFamily] = OCI::ApiClient.build_collection_params(opts[:os_family], :multi) if opts[:os_family] && !opts[:os_family].empty?
      query_params[:archType] = OCI::ApiClient.build_collection_params(opts[:arch_type], :multi) if opts[:arch_type] && !opts[:arch_type].empty?
      query_params[:availability] = OCI::ApiClient.build_collection_params(opts[:availability], :multi) if opts[:availability] && !opts[:availability].empty?
      query_params[:availabilityAtOci] = OCI::ApiClient.build_collection_params(opts[:availability_at_oci], :multi) if opts[:availability_at_oci] && !opts[:availability_at_oci].empty?
      query_params[:availabilityAnywhere] = OCI::ApiClient.build_collection_params(opts[:availability_anywhere], :multi) if opts[:availability_anywhere] && !opts[:availability_anywhere].empty?
      query_params[:isMandatoryForAutonomousLinux] = opts[:is_mandatory_for_autonomous_linux] if !opts[:is_mandatory_for_autonomous_linux].nil?
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:displayNameContains] = opts[:display_name_contains] if opts[:display_name_contains]
      query_params[:displayNameNotEqualTo] = OCI::ApiClient.build_collection_params(opts[:display_name_not_equal_to], :multi) if opts[:display_name_not_equal_to] && !opts[:display_name_not_equal_to].empty?
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:lifecycleState] = OCI::ApiClient.build_collection_params(opts[:lifecycle_state], :multi) if opts[:lifecycle_state] && !opts[:lifecycle_state].empty?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#list_software_sources') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwareSourceCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of module streams from the specified software sources. Filter the list against a variety of
    # criteria including the module name.
    #
    # @param [OCI::OsManagementHub::Models::SearchSoftwareSourceModuleStreamsDetails] search_software_source_module_streams_details Request body that takes a list of software sources and any search filters.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::ModuleStreamCollection ModuleStreamCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/search_software_source_module_streams.rb.html) to see an example of how to use search_software_source_module_streams API.
    def search_software_source_module_streams(search_software_source_module_streams_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#search_software_source_module_streams.' if logger

      raise "Missing the required parameter 'search_software_source_module_streams_details' when calling search_software_source_module_streams." if search_software_source_module_streams_details.nil?

      path = '/softwareSourceModuleStreams/actions/search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(search_software_source_module_streams_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#search_software_source_module_streams') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::ModuleStreamCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists modules from a list of software sources. Filter the list against a variety of
    # criteria including the module name.
    #
    # @param [OCI::OsManagementHub::Models::SearchSoftwareSourceModulesDetails] search_software_source_modules_details Request body that takes a list of software sources and any search filters.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::ModuleCollection ModuleCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/search_software_source_modules.rb.html) to see an example of how to use search_software_source_modules API.
    def search_software_source_modules(search_software_source_modules_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#search_software_source_modules.' if logger

      raise "Missing the required parameter 'search_software_source_modules_details' when calling search_software_source_modules." if search_software_source_modules_details.nil?

      path = '/softwareSourceModules/actions/search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(search_software_source_modules_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#search_software_source_modules') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::ModuleCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Searches the package groups from the specified list of software sources. Filter the list against a variety of criteria
    # including but not limited to its name, and group type.
    #
    # @param [OCI::OsManagementHub::Models::SearchSoftwareSourcePackageGroupsDetails] search_software_source_package_groups_details Request body that takes in a list of software sources and other search parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [Integer] :limit For list pagination. The maximum number of results per page, or items to return in a paginated \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `50`
    #    (default to 10)
    # @option opts [String] :page For list pagination. The value of the `opc-next-page` response header from the previous \"List\" call.
    #   For important details about how pagination works, see [List Pagination](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/usingapi.htm#nine).
    #
    #   Example: `3`
    #
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::PackageGroupCollection PackageGroupCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/search_software_source_package_groups.rb.html) to see an example of how to use search_software_source_package_groups API.
    def search_software_source_package_groups(search_software_source_package_groups_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#search_software_source_package_groups.' if logger

      raise "Missing the required parameter 'search_software_source_package_groups_details' when calling search_software_source_package_groups." if search_software_source_package_groups_details.nil?

      path = '/softwareSourcePackageGroups/actions/search'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(search_software_source_package_groups_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#search_software_source_package_groups') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::PackageGroupCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the specified software source's details, including but not limited to name, description, and tags.
    #
    # @param [String] software_source_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @param [OCI::OsManagementHub::Models::UpdateSoftwareSourceDetails] update_software_source_details The information to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::OsManagementHub::Models::SoftwareSource SoftwareSource}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/osmanagementhub/update_software_source.rb.html) to see an example of how to use update_software_source API.
    def update_software_source(software_source_id, update_software_source_details, opts = {})
      logger.debug 'Calling operation SoftwareSourceClient#update_software_source.' if logger

      raise "Missing the required parameter 'software_source_id' when calling update_software_source." if software_source_id.nil?
      raise "Missing the required parameter 'update_software_source_details' when calling update_software_source." if update_software_source_details.nil?
      raise "Parameter value for 'software_source_id' must not be blank" if OCI::Internal::Util.blank_string?(software_source_id)

      path = '/softwareSources/{softwareSourceId}'.sub('{softwareSourceId}', software_source_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_software_source_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'SoftwareSourceClient#update_software_source') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::OsManagementHub::Models::SoftwareSource'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
