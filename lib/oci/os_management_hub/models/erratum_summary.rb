# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Important changes for software. This can include security advisories, bug fixes, or enhancements.
  class OsManagementHub::Models::ErratumSummary
    CLASSIFICATION_TYPE_ENUM = [
      CLASSIFICATION_TYPE_SECURITY = 'SECURITY'.freeze,
      CLASSIFICATION_TYPE_BUGFIX = 'BUGFIX'.freeze,
      CLASSIFICATION_TYPE_ENHANCEMENT = 'ENHANCEMENT'.freeze,
      CLASSIFICATION_TYPE_OTHER = 'OTHER'.freeze,
      CLASSIFICATION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ADVISORY_SEVERITY_ENUM = [
      ADVISORY_SEVERITY_LOW = 'LOW'.freeze,
      ADVISORY_SEVERITY_MODERATE = 'MODERATE'.freeze,
      ADVISORY_SEVERITY_IMPORTANT = 'IMPORTANT'.freeze,
      ADVISORY_SEVERITY_CRITICAL = 'CRITICAL'.freeze,
      ADVISORY_SEVERITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Advisory name.
    # @return [String]
    attr_accessor :name

    # Summary description of the erratum.
    # @return [String]
    attr_accessor :synopsis

    # Date the erratum was issued, as described
    # in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
    #
    # @return [DateTime]
    attr_accessor :time_issued

    # Most recent date the erratum was updated, as described
    # in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # Type of the erratum.
    # @return [String]
    attr_reader :classification_type

    # List of CVEs applicable to this erratum.
    # @return [Array<String>]
    attr_accessor :related_cves

    # List of affected OS families.
    # @return [Array<OCI::OsManagementHub::Models::OsFamily>]
    attr_accessor :os_families

    # The severity advisory. Only valid for security type advisories.
    # @return [String]
    attr_reader :advisory_severity

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'synopsis': :'synopsis',
        'time_issued': :'timeIssued',
        'time_updated': :'timeUpdated',
        'classification_type': :'classificationType',
        'related_cves': :'relatedCves',
        'os_families': :'osFamilies',
        'advisory_severity': :'advisorySeverity'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'synopsis': :'String',
        'time_issued': :'DateTime',
        'time_updated': :'DateTime',
        'classification_type': :'String',
        'related_cves': :'Array<String>',
        'os_families': :'Array<OCI::OsManagementHub::Models::OsFamily>',
        'advisory_severity': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :synopsis The value to assign to the {#synopsis} property
    # @option attributes [DateTime] :time_issued The value to assign to the {#time_issued} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :classification_type The value to assign to the {#classification_type} property
    # @option attributes [Array<String>] :related_cves The value to assign to the {#related_cves} property
    # @option attributes [Array<OCI::OsManagementHub::Models::OsFamily>] :os_families The value to assign to the {#os_families} property
    # @option attributes [String] :advisory_severity The value to assign to the {#advisory_severity} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.synopsis = attributes[:'synopsis'] if attributes[:'synopsis']

      self.time_issued = attributes[:'timeIssued'] if attributes[:'timeIssued']

      raise 'You cannot provide both :timeIssued and :time_issued' if attributes.key?(:'timeIssued') && attributes.key?(:'time_issued')

      self.time_issued = attributes[:'time_issued'] if attributes[:'time_issued']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.classification_type = attributes[:'classificationType'] if attributes[:'classificationType']

      raise 'You cannot provide both :classificationType and :classification_type' if attributes.key?(:'classificationType') && attributes.key?(:'classification_type')

      self.classification_type = attributes[:'classification_type'] if attributes[:'classification_type']

      self.related_cves = attributes[:'relatedCves'] if attributes[:'relatedCves']

      raise 'You cannot provide both :relatedCves and :related_cves' if attributes.key?(:'relatedCves') && attributes.key?(:'related_cves')

      self.related_cves = attributes[:'related_cves'] if attributes[:'related_cves']

      self.os_families = attributes[:'osFamilies'] if attributes[:'osFamilies']

      raise 'You cannot provide both :osFamilies and :os_families' if attributes.key?(:'osFamilies') && attributes.key?(:'os_families')

      self.os_families = attributes[:'os_families'] if attributes[:'os_families']

      self.advisory_severity = attributes[:'advisorySeverity'] if attributes[:'advisorySeverity']

      raise 'You cannot provide both :advisorySeverity and :advisory_severity' if attributes.key?(:'advisorySeverity') && attributes.key?(:'advisory_severity')

      self.advisory_severity = attributes[:'advisory_severity'] if attributes[:'advisory_severity']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] classification_type Object to be assigned
    def classification_type=(classification_type)
      # rubocop:disable Style/ConditionalAssignment
      if classification_type && !CLASSIFICATION_TYPE_ENUM.include?(classification_type)
        OCI.logger.debug("Unknown value for 'classification_type' [" + classification_type + "]. Mapping to 'CLASSIFICATION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @classification_type = CLASSIFICATION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @classification_type = classification_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] advisory_severity Object to be assigned
    def advisory_severity=(advisory_severity)
      # rubocop:disable Style/ConditionalAssignment
      if advisory_severity && !ADVISORY_SEVERITY_ENUM.include?(advisory_severity)
        OCI.logger.debug("Unknown value for 'advisory_severity' [" + advisory_severity + "]. Mapping to 'ADVISORY_SEVERITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @advisory_severity = ADVISORY_SEVERITY_UNKNOWN_ENUM_VALUE
      else
        @advisory_severity = advisory_severity
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        synopsis == other.synopsis &&
        time_issued == other.time_issued &&
        time_updated == other.time_updated &&
        classification_type == other.classification_type &&
        related_cves == other.related_cves &&
        os_families == other.os_families &&
        advisory_severity == other.advisory_severity
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, synopsis, time_issued, time_updated, classification_type, related_cves, os_families, advisory_severity].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
