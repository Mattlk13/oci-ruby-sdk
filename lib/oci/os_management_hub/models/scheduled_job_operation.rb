# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Defines an operation that is performed by a scheduled job.
  class OsManagementHub::Models::ScheduledJobOperation
    OPERATION_TYPE_ENUM = [
      OPERATION_TYPE_INSTALL_PACKAGES = 'INSTALL_PACKAGES'.freeze,
      OPERATION_TYPE_UPDATE_PACKAGES = 'UPDATE_PACKAGES'.freeze,
      OPERATION_TYPE_REMOVE_PACKAGES = 'REMOVE_PACKAGES'.freeze,
      OPERATION_TYPE_UPDATE_ALL = 'UPDATE_ALL'.freeze,
      OPERATION_TYPE_UPDATE_SECURITY = 'UPDATE_SECURITY'.freeze,
      OPERATION_TYPE_UPDATE_BUGFIX = 'UPDATE_BUGFIX'.freeze,
      OPERATION_TYPE_UPDATE_ENHANCEMENT = 'UPDATE_ENHANCEMENT'.freeze,
      OPERATION_TYPE_UPDATE_OTHER = 'UPDATE_OTHER'.freeze,
      OPERATION_TYPE_UPDATE_KSPLICE_USERSPACE = 'UPDATE_KSPLICE_USERSPACE'.freeze,
      OPERATION_TYPE_UPDATE_KSPLICE_KERNEL = 'UPDATE_KSPLICE_KERNEL'.freeze,
      OPERATION_TYPE_MANAGE_MODULE_STREAMS = 'MANAGE_MODULE_STREAMS'.freeze,
      OPERATION_TYPE_SWITCH_MODULE_STREAM = 'SWITCH_MODULE_STREAM'.freeze,
      OPERATION_TYPE_ATTACH_SOFTWARE_SOURCES = 'ATTACH_SOFTWARE_SOURCES'.freeze,
      OPERATION_TYPE_DETACH_SOFTWARE_SOURCES = 'DETACH_SOFTWARE_SOURCES'.freeze,
      OPERATION_TYPE_SYNC_MANAGEMENT_STATION_MIRROR = 'SYNC_MANAGEMENT_STATION_MIRROR'.freeze,
      OPERATION_TYPE_PROMOTE_LIFECYCLE = 'PROMOTE_LIFECYCLE'.freeze,
      OPERATION_TYPE_INSTALL_WINDOWS_UPDATES = 'INSTALL_WINDOWS_UPDATES'.freeze,
      OPERATION_TYPE_INSTALL_ALL_WINDOWS_UPDATES = 'INSTALL_ALL_WINDOWS_UPDATES'.freeze,
      OPERATION_TYPE_INSTALL_SECURITY_WINDOWS_UPDATES = 'INSTALL_SECURITY_WINDOWS_UPDATES'.freeze,
      OPERATION_TYPE_INSTALL_BUGFIX_WINDOWS_UPDATES = 'INSTALL_BUGFIX_WINDOWS_UPDATES'.freeze,
      OPERATION_TYPE_INSTALL_ENHANCEMENT_WINDOWS_UPDATES = 'INSTALL_ENHANCEMENT_WINDOWS_UPDATES'.freeze,
      OPERATION_TYPE_INSTALL_OTHER_WINDOWS_UPDATES = 'INSTALL_OTHER_WINDOWS_UPDATES'.freeze,
      OPERATION_TYPE_REBOOT = 'REBOOT'.freeze,
      OPERATION_TYPE_RERUN_WORK_REQUEST = 'RERUN_WORK_REQUEST'.freeze,
      OPERATION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The type of operation this scheduled job performs.
    # @return [String]
    attr_reader :operation_type

    # The names of the target packages. This parameter only applies when the scheduled job is for installing, updating, or removing packages.
    # @return [Array<String>]
    attr_accessor :package_names

    # Unique identifier for the Windows update. This parameter only applies if the scheduled job is for installing Windows updates.
    # Note that this is not an OCID, but is a unique identifier assigned by Microsoft.
    # For example: '6981d463-cd91-4a26-b7c4-ea4ded9183ed'.
    #
    # @return [Array<String>]
    attr_accessor :windows_update_names

    # @return [OCI::OsManagementHub::Models::ManageModuleStreamsInScheduledJobDetails]
    attr_accessor :manage_module_streams_details

    # @return [OCI::OsManagementHub::Models::ModuleStreamDetails]
    attr_accessor :switch_module_streams_details

    # The software source [OCIDs](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
    # This parameter only applies when the scheduled job is for attaching or detaching software sources.
    #
    # @return [Array<String>]
    attr_accessor :software_source_ids

    # The number of minutes the service waits for the reboot to complete. If the instance doesn't reboot within the
    # timeout, the service marks the reboot job as failed.
    #
    # @return [Integer]
    attr_accessor :reboot_timeout_in_mins

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'operation_type': :'operationType',
        'package_names': :'packageNames',
        'windows_update_names': :'windowsUpdateNames',
        'manage_module_streams_details': :'manageModuleStreamsDetails',
        'switch_module_streams_details': :'switchModuleStreamsDetails',
        'software_source_ids': :'softwareSourceIds',
        'reboot_timeout_in_mins': :'rebootTimeoutInMins'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'operation_type': :'String',
        'package_names': :'Array<String>',
        'windows_update_names': :'Array<String>',
        'manage_module_streams_details': :'OCI::OsManagementHub::Models::ManageModuleStreamsInScheduledJobDetails',
        'switch_module_streams_details': :'OCI::OsManagementHub::Models::ModuleStreamDetails',
        'software_source_ids': :'Array<String>',
        'reboot_timeout_in_mins': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :operation_type The value to assign to the {#operation_type} property
    # @option attributes [Array<String>] :package_names The value to assign to the {#package_names} property
    # @option attributes [Array<String>] :windows_update_names The value to assign to the {#windows_update_names} property
    # @option attributes [OCI::OsManagementHub::Models::ManageModuleStreamsInScheduledJobDetails] :manage_module_streams_details The value to assign to the {#manage_module_streams_details} property
    # @option attributes [OCI::OsManagementHub::Models::ModuleStreamDetails] :switch_module_streams_details The value to assign to the {#switch_module_streams_details} property
    # @option attributes [Array<String>] :software_source_ids The value to assign to the {#software_source_ids} property
    # @option attributes [Integer] :reboot_timeout_in_mins The value to assign to the {#reboot_timeout_in_mins} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.operation_type = attributes[:'operationType'] if attributes[:'operationType']

      raise 'You cannot provide both :operationType and :operation_type' if attributes.key?(:'operationType') && attributes.key?(:'operation_type')

      self.operation_type = attributes[:'operation_type'] if attributes[:'operation_type']

      self.package_names = attributes[:'packageNames'] if attributes[:'packageNames']

      raise 'You cannot provide both :packageNames and :package_names' if attributes.key?(:'packageNames') && attributes.key?(:'package_names')

      self.package_names = attributes[:'package_names'] if attributes[:'package_names']

      self.windows_update_names = attributes[:'windowsUpdateNames'] if attributes[:'windowsUpdateNames']

      raise 'You cannot provide both :windowsUpdateNames and :windows_update_names' if attributes.key?(:'windowsUpdateNames') && attributes.key?(:'windows_update_names')

      self.windows_update_names = attributes[:'windows_update_names'] if attributes[:'windows_update_names']

      self.manage_module_streams_details = attributes[:'manageModuleStreamsDetails'] if attributes[:'manageModuleStreamsDetails']

      raise 'You cannot provide both :manageModuleStreamsDetails and :manage_module_streams_details' if attributes.key?(:'manageModuleStreamsDetails') && attributes.key?(:'manage_module_streams_details')

      self.manage_module_streams_details = attributes[:'manage_module_streams_details'] if attributes[:'manage_module_streams_details']

      self.switch_module_streams_details = attributes[:'switchModuleStreamsDetails'] if attributes[:'switchModuleStreamsDetails']

      raise 'You cannot provide both :switchModuleStreamsDetails and :switch_module_streams_details' if attributes.key?(:'switchModuleStreamsDetails') && attributes.key?(:'switch_module_streams_details')

      self.switch_module_streams_details = attributes[:'switch_module_streams_details'] if attributes[:'switch_module_streams_details']

      self.software_source_ids = attributes[:'softwareSourceIds'] if attributes[:'softwareSourceIds']

      raise 'You cannot provide both :softwareSourceIds and :software_source_ids' if attributes.key?(:'softwareSourceIds') && attributes.key?(:'software_source_ids')

      self.software_source_ids = attributes[:'software_source_ids'] if attributes[:'software_source_ids']

      self.reboot_timeout_in_mins = attributes[:'rebootTimeoutInMins'] if attributes[:'rebootTimeoutInMins']

      raise 'You cannot provide both :rebootTimeoutInMins and :reboot_timeout_in_mins' if attributes.key?(:'rebootTimeoutInMins') && attributes.key?(:'reboot_timeout_in_mins')

      self.reboot_timeout_in_mins = attributes[:'reboot_timeout_in_mins'] if attributes[:'reboot_timeout_in_mins']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operation_type Object to be assigned
    def operation_type=(operation_type)
      # rubocop:disable Style/ConditionalAssignment
      if operation_type && !OPERATION_TYPE_ENUM.include?(operation_type)
        OCI.logger.debug("Unknown value for 'operation_type' [" + operation_type + "]. Mapping to 'OPERATION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @operation_type = OPERATION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @operation_type = operation_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        operation_type == other.operation_type &&
        package_names == other.package_names &&
        windows_update_names == other.windows_update_names &&
        manage_module_streams_details == other.manage_module_streams_details &&
        switch_module_streams_details == other.switch_module_streams_details &&
        software_source_ids == other.software_source_ids &&
        reboot_timeout_in_mins == other.reboot_timeout_in_mins
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [operation_type, package_names, windows_update_names, manage_module_streams_details, switch_module_streams_details, software_source_ids, reboot_timeout_in_mins].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
