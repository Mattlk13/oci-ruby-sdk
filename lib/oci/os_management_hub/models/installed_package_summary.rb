# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'
require_relative 'package_summary'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A software package installed on a managed instance.
  class OsManagementHub::Models::InstalledPackageSummary < OsManagementHub::Models::PackageSummary
    # **[Required]** The date and time the package was installed, as described in
    # [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
    #
    # @return [DateTime]
    attr_accessor :time_installed

    # The date and time the package was issued by a providing erratum (if available), as described in
    # [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
    #
    # @return [DateTime]
    attr_accessor :time_issued

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'name': :'name',
        'type': :'type',
        'version': :'version',
        'architecture': :'architecture',
        'software_sources': :'softwareSources',
        'package_classification': :'packageClassification',
        'time_installed': :'timeInstalled',
        'time_issued': :'timeIssued'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'name': :'String',
        'type': :'String',
        'version': :'String',
        'architecture': :'String',
        'software_sources': :'Array<OCI::OsManagementHub::Models::SoftwareSourceDetails>',
        'package_classification': :'String',
        'time_installed': :'DateTime',
        'time_issued': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::OsManagementHub::Models::PackageSummary#display_name #display_name} proprety
    # @option attributes [String] :name The value to assign to the {OCI::OsManagementHub::Models::PackageSummary#name #name} proprety
    # @option attributes [String] :type The value to assign to the {OCI::OsManagementHub::Models::PackageSummary#type #type} proprety
    # @option attributes [String] :version The value to assign to the {OCI::OsManagementHub::Models::PackageSummary#version #version} proprety
    # @option attributes [String] :architecture The value to assign to the {OCI::OsManagementHub::Models::PackageSummary#architecture #architecture} proprety
    # @option attributes [Array<OCI::OsManagementHub::Models::SoftwareSourceDetails>] :software_sources The value to assign to the {OCI::OsManagementHub::Models::PackageSummary#software_sources #software_sources} proprety
    # @option attributes [DateTime] :time_installed The value to assign to the {#time_installed} property
    # @option attributes [DateTime] :time_issued The value to assign to the {#time_issued} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['packageClassification'] = 'INSTALLED'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.time_installed = attributes[:'timeInstalled'] if attributes[:'timeInstalled']

      raise 'You cannot provide both :timeInstalled and :time_installed' if attributes.key?(:'timeInstalled') && attributes.key?(:'time_installed')

      self.time_installed = attributes[:'time_installed'] if attributes[:'time_installed']

      self.time_issued = attributes[:'timeIssued'] if attributes[:'timeIssued']

      raise 'You cannot provide both :timeIssued and :time_issued' if attributes.key?(:'timeIssued') && attributes.key?(:'time_issued')

      self.time_issued = attributes[:'time_issued'] if attributes[:'time_issued']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        name == other.name &&
        type == other.type &&
        version == other.version &&
        architecture == other.architecture &&
        software_sources == other.software_sources &&
        package_classification == other.package_classification &&
        time_installed == other.time_installed &&
        time_issued == other.time_issued
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, name, type, version, architecture, software_sources, package_classification, time_installed, time_issued].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
