# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The object that defines a software source. A software source contains a collection of packages. For more information, see [Managing Software Sources](https://docs.cloud.oracle.com/iaas/osmh/doc/software-sources.htm).
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class OsManagementHub::Models::SoftwareSource
    SOFTWARE_SOURCE_TYPE_ENUM = [
      SOFTWARE_SOURCE_TYPE_VENDOR = 'VENDOR'.freeze,
      SOFTWARE_SOURCE_TYPE_CUSTOM = 'CUSTOM'.freeze,
      SOFTWARE_SOURCE_TYPE_VERSIONED = 'VERSIONED'.freeze,
      SOFTWARE_SOURCE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AVAILABILITY_ENUM = [
      AVAILABILITY_AVAILABLE = 'AVAILABLE'.freeze,
      AVAILABILITY_SELECTED = 'SELECTED'.freeze,
      AVAILABILITY_RESTRICTED = 'RESTRICTED'.freeze,
      AVAILABILITY_UNAVAILABLE = 'UNAVAILABLE'.freeze,
      AVAILABILITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AVAILABILITY_AT_OCI_ENUM = [
      AVAILABILITY_AT_OCI_AVAILABLE = 'AVAILABLE'.freeze,
      AVAILABILITY_AT_OCI_SELECTED = 'SELECTED'.freeze,
      AVAILABILITY_AT_OCI_RESTRICTED = 'RESTRICTED'.freeze,
      AVAILABILITY_AT_OCI_UNAVAILABLE = 'UNAVAILABLE'.freeze,
      AVAILABILITY_AT_OCI_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    OS_FAMILY_ENUM = [
      OS_FAMILY_ORACLE_LINUX_9 = 'ORACLE_LINUX_9'.freeze,
      OS_FAMILY_ORACLE_LINUX_8 = 'ORACLE_LINUX_8'.freeze,
      OS_FAMILY_ORACLE_LINUX_7 = 'ORACLE_LINUX_7'.freeze,
      OS_FAMILY_ORACLE_LINUX_6 = 'ORACLE_LINUX_6'.freeze,
      OS_FAMILY_WINDOWS_SERVER_2016 = 'WINDOWS_SERVER_2016'.freeze,
      OS_FAMILY_WINDOWS_SERVER_2019 = 'WINDOWS_SERVER_2019'.freeze,
      OS_FAMILY_WINDOWS_SERVER_2022 = 'WINDOWS_SERVER_2022'.freeze,
      OS_FAMILY_ALL = 'ALL'.freeze,
      OS_FAMILY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ARCH_TYPE_ENUM = [
      ARCH_TYPE_X86_64 = 'X86_64'.freeze,
      ARCH_TYPE_AARCH64 = 'AARCH64'.freeze,
      ARCH_TYPE_I686 = 'I686'.freeze,
      ARCH_TYPE_NOARCH = 'NOARCH'.freeze,
      ARCH_TYPE_SRC = 'SRC'.freeze,
      ARCH_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CHECKSUM_TYPE_ENUM = [
      CHECKSUM_TYPE_SHA1 = 'SHA1'.freeze,
      CHECKSUM_TYPE_SHA256 = 'SHA256'.freeze,
      CHECKSUM_TYPE_SHA384 = 'SHA384'.freeze,
      CHECKSUM_TYPE_SHA512 = 'SHA512'.freeze,
      CHECKSUM_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the software source.
    # @return [String]
    attr_accessor :id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the software source.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** User-friendly name for the software source.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The date and time the software source was created (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
    #
    # @return [DateTime]
    attr_accessor :time_created

    # User-specified description for the software source.
    # @return [String]
    attr_accessor :description

    # **[Required]** Type of software source.
    # @return [String]
    attr_reader :software_source_type

    # **[Required]** Availability of the software source (for non-OCI environments).
    # @return [String]
    attr_reader :availability

    # **[Required]** Availability of the software source (for OCI environments).
    # @return [String]
    attr_reader :availability_at_oci

    # **[Required]** The repository ID for the software source.
    # @return [String]
    attr_accessor :repo_id

    # **[Required]** The OS family the software source belongs to.
    # @return [String]
    attr_reader :os_family

    # **[Required]** The architecture type supported by the software source.
    # @return [String]
    attr_reader :arch_type

    # The current state of the software source.
    # @return [String]
    attr_reader :lifecycle_state

    # Number of packages the software source contains.
    # @return [Integer]
    attr_accessor :package_count

    # **[Required]** URL for the repository. For vendor software sources, this is the URL to the regional yum server. For custom software sources, this is 'custom/<repoId>'.
    # @return [String]
    attr_accessor :url

    # The yum repository checksum type used by this software source.
    # @return [String]
    attr_reader :checksum_type

    # URL of the GPG key for this software source.
    # @return [String]
    attr_accessor :gpg_key_url

    # ID of the GPG key for this software source.
    # @return [String]
    attr_accessor :gpg_key_id

    # Fingerprint of the GPG key for this software source.
    # @return [String]
    attr_accessor :gpg_key_fingerprint

    # The size of the software source in gigabytes (GB).
    # @return [Float]
    attr_accessor :size

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'time_created': :'timeCreated',
        'description': :'description',
        'software_source_type': :'softwareSourceType',
        'availability': :'availability',
        'availability_at_oci': :'availabilityAtOci',
        'repo_id': :'repoId',
        'os_family': :'osFamily',
        'arch_type': :'archType',
        'lifecycle_state': :'lifecycleState',
        'package_count': :'packageCount',
        'url': :'url',
        'checksum_type': :'checksumType',
        'gpg_key_url': :'gpgKeyUrl',
        'gpg_key_id': :'gpgKeyId',
        'gpg_key_fingerprint': :'gpgKeyFingerprint',
        'size': :'size',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'time_created': :'DateTime',
        'description': :'String',
        'software_source_type': :'String',
        'availability': :'String',
        'availability_at_oci': :'String',
        'repo_id': :'String',
        'os_family': :'String',
        'arch_type': :'String',
        'lifecycle_state': :'String',
        'package_count': :'Integer',
        'url': :'String',
        'checksum_type': :'String',
        'gpg_key_url': :'String',
        'gpg_key_id': :'String',
        'gpg_key_fingerprint': :'String',
        'size': :'Float',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'softwareSourceType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::OsManagementHub::Models::VendorSoftwareSource' if type == 'VENDOR'
      return 'OCI::OsManagementHub::Models::CustomSoftwareSource' if type == 'CUSTOM'
      return 'OCI::OsManagementHub::Models::VersionedCustomSoftwareSource' if type == 'VERSIONED'

      # TODO: Log a warning when the subtype is not found.
      'OCI::OsManagementHub::Models::SoftwareSource'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :software_source_type The value to assign to the {#software_source_type} property
    # @option attributes [String] :availability The value to assign to the {#availability} property
    # @option attributes [String] :availability_at_oci The value to assign to the {#availability_at_oci} property
    # @option attributes [String] :repo_id The value to assign to the {#repo_id} property
    # @option attributes [String] :os_family The value to assign to the {#os_family} property
    # @option attributes [String] :arch_type The value to assign to the {#arch_type} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Integer] :package_count The value to assign to the {#package_count} property
    # @option attributes [String] :url The value to assign to the {#url} property
    # @option attributes [String] :checksum_type The value to assign to the {#checksum_type} property
    # @option attributes [String] :gpg_key_url The value to assign to the {#gpg_key_url} property
    # @option attributes [String] :gpg_key_id The value to assign to the {#gpg_key_id} property
    # @option attributes [String] :gpg_key_fingerprint The value to assign to the {#gpg_key_fingerprint} property
    # @option attributes [Float] :size The value to assign to the {#size} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.description = attributes[:'description'] if attributes[:'description']

      self.software_source_type = attributes[:'softwareSourceType'] if attributes[:'softwareSourceType']

      raise 'You cannot provide both :softwareSourceType and :software_source_type' if attributes.key?(:'softwareSourceType') && attributes.key?(:'software_source_type')

      self.software_source_type = attributes[:'software_source_type'] if attributes[:'software_source_type']

      self.availability = attributes[:'availability'] if attributes[:'availability']

      self.availability_at_oci = attributes[:'availabilityAtOci'] if attributes[:'availabilityAtOci']

      raise 'You cannot provide both :availabilityAtOci and :availability_at_oci' if attributes.key?(:'availabilityAtOci') && attributes.key?(:'availability_at_oci')

      self.availability_at_oci = attributes[:'availability_at_oci'] if attributes[:'availability_at_oci']

      self.repo_id = attributes[:'repoId'] if attributes[:'repoId']

      raise 'You cannot provide both :repoId and :repo_id' if attributes.key?(:'repoId') && attributes.key?(:'repo_id')

      self.repo_id = attributes[:'repo_id'] if attributes[:'repo_id']

      self.os_family = attributes[:'osFamily'] if attributes[:'osFamily']

      raise 'You cannot provide both :osFamily and :os_family' if attributes.key?(:'osFamily') && attributes.key?(:'os_family')

      self.os_family = attributes[:'os_family'] if attributes[:'os_family']

      self.arch_type = attributes[:'archType'] if attributes[:'archType']

      raise 'You cannot provide both :archType and :arch_type' if attributes.key?(:'archType') && attributes.key?(:'arch_type')

      self.arch_type = attributes[:'arch_type'] if attributes[:'arch_type']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.package_count = attributes[:'packageCount'] if attributes[:'packageCount']

      raise 'You cannot provide both :packageCount and :package_count' if attributes.key?(:'packageCount') && attributes.key?(:'package_count')

      self.package_count = attributes[:'package_count'] if attributes[:'package_count']

      self.url = attributes[:'url'] if attributes[:'url']

      self.checksum_type = attributes[:'checksumType'] if attributes[:'checksumType']

      raise 'You cannot provide both :checksumType and :checksum_type' if attributes.key?(:'checksumType') && attributes.key?(:'checksum_type')

      self.checksum_type = attributes[:'checksum_type'] if attributes[:'checksum_type']

      self.gpg_key_url = attributes[:'gpgKeyUrl'] if attributes[:'gpgKeyUrl']

      raise 'You cannot provide both :gpgKeyUrl and :gpg_key_url' if attributes.key?(:'gpgKeyUrl') && attributes.key?(:'gpg_key_url')

      self.gpg_key_url = attributes[:'gpg_key_url'] if attributes[:'gpg_key_url']

      self.gpg_key_id = attributes[:'gpgKeyId'] if attributes[:'gpgKeyId']

      raise 'You cannot provide both :gpgKeyId and :gpg_key_id' if attributes.key?(:'gpgKeyId') && attributes.key?(:'gpg_key_id')

      self.gpg_key_id = attributes[:'gpg_key_id'] if attributes[:'gpg_key_id']

      self.gpg_key_fingerprint = attributes[:'gpgKeyFingerprint'] if attributes[:'gpgKeyFingerprint']

      raise 'You cannot provide both :gpgKeyFingerprint and :gpg_key_fingerprint' if attributes.key?(:'gpgKeyFingerprint') && attributes.key?(:'gpg_key_fingerprint')

      self.gpg_key_fingerprint = attributes[:'gpg_key_fingerprint'] if attributes[:'gpg_key_fingerprint']

      self.size = attributes[:'size'] if attributes[:'size']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] software_source_type Object to be assigned
    def software_source_type=(software_source_type)
      # rubocop:disable Style/ConditionalAssignment
      if software_source_type && !SOFTWARE_SOURCE_TYPE_ENUM.include?(software_source_type)
        OCI.logger.debug("Unknown value for 'software_source_type' [" + software_source_type + "]. Mapping to 'SOFTWARE_SOURCE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @software_source_type = SOFTWARE_SOURCE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @software_source_type = software_source_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] availability Object to be assigned
    def availability=(availability)
      # rubocop:disable Style/ConditionalAssignment
      if availability && !AVAILABILITY_ENUM.include?(availability)
        OCI.logger.debug("Unknown value for 'availability' [" + availability + "]. Mapping to 'AVAILABILITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @availability = AVAILABILITY_UNKNOWN_ENUM_VALUE
      else
        @availability = availability
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] availability_at_oci Object to be assigned
    def availability_at_oci=(availability_at_oci)
      # rubocop:disable Style/ConditionalAssignment
      if availability_at_oci && !AVAILABILITY_AT_OCI_ENUM.include?(availability_at_oci)
        OCI.logger.debug("Unknown value for 'availability_at_oci' [" + availability_at_oci + "]. Mapping to 'AVAILABILITY_AT_OCI_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @availability_at_oci = AVAILABILITY_AT_OCI_UNKNOWN_ENUM_VALUE
      else
        @availability_at_oci = availability_at_oci
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_family Object to be assigned
    def os_family=(os_family)
      # rubocop:disable Style/ConditionalAssignment
      if os_family && !OS_FAMILY_ENUM.include?(os_family)
        OCI.logger.debug("Unknown value for 'os_family' [" + os_family + "]. Mapping to 'OS_FAMILY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @os_family = OS_FAMILY_UNKNOWN_ENUM_VALUE
      else
        @os_family = os_family
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] arch_type Object to be assigned
    def arch_type=(arch_type)
      # rubocop:disable Style/ConditionalAssignment
      if arch_type && !ARCH_TYPE_ENUM.include?(arch_type)
        OCI.logger.debug("Unknown value for 'arch_type' [" + arch_type + "]. Mapping to 'ARCH_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @arch_type = ARCH_TYPE_UNKNOWN_ENUM_VALUE
      else
        @arch_type = arch_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] checksum_type Object to be assigned
    def checksum_type=(checksum_type)
      # rubocop:disable Style/ConditionalAssignment
      if checksum_type && !CHECKSUM_TYPE_ENUM.include?(checksum_type)
        OCI.logger.debug("Unknown value for 'checksum_type' [" + checksum_type + "]. Mapping to 'CHECKSUM_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @checksum_type = CHECKSUM_TYPE_UNKNOWN_ENUM_VALUE
      else
        @checksum_type = checksum_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        time_created == other.time_created &&
        description == other.description &&
        software_source_type == other.software_source_type &&
        availability == other.availability &&
        availability_at_oci == other.availability_at_oci &&
        repo_id == other.repo_id &&
        os_family == other.os_family &&
        arch_type == other.arch_type &&
        lifecycle_state == other.lifecycle_state &&
        package_count == other.package_count &&
        url == other.url &&
        checksum_type == other.checksum_type &&
        gpg_key_url == other.gpg_key_url &&
        gpg_key_id == other.gpg_key_id &&
        gpg_key_fingerprint == other.gpg_key_fingerprint &&
        size == other.size &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, time_created, description, software_source_type, availability, availability_at_oci, repo_id, os_family, arch_type, lifecycle_state, package_count, url, checksum_type, gpg_key_url, gpg_key_id, gpg_key_fingerprint, size, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
