# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'
require_relative 'software_source'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The object that defines a custom software source. A software source contains a collection of packages. For more information, see [Managing Software Sources](https://docs.cloud.oracle.com/iaas/osmh/doc/software-sources.htm).
  class OsManagementHub::Models::CustomSoftwareSource < OsManagementHub::Models::SoftwareSource
    SOFTWARE_SOURCE_SUB_TYPE_ENUM = [
      SOFTWARE_SOURCE_SUB_TYPE_FILTER = 'FILTER'.freeze,
      SOFTWARE_SOURCE_SUB_TYPE_MANIFEST = 'MANIFEST'.freeze,
      SOFTWARE_SOURCE_SUB_TYPE_SNAPSHOT = 'SNAPSHOT'.freeze,
      SOFTWARE_SOURCE_SUB_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** List of vendor software sources that are used for the basis of the custom software source.
    # @return [Array<OCI::OsManagementHub::Models::Id>]
    attr_accessor :vendor_software_sources

    # @return [OCI::OsManagementHub::Models::CustomSoftwareSourceFilter]
    attr_accessor :custom_software_source_filter

    # Indicates whether the service should automatically update the custom software source to use the latest package versions available. The service reviews packages levels once a day.
    # @return [BOOLEAN]
    attr_accessor :is_automatically_updated

    # Indicates whether the service should automatically resolve package dependencies when including specific packages in the software source.
    # @return [BOOLEAN]
    attr_accessor :is_auto_resolve_dependencies

    # Indicates whether the service should create the software source from a list of packages provided by the user.
    # @return [BOOLEAN]
    attr_accessor :is_created_from_package_list

    # Indicates whether the software source will include only the latest versions of content from vendor software sources, while accounting for other constraints set in the custom or versioned custom software source (such as a package list or filters).
    # * For a module filter that does not specify a stream, this will include all available streams, and within each stream only the latest version of packages.
    # * For a module filter that does specify a stream, this will include only the latest version of packages for the specified stream.
    # * For a package filter that does not specify a version, this will include only the latest available version of the package.
    # * For a package filter that does specify a version, this will include only the specified version of the package (the isLatestContentOnly attribute is ignored).
    # * For a package list, this will include only the specified version of packages and modules in the list (the isLatestContentOnly attribute is ignored).
    #
    # @return [BOOLEAN]
    attr_accessor :is_latest_content_only

    # The packages in the software source.
    # @return [Array<String>]
    attr_accessor :packages

    # Identifies how the custom software source was created.
    # @return [String]
    attr_reader :software_source_sub_type

    # The date and time the metadata for this software source was last updated (in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) format).
    #
    # @return [DateTime]
    attr_accessor :time_metadata_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'time_created': :'timeCreated',
        'description': :'description',
        'software_source_type': :'softwareSourceType',
        'availability': :'availability',
        'availability_at_oci': :'availabilityAtOci',
        'repo_id': :'repoId',
        'os_family': :'osFamily',
        'arch_type': :'archType',
        'lifecycle_state': :'lifecycleState',
        'package_count': :'packageCount',
        'url': :'url',
        'checksum_type': :'checksumType',
        'gpg_key_url': :'gpgKeyUrl',
        'gpg_key_id': :'gpgKeyId',
        'gpg_key_fingerprint': :'gpgKeyFingerprint',
        'size': :'size',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'vendor_software_sources': :'vendorSoftwareSources',
        'custom_software_source_filter': :'customSoftwareSourceFilter',
        'is_automatically_updated': :'isAutomaticallyUpdated',
        'is_auto_resolve_dependencies': :'isAutoResolveDependencies',
        'is_created_from_package_list': :'isCreatedFromPackageList',
        'is_latest_content_only': :'isLatestContentOnly',
        'packages': :'packages',
        'software_source_sub_type': :'softwareSourceSubType',
        'time_metadata_updated': :'timeMetadataUpdated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'time_created': :'DateTime',
        'description': :'String',
        'software_source_type': :'String',
        'availability': :'String',
        'availability_at_oci': :'String',
        'repo_id': :'String',
        'os_family': :'String',
        'arch_type': :'String',
        'lifecycle_state': :'String',
        'package_count': :'Integer',
        'url': :'String',
        'checksum_type': :'String',
        'gpg_key_url': :'String',
        'gpg_key_id': :'String',
        'gpg_key_fingerprint': :'String',
        'size': :'Float',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'vendor_software_sources': :'Array<OCI::OsManagementHub::Models::Id>',
        'custom_software_source_filter': :'OCI::OsManagementHub::Models::CustomSoftwareSourceFilter',
        'is_automatically_updated': :'BOOLEAN',
        'is_auto_resolve_dependencies': :'BOOLEAN',
        'is_created_from_package_list': :'BOOLEAN',
        'is_latest_content_only': :'BOOLEAN',
        'packages': :'Array<String>',
        'software_source_sub_type': :'String',
        'time_metadata_updated': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#id #id} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#compartment_id #compartment_id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#display_name #display_name} proprety
    # @option attributes [DateTime] :time_created The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#time_created #time_created} proprety
    # @option attributes [String] :description The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#description #description} proprety
    # @option attributes [String] :availability The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#availability #availability} proprety
    # @option attributes [String] :availability_at_oci The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#availability_at_oci #availability_at_oci} proprety
    # @option attributes [String] :repo_id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#repo_id #repo_id} proprety
    # @option attributes [String] :os_family The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#os_family #os_family} proprety
    # @option attributes [String] :arch_type The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#arch_type #arch_type} proprety
    # @option attributes [String] :lifecycle_state The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#lifecycle_state #lifecycle_state} proprety
    # @option attributes [Integer] :package_count The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#package_count #package_count} proprety
    # @option attributes [String] :url The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#url #url} proprety
    # @option attributes [String] :checksum_type The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#checksum_type #checksum_type} proprety
    # @option attributes [String] :gpg_key_url The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#gpg_key_url #gpg_key_url} proprety
    # @option attributes [String] :gpg_key_id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#gpg_key_id #gpg_key_id} proprety
    # @option attributes [String] :gpg_key_fingerprint The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#gpg_key_fingerprint #gpg_key_fingerprint} proprety
    # @option attributes [Float] :size The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#size #size} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#defined_tags #defined_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#system_tags #system_tags} proprety
    # @option attributes [Array<OCI::OsManagementHub::Models::Id>] :vendor_software_sources The value to assign to the {#vendor_software_sources} property
    # @option attributes [OCI::OsManagementHub::Models::CustomSoftwareSourceFilter] :custom_software_source_filter The value to assign to the {#custom_software_source_filter} property
    # @option attributes [BOOLEAN] :is_automatically_updated The value to assign to the {#is_automatically_updated} property
    # @option attributes [BOOLEAN] :is_auto_resolve_dependencies The value to assign to the {#is_auto_resolve_dependencies} property
    # @option attributes [BOOLEAN] :is_created_from_package_list The value to assign to the {#is_created_from_package_list} property
    # @option attributes [BOOLEAN] :is_latest_content_only The value to assign to the {#is_latest_content_only} property
    # @option attributes [Array<String>] :packages The value to assign to the {#packages} property
    # @option attributes [String] :software_source_sub_type The value to assign to the {#software_source_sub_type} property
    # @option attributes [DateTime] :time_metadata_updated The value to assign to the {#time_metadata_updated} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['softwareSourceType'] = 'CUSTOM'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.vendor_software_sources = attributes[:'vendorSoftwareSources'] if attributes[:'vendorSoftwareSources']

      raise 'You cannot provide both :vendorSoftwareSources and :vendor_software_sources' if attributes.key?(:'vendorSoftwareSources') && attributes.key?(:'vendor_software_sources')

      self.vendor_software_sources = attributes[:'vendor_software_sources'] if attributes[:'vendor_software_sources']

      self.custom_software_source_filter = attributes[:'customSoftwareSourceFilter'] if attributes[:'customSoftwareSourceFilter']

      raise 'You cannot provide both :customSoftwareSourceFilter and :custom_software_source_filter' if attributes.key?(:'customSoftwareSourceFilter') && attributes.key?(:'custom_software_source_filter')

      self.custom_software_source_filter = attributes[:'custom_software_source_filter'] if attributes[:'custom_software_source_filter']

      self.is_automatically_updated = attributes[:'isAutomaticallyUpdated'] unless attributes[:'isAutomaticallyUpdated'].nil?
      self.is_automatically_updated = true if is_automatically_updated.nil? && !attributes.key?(:'isAutomaticallyUpdated') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isAutomaticallyUpdated and :is_automatically_updated' if attributes.key?(:'isAutomaticallyUpdated') && attributes.key?(:'is_automatically_updated')

      self.is_automatically_updated = attributes[:'is_automatically_updated'] unless attributes[:'is_automatically_updated'].nil?
      self.is_automatically_updated = true if is_automatically_updated.nil? && !attributes.key?(:'isAutomaticallyUpdated') && !attributes.key?(:'is_automatically_updated') # rubocop:disable Style/StringLiterals

      self.is_auto_resolve_dependencies = attributes[:'isAutoResolveDependencies'] unless attributes[:'isAutoResolveDependencies'].nil?
      self.is_auto_resolve_dependencies = false if is_auto_resolve_dependencies.nil? && !attributes.key?(:'isAutoResolveDependencies') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isAutoResolveDependencies and :is_auto_resolve_dependencies' if attributes.key?(:'isAutoResolveDependencies') && attributes.key?(:'is_auto_resolve_dependencies')

      self.is_auto_resolve_dependencies = attributes[:'is_auto_resolve_dependencies'] unless attributes[:'is_auto_resolve_dependencies'].nil?
      self.is_auto_resolve_dependencies = false if is_auto_resolve_dependencies.nil? && !attributes.key?(:'isAutoResolveDependencies') && !attributes.key?(:'is_auto_resolve_dependencies') # rubocop:disable Style/StringLiterals

      self.is_created_from_package_list = attributes[:'isCreatedFromPackageList'] unless attributes[:'isCreatedFromPackageList'].nil?
      self.is_created_from_package_list = false if is_created_from_package_list.nil? && !attributes.key?(:'isCreatedFromPackageList') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isCreatedFromPackageList and :is_created_from_package_list' if attributes.key?(:'isCreatedFromPackageList') && attributes.key?(:'is_created_from_package_list')

      self.is_created_from_package_list = attributes[:'is_created_from_package_list'] unless attributes[:'is_created_from_package_list'].nil?
      self.is_created_from_package_list = false if is_created_from_package_list.nil? && !attributes.key?(:'isCreatedFromPackageList') && !attributes.key?(:'is_created_from_package_list') # rubocop:disable Style/StringLiterals

      self.is_latest_content_only = attributes[:'isLatestContentOnly'] unless attributes[:'isLatestContentOnly'].nil?
      self.is_latest_content_only = false if is_latest_content_only.nil? && !attributes.key?(:'isLatestContentOnly') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isLatestContentOnly and :is_latest_content_only' if attributes.key?(:'isLatestContentOnly') && attributes.key?(:'is_latest_content_only')

      self.is_latest_content_only = attributes[:'is_latest_content_only'] unless attributes[:'is_latest_content_only'].nil?
      self.is_latest_content_only = false if is_latest_content_only.nil? && !attributes.key?(:'isLatestContentOnly') && !attributes.key?(:'is_latest_content_only') # rubocop:disable Style/StringLiterals

      self.packages = attributes[:'packages'] if attributes[:'packages']

      self.software_source_sub_type = attributes[:'softwareSourceSubType'] if attributes[:'softwareSourceSubType']

      raise 'You cannot provide both :softwareSourceSubType and :software_source_sub_type' if attributes.key?(:'softwareSourceSubType') && attributes.key?(:'software_source_sub_type')

      self.software_source_sub_type = attributes[:'software_source_sub_type'] if attributes[:'software_source_sub_type']

      self.time_metadata_updated = attributes[:'timeMetadataUpdated'] if attributes[:'timeMetadataUpdated']

      raise 'You cannot provide both :timeMetadataUpdated and :time_metadata_updated' if attributes.key?(:'timeMetadataUpdated') && attributes.key?(:'time_metadata_updated')

      self.time_metadata_updated = attributes[:'time_metadata_updated'] if attributes[:'time_metadata_updated']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] software_source_sub_type Object to be assigned
    def software_source_sub_type=(software_source_sub_type)
      # rubocop:disable Style/ConditionalAssignment
      if software_source_sub_type && !SOFTWARE_SOURCE_SUB_TYPE_ENUM.include?(software_source_sub_type)
        OCI.logger.debug("Unknown value for 'software_source_sub_type' [" + software_source_sub_type + "]. Mapping to 'SOFTWARE_SOURCE_SUB_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @software_source_sub_type = SOFTWARE_SOURCE_SUB_TYPE_UNKNOWN_ENUM_VALUE
      else
        @software_source_sub_type = software_source_sub_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        time_created == other.time_created &&
        description == other.description &&
        software_source_type == other.software_source_type &&
        availability == other.availability &&
        availability_at_oci == other.availability_at_oci &&
        repo_id == other.repo_id &&
        os_family == other.os_family &&
        arch_type == other.arch_type &&
        lifecycle_state == other.lifecycle_state &&
        package_count == other.package_count &&
        url == other.url &&
        checksum_type == other.checksum_type &&
        gpg_key_url == other.gpg_key_url &&
        gpg_key_id == other.gpg_key_id &&
        gpg_key_fingerprint == other.gpg_key_fingerprint &&
        size == other.size &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        vendor_software_sources == other.vendor_software_sources &&
        custom_software_source_filter == other.custom_software_source_filter &&
        is_automatically_updated == other.is_automatically_updated &&
        is_auto_resolve_dependencies == other.is_auto_resolve_dependencies &&
        is_created_from_package_list == other.is_created_from_package_list &&
        is_latest_content_only == other.is_latest_content_only &&
        packages == other.packages &&
        software_source_sub_type == other.software_source_sub_type &&
        time_metadata_updated == other.time_metadata_updated
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, time_created, description, software_source_type, availability, availability_at_oci, repo_id, os_family, arch_type, lifecycle_state, package_count, url, checksum_type, gpg_key_url, gpg_key_id, gpg_key_fingerprint, size, freeform_tags, defined_tags, system_tags, vendor_software_sources, custom_software_source_filter, is_automatically_updated, is_auto_resolve_dependencies, is_created_from_package_list, is_latest_content_only, packages, software_source_sub_type, time_metadata_updated].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
