# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require_relative 'software_source'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A custom software source contains a custom collection of packages.
  class OsManagementHub::Models::CustomSoftwareSource < OsManagementHub::Models::SoftwareSource
    # **[Required]** List of vendor software sources.
    # @return [Array<OCI::OsManagementHub::Models::Id>]
    attr_accessor :vendor_software_sources

    # @return [OCI::OsManagementHub::Models::CustomSoftwareSourceFilter]
    attr_accessor :custom_software_source_filter

    # Indicates whether service should automatically update the custom software source for the user.
    # @return [BOOLEAN]
    attr_accessor :is_automatically_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'time_created': :'timeCreated',
        'description': :'description',
        'software_source_type': :'softwareSourceType',
        'availability': :'availability',
        'repo_id': :'repoId',
        'os_family': :'osFamily',
        'arch_type': :'archType',
        'lifecycle_state': :'lifecycleState',
        'package_count': :'packageCount',
        'url': :'url',
        'checksum_type': :'checksumType',
        'gpg_key_url': :'gpgKeyUrl',
        'gpg_key_id': :'gpgKeyId',
        'gpg_key_fingerprint': :'gpgKeyFingerprint',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'vendor_software_sources': :'vendorSoftwareSources',
        'custom_software_source_filter': :'customSoftwareSourceFilter',
        'is_automatically_updated': :'isAutomaticallyUpdated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'time_created': :'DateTime',
        'description': :'String',
        'software_source_type': :'String',
        'availability': :'String',
        'repo_id': :'String',
        'os_family': :'String',
        'arch_type': :'String',
        'lifecycle_state': :'String',
        'package_count': :'Integer',
        'url': :'String',
        'checksum_type': :'String',
        'gpg_key_url': :'String',
        'gpg_key_id': :'String',
        'gpg_key_fingerprint': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'vendor_software_sources': :'Array<OCI::OsManagementHub::Models::Id>',
        'custom_software_source_filter': :'OCI::OsManagementHub::Models::CustomSoftwareSourceFilter',
        'is_automatically_updated': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#id #id} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#compartment_id #compartment_id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#display_name #display_name} proprety
    # @option attributes [DateTime] :time_created The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#time_created #time_created} proprety
    # @option attributes [String] :description The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#description #description} proprety
    # @option attributes [String] :availability The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#availability #availability} proprety
    # @option attributes [String] :repo_id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#repo_id #repo_id} proprety
    # @option attributes [String] :os_family The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#os_family #os_family} proprety
    # @option attributes [String] :arch_type The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#arch_type #arch_type} proprety
    # @option attributes [String] :lifecycle_state The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#lifecycle_state #lifecycle_state} proprety
    # @option attributes [Integer] :package_count The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#package_count #package_count} proprety
    # @option attributes [String] :url The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#url #url} proprety
    # @option attributes [String] :checksum_type The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#checksum_type #checksum_type} proprety
    # @option attributes [String] :gpg_key_url The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#gpg_key_url #gpg_key_url} proprety
    # @option attributes [String] :gpg_key_id The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#gpg_key_id #gpg_key_id} proprety
    # @option attributes [String] :gpg_key_fingerprint The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#gpg_key_fingerprint #gpg_key_fingerprint} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#defined_tags #defined_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {OCI::OsManagementHub::Models::SoftwareSource#system_tags #system_tags} proprety
    # @option attributes [Array<OCI::OsManagementHub::Models::Id>] :vendor_software_sources The value to assign to the {#vendor_software_sources} property
    # @option attributes [OCI::OsManagementHub::Models::CustomSoftwareSourceFilter] :custom_software_source_filter The value to assign to the {#custom_software_source_filter} property
    # @option attributes [BOOLEAN] :is_automatically_updated The value to assign to the {#is_automatically_updated} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['softwareSourceType'] = 'CUSTOM'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.vendor_software_sources = attributes[:'vendorSoftwareSources'] if attributes[:'vendorSoftwareSources']

      raise 'You cannot provide both :vendorSoftwareSources and :vendor_software_sources' if attributes.key?(:'vendorSoftwareSources') && attributes.key?(:'vendor_software_sources')

      self.vendor_software_sources = attributes[:'vendor_software_sources'] if attributes[:'vendor_software_sources']

      self.custom_software_source_filter = attributes[:'customSoftwareSourceFilter'] if attributes[:'customSoftwareSourceFilter']

      raise 'You cannot provide both :customSoftwareSourceFilter and :custom_software_source_filter' if attributes.key?(:'customSoftwareSourceFilter') && attributes.key?(:'custom_software_source_filter')

      self.custom_software_source_filter = attributes[:'custom_software_source_filter'] if attributes[:'custom_software_source_filter']

      self.is_automatically_updated = attributes[:'isAutomaticallyUpdated'] unless attributes[:'isAutomaticallyUpdated'].nil?
      self.is_automatically_updated = true if is_automatically_updated.nil? && !attributes.key?(:'isAutomaticallyUpdated') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isAutomaticallyUpdated and :is_automatically_updated' if attributes.key?(:'isAutomaticallyUpdated') && attributes.key?(:'is_automatically_updated')

      self.is_automatically_updated = attributes[:'is_automatically_updated'] unless attributes[:'is_automatically_updated'].nil?
      self.is_automatically_updated = true if is_automatically_updated.nil? && !attributes.key?(:'isAutomaticallyUpdated') && !attributes.key?(:'is_automatically_updated') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        time_created == other.time_created &&
        description == other.description &&
        software_source_type == other.software_source_type &&
        availability == other.availability &&
        repo_id == other.repo_id &&
        os_family == other.os_family &&
        arch_type == other.arch_type &&
        lifecycle_state == other.lifecycle_state &&
        package_count == other.package_count &&
        url == other.url &&
        checksum_type == other.checksum_type &&
        gpg_key_url == other.gpg_key_url &&
        gpg_key_id == other.gpg_key_id &&
        gpg_key_fingerprint == other.gpg_key_fingerprint &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        vendor_software_sources == other.vendor_software_sources &&
        custom_software_source_filter == other.custom_software_source_filter &&
        is_automatically_updated == other.is_automatically_updated
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, time_created, description, software_source_type, availability, repo_id, os_family, arch_type, lifecycle_state, package_count, url, checksum_type, gpg_key_url, gpg_key_id, gpg_key_fingerprint, freeform_tags, defined_tags, system_tags, vendor_software_sources, custom_software_source_filter, is_automatically_updated].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
