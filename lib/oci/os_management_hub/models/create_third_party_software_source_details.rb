# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require_relative 'create_software_source_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Provides the information used to create a third-party software source.
  class OsManagementHub::Models::CreateThirdPartySoftwareSourceDetails < OsManagementHub::Models::CreateSoftwareSourceDetails
    OS_FAMILY_ENUM = [
      OS_FAMILY_ORACLE_LINUX_9 = 'ORACLE_LINUX_9'.freeze,
      OS_FAMILY_ORACLE_LINUX_8 = 'ORACLE_LINUX_8'.freeze,
      OS_FAMILY_ORACLE_LINUX_7 = 'ORACLE_LINUX_7'.freeze,
      OS_FAMILY_ORACLE_LINUX_6 = 'ORACLE_LINUX_6'.freeze,
      OS_FAMILY_WINDOWS_SERVER_2016 = 'WINDOWS_SERVER_2016'.freeze,
      OS_FAMILY_WINDOWS_SERVER_2019 = 'WINDOWS_SERVER_2019'.freeze,
      OS_FAMILY_WINDOWS_SERVER_2022 = 'WINDOWS_SERVER_2022'.freeze,
      OS_FAMILY_ALL = 'ALL'.freeze
    ].freeze

    ARCH_TYPE_ENUM = [
      ARCH_TYPE_X86_64 = 'X86_64'.freeze,
      ARCH_TYPE_AARCH64 = 'AARCH64'.freeze,
      ARCH_TYPE_I686 = 'I686'.freeze,
      ARCH_TYPE_NOARCH = 'NOARCH'.freeze,
      ARCH_TYPE_SRC = 'SRC'.freeze,
      ARCH_TYPE_I386 = 'I386'.freeze
    ].freeze

    # **[Required]** The OS family for the third-party software source.
    # @return [String]
    attr_reader :os_family

    # **[Required]** The architecture type supported by the third-party software source.
    # @return [String]
    attr_reader :arch_type

    # **[Required]** URL for the third-party software source.
    # @return [String]
    attr_accessor :url

    # URI of the GPG key for this software source.
    # @return [String]
    attr_accessor :gpg_key_url

    # Whether signature verification should be done for the software source.
    # @return [BOOLEAN]
    attr_accessor :is_gpg_check_enabled

    # Whether SSL validation needs to be turned on
    # @return [BOOLEAN]
    attr_accessor :is_ssl_verify_enabled

    # Advanced repository options for the software source
    # @return [String]
    attr_accessor :advanced_repo_options

    # Whether this software source can be synced to a management station
    # @return [BOOLEAN]
    attr_accessor :is_mirror_sync_allowed

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'description': :'description',
        'software_source_type': :'softwareSourceType',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'os_family': :'osFamily',
        'arch_type': :'archType',
        'url': :'url',
        'gpg_key_url': :'gpgKeyUrl',
        'is_gpg_check_enabled': :'isGpgCheckEnabled',
        'is_ssl_verify_enabled': :'isSslVerifyEnabled',
        'advanced_repo_options': :'advancedRepoOptions',
        'is_mirror_sync_allowed': :'isMirrorSyncAllowed'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'display_name': :'String',
        'description': :'String',
        'software_source_type': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'os_family': :'String',
        'arch_type': :'String',
        'url': :'String',
        'gpg_key_url': :'String',
        'is_gpg_check_enabled': :'BOOLEAN',
        'is_ssl_verify_enabled': :'BOOLEAN',
        'advanced_repo_options': :'String',
        'is_mirror_sync_allowed': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {OCI::OsManagementHub::Models::CreateSoftwareSourceDetails#compartment_id #compartment_id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::OsManagementHub::Models::CreateSoftwareSourceDetails#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::OsManagementHub::Models::CreateSoftwareSourceDetails#description #description} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::OsManagementHub::Models::CreateSoftwareSourceDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::OsManagementHub::Models::CreateSoftwareSourceDetails#defined_tags #defined_tags} proprety
    # @option attributes [String] :os_family The value to assign to the {#os_family} property
    # @option attributes [String] :arch_type The value to assign to the {#arch_type} property
    # @option attributes [String] :url The value to assign to the {#url} property
    # @option attributes [String] :gpg_key_url The value to assign to the {#gpg_key_url} property
    # @option attributes [BOOLEAN] :is_gpg_check_enabled The value to assign to the {#is_gpg_check_enabled} property
    # @option attributes [BOOLEAN] :is_ssl_verify_enabled The value to assign to the {#is_ssl_verify_enabled} property
    # @option attributes [String] :advanced_repo_options The value to assign to the {#advanced_repo_options} property
    # @option attributes [BOOLEAN] :is_mirror_sync_allowed The value to assign to the {#is_mirror_sync_allowed} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['softwareSourceType'] = 'THIRD_PARTY'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.os_family = attributes[:'osFamily'] if attributes[:'osFamily']

      raise 'You cannot provide both :osFamily and :os_family' if attributes.key?(:'osFamily') && attributes.key?(:'os_family')

      self.os_family = attributes[:'os_family'] if attributes[:'os_family']

      self.arch_type = attributes[:'archType'] if attributes[:'archType']

      raise 'You cannot provide both :archType and :arch_type' if attributes.key?(:'archType') && attributes.key?(:'arch_type')

      self.arch_type = attributes[:'arch_type'] if attributes[:'arch_type']

      self.url = attributes[:'url'] if attributes[:'url']

      self.gpg_key_url = attributes[:'gpgKeyUrl'] if attributes[:'gpgKeyUrl']

      raise 'You cannot provide both :gpgKeyUrl and :gpg_key_url' if attributes.key?(:'gpgKeyUrl') && attributes.key?(:'gpg_key_url')

      self.gpg_key_url = attributes[:'gpg_key_url'] if attributes[:'gpg_key_url']

      self.is_gpg_check_enabled = attributes[:'isGpgCheckEnabled'] unless attributes[:'isGpgCheckEnabled'].nil?
      self.is_gpg_check_enabled = true if is_gpg_check_enabled.nil? && !attributes.key?(:'isGpgCheckEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isGpgCheckEnabled and :is_gpg_check_enabled' if attributes.key?(:'isGpgCheckEnabled') && attributes.key?(:'is_gpg_check_enabled')

      self.is_gpg_check_enabled = attributes[:'is_gpg_check_enabled'] unless attributes[:'is_gpg_check_enabled'].nil?
      self.is_gpg_check_enabled = true if is_gpg_check_enabled.nil? && !attributes.key?(:'isGpgCheckEnabled') && !attributes.key?(:'is_gpg_check_enabled') # rubocop:disable Style/StringLiterals

      self.is_ssl_verify_enabled = attributes[:'isSslVerifyEnabled'] unless attributes[:'isSslVerifyEnabled'].nil?
      self.is_ssl_verify_enabled = true if is_ssl_verify_enabled.nil? && !attributes.key?(:'isSslVerifyEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSslVerifyEnabled and :is_ssl_verify_enabled' if attributes.key?(:'isSslVerifyEnabled') && attributes.key?(:'is_ssl_verify_enabled')

      self.is_ssl_verify_enabled = attributes[:'is_ssl_verify_enabled'] unless attributes[:'is_ssl_verify_enabled'].nil?
      self.is_ssl_verify_enabled = true if is_ssl_verify_enabled.nil? && !attributes.key?(:'isSslVerifyEnabled') && !attributes.key?(:'is_ssl_verify_enabled') # rubocop:disable Style/StringLiterals

      self.advanced_repo_options = attributes[:'advancedRepoOptions'] if attributes[:'advancedRepoOptions']

      raise 'You cannot provide both :advancedRepoOptions and :advanced_repo_options' if attributes.key?(:'advancedRepoOptions') && attributes.key?(:'advanced_repo_options')

      self.advanced_repo_options = attributes[:'advanced_repo_options'] if attributes[:'advanced_repo_options']

      self.is_mirror_sync_allowed = attributes[:'isMirrorSyncAllowed'] unless attributes[:'isMirrorSyncAllowed'].nil?
      self.is_mirror_sync_allowed = false if is_mirror_sync_allowed.nil? && !attributes.key?(:'isMirrorSyncAllowed') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isMirrorSyncAllowed and :is_mirror_sync_allowed' if attributes.key?(:'isMirrorSyncAllowed') && attributes.key?(:'is_mirror_sync_allowed')

      self.is_mirror_sync_allowed = attributes[:'is_mirror_sync_allowed'] unless attributes[:'is_mirror_sync_allowed'].nil?
      self.is_mirror_sync_allowed = false if is_mirror_sync_allowed.nil? && !attributes.key?(:'isMirrorSyncAllowed') && !attributes.key?(:'is_mirror_sync_allowed') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] os_family Object to be assigned
    def os_family=(os_family)
      raise "Invalid value for 'os_family': this must be one of the values in OS_FAMILY_ENUM." if os_family && !OS_FAMILY_ENUM.include?(os_family)

      @os_family = os_family
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] arch_type Object to be assigned
    def arch_type=(arch_type)
      raise "Invalid value for 'arch_type': this must be one of the values in ARCH_TYPE_ENUM." if arch_type && !ARCH_TYPE_ENUM.include?(arch_type)

      @arch_type = arch_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        description == other.description &&
        software_source_type == other.software_source_type &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        os_family == other.os_family &&
        arch_type == other.arch_type &&
        url == other.url &&
        gpg_key_url == other.gpg_key_url &&
        is_gpg_check_enabled == other.is_gpg_check_enabled &&
        is_ssl_verify_enabled == other.is_ssl_verify_enabled &&
        advanced_repo_options == other.advanced_repo_options &&
        is_mirror_sync_allowed == other.is_mirror_sync_allowed
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, display_name, description, software_source_type, freeform_tags, defined_tags, os_family, arch_type, url, gpg_key_url, is_gpg_check_enabled, is_ssl_verify_enabled, advanced_repo_options, is_mirror_sync_allowed].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
