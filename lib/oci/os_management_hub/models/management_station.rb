# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Detailed information about an ManagementStation config
  class OsManagementHub::Models::ManagementStation
    OVERALL_STATE_ENUM = [
      OVERALL_STATE_NORMAL = 'NORMAL'.freeze,
      OVERALL_STATE_REGISTRATIONERROR = 'REGISTRATIONERROR'.freeze,
      OVERALL_STATE_SYNCING = 'SYNCING'.freeze,
      OVERALL_STATE_SYNCFAILED = 'SYNCFAILED'.freeze,
      OVERALL_STATE_WARNING = 'WARNING'.freeze,
      OVERALL_STATE_ERROR = 'ERROR'.freeze,
      OVERALL_STATE_UNAVAILABLE = 'UNAVAILABLE'.freeze,
      OVERALL_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** OCID for the ManagementStation config
    # @return [String]
    attr_accessor :id

    # OCID for the Instance associated with the Management Station.
    # @return [String]
    attr_accessor :managed_instance_id

    # **[Required]** The OCID of the tenancy containing the Management Station.
    # @return [String]
    attr_accessor :compartment_id

    # OCID of the Scheduled Job for mirror sync
    # @return [String]
    attr_accessor :scheduled_job_id

    # OCID of the Profile associated with the Station
    # @return [String]
    attr_accessor :profile_id

    # **[Required]** ManagementStation name
    # @return [String]
    attr_accessor :display_name

    # Details describing the ManagementStation config.
    # @return [String]
    attr_accessor :description

    # **[Required]** Name of the host
    # @return [String]
    attr_accessor :hostname

    # Current state of the mirroring
    # @return [String]
    attr_reader :overall_state

    # A decimal number representing the completeness percentage
    # @return [Integer]
    attr_accessor :overall_percentage

    # A decimal number representing the mirror capacity
    # @return [Integer]
    attr_accessor :mirror_capacity

    # A decimal number representing the total of repos
    # @return [Integer]
    attr_accessor :total_mirrors

    # @return [OCI::OsManagementHub::Models::MirrorSyncStatus]
    attr_accessor :mirror_sync_status

    # This attribute is required.
    # @return [OCI::OsManagementHub::Models::ProxyConfiguration]
    attr_accessor :proxy

    # This attribute is required.
    # @return [OCI::OsManagementHub::Models::MirrorConfiguration]
    attr_accessor :mirror

    # The current state of the Management Station config.
    # @return [String]
    attr_reader :lifecycle_state

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'managed_instance_id': :'managedInstanceId',
        'compartment_id': :'compartmentId',
        'scheduled_job_id': :'scheduledJobId',
        'profile_id': :'profileId',
        'display_name': :'displayName',
        'description': :'description',
        'hostname': :'hostname',
        'overall_state': :'overallState',
        'overall_percentage': :'overallPercentage',
        'mirror_capacity': :'mirrorCapacity',
        'total_mirrors': :'totalMirrors',
        'mirror_sync_status': :'mirrorSyncStatus',
        'proxy': :'proxy',
        'mirror': :'mirror',
        'lifecycle_state': :'lifecycleState',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'managed_instance_id': :'String',
        'compartment_id': :'String',
        'scheduled_job_id': :'String',
        'profile_id': :'String',
        'display_name': :'String',
        'description': :'String',
        'hostname': :'String',
        'overall_state': :'String',
        'overall_percentage': :'Integer',
        'mirror_capacity': :'Integer',
        'total_mirrors': :'Integer',
        'mirror_sync_status': :'OCI::OsManagementHub::Models::MirrorSyncStatus',
        'proxy': :'OCI::OsManagementHub::Models::ProxyConfiguration',
        'mirror': :'OCI::OsManagementHub::Models::MirrorConfiguration',
        'lifecycle_state': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :managed_instance_id The value to assign to the {#managed_instance_id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :scheduled_job_id The value to assign to the {#scheduled_job_id} property
    # @option attributes [String] :profile_id The value to assign to the {#profile_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :hostname The value to assign to the {#hostname} property
    # @option attributes [String] :overall_state The value to assign to the {#overall_state} property
    # @option attributes [Integer] :overall_percentage The value to assign to the {#overall_percentage} property
    # @option attributes [Integer] :mirror_capacity The value to assign to the {#mirror_capacity} property
    # @option attributes [Integer] :total_mirrors The value to assign to the {#total_mirrors} property
    # @option attributes [OCI::OsManagementHub::Models::MirrorSyncStatus] :mirror_sync_status The value to assign to the {#mirror_sync_status} property
    # @option attributes [OCI::OsManagementHub::Models::ProxyConfiguration] :proxy The value to assign to the {#proxy} property
    # @option attributes [OCI::OsManagementHub::Models::MirrorConfiguration] :mirror The value to assign to the {#mirror} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.managed_instance_id = attributes[:'managedInstanceId'] if attributes[:'managedInstanceId']

      raise 'You cannot provide both :managedInstanceId and :managed_instance_id' if attributes.key?(:'managedInstanceId') && attributes.key?(:'managed_instance_id')

      self.managed_instance_id = attributes[:'managed_instance_id'] if attributes[:'managed_instance_id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.scheduled_job_id = attributes[:'scheduledJobId'] if attributes[:'scheduledJobId']

      raise 'You cannot provide both :scheduledJobId and :scheduled_job_id' if attributes.key?(:'scheduledJobId') && attributes.key?(:'scheduled_job_id')

      self.scheduled_job_id = attributes[:'scheduled_job_id'] if attributes[:'scheduled_job_id']

      self.profile_id = attributes[:'profileId'] if attributes[:'profileId']

      raise 'You cannot provide both :profileId and :profile_id' if attributes.key?(:'profileId') && attributes.key?(:'profile_id')

      self.profile_id = attributes[:'profile_id'] if attributes[:'profile_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.hostname = attributes[:'hostname'] if attributes[:'hostname']

      self.overall_state = attributes[:'overallState'] if attributes[:'overallState']

      raise 'You cannot provide both :overallState and :overall_state' if attributes.key?(:'overallState') && attributes.key?(:'overall_state')

      self.overall_state = attributes[:'overall_state'] if attributes[:'overall_state']

      self.overall_percentage = attributes[:'overallPercentage'] if attributes[:'overallPercentage']

      raise 'You cannot provide both :overallPercentage and :overall_percentage' if attributes.key?(:'overallPercentage') && attributes.key?(:'overall_percentage')

      self.overall_percentage = attributes[:'overall_percentage'] if attributes[:'overall_percentage']

      self.mirror_capacity = attributes[:'mirrorCapacity'] if attributes[:'mirrorCapacity']

      raise 'You cannot provide both :mirrorCapacity and :mirror_capacity' if attributes.key?(:'mirrorCapacity') && attributes.key?(:'mirror_capacity')

      self.mirror_capacity = attributes[:'mirror_capacity'] if attributes[:'mirror_capacity']

      self.total_mirrors = attributes[:'totalMirrors'] if attributes[:'totalMirrors']

      raise 'You cannot provide both :totalMirrors and :total_mirrors' if attributes.key?(:'totalMirrors') && attributes.key?(:'total_mirrors')

      self.total_mirrors = attributes[:'total_mirrors'] if attributes[:'total_mirrors']

      self.mirror_sync_status = attributes[:'mirrorSyncStatus'] if attributes[:'mirrorSyncStatus']

      raise 'You cannot provide both :mirrorSyncStatus and :mirror_sync_status' if attributes.key?(:'mirrorSyncStatus') && attributes.key?(:'mirror_sync_status')

      self.mirror_sync_status = attributes[:'mirror_sync_status'] if attributes[:'mirror_sync_status']

      self.proxy = attributes[:'proxy'] if attributes[:'proxy']

      self.mirror = attributes[:'mirror'] if attributes[:'mirror']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] overall_state Object to be assigned
    def overall_state=(overall_state)
      # rubocop:disable Style/ConditionalAssignment
      if overall_state && !OVERALL_STATE_ENUM.include?(overall_state)
        OCI.logger.debug("Unknown value for 'overall_state' [" + overall_state + "]. Mapping to 'OVERALL_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @overall_state = OVERALL_STATE_UNKNOWN_ENUM_VALUE
      else
        @overall_state = overall_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        managed_instance_id == other.managed_instance_id &&
        compartment_id == other.compartment_id &&
        scheduled_job_id == other.scheduled_job_id &&
        profile_id == other.profile_id &&
        display_name == other.display_name &&
        description == other.description &&
        hostname == other.hostname &&
        overall_state == other.overall_state &&
        overall_percentage == other.overall_percentage &&
        mirror_capacity == other.mirror_capacity &&
        total_mirrors == other.total_mirrors &&
        mirror_sync_status == other.mirror_sync_status &&
        proxy == other.proxy &&
        mirror == other.mirror &&
        lifecycle_state == other.lifecycle_state &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, managed_instance_id, compartment_id, scheduled_job_id, profile_id, display_name, description, hostname, overall_state, overall_percentage, mirror_capacity, total_mirrors, mirror_sync_status, proxy, mirror, lifecycle_state, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
