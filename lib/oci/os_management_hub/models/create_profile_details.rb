# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220901
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Provides the information used to create a new registration profile.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class OsManagementHub::Models::CreateProfileDetails
    PROFILE_TYPE_ENUM = [
      PROFILE_TYPE_SOFTWARESOURCE = 'SOFTWARESOURCE'.freeze,
      PROFILE_TYPE_GROUP = 'GROUP'.freeze,
      PROFILE_TYPE_LIFECYCLE = 'LIFECYCLE'.freeze,
      PROFILE_TYPE_STATION = 'STATION'.freeze,
      PROFILE_TYPE_WINDOWS_STANDALONE = 'WINDOWS_STANDALONE'.freeze
    ].freeze

    # **[Required]** A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains the registration profile.
    # @return [String]
    attr_accessor :compartment_id

    # User-specified description of the registration profile.
    # @return [String]
    attr_accessor :description

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the management station to associate with an instance once registered. Associating with a management station applies only to non-OCI instances.
    # @return [String]
    attr_accessor :management_station_id

    # **[Required]** The type of profile.
    # @return [String]
    attr_reader :profile_type

    # The type of instance to register.
    # @return [String]
    attr_accessor :registration_type

    # Indicates if the profile is set as the default. There is exactly one default profile for a specified architecture, OS family, registration type, and vendor. When registering an instance with the corresonding characteristics, the default profile is used, unless another profile is specified.
    #
    # @return [BOOLEAN]
    attr_accessor :is_default_profile

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'description': :'description',
        'management_station_id': :'managementStationId',
        'profile_type': :'profileType',
        'registration_type': :'registrationType',
        'is_default_profile': :'isDefaultProfile',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'compartment_id': :'String',
        'description': :'String',
        'management_station_id': :'String',
        'profile_type': :'String',
        'registration_type': :'String',
        'is_default_profile': :'BOOLEAN',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'profileType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::OsManagementHub::Models::CreateGroupProfileDetails' if type == 'GROUP'
      return 'OCI::OsManagementHub::Models::CreateStationProfileDetails' if type == 'STATION'
      return 'OCI::OsManagementHub::Models::CreateSoftwareSourceProfileDetails' if type == 'SOFTWARESOURCE'
      return 'OCI::OsManagementHub::Models::CreateLifecycleProfileDetails' if type == 'LIFECYCLE'

      # TODO: Log a warning when the subtype is not found.
      'OCI::OsManagementHub::Models::CreateProfileDetails'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :management_station_id The value to assign to the {#management_station_id} property
    # @option attributes [String] :profile_type The value to assign to the {#profile_type} property
    # @option attributes [String] :registration_type The value to assign to the {#registration_type} property
    # @option attributes [BOOLEAN] :is_default_profile The value to assign to the {#is_default_profile} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.description = attributes[:'description'] if attributes[:'description']

      self.management_station_id = attributes[:'managementStationId'] if attributes[:'managementStationId']

      raise 'You cannot provide both :managementStationId and :management_station_id' if attributes.key?(:'managementStationId') && attributes.key?(:'management_station_id')

      self.management_station_id = attributes[:'management_station_id'] if attributes[:'management_station_id']

      self.profile_type = attributes[:'profileType'] if attributes[:'profileType']

      raise 'You cannot provide both :profileType and :profile_type' if attributes.key?(:'profileType') && attributes.key?(:'profile_type')

      self.profile_type = attributes[:'profile_type'] if attributes[:'profile_type']

      self.registration_type = attributes[:'registrationType'] if attributes[:'registrationType']

      raise 'You cannot provide both :registrationType and :registration_type' if attributes.key?(:'registrationType') && attributes.key?(:'registration_type')

      self.registration_type = attributes[:'registration_type'] if attributes[:'registration_type']

      self.is_default_profile = attributes[:'isDefaultProfile'] unless attributes[:'isDefaultProfile'].nil?
      self.is_default_profile = false if is_default_profile.nil? && !attributes.key?(:'isDefaultProfile') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDefaultProfile and :is_default_profile' if attributes.key?(:'isDefaultProfile') && attributes.key?(:'is_default_profile')

      self.is_default_profile = attributes[:'is_default_profile'] unless attributes[:'is_default_profile'].nil?
      self.is_default_profile = false if is_default_profile.nil? && !attributes.key?(:'isDefaultProfile') && !attributes.key?(:'is_default_profile') # rubocop:disable Style/StringLiterals

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] profile_type Object to be assigned
    def profile_type=(profile_type)
      raise "Invalid value for 'profile_type': this must be one of the values in PROFILE_TYPE_ENUM." if profile_type && !PROFILE_TYPE_ENUM.include?(profile_type)

      @profile_type = profile_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        description == other.description &&
        management_station_id == other.management_station_id &&
        profile_type == other.profile_type &&
        registration_type == other.registration_type &&
        is_default_profile == other.is_default_profile &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, compartment_id, description, management_station_id, profile_type, registration_type, is_default_profile, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
