# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summarizes a specific ADDM recommendation
  class Opsi::Models::AddmDbRecommendationAggregation
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database insight.
    # @return [String]
    attr_accessor :id

    # Type of recommendation
    # @return [String]
    attr_accessor :type

    # **[Required]** Recommendation message
    # @return [String]
    attr_accessor :message

    # Indicates implementation of the recommended action requires a database restart in order for it
    # to take effect. Possible values \"Y\", \"N\" and null.
    #
    # @return [String]
    attr_accessor :requires_db_restart

    # Actions that can be performed to implement the recommendation (such as 'ALTER PARAMETER',
    # 'RUN SQL TUNING ADVISOR')
    #
    # @return [Array<String>]
    attr_accessor :implement_actions

    # Recommendation message
    # @return [String]
    attr_accessor :rationale

    # Maximum estimated benefit in terms of percentage of total activity
    # @return [Float]
    attr_accessor :max_benefit_percent

    # Overall estimated benefit in terms of percentage of total activity
    # @return [Float]
    attr_accessor :overall_benefit_percent

    # Maximum estimated benefit in terms of average active sessions
    # @return [Float]
    attr_accessor :max_benefit_avg_active_sessions

    # Number of occurrences for this recommendation
    # @return [Integer]
    attr_accessor :frequency_count

    # @return [OCI::Opsi::Models::RelatedObjectTypeDetails]
    attr_accessor :related_object

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'type': :'type',
        'message': :'message',
        'requires_db_restart': :'requiresDbRestart',
        'implement_actions': :'implementActions',
        'rationale': :'rationale',
        'max_benefit_percent': :'maxBenefitPercent',
        'overall_benefit_percent': :'overallBenefitPercent',
        'max_benefit_avg_active_sessions': :'maxBenefitAvgActiveSessions',
        'frequency_count': :'frequencyCount',
        'related_object': :'relatedObject'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'type': :'String',
        'message': :'String',
        'requires_db_restart': :'String',
        'implement_actions': :'Array<String>',
        'rationale': :'String',
        'max_benefit_percent': :'Float',
        'overall_benefit_percent': :'Float',
        'max_benefit_avg_active_sessions': :'Float',
        'frequency_count': :'Integer',
        'related_object': :'OCI::Opsi::Models::RelatedObjectTypeDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :message The value to assign to the {#message} property
    # @option attributes [String] :requires_db_restart The value to assign to the {#requires_db_restart} property
    # @option attributes [Array<String>] :implement_actions The value to assign to the {#implement_actions} property
    # @option attributes [String] :rationale The value to assign to the {#rationale} property
    # @option attributes [Float] :max_benefit_percent The value to assign to the {#max_benefit_percent} property
    # @option attributes [Float] :overall_benefit_percent The value to assign to the {#overall_benefit_percent} property
    # @option attributes [Float] :max_benefit_avg_active_sessions The value to assign to the {#max_benefit_avg_active_sessions} property
    # @option attributes [Integer] :frequency_count The value to assign to the {#frequency_count} property
    # @option attributes [OCI::Opsi::Models::RelatedObjectTypeDetails] :related_object The value to assign to the {#related_object} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.type = attributes[:'type'] if attributes[:'type']

      self.message = attributes[:'message'] if attributes[:'message']

      self.requires_db_restart = attributes[:'requiresDbRestart'] if attributes[:'requiresDbRestart']

      raise 'You cannot provide both :requiresDbRestart and :requires_db_restart' if attributes.key?(:'requiresDbRestart') && attributes.key?(:'requires_db_restart')

      self.requires_db_restart = attributes[:'requires_db_restart'] if attributes[:'requires_db_restart']

      self.implement_actions = attributes[:'implementActions'] if attributes[:'implementActions']

      raise 'You cannot provide both :implementActions and :implement_actions' if attributes.key?(:'implementActions') && attributes.key?(:'implement_actions')

      self.implement_actions = attributes[:'implement_actions'] if attributes[:'implement_actions']

      self.rationale = attributes[:'rationale'] if attributes[:'rationale']

      self.max_benefit_percent = attributes[:'maxBenefitPercent'] if attributes[:'maxBenefitPercent']

      raise 'You cannot provide both :maxBenefitPercent and :max_benefit_percent' if attributes.key?(:'maxBenefitPercent') && attributes.key?(:'max_benefit_percent')

      self.max_benefit_percent = attributes[:'max_benefit_percent'] if attributes[:'max_benefit_percent']

      self.overall_benefit_percent = attributes[:'overallBenefitPercent'] if attributes[:'overallBenefitPercent']

      raise 'You cannot provide both :overallBenefitPercent and :overall_benefit_percent' if attributes.key?(:'overallBenefitPercent') && attributes.key?(:'overall_benefit_percent')

      self.overall_benefit_percent = attributes[:'overall_benefit_percent'] if attributes[:'overall_benefit_percent']

      self.max_benefit_avg_active_sessions = attributes[:'maxBenefitAvgActiveSessions'] if attributes[:'maxBenefitAvgActiveSessions']

      raise 'You cannot provide both :maxBenefitAvgActiveSessions and :max_benefit_avg_active_sessions' if attributes.key?(:'maxBenefitAvgActiveSessions') && attributes.key?(:'max_benefit_avg_active_sessions')

      self.max_benefit_avg_active_sessions = attributes[:'max_benefit_avg_active_sessions'] if attributes[:'max_benefit_avg_active_sessions']

      self.frequency_count = attributes[:'frequencyCount'] if attributes[:'frequencyCount']

      raise 'You cannot provide both :frequencyCount and :frequency_count' if attributes.key?(:'frequencyCount') && attributes.key?(:'frequency_count')

      self.frequency_count = attributes[:'frequency_count'] if attributes[:'frequency_count']

      self.related_object = attributes[:'relatedObject'] if attributes[:'relatedObject']

      raise 'You cannot provide both :relatedObject and :related_object' if attributes.key?(:'relatedObject') && attributes.key?(:'related_object')

      self.related_object = attributes[:'related_object'] if attributes[:'related_object']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        type == other.type &&
        message == other.message &&
        requires_db_restart == other.requires_db_restart &&
        implement_actions == other.implement_actions &&
        rationale == other.rationale &&
        max_benefit_percent == other.max_benefit_percent &&
        overall_benefit_percent == other.overall_benefit_percent &&
        max_benefit_avg_active_sessions == other.max_benefit_avg_active_sessions &&
        frequency_count == other.frequency_count &&
        related_object == other.related_object
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, type, message, requires_db_restart, implement_actions, rationale, max_benefit_percent, overall_benefit_percent, max_benefit_avg_active_sessions, frequency_count, related_object].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
