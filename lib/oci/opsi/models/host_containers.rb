# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require_relative 'host_configuration_metric_group'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Host Containers details
  #
  class Opsi::Models::HostContainers < Opsi::Models::HostConfigurationMetricGroup
    # Container Id (full)
    # @return [String]
    attr_accessor :container_id

    # Container Name
    # @return [String]
    attr_accessor :container_name

    # Container Image
    # @return [String]
    attr_accessor :container_image

    # Container Image Tag (version)
    # @return [String]
    attr_accessor :container_image_tag

    # Container Image Digest
    # @return [String]
    attr_accessor :container_image_digest

    # Container open ports
    # @return [String]
    attr_accessor :container_ports

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'metricName',
        'time_collected': :'timeCollected',
        'container_id': :'containerId',
        'container_name': :'containerName',
        'container_image': :'containerImage',
        'container_image_tag': :'containerImageTag',
        'container_image_digest': :'containerImageDigest',
        'container_ports': :'containerPorts'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'String',
        'time_collected': :'DateTime',
        'container_id': :'String',
        'container_name': :'String',
        'container_image': :'String',
        'container_image_tag': :'String',
        'container_image_digest': :'String',
        'container_ports': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_collected The value to assign to the {OCI::Opsi::Models::HostConfigurationMetricGroup#time_collected #time_collected} proprety
    # @option attributes [String] :container_id The value to assign to the {#container_id} property
    # @option attributes [String] :container_name The value to assign to the {#container_name} property
    # @option attributes [String] :container_image The value to assign to the {#container_image} property
    # @option attributes [String] :container_image_tag The value to assign to the {#container_image_tag} property
    # @option attributes [String] :container_image_digest The value to assign to the {#container_image_digest} property
    # @option attributes [String] :container_ports The value to assign to the {#container_ports} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['metricName'] = 'HOST_CONTAINERS'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.container_id = attributes[:'containerId'] if attributes[:'containerId']

      raise 'You cannot provide both :containerId and :container_id' if attributes.key?(:'containerId') && attributes.key?(:'container_id')

      self.container_id = attributes[:'container_id'] if attributes[:'container_id']

      self.container_name = attributes[:'containerName'] if attributes[:'containerName']

      raise 'You cannot provide both :containerName and :container_name' if attributes.key?(:'containerName') && attributes.key?(:'container_name')

      self.container_name = attributes[:'container_name'] if attributes[:'container_name']

      self.container_image = attributes[:'containerImage'] if attributes[:'containerImage']

      raise 'You cannot provide both :containerImage and :container_image' if attributes.key?(:'containerImage') && attributes.key?(:'container_image')

      self.container_image = attributes[:'container_image'] if attributes[:'container_image']

      self.container_image_tag = attributes[:'containerImageTag'] if attributes[:'containerImageTag']

      raise 'You cannot provide both :containerImageTag and :container_image_tag' if attributes.key?(:'containerImageTag') && attributes.key?(:'container_image_tag')

      self.container_image_tag = attributes[:'container_image_tag'] if attributes[:'container_image_tag']

      self.container_image_digest = attributes[:'containerImageDigest'] if attributes[:'containerImageDigest']

      raise 'You cannot provide both :containerImageDigest and :container_image_digest' if attributes.key?(:'containerImageDigest') && attributes.key?(:'container_image_digest')

      self.container_image_digest = attributes[:'container_image_digest'] if attributes[:'container_image_digest']

      self.container_ports = attributes[:'containerPorts'] if attributes[:'containerPorts']

      raise 'You cannot provide both :containerPorts and :container_ports' if attributes.key?(:'containerPorts') && attributes.key?(:'container_ports')

      self.container_ports = attributes[:'container_ports'] if attributes[:'container_ports']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        metric_name == other.metric_name &&
        time_collected == other.time_collected &&
        container_id == other.container_id &&
        container_name == other.container_name &&
        container_image == other.container_image &&
        container_image_tag == other.container_image_tag &&
        container_image_digest == other.container_image_digest &&
        container_ports == other.container_ports
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [metric_name, time_collected, container_id, container_name, container_image, container_image_tag, container_image_digest, container_ports].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
