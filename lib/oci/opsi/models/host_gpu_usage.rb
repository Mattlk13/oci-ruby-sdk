# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require_relative 'host_performance_metric_group'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # GPU performance metrics
  #
  class Opsi::Models::HostGpuUsage < Opsi::Models::HostPerformanceMetricGroup
    # GPU Identifier
    # @return [Integer]
    attr_accessor :gpu_id

    # GPU Utilization Percent
    # @return [Float]
    attr_accessor :utilization

    # GPU Memory Utilization Percent
    # @return [Float]
    attr_accessor :memory_utilization

    # GPU Power Draw in Watts
    # @return [Float]
    attr_accessor :power_draw

    # GPU Temperature in Celsius
    # @return [Float]
    attr_accessor :temperature

    # GPU Fan Utilization
    # @return [Float]
    attr_accessor :fan_utilization

    # GPU Graphics (Shader) Clock Speed
    # @return [Float]
    attr_accessor :clock_speed_graphics

    # GPU SM (Streaming Multiprocessor) Clock Speed
    # @return [Float]
    attr_accessor :clock_speed_sm

    # GPU Video Clock Speed
    # @return [Float]
    attr_accessor :clock_speed_video

    # GPU Memory Clock Speed
    # @return [Float]
    attr_accessor :clock_speed_memory

    # GPU Performance State
    # @return [Float]
    attr_accessor :performance_state

    # GPU ECC Single Bit Errors
    # @return [Integer]
    attr_accessor :ecc_single_bit_errors

    # GPU ECC Double Bit Errors
    # @return [Integer]
    attr_accessor :ecc_double_bit_errors

    # Nothing running on CPU, clocks are idle
    # @return [Integer]
    attr_accessor :clock_event_idle

    # HW Thermal Slowdown (reducing the core clocks by a factor of 2 or more) is engaged. Temp too high
    # @return [Integer]
    attr_accessor :clock_event_hw_thermal_slow_down

    # SW Power Scaling algorithm is reducing the clocks below requested clocks because the GPU is consuming too much power
    # @return [Integer]
    attr_accessor :clock_event_sw_power_cap

    # GPU clocks are limited by applications clocks setting
    # @return [Integer]
    attr_accessor :clock_event_app_clock_setting

    # HW Power Brake Slowdown (reducing the core clocks by a factor of 2 or more) is engaged
    # @return [Integer]
    attr_accessor :clock_event_hw_power_break

    # SW Thermal capping algorithm is reducing clocks below requested clocks because GPU temperature is higher than Max Operating Temp
    # @return [Integer]
    attr_accessor :clock_event_sw_thermal_slowdown

    # HW Power Brake Slowdown (reducing the core clocks by a factor of 2 or more) is engaged
    # @return [Integer]
    attr_accessor :clock_event_sync_boost

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'metricName',
        'time_collected': :'timeCollected',
        'gpu_id': :'gpuId',
        'utilization': :'utilization',
        'memory_utilization': :'memoryUtilization',
        'power_draw': :'powerDraw',
        'temperature': :'temperature',
        'fan_utilization': :'fanUtilization',
        'clock_speed_graphics': :'clockSpeedGraphics',
        'clock_speed_sm': :'clockSpeedSm',
        'clock_speed_video': :'clockSpeedVideo',
        'clock_speed_memory': :'clockSpeedMemory',
        'performance_state': :'performanceState',
        'ecc_single_bit_errors': :'eccSingleBitErrors',
        'ecc_double_bit_errors': :'eccDoubleBitErrors',
        'clock_event_idle': :'clockEventIdle',
        'clock_event_hw_thermal_slow_down': :'clockEventHwThermalSlowDown',
        'clock_event_sw_power_cap': :'clockEventSwPowerCap',
        'clock_event_app_clock_setting': :'clockEventAppClockSetting',
        'clock_event_hw_power_break': :'clockEventHwPowerBreak',
        'clock_event_sw_thermal_slowdown': :'clockEventSwThermalSlowdown',
        'clock_event_sync_boost': :'clockEventSyncBoost'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'String',
        'time_collected': :'DateTime',
        'gpu_id': :'Integer',
        'utilization': :'Float',
        'memory_utilization': :'Float',
        'power_draw': :'Float',
        'temperature': :'Float',
        'fan_utilization': :'Float',
        'clock_speed_graphics': :'Float',
        'clock_speed_sm': :'Float',
        'clock_speed_video': :'Float',
        'clock_speed_memory': :'Float',
        'performance_state': :'Float',
        'ecc_single_bit_errors': :'Integer',
        'ecc_double_bit_errors': :'Integer',
        'clock_event_idle': :'Integer',
        'clock_event_hw_thermal_slow_down': :'Integer',
        'clock_event_sw_power_cap': :'Integer',
        'clock_event_app_clock_setting': :'Integer',
        'clock_event_hw_power_break': :'Integer',
        'clock_event_sw_thermal_slowdown': :'Integer',
        'clock_event_sync_boost': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_collected The value to assign to the {OCI::Opsi::Models::HostPerformanceMetricGroup#time_collected #time_collected} proprety
    # @option attributes [Integer] :gpu_id The value to assign to the {#gpu_id} property
    # @option attributes [Float] :utilization The value to assign to the {#utilization} property
    # @option attributes [Float] :memory_utilization The value to assign to the {#memory_utilization} property
    # @option attributes [Float] :power_draw The value to assign to the {#power_draw} property
    # @option attributes [Float] :temperature The value to assign to the {#temperature} property
    # @option attributes [Float] :fan_utilization The value to assign to the {#fan_utilization} property
    # @option attributes [Float] :clock_speed_graphics The value to assign to the {#clock_speed_graphics} property
    # @option attributes [Float] :clock_speed_sm The value to assign to the {#clock_speed_sm} property
    # @option attributes [Float] :clock_speed_video The value to assign to the {#clock_speed_video} property
    # @option attributes [Float] :clock_speed_memory The value to assign to the {#clock_speed_memory} property
    # @option attributes [Float] :performance_state The value to assign to the {#performance_state} property
    # @option attributes [Integer] :ecc_single_bit_errors The value to assign to the {#ecc_single_bit_errors} property
    # @option attributes [Integer] :ecc_double_bit_errors The value to assign to the {#ecc_double_bit_errors} property
    # @option attributes [Integer] :clock_event_idle The value to assign to the {#clock_event_idle} property
    # @option attributes [Integer] :clock_event_hw_thermal_slow_down The value to assign to the {#clock_event_hw_thermal_slow_down} property
    # @option attributes [Integer] :clock_event_sw_power_cap The value to assign to the {#clock_event_sw_power_cap} property
    # @option attributes [Integer] :clock_event_app_clock_setting The value to assign to the {#clock_event_app_clock_setting} property
    # @option attributes [Integer] :clock_event_hw_power_break The value to assign to the {#clock_event_hw_power_break} property
    # @option attributes [Integer] :clock_event_sw_thermal_slowdown The value to assign to the {#clock_event_sw_thermal_slowdown} property
    # @option attributes [Integer] :clock_event_sync_boost The value to assign to the {#clock_event_sync_boost} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['metricName'] = 'HOST_GPU_USAGE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.gpu_id = attributes[:'gpuId'] if attributes[:'gpuId']

      raise 'You cannot provide both :gpuId and :gpu_id' if attributes.key?(:'gpuId') && attributes.key?(:'gpu_id')

      self.gpu_id = attributes[:'gpu_id'] if attributes[:'gpu_id']

      self.utilization = attributes[:'utilization'] if attributes[:'utilization']

      self.memory_utilization = attributes[:'memoryUtilization'] if attributes[:'memoryUtilization']

      raise 'You cannot provide both :memoryUtilization and :memory_utilization' if attributes.key?(:'memoryUtilization') && attributes.key?(:'memory_utilization')

      self.memory_utilization = attributes[:'memory_utilization'] if attributes[:'memory_utilization']

      self.power_draw = attributes[:'powerDraw'] if attributes[:'powerDraw']

      raise 'You cannot provide both :powerDraw and :power_draw' if attributes.key?(:'powerDraw') && attributes.key?(:'power_draw')

      self.power_draw = attributes[:'power_draw'] if attributes[:'power_draw']

      self.temperature = attributes[:'temperature'] if attributes[:'temperature']

      self.fan_utilization = attributes[:'fanUtilization'] if attributes[:'fanUtilization']

      raise 'You cannot provide both :fanUtilization and :fan_utilization' if attributes.key?(:'fanUtilization') && attributes.key?(:'fan_utilization')

      self.fan_utilization = attributes[:'fan_utilization'] if attributes[:'fan_utilization']

      self.clock_speed_graphics = attributes[:'clockSpeedGraphics'] if attributes[:'clockSpeedGraphics']

      raise 'You cannot provide both :clockSpeedGraphics and :clock_speed_graphics' if attributes.key?(:'clockSpeedGraphics') && attributes.key?(:'clock_speed_graphics')

      self.clock_speed_graphics = attributes[:'clock_speed_graphics'] if attributes[:'clock_speed_graphics']

      self.clock_speed_sm = attributes[:'clockSpeedSm'] if attributes[:'clockSpeedSm']

      raise 'You cannot provide both :clockSpeedSm and :clock_speed_sm' if attributes.key?(:'clockSpeedSm') && attributes.key?(:'clock_speed_sm')

      self.clock_speed_sm = attributes[:'clock_speed_sm'] if attributes[:'clock_speed_sm']

      self.clock_speed_video = attributes[:'clockSpeedVideo'] if attributes[:'clockSpeedVideo']

      raise 'You cannot provide both :clockSpeedVideo and :clock_speed_video' if attributes.key?(:'clockSpeedVideo') && attributes.key?(:'clock_speed_video')

      self.clock_speed_video = attributes[:'clock_speed_video'] if attributes[:'clock_speed_video']

      self.clock_speed_memory = attributes[:'clockSpeedMemory'] if attributes[:'clockSpeedMemory']

      raise 'You cannot provide both :clockSpeedMemory and :clock_speed_memory' if attributes.key?(:'clockSpeedMemory') && attributes.key?(:'clock_speed_memory')

      self.clock_speed_memory = attributes[:'clock_speed_memory'] if attributes[:'clock_speed_memory']

      self.performance_state = attributes[:'performanceState'] if attributes[:'performanceState']

      raise 'You cannot provide both :performanceState and :performance_state' if attributes.key?(:'performanceState') && attributes.key?(:'performance_state')

      self.performance_state = attributes[:'performance_state'] if attributes[:'performance_state']

      self.ecc_single_bit_errors = attributes[:'eccSingleBitErrors'] if attributes[:'eccSingleBitErrors']

      raise 'You cannot provide both :eccSingleBitErrors and :ecc_single_bit_errors' if attributes.key?(:'eccSingleBitErrors') && attributes.key?(:'ecc_single_bit_errors')

      self.ecc_single_bit_errors = attributes[:'ecc_single_bit_errors'] if attributes[:'ecc_single_bit_errors']

      self.ecc_double_bit_errors = attributes[:'eccDoubleBitErrors'] if attributes[:'eccDoubleBitErrors']

      raise 'You cannot provide both :eccDoubleBitErrors and :ecc_double_bit_errors' if attributes.key?(:'eccDoubleBitErrors') && attributes.key?(:'ecc_double_bit_errors')

      self.ecc_double_bit_errors = attributes[:'ecc_double_bit_errors'] if attributes[:'ecc_double_bit_errors']

      self.clock_event_idle = attributes[:'clockEventIdle'] if attributes[:'clockEventIdle']

      raise 'You cannot provide both :clockEventIdle and :clock_event_idle' if attributes.key?(:'clockEventIdle') && attributes.key?(:'clock_event_idle')

      self.clock_event_idle = attributes[:'clock_event_idle'] if attributes[:'clock_event_idle']

      self.clock_event_hw_thermal_slow_down = attributes[:'clockEventHwThermalSlowDown'] if attributes[:'clockEventHwThermalSlowDown']

      raise 'You cannot provide both :clockEventHwThermalSlowDown and :clock_event_hw_thermal_slow_down' if attributes.key?(:'clockEventHwThermalSlowDown') && attributes.key?(:'clock_event_hw_thermal_slow_down')

      self.clock_event_hw_thermal_slow_down = attributes[:'clock_event_hw_thermal_slow_down'] if attributes[:'clock_event_hw_thermal_slow_down']

      self.clock_event_sw_power_cap = attributes[:'clockEventSwPowerCap'] if attributes[:'clockEventSwPowerCap']

      raise 'You cannot provide both :clockEventSwPowerCap and :clock_event_sw_power_cap' if attributes.key?(:'clockEventSwPowerCap') && attributes.key?(:'clock_event_sw_power_cap')

      self.clock_event_sw_power_cap = attributes[:'clock_event_sw_power_cap'] if attributes[:'clock_event_sw_power_cap']

      self.clock_event_app_clock_setting = attributes[:'clockEventAppClockSetting'] if attributes[:'clockEventAppClockSetting']

      raise 'You cannot provide both :clockEventAppClockSetting and :clock_event_app_clock_setting' if attributes.key?(:'clockEventAppClockSetting') && attributes.key?(:'clock_event_app_clock_setting')

      self.clock_event_app_clock_setting = attributes[:'clock_event_app_clock_setting'] if attributes[:'clock_event_app_clock_setting']

      self.clock_event_hw_power_break = attributes[:'clockEventHwPowerBreak'] if attributes[:'clockEventHwPowerBreak']

      raise 'You cannot provide both :clockEventHwPowerBreak and :clock_event_hw_power_break' if attributes.key?(:'clockEventHwPowerBreak') && attributes.key?(:'clock_event_hw_power_break')

      self.clock_event_hw_power_break = attributes[:'clock_event_hw_power_break'] if attributes[:'clock_event_hw_power_break']

      self.clock_event_sw_thermal_slowdown = attributes[:'clockEventSwThermalSlowdown'] if attributes[:'clockEventSwThermalSlowdown']

      raise 'You cannot provide both :clockEventSwThermalSlowdown and :clock_event_sw_thermal_slowdown' if attributes.key?(:'clockEventSwThermalSlowdown') && attributes.key?(:'clock_event_sw_thermal_slowdown')

      self.clock_event_sw_thermal_slowdown = attributes[:'clock_event_sw_thermal_slowdown'] if attributes[:'clock_event_sw_thermal_slowdown']

      self.clock_event_sync_boost = attributes[:'clockEventSyncBoost'] if attributes[:'clockEventSyncBoost']

      raise 'You cannot provide both :clockEventSyncBoost and :clock_event_sync_boost' if attributes.key?(:'clockEventSyncBoost') && attributes.key?(:'clock_event_sync_boost')

      self.clock_event_sync_boost = attributes[:'clock_event_sync_boost'] if attributes[:'clock_event_sync_boost']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        metric_name == other.metric_name &&
        time_collected == other.time_collected &&
        gpu_id == other.gpu_id &&
        utilization == other.utilization &&
        memory_utilization == other.memory_utilization &&
        power_draw == other.power_draw &&
        temperature == other.temperature &&
        fan_utilization == other.fan_utilization &&
        clock_speed_graphics == other.clock_speed_graphics &&
        clock_speed_sm == other.clock_speed_sm &&
        clock_speed_video == other.clock_speed_video &&
        clock_speed_memory == other.clock_speed_memory &&
        performance_state == other.performance_state &&
        ecc_single_bit_errors == other.ecc_single_bit_errors &&
        ecc_double_bit_errors == other.ecc_double_bit_errors &&
        clock_event_idle == other.clock_event_idle &&
        clock_event_hw_thermal_slow_down == other.clock_event_hw_thermal_slow_down &&
        clock_event_sw_power_cap == other.clock_event_sw_power_cap &&
        clock_event_app_clock_setting == other.clock_event_app_clock_setting &&
        clock_event_hw_power_break == other.clock_event_hw_power_break &&
        clock_event_sw_thermal_slowdown == other.clock_event_sw_thermal_slowdown &&
        clock_event_sync_boost == other.clock_event_sync_boost
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [metric_name, time_collected, gpu_id, utilization, memory_utilization, power_draw, temperature, fan_utilization, clock_speed_graphics, clock_speed_sm, clock_speed_video, clock_speed_memory, performance_state, ecc_single_bit_errors, ecc_double_bit_errors, clock_event_idle, clock_event_hw_thermal_slow_down, clock_event_sw_power_cap, clock_event_app_clock_setting, clock_event_hw_power_break, clock_event_sw_thermal_slowdown, clock_event_sync_boost].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
