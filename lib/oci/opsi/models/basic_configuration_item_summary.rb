# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'
require_relative 'configuration_item_summary'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Basic configuration item summary.
  # Value field contain the most preferred value for the specified scope (compartmentId), which could be from any of the ConfigurationItemValueSourceConfigurationType.
  # Default value field contains the default value from Operations Insights.
  #
  class Opsi::Models::BasicConfigurationItemSummary < Opsi::Models::ConfigurationItemSummary
    VALUE_SOURCE_CONFIG_ENUM = [
      VALUE_SOURCE_CONFIG_DEFAULT = 'DEFAULT'.freeze,
      VALUE_SOURCE_CONFIG_TENANT = 'TENANT'.freeze,
      VALUE_SOURCE_CONFIG_COMPARTMENT = 'COMPARTMENT'.freeze,
      VALUE_SOURCE_CONFIG_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Name of configuration item.
    # @return [String]
    attr_accessor :name

    # Value of configuration item.
    # @return [String]
    attr_accessor :value

    # Source configuration from where the value is taken for a configuration item.
    # @return [String]
    attr_reader :value_source_config

    # Value of configuration item.
    # @return [String]
    attr_accessor :default_value

    # List of contexts in Operations Insights where this configuration item is applicable.
    # @return [Array<String>]
    attr_accessor :applicable_contexts

    # @return [OCI::Opsi::Models::ConfigurationItemMetadata]
    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'config_item_type': :'configItemType',
        'name': :'name',
        'value': :'value',
        'value_source_config': :'valueSourceConfig',
        'default_value': :'defaultValue',
        'applicable_contexts': :'applicableContexts',
        'metadata': :'metadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'config_item_type': :'String',
        'name': :'String',
        'value': :'String',
        'value_source_config': :'String',
        'default_value': :'String',
        'applicable_contexts': :'Array<String>',
        'metadata': :'OCI::Opsi::Models::ConfigurationItemMetadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :value The value to assign to the {#value} property
    # @option attributes [String] :value_source_config The value to assign to the {#value_source_config} property
    # @option attributes [String] :default_value The value to assign to the {#default_value} property
    # @option attributes [Array<String>] :applicable_contexts The value to assign to the {#applicable_contexts} property
    # @option attributes [OCI::Opsi::Models::ConfigurationItemMetadata] :metadata The value to assign to the {#metadata} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['configItemType'] = 'BASIC'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.value = attributes[:'value'] if attributes[:'value']

      self.value_source_config = attributes[:'valueSourceConfig'] if attributes[:'valueSourceConfig']

      raise 'You cannot provide both :valueSourceConfig and :value_source_config' if attributes.key?(:'valueSourceConfig') && attributes.key?(:'value_source_config')

      self.value_source_config = attributes[:'value_source_config'] if attributes[:'value_source_config']

      self.default_value = attributes[:'defaultValue'] if attributes[:'defaultValue']

      raise 'You cannot provide both :defaultValue and :default_value' if attributes.key?(:'defaultValue') && attributes.key?(:'default_value')

      self.default_value = attributes[:'default_value'] if attributes[:'default_value']

      self.applicable_contexts = attributes[:'applicableContexts'] if attributes[:'applicableContexts']

      raise 'You cannot provide both :applicableContexts and :applicable_contexts' if attributes.key?(:'applicableContexts') && attributes.key?(:'applicable_contexts')

      self.applicable_contexts = attributes[:'applicable_contexts'] if attributes[:'applicable_contexts']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value_source_config Object to be assigned
    def value_source_config=(value_source_config)
      # rubocop:disable Style/ConditionalAssignment
      if value_source_config && !VALUE_SOURCE_CONFIG_ENUM.include?(value_source_config)
        OCI.logger.debug("Unknown value for 'value_source_config' [" + value_source_config + "]. Mapping to 'VALUE_SOURCE_CONFIG_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @value_source_config = VALUE_SOURCE_CONFIG_UNKNOWN_ENUM_VALUE
      else
        @value_source_config = value_source_config
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        config_item_type == other.config_item_type &&
        name == other.name &&
        value == other.value &&
        value_source_config == other.value_source_config &&
        default_value == other.default_value &&
        applicable_contexts == other.applicable_contexts &&
        metadata == other.metadata
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [config_item_type, name, value, value_source_config, default_value, applicable_contexts, metadata].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
