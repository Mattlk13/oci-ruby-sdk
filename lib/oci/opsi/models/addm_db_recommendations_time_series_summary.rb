# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # ADDM recommendation
  class Opsi::Models::AddmDbRecommendationsTimeSeriesSummary
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database insight.
    # @return [String]
    attr_accessor :id

    # **[Required]** Unique ADDM task id
    # @return [Integer]
    attr_accessor :task_id

    # **[Required]** ADDM task name
    # @return [String]
    attr_accessor :task_name

    # **[Required]** Timestamp when recommendation was generated
    # @return [DateTime]
    attr_accessor :timestamp

    # Start Timestamp of snapshot
    # @return [DateTime]
    attr_accessor :time_analysis_started

    # End Timestamp of snapshot
    # @return [DateTime]
    attr_accessor :time_analysis_ended

    # Type of recommendation
    # @return [String]
    attr_accessor :type

    # DB time in seconds for the snapshot
    # @return [Float]
    attr_accessor :analysis_db_time_in_secs

    # DB avg active sessions for the snapshot
    # @return [Float]
    attr_accessor :analysis_avg_active_sessions

    # Maximum estimated benefit in terms of percentage of total activity
    # @return [Float]
    attr_accessor :max_benefit_percent

    # Maximum estimated benefit in terms of seconds
    # @return [Float]
    attr_accessor :max_benefit_db_time_in_secs

    # Maximum estimated benefit in terms of average active sessions
    # @return [Float]
    attr_accessor :max_benefit_avg_active_sessions

    # @return [OCI::Opsi::Models::RelatedObjectTypeDetails]
    attr_accessor :related_object

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'task_id': :'taskId',
        'task_name': :'taskName',
        'timestamp': :'timestamp',
        'time_analysis_started': :'timeAnalysisStarted',
        'time_analysis_ended': :'timeAnalysisEnded',
        'type': :'type',
        'analysis_db_time_in_secs': :'analysisDbTimeInSecs',
        'analysis_avg_active_sessions': :'analysisAvgActiveSessions',
        'max_benefit_percent': :'maxBenefitPercent',
        'max_benefit_db_time_in_secs': :'maxBenefitDbTimeInSecs',
        'max_benefit_avg_active_sessions': :'maxBenefitAvgActiveSessions',
        'related_object': :'relatedObject'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'task_id': :'Integer',
        'task_name': :'String',
        'timestamp': :'DateTime',
        'time_analysis_started': :'DateTime',
        'time_analysis_ended': :'DateTime',
        'type': :'String',
        'analysis_db_time_in_secs': :'Float',
        'analysis_avg_active_sessions': :'Float',
        'max_benefit_percent': :'Float',
        'max_benefit_db_time_in_secs': :'Float',
        'max_benefit_avg_active_sessions': :'Float',
        'related_object': :'OCI::Opsi::Models::RelatedObjectTypeDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [Integer] :task_id The value to assign to the {#task_id} property
    # @option attributes [String] :task_name The value to assign to the {#task_name} property
    # @option attributes [DateTime] :timestamp The value to assign to the {#timestamp} property
    # @option attributes [DateTime] :time_analysis_started The value to assign to the {#time_analysis_started} property
    # @option attributes [DateTime] :time_analysis_ended The value to assign to the {#time_analysis_ended} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [Float] :analysis_db_time_in_secs The value to assign to the {#analysis_db_time_in_secs} property
    # @option attributes [Float] :analysis_avg_active_sessions The value to assign to the {#analysis_avg_active_sessions} property
    # @option attributes [Float] :max_benefit_percent The value to assign to the {#max_benefit_percent} property
    # @option attributes [Float] :max_benefit_db_time_in_secs The value to assign to the {#max_benefit_db_time_in_secs} property
    # @option attributes [Float] :max_benefit_avg_active_sessions The value to assign to the {#max_benefit_avg_active_sessions} property
    # @option attributes [OCI::Opsi::Models::RelatedObjectTypeDetails] :related_object The value to assign to the {#related_object} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.task_id = attributes[:'taskId'] if attributes[:'taskId']

      raise 'You cannot provide both :taskId and :task_id' if attributes.key?(:'taskId') && attributes.key?(:'task_id')

      self.task_id = attributes[:'task_id'] if attributes[:'task_id']

      self.task_name = attributes[:'taskName'] if attributes[:'taskName']

      raise 'You cannot provide both :taskName and :task_name' if attributes.key?(:'taskName') && attributes.key?(:'task_name')

      self.task_name = attributes[:'task_name'] if attributes[:'task_name']

      self.timestamp = attributes[:'timestamp'] if attributes[:'timestamp']

      self.time_analysis_started = attributes[:'timeAnalysisStarted'] if attributes[:'timeAnalysisStarted']

      raise 'You cannot provide both :timeAnalysisStarted and :time_analysis_started' if attributes.key?(:'timeAnalysisStarted') && attributes.key?(:'time_analysis_started')

      self.time_analysis_started = attributes[:'time_analysis_started'] if attributes[:'time_analysis_started']

      self.time_analysis_ended = attributes[:'timeAnalysisEnded'] if attributes[:'timeAnalysisEnded']

      raise 'You cannot provide both :timeAnalysisEnded and :time_analysis_ended' if attributes.key?(:'timeAnalysisEnded') && attributes.key?(:'time_analysis_ended')

      self.time_analysis_ended = attributes[:'time_analysis_ended'] if attributes[:'time_analysis_ended']

      self.type = attributes[:'type'] if attributes[:'type']

      self.analysis_db_time_in_secs = attributes[:'analysisDbTimeInSecs'] if attributes[:'analysisDbTimeInSecs']

      raise 'You cannot provide both :analysisDbTimeInSecs and :analysis_db_time_in_secs' if attributes.key?(:'analysisDbTimeInSecs') && attributes.key?(:'analysis_db_time_in_secs')

      self.analysis_db_time_in_secs = attributes[:'analysis_db_time_in_secs'] if attributes[:'analysis_db_time_in_secs']

      self.analysis_avg_active_sessions = attributes[:'analysisAvgActiveSessions'] if attributes[:'analysisAvgActiveSessions']

      raise 'You cannot provide both :analysisAvgActiveSessions and :analysis_avg_active_sessions' if attributes.key?(:'analysisAvgActiveSessions') && attributes.key?(:'analysis_avg_active_sessions')

      self.analysis_avg_active_sessions = attributes[:'analysis_avg_active_sessions'] if attributes[:'analysis_avg_active_sessions']

      self.max_benefit_percent = attributes[:'maxBenefitPercent'] if attributes[:'maxBenefitPercent']

      raise 'You cannot provide both :maxBenefitPercent and :max_benefit_percent' if attributes.key?(:'maxBenefitPercent') && attributes.key?(:'max_benefit_percent')

      self.max_benefit_percent = attributes[:'max_benefit_percent'] if attributes[:'max_benefit_percent']

      self.max_benefit_db_time_in_secs = attributes[:'maxBenefitDbTimeInSecs'] if attributes[:'maxBenefitDbTimeInSecs']

      raise 'You cannot provide both :maxBenefitDbTimeInSecs and :max_benefit_db_time_in_secs' if attributes.key?(:'maxBenefitDbTimeInSecs') && attributes.key?(:'max_benefit_db_time_in_secs')

      self.max_benefit_db_time_in_secs = attributes[:'max_benefit_db_time_in_secs'] if attributes[:'max_benefit_db_time_in_secs']

      self.max_benefit_avg_active_sessions = attributes[:'maxBenefitAvgActiveSessions'] if attributes[:'maxBenefitAvgActiveSessions']

      raise 'You cannot provide both :maxBenefitAvgActiveSessions and :max_benefit_avg_active_sessions' if attributes.key?(:'maxBenefitAvgActiveSessions') && attributes.key?(:'max_benefit_avg_active_sessions')

      self.max_benefit_avg_active_sessions = attributes[:'max_benefit_avg_active_sessions'] if attributes[:'max_benefit_avg_active_sessions']

      self.related_object = attributes[:'relatedObject'] if attributes[:'relatedObject']

      raise 'You cannot provide both :relatedObject and :related_object' if attributes.key?(:'relatedObject') && attributes.key?(:'related_object')

      self.related_object = attributes[:'related_object'] if attributes[:'related_object']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        task_id == other.task_id &&
        task_name == other.task_name &&
        timestamp == other.timestamp &&
        time_analysis_started == other.time_analysis_started &&
        time_analysis_ended == other.time_analysis_ended &&
        type == other.type &&
        analysis_db_time_in_secs == other.analysis_db_time_in_secs &&
        analysis_avg_active_sessions == other.analysis_avg_active_sessions &&
        max_benefit_percent == other.max_benefit_percent &&
        max_benefit_db_time_in_secs == other.max_benefit_db_time_in_secs &&
        max_benefit_avg_active_sessions == other.max_benefit_avg_active_sessions &&
        related_object == other.related_object
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, task_id, task_name, timestamp, time_analysis_started, time_analysis_ended, type, analysis_db_time_in_secs, analysis_avg_active_sessions, max_benefit_percent, max_benefit_db_time_in_secs, max_benefit_avg_active_sessions, related_object].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
