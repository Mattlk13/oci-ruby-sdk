# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for OPSI data object used in a data object query.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class Opsi::Models::OpsiDataObjectDetailsInQuery
    DATA_OBJECT_DETAILS_TARGET_ENUM = [
      DATA_OBJECT_DETAILS_TARGET_INDIVIDUAL_OPSIDATAOBJECT = 'INDIVIDUAL_OPSIDATAOBJECT'.freeze,
      DATA_OBJECT_DETAILS_TARGET_OPSIDATAOBJECTTYPE_OPSIDATAOBJECTS = 'OPSIDATAOBJECTTYPE_OPSIDATAOBJECTS'.freeze
    ].freeze

    # **[Required]** Data objects to which this OpsiDataObjectDetailsInQuery is applicable.
    # @return [String]
    attr_reader :data_object_details_target

    # An array of query parameters to be applied, for the OPSI data objects targetted by dataObjectDetailsTarget, before executing the query.
    # Refer to supportedQueryParams of OpsiDataObject for the supported query parameters.
    #
    # @return [Array<OCI::Opsi::Models::OpsiDataObjectQueryParam>]
    attr_accessor :_query_params

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'data_object_details_target': :'dataObjectDetailsTarget',
        '_query_params': :'queryParams'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'data_object_details_target': :'String',
        '_query_params': :'Array<OCI::Opsi::Models::OpsiDataObjectQueryParam>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'dataObjectDetailsTarget'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::Opsi::Models::IndividualOpsiDataObjectDetailsInQuery' if type == 'INDIVIDUAL_OPSIDATAOBJECT'
      return 'OCI::Opsi::Models::OpsiDataObjectTypeOpsiDataObjectDetailsInQuery' if type == 'OPSIDATAOBJECTTYPE_OPSIDATAOBJECTS'

      # TODO: Log a warning when the subtype is not found.
      'OCI::Opsi::Models::OpsiDataObjectDetailsInQuery'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :data_object_details_target The value to assign to the {#data_object_details_target} property
    # @option attributes [Array<OCI::Opsi::Models::OpsiDataObjectQueryParam>] :_query_params The value to assign to the {#_query_params} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.data_object_details_target = attributes[:'dataObjectDetailsTarget'] if attributes[:'dataObjectDetailsTarget']

      raise 'You cannot provide both :dataObjectDetailsTarget and :data_object_details_target' if attributes.key?(:'dataObjectDetailsTarget') && attributes.key?(:'data_object_details_target')

      self.data_object_details_target = attributes[:'data_object_details_target'] if attributes[:'data_object_details_target']

      self._query_params = attributes[:'queryParams'] if attributes[:'queryParams']

      raise 'You cannot provide both :queryParams and :_query_params' if attributes.key?(:'queryParams') && attributes.key?(:'_query_params')

      self._query_params = attributes[:'_query_params'] if attributes[:'_query_params']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_object_details_target Object to be assigned
    def data_object_details_target=(data_object_details_target)
      raise "Invalid value for 'data_object_details_target': this must be one of the values in DATA_OBJECT_DETAILS_TARGET_ENUM." if data_object_details_target && !DATA_OBJECT_DETAILS_TARGET_ENUM.include?(data_object_details_target)

      @data_object_details_target = data_object_details_target
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        data_object_details_target == other.data_object_details_target &&
        _query_params == other._query_params
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [data_object_details_target, _query_params].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
