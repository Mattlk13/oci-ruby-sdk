# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require_relative 'host_configuration_metric_group'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # GPU configuration metrics
  #
  class Opsi::Models::HostGpuConfiguration < Opsi::Models::HostConfigurationMetricGroup
    # **[Required]** GPU Identifier
    # @return [Integer]
    attr_accessor :gpu_id

    # **[Required]** GPU Product Name
    # @return [String]
    attr_accessor :product_name

    # **[Required]** GPU Vendor
    # @return [String]
    attr_accessor :vendor

    # **[Required]** Bus Identifier
    # @return [String]
    attr_accessor :bus_id

    # **[Required]** Bus Width
    # @return [Integer]
    attr_accessor :bus_width

    # GPU Capabilities
    # @return [String]
    attr_accessor :gpu_capabilities

    # **[Required]** Power Capacity
    # @return [Float]
    attr_accessor :total_power

    # **[Required]** Total Memory Allocated to GPU
    # @return [Float]
    attr_accessor :total_memory

    # **[Required]** Max Video Clock Speed
    # @return [Float]
    attr_accessor :total_video_clock_speed

    # **[Required]** Max SM (Streaming Multiprocessor) Clock Speed
    # @return [Float]
    attr_accessor :total_sm_clock_speed

    # **[Required]** Max Graphics Clock Speed
    # @return [Float]
    attr_accessor :total_graphics_clock_speed

    # **[Required]** Max Memory Clock Speed
    # @return [Float]
    attr_accessor :total_memory_clock_speed

    # **[Required]** CUDA library version
    # @return [String]
    attr_accessor :cuda_version

    # **[Required]** GPU Driver version
    # @return [String]
    attr_accessor :driver_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'metricName',
        'time_collected': :'timeCollected',
        'gpu_id': :'gpuId',
        'product_name': :'productName',
        'vendor': :'vendor',
        'bus_id': :'busId',
        'bus_width': :'busWidth',
        'gpu_capabilities': :'gpuCapabilities',
        'total_power': :'totalPower',
        'total_memory': :'totalMemory',
        'total_video_clock_speed': :'totalVideoClockSpeed',
        'total_sm_clock_speed': :'totalSmClockSpeed',
        'total_graphics_clock_speed': :'totalGraphicsClockSpeed',
        'total_memory_clock_speed': :'totalMemoryClockSpeed',
        'cuda_version': :'cudaVersion',
        'driver_version': :'driverVersion'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'metric_name': :'String',
        'time_collected': :'DateTime',
        'gpu_id': :'Integer',
        'product_name': :'String',
        'vendor': :'String',
        'bus_id': :'String',
        'bus_width': :'Integer',
        'gpu_capabilities': :'String',
        'total_power': :'Float',
        'total_memory': :'Float',
        'total_video_clock_speed': :'Float',
        'total_sm_clock_speed': :'Float',
        'total_graphics_clock_speed': :'Float',
        'total_memory_clock_speed': :'Float',
        'cuda_version': :'String',
        'driver_version': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_collected The value to assign to the {OCI::Opsi::Models::HostConfigurationMetricGroup#time_collected #time_collected} proprety
    # @option attributes [Integer] :gpu_id The value to assign to the {#gpu_id} property
    # @option attributes [String] :product_name The value to assign to the {#product_name} property
    # @option attributes [String] :vendor The value to assign to the {#vendor} property
    # @option attributes [String] :bus_id The value to assign to the {#bus_id} property
    # @option attributes [Integer] :bus_width The value to assign to the {#bus_width} property
    # @option attributes [String] :gpu_capabilities The value to assign to the {#gpu_capabilities} property
    # @option attributes [Float] :total_power The value to assign to the {#total_power} property
    # @option attributes [Float] :total_memory The value to assign to the {#total_memory} property
    # @option attributes [Float] :total_video_clock_speed The value to assign to the {#total_video_clock_speed} property
    # @option attributes [Float] :total_sm_clock_speed The value to assign to the {#total_sm_clock_speed} property
    # @option attributes [Float] :total_graphics_clock_speed The value to assign to the {#total_graphics_clock_speed} property
    # @option attributes [Float] :total_memory_clock_speed The value to assign to the {#total_memory_clock_speed} property
    # @option attributes [String] :cuda_version The value to assign to the {#cuda_version} property
    # @option attributes [String] :driver_version The value to assign to the {#driver_version} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['metricName'] = 'HOST_GPU_CONFIGURATION'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.gpu_id = attributes[:'gpuId'] if attributes[:'gpuId']

      raise 'You cannot provide both :gpuId and :gpu_id' if attributes.key?(:'gpuId') && attributes.key?(:'gpu_id')

      self.gpu_id = attributes[:'gpu_id'] if attributes[:'gpu_id']

      self.product_name = attributes[:'productName'] if attributes[:'productName']

      raise 'You cannot provide both :productName and :product_name' if attributes.key?(:'productName') && attributes.key?(:'product_name')

      self.product_name = attributes[:'product_name'] if attributes[:'product_name']

      self.vendor = attributes[:'vendor'] if attributes[:'vendor']

      self.bus_id = attributes[:'busId'] if attributes[:'busId']

      raise 'You cannot provide both :busId and :bus_id' if attributes.key?(:'busId') && attributes.key?(:'bus_id')

      self.bus_id = attributes[:'bus_id'] if attributes[:'bus_id']

      self.bus_width = attributes[:'busWidth'] if attributes[:'busWidth']

      raise 'You cannot provide both :busWidth and :bus_width' if attributes.key?(:'busWidth') && attributes.key?(:'bus_width')

      self.bus_width = attributes[:'bus_width'] if attributes[:'bus_width']

      self.gpu_capabilities = attributes[:'gpuCapabilities'] if attributes[:'gpuCapabilities']

      raise 'You cannot provide both :gpuCapabilities and :gpu_capabilities' if attributes.key?(:'gpuCapabilities') && attributes.key?(:'gpu_capabilities')

      self.gpu_capabilities = attributes[:'gpu_capabilities'] if attributes[:'gpu_capabilities']

      self.total_power = attributes[:'totalPower'] if attributes[:'totalPower']

      raise 'You cannot provide both :totalPower and :total_power' if attributes.key?(:'totalPower') && attributes.key?(:'total_power')

      self.total_power = attributes[:'total_power'] if attributes[:'total_power']

      self.total_memory = attributes[:'totalMemory'] if attributes[:'totalMemory']

      raise 'You cannot provide both :totalMemory and :total_memory' if attributes.key?(:'totalMemory') && attributes.key?(:'total_memory')

      self.total_memory = attributes[:'total_memory'] if attributes[:'total_memory']

      self.total_video_clock_speed = attributes[:'totalVideoClockSpeed'] if attributes[:'totalVideoClockSpeed']

      raise 'You cannot provide both :totalVideoClockSpeed and :total_video_clock_speed' if attributes.key?(:'totalVideoClockSpeed') && attributes.key?(:'total_video_clock_speed')

      self.total_video_clock_speed = attributes[:'total_video_clock_speed'] if attributes[:'total_video_clock_speed']

      self.total_sm_clock_speed = attributes[:'totalSmClockSpeed'] if attributes[:'totalSmClockSpeed']

      raise 'You cannot provide both :totalSmClockSpeed and :total_sm_clock_speed' if attributes.key?(:'totalSmClockSpeed') && attributes.key?(:'total_sm_clock_speed')

      self.total_sm_clock_speed = attributes[:'total_sm_clock_speed'] if attributes[:'total_sm_clock_speed']

      self.total_graphics_clock_speed = attributes[:'totalGraphicsClockSpeed'] if attributes[:'totalGraphicsClockSpeed']

      raise 'You cannot provide both :totalGraphicsClockSpeed and :total_graphics_clock_speed' if attributes.key?(:'totalGraphicsClockSpeed') && attributes.key?(:'total_graphics_clock_speed')

      self.total_graphics_clock_speed = attributes[:'total_graphics_clock_speed'] if attributes[:'total_graphics_clock_speed']

      self.total_memory_clock_speed = attributes[:'totalMemoryClockSpeed'] if attributes[:'totalMemoryClockSpeed']

      raise 'You cannot provide both :totalMemoryClockSpeed and :total_memory_clock_speed' if attributes.key?(:'totalMemoryClockSpeed') && attributes.key?(:'total_memory_clock_speed')

      self.total_memory_clock_speed = attributes[:'total_memory_clock_speed'] if attributes[:'total_memory_clock_speed']

      self.cuda_version = attributes[:'cudaVersion'] if attributes[:'cudaVersion']

      raise 'You cannot provide both :cudaVersion and :cuda_version' if attributes.key?(:'cudaVersion') && attributes.key?(:'cuda_version')

      self.cuda_version = attributes[:'cuda_version'] if attributes[:'cuda_version']

      self.driver_version = attributes[:'driverVersion'] if attributes[:'driverVersion']

      raise 'You cannot provide both :driverVersion and :driver_version' if attributes.key?(:'driverVersion') && attributes.key?(:'driver_version')

      self.driver_version = attributes[:'driver_version'] if attributes[:'driver_version']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        metric_name == other.metric_name &&
        time_collected == other.time_collected &&
        gpu_id == other.gpu_id &&
        product_name == other.product_name &&
        vendor == other.vendor &&
        bus_id == other.bus_id &&
        bus_width == other.bus_width &&
        gpu_capabilities == other.gpu_capabilities &&
        total_power == other.total_power &&
        total_memory == other.total_memory &&
        total_video_clock_speed == other.total_video_clock_speed &&
        total_sm_clock_speed == other.total_sm_clock_speed &&
        total_graphics_clock_speed == other.total_graphics_clock_speed &&
        total_memory_clock_speed == other.total_memory_clock_speed &&
        cuda_version == other.cuda_version &&
        driver_version == other.driver_version
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [metric_name, time_collected, gpu_id, product_name, vendor, bus_id, bus_width, gpu_capabilities, total_power, total_memory, total_video_clock_speed, total_sm_clock_speed, total_graphics_clock_speed, total_memory_clock_speed, cuda_version, driver_version].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
