# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # ADDM findings time series data
  class Opsi::Models::AddmDbFindingsTimeSeriesSummary
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database insight.
    # @return [String]
    attr_accessor :id

    # **[Required]** Unique ADDM task id
    # @return [Integer]
    attr_accessor :task_id

    # **[Required]** ADDM task name
    # @return [String]
    attr_accessor :task_name

    # **[Required]** Unique finding id
    # @return [String]
    attr_accessor :finding_id

    # **[Required]** Timestamp when finding was generated
    # @return [DateTime]
    attr_accessor :timestamp

    # Start Timestamp of snapshot
    # @return [DateTime]
    attr_accessor :time_analysis_started

    # End Timestamp of snapshot
    # @return [DateTime]
    attr_accessor :time_analysis_ended

    # **[Required]** Category name
    # @return [String]
    attr_accessor :category_name

    # **[Required]** Category display name
    # @return [String]
    attr_accessor :category_display_name

    # **[Required]** Finding name
    # @return [String]
    attr_accessor :name

    # **[Required]** Finding message
    # @return [String]
    attr_accessor :message

    # DB time in seconds for the snapshot
    # @return [Float]
    attr_accessor :analysis_db_time_in_secs

    # DB avg active sessions for the snapshot
    # @return [Float]
    attr_accessor :analysis_avg_active_sessions

    # Impact in seconds
    # @return [Float]
    attr_accessor :impact_db_time_in_secs

    # **[Required]** Impact in terms of percentage of total activity
    # @return [Float]
    attr_accessor :impact_percent

    # **[Required]** Impact in terms of average active sessions
    # @return [Float]
    attr_accessor :impact_avg_active_sessions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'task_id': :'taskId',
        'task_name': :'taskName',
        'finding_id': :'findingId',
        'timestamp': :'timestamp',
        'time_analysis_started': :'timeAnalysisStarted',
        'time_analysis_ended': :'timeAnalysisEnded',
        'category_name': :'categoryName',
        'category_display_name': :'categoryDisplayName',
        'name': :'name',
        'message': :'message',
        'analysis_db_time_in_secs': :'analysisDbTimeInSecs',
        'analysis_avg_active_sessions': :'analysisAvgActiveSessions',
        'impact_db_time_in_secs': :'impactDbTimeInSecs',
        'impact_percent': :'impactPercent',
        'impact_avg_active_sessions': :'impactAvgActiveSessions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'task_id': :'Integer',
        'task_name': :'String',
        'finding_id': :'String',
        'timestamp': :'DateTime',
        'time_analysis_started': :'DateTime',
        'time_analysis_ended': :'DateTime',
        'category_name': :'String',
        'category_display_name': :'String',
        'name': :'String',
        'message': :'String',
        'analysis_db_time_in_secs': :'Float',
        'analysis_avg_active_sessions': :'Float',
        'impact_db_time_in_secs': :'Float',
        'impact_percent': :'Float',
        'impact_avg_active_sessions': :'Float'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [Integer] :task_id The value to assign to the {#task_id} property
    # @option attributes [String] :task_name The value to assign to the {#task_name} property
    # @option attributes [String] :finding_id The value to assign to the {#finding_id} property
    # @option attributes [DateTime] :timestamp The value to assign to the {#timestamp} property
    # @option attributes [DateTime] :time_analysis_started The value to assign to the {#time_analysis_started} property
    # @option attributes [DateTime] :time_analysis_ended The value to assign to the {#time_analysis_ended} property
    # @option attributes [String] :category_name The value to assign to the {#category_name} property
    # @option attributes [String] :category_display_name The value to assign to the {#category_display_name} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :message The value to assign to the {#message} property
    # @option attributes [Float] :analysis_db_time_in_secs The value to assign to the {#analysis_db_time_in_secs} property
    # @option attributes [Float] :analysis_avg_active_sessions The value to assign to the {#analysis_avg_active_sessions} property
    # @option attributes [Float] :impact_db_time_in_secs The value to assign to the {#impact_db_time_in_secs} property
    # @option attributes [Float] :impact_percent The value to assign to the {#impact_percent} property
    # @option attributes [Float] :impact_avg_active_sessions The value to assign to the {#impact_avg_active_sessions} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.task_id = attributes[:'taskId'] if attributes[:'taskId']

      raise 'You cannot provide both :taskId and :task_id' if attributes.key?(:'taskId') && attributes.key?(:'task_id')

      self.task_id = attributes[:'task_id'] if attributes[:'task_id']

      self.task_name = attributes[:'taskName'] if attributes[:'taskName']

      raise 'You cannot provide both :taskName and :task_name' if attributes.key?(:'taskName') && attributes.key?(:'task_name')

      self.task_name = attributes[:'task_name'] if attributes[:'task_name']

      self.finding_id = attributes[:'findingId'] if attributes[:'findingId']

      raise 'You cannot provide both :findingId and :finding_id' if attributes.key?(:'findingId') && attributes.key?(:'finding_id')

      self.finding_id = attributes[:'finding_id'] if attributes[:'finding_id']

      self.timestamp = attributes[:'timestamp'] if attributes[:'timestamp']

      self.time_analysis_started = attributes[:'timeAnalysisStarted'] if attributes[:'timeAnalysisStarted']

      raise 'You cannot provide both :timeAnalysisStarted and :time_analysis_started' if attributes.key?(:'timeAnalysisStarted') && attributes.key?(:'time_analysis_started')

      self.time_analysis_started = attributes[:'time_analysis_started'] if attributes[:'time_analysis_started']

      self.time_analysis_ended = attributes[:'timeAnalysisEnded'] if attributes[:'timeAnalysisEnded']

      raise 'You cannot provide both :timeAnalysisEnded and :time_analysis_ended' if attributes.key?(:'timeAnalysisEnded') && attributes.key?(:'time_analysis_ended')

      self.time_analysis_ended = attributes[:'time_analysis_ended'] if attributes[:'time_analysis_ended']

      self.category_name = attributes[:'categoryName'] if attributes[:'categoryName']

      raise 'You cannot provide both :categoryName and :category_name' if attributes.key?(:'categoryName') && attributes.key?(:'category_name')

      self.category_name = attributes[:'category_name'] if attributes[:'category_name']

      self.category_display_name = attributes[:'categoryDisplayName'] if attributes[:'categoryDisplayName']

      raise 'You cannot provide both :categoryDisplayName and :category_display_name' if attributes.key?(:'categoryDisplayName') && attributes.key?(:'category_display_name')

      self.category_display_name = attributes[:'category_display_name'] if attributes[:'category_display_name']

      self.name = attributes[:'name'] if attributes[:'name']

      self.message = attributes[:'message'] if attributes[:'message']

      self.analysis_db_time_in_secs = attributes[:'analysisDbTimeInSecs'] if attributes[:'analysisDbTimeInSecs']

      raise 'You cannot provide both :analysisDbTimeInSecs and :analysis_db_time_in_secs' if attributes.key?(:'analysisDbTimeInSecs') && attributes.key?(:'analysis_db_time_in_secs')

      self.analysis_db_time_in_secs = attributes[:'analysis_db_time_in_secs'] if attributes[:'analysis_db_time_in_secs']

      self.analysis_avg_active_sessions = attributes[:'analysisAvgActiveSessions'] if attributes[:'analysisAvgActiveSessions']

      raise 'You cannot provide both :analysisAvgActiveSessions and :analysis_avg_active_sessions' if attributes.key?(:'analysisAvgActiveSessions') && attributes.key?(:'analysis_avg_active_sessions')

      self.analysis_avg_active_sessions = attributes[:'analysis_avg_active_sessions'] if attributes[:'analysis_avg_active_sessions']

      self.impact_db_time_in_secs = attributes[:'impactDbTimeInSecs'] if attributes[:'impactDbTimeInSecs']

      raise 'You cannot provide both :impactDbTimeInSecs and :impact_db_time_in_secs' if attributes.key?(:'impactDbTimeInSecs') && attributes.key?(:'impact_db_time_in_secs')

      self.impact_db_time_in_secs = attributes[:'impact_db_time_in_secs'] if attributes[:'impact_db_time_in_secs']

      self.impact_percent = attributes[:'impactPercent'] if attributes[:'impactPercent']

      raise 'You cannot provide both :impactPercent and :impact_percent' if attributes.key?(:'impactPercent') && attributes.key?(:'impact_percent')

      self.impact_percent = attributes[:'impact_percent'] if attributes[:'impact_percent']

      self.impact_avg_active_sessions = attributes[:'impactAvgActiveSessions'] if attributes[:'impactAvgActiveSessions']

      raise 'You cannot provide both :impactAvgActiveSessions and :impact_avg_active_sessions' if attributes.key?(:'impactAvgActiveSessions') && attributes.key?(:'impact_avg_active_sessions')

      self.impact_avg_active_sessions = attributes[:'impact_avg_active_sessions'] if attributes[:'impact_avg_active_sessions']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        task_id == other.task_id &&
        task_name == other.task_name &&
        finding_id == other.finding_id &&
        timestamp == other.timestamp &&
        time_analysis_started == other.time_analysis_started &&
        time_analysis_ended == other.time_analysis_ended &&
        category_name == other.category_name &&
        category_display_name == other.category_display_name &&
        name == other.name &&
        message == other.message &&
        analysis_db_time_in_secs == other.analysis_db_time_in_secs &&
        analysis_avg_active_sessions == other.analysis_avg_active_sessions &&
        impact_db_time_in_secs == other.impact_db_time_in_secs &&
        impact_percent == other.impact_percent &&
        impact_avg_active_sessions == other.impact_avg_active_sessions
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, task_id, task_name, finding_id, timestamp, time_analysis_started, time_analysis_ended, category_name, category_display_name, name, message, analysis_db_time_in_secs, analysis_avg_active_sessions, impact_db_time_in_secs, impact_percent, impact_avg_active_sessions].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
