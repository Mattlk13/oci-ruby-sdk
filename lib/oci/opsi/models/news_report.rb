# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # News report resource.
  class Opsi::Models::NewsReport
    NEWS_FREQUENCY_ENUM = [
      NEWS_FREQUENCY_WEEKLY = 'WEEKLY'.freeze,
      NEWS_FREQUENCY_DAILY = 'DAILY'.freeze,
      NEWS_FREQUENCY_HOURLY = 'HOURLY'.freeze,
      NEWS_FREQUENCY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LOCALE_ENUM = [
      LOCALE_EN = 'EN'.freeze,
      LOCALE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_DISABLED = 'DISABLED'.freeze,
      STATUS_ENABLED = 'ENABLED'.freeze,
      STATUS_TERMINATED = 'TERMINATED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DAY_OF_WEEK_ENUM = [
      DAY_OF_WEEK_MONDAY = 'MONDAY'.freeze,
      DAY_OF_WEEK_TUESDAY = 'TUESDAY'.freeze,
      DAY_OF_WEEK_WEDNESDAY = 'WEDNESDAY'.freeze,
      DAY_OF_WEEK_THURSDAY = 'THURSDAY'.freeze,
      DAY_OF_WEEK_FRIDAY = 'FRIDAY'.freeze,
      DAY_OF_WEEK_SATURDAY = 'SATURDAY'.freeze,
      DAY_OF_WEEK_SUNDAY = 'SUNDAY'.freeze,
      DAY_OF_WEEK_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MATCH_RULE_ENUM = [
      MATCH_RULE_MATCH_ANY = 'MATCH_ANY'.freeze,
      MATCH_RULE_MATCH_ALL = 'MATCH_ALL'.freeze,
      MATCH_RULE_MATCH_NONE = 'MATCH_NONE'.freeze,
      MATCH_RULE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** News report frequency.
    # @return [String]
    attr_reader :news_frequency

    # This attribute is required.
    # @return [OCI::Opsi::Models::NewsContentTypes]
    attr_accessor :content_types

    # Language of the news report.
    # @return [String]
    attr_reader :locale

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the news report resource.
    # @return [String]
    attr_accessor :id

    # The description of the news report.
    #
    # @return [String]
    attr_accessor :description

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # The news report name.
    # @return [String]
    attr_accessor :name

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the ONS topic.
    # @return [String]
    attr_accessor :ons_topic_id

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Indicates the status of a news report in Ops Insights.
    # @return [String]
    attr_reader :status

    # The time the the news report was first enabled. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # The time the news report was updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # The current state of the news report.
    # @return [String]
    attr_reader :lifecycle_state

    # A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
    # @return [String]
    attr_accessor :lifecycle_details

    # Day of the week in which the news report will be sent if the frequency is set to WEEKLY.
    # @return [String]
    attr_reader :day_of_week

    # A flag to consider the resources within a given compartment and all sub-compartments.
    # @return [BOOLEAN]
    attr_accessor :are_child_compartments_included

    # List of tag filters; each filter composed by a namespace, key, and value.
    # Example for defined tags - '<TagNamespace>.<TagKey>=<TagValue>'.
    # Example for freeform tags - '<TagKey>=<TagValue>'.
    #
    # @return [Array<String>]
    attr_accessor :tag_filters

    # Match rule used for tag filters.
    # @return [String]
    attr_reader :match_rule

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'news_frequency': :'newsFrequency',
        'content_types': :'contentTypes',
        'locale': :'locale',
        'id': :'id',
        'description': :'description',
        'compartment_id': :'compartmentId',
        'name': :'name',
        'ons_topic_id': :'onsTopicId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'status': :'status',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'day_of_week': :'dayOfWeek',
        'are_child_compartments_included': :'areChildCompartmentsIncluded',
        'tag_filters': :'tagFilters',
        'match_rule': :'matchRule'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'news_frequency': :'String',
        'content_types': :'OCI::Opsi::Models::NewsContentTypes',
        'locale': :'String',
        'id': :'String',
        'description': :'String',
        'compartment_id': :'String',
        'name': :'String',
        'ons_topic_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'status': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'day_of_week': :'String',
        'are_child_compartments_included': :'BOOLEAN',
        'tag_filters': :'Array<String>',
        'match_rule': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :news_frequency The value to assign to the {#news_frequency} property
    # @option attributes [OCI::Opsi::Models::NewsContentTypes] :content_types The value to assign to the {#content_types} property
    # @option attributes [String] :locale The value to assign to the {#locale} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :ons_topic_id The value to assign to the {#ons_topic_id} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :day_of_week The value to assign to the {#day_of_week} property
    # @option attributes [BOOLEAN] :are_child_compartments_included The value to assign to the {#are_child_compartments_included} property
    # @option attributes [Array<String>] :tag_filters The value to assign to the {#tag_filters} property
    # @option attributes [String] :match_rule The value to assign to the {#match_rule} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.news_frequency = attributes[:'newsFrequency'] if attributes[:'newsFrequency']

      raise 'You cannot provide both :newsFrequency and :news_frequency' if attributes.key?(:'newsFrequency') && attributes.key?(:'news_frequency')

      self.news_frequency = attributes[:'news_frequency'] if attributes[:'news_frequency']

      self.content_types = attributes[:'contentTypes'] if attributes[:'contentTypes']

      raise 'You cannot provide both :contentTypes and :content_types' if attributes.key?(:'contentTypes') && attributes.key?(:'content_types')

      self.content_types = attributes[:'content_types'] if attributes[:'content_types']

      self.locale = attributes[:'locale'] if attributes[:'locale']

      self.id = attributes[:'id'] if attributes[:'id']

      self.description = attributes[:'description'] if attributes[:'description']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.ons_topic_id = attributes[:'onsTopicId'] if attributes[:'onsTopicId']

      raise 'You cannot provide both :onsTopicId and :ons_topic_id' if attributes.key?(:'onsTopicId') && attributes.key?(:'ons_topic_id')

      self.ons_topic_id = attributes[:'ons_topic_id'] if attributes[:'ons_topic_id']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']

      self.status = attributes[:'status'] if attributes[:'status']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.day_of_week = attributes[:'dayOfWeek'] if attributes[:'dayOfWeek']

      raise 'You cannot provide both :dayOfWeek and :day_of_week' if attributes.key?(:'dayOfWeek') && attributes.key?(:'day_of_week')

      self.day_of_week = attributes[:'day_of_week'] if attributes[:'day_of_week']

      self.are_child_compartments_included = attributes[:'areChildCompartmentsIncluded'] unless attributes[:'areChildCompartmentsIncluded'].nil?
      self.are_child_compartments_included = false if are_child_compartments_included.nil? && !attributes.key?(:'areChildCompartmentsIncluded') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :areChildCompartmentsIncluded and :are_child_compartments_included' if attributes.key?(:'areChildCompartmentsIncluded') && attributes.key?(:'are_child_compartments_included')

      self.are_child_compartments_included = attributes[:'are_child_compartments_included'] unless attributes[:'are_child_compartments_included'].nil?
      self.are_child_compartments_included = false if are_child_compartments_included.nil? && !attributes.key?(:'areChildCompartmentsIncluded') && !attributes.key?(:'are_child_compartments_included') # rubocop:disable Style/StringLiterals

      self.tag_filters = attributes[:'tagFilters'] if attributes[:'tagFilters']

      raise 'You cannot provide both :tagFilters and :tag_filters' if attributes.key?(:'tagFilters') && attributes.key?(:'tag_filters')

      self.tag_filters = attributes[:'tag_filters'] if attributes[:'tag_filters']

      self.match_rule = attributes[:'matchRule'] if attributes[:'matchRule']

      raise 'You cannot provide both :matchRule and :match_rule' if attributes.key?(:'matchRule') && attributes.key?(:'match_rule')

      self.match_rule = attributes[:'match_rule'] if attributes[:'match_rule']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] news_frequency Object to be assigned
    def news_frequency=(news_frequency)
      # rubocop:disable Style/ConditionalAssignment
      if news_frequency && !NEWS_FREQUENCY_ENUM.include?(news_frequency)
        OCI.logger.debug("Unknown value for 'news_frequency' [" + news_frequency + "]. Mapping to 'NEWS_FREQUENCY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @news_frequency = NEWS_FREQUENCY_UNKNOWN_ENUM_VALUE
      else
        @news_frequency = news_frequency
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] locale Object to be assigned
    def locale=(locale)
      # rubocop:disable Style/ConditionalAssignment
      if locale && !LOCALE_ENUM.include?(locale)
        OCI.logger.debug("Unknown value for 'locale' [" + locale + "]. Mapping to 'LOCALE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @locale = LOCALE_UNKNOWN_ENUM_VALUE
      else
        @locale = locale
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] day_of_week Object to be assigned
    def day_of_week=(day_of_week)
      # rubocop:disable Style/ConditionalAssignment
      if day_of_week && !DAY_OF_WEEK_ENUM.include?(day_of_week)
        OCI.logger.debug("Unknown value for 'day_of_week' [" + day_of_week + "]. Mapping to 'DAY_OF_WEEK_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @day_of_week = DAY_OF_WEEK_UNKNOWN_ENUM_VALUE
      else
        @day_of_week = day_of_week
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] match_rule Object to be assigned
    def match_rule=(match_rule)
      # rubocop:disable Style/ConditionalAssignment
      if match_rule && !MATCH_RULE_ENUM.include?(match_rule)
        OCI.logger.debug("Unknown value for 'match_rule' [" + match_rule + "]. Mapping to 'MATCH_RULE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @match_rule = MATCH_RULE_UNKNOWN_ENUM_VALUE
      else
        @match_rule = match_rule
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        news_frequency == other.news_frequency &&
        content_types == other.content_types &&
        locale == other.locale &&
        id == other.id &&
        description == other.description &&
        compartment_id == other.compartment_id &&
        name == other.name &&
        ons_topic_id == other.ons_topic_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        status == other.status &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        day_of_week == other.day_of_week &&
        are_child_compartments_included == other.are_child_compartments_included &&
        tag_filters == other.tag_filters &&
        match_rule == other.match_rule
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [news_frequency, content_types, locale, id, description, compartment_id, name, ons_topic_id, freeform_tags, defined_tags, system_tags, status, time_created, time_updated, lifecycle_state, lifecycle_details, day_of_week, are_child_compartments_included, tag_filters, match_rule].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
