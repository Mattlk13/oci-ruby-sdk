# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230801
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A support operator raises Delegated Resource Access Request when they need access to any infrastructure resource governed by Delegation Control.
  # The Delegated Resource Access Request identifies the target resource and the set of Service Provider Actions. Delegated Resource Access Request handling depends upon the Delegation Control
  # that governs the target resource, and the set of Service Provider Actions listed for approval in the Delegated Resource Access Request. If all of the Service Provider Actions
  # listed in the Delegated Resource Access Request are in the pre-approved list in the Delegation Control that governs the target resource, then the Delegated Resource Access Request is
  # automatically approved. If not, then the Delegated Resource Access Request requires explicit approval from the approver group specified by the Delegation Control governing the target resource.
  #
  # You can approve or reject a Delegated Resource Access Request. You can also revoke the approval of an already approved Delegated Resource Access Request. While creating a Delegated Resource Access Request,
  # the support operator specifies the duration of access. You have the option to approve the entire duration or reduce or even increase the time duration.
  # A support operator can also request for an extension. The approval for such an extension is processed the same way the original Delegated Resource Access Request was processed.
  #
  class DelegateAccessControl::Models::DelegatedResourceAccessRequest
    RESOURCE_TYPE_ENUM = [
      RESOURCE_TYPE_VMCLUSTER = 'VMCLUSTER'.freeze,
      RESOURCE_TYPE_CLOUDVMCLUSTER = 'CLOUDVMCLUSTER'.freeze,
      RESOURCE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    REQUESTER_TYPE_ENUM = [
      REQUESTER_TYPE_OPERATOR = 'OPERATOR'.freeze,
      REQUESTER_TYPE_CUSTOMER = 'CUSTOMER'.freeze,
      REQUESTER_TYPE_SYSTEM = 'SYSTEM'.freeze,
      REQUESTER_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PROVIDED_SERVICE_TYPES_ENUM = [
      PROVIDED_SERVICE_TYPES_TROUBLESHOOTING = 'TROUBLESHOOTING'.freeze,
      PROVIDED_SERVICE_TYPES_ASSISTED_PATCHING = 'ASSISTED_PATCHING'.freeze,
      PROVIDED_SERVICE_TYPES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SEVERITY_ENUM = [
      SEVERITY_S1 = 'S1'.freeze,
      SEVERITY_S2 = 'S2'.freeze,
      SEVERITY_S3 = 'S3'.freeze,
      SEVERITY_S4 = 'S4'.freeze,
      SEVERITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACCEPTED = 'ACCEPTED'.freeze,
      LIFECYCLE_STATE_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      LIFECYCLE_STATE_WAITING = 'WAITING'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_SUCCEEDED = 'SUCCEEDED'.freeze,
      LIFECYCLE_STATE_CANCELING = 'CANCELING'.freeze,
      LIFECYCLE_STATE_CANCELED = 'CANCELED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    REQUEST_STATUS_ENUM = [
      REQUEST_STATUS_CREATED = 'CREATED'.freeze,
      REQUEST_STATUS_APPROVAL_WAITING = 'APPROVAL_WAITING'.freeze,
      REQUEST_STATUS_OPERATOR_ASSIGNMENT_WAITING = 'OPERATOR_ASSIGNMENT_WAITING'.freeze,
      REQUEST_STATUS_PREAPPROVED = 'PREAPPROVED'.freeze,
      REQUEST_STATUS_APPROVED = 'APPROVED'.freeze,
      REQUEST_STATUS_APPROVED_FOR_FUTURE = 'APPROVED_FOR_FUTURE'.freeze,
      REQUEST_STATUS_REJECTED = 'REJECTED'.freeze,
      REQUEST_STATUS_DEPLOYED = 'DEPLOYED'.freeze,
      REQUEST_STATUS_DEPLOY_FAILED = 'DEPLOY_FAILED'.freeze,
      REQUEST_STATUS_UNDEPLOYED = 'UNDEPLOYED'.freeze,
      REQUEST_STATUS_UNDEPLOY_FAILED = 'UNDEPLOY_FAILED'.freeze,
      REQUEST_STATUS_CLOSE_FAILED = 'CLOSE_FAILED'.freeze,
      REQUEST_STATUS_REVOKE_FAILED = 'REVOKE_FAILED'.freeze,
      REQUEST_STATUS_EXPIRY_FAILED = 'EXPIRY_FAILED'.freeze,
      REQUEST_STATUS_REVOKING = 'REVOKING'.freeze,
      REQUEST_STATUS_REVOKED = 'REVOKED'.freeze,
      REQUEST_STATUS_EXTENDING = 'EXTENDING'.freeze,
      REQUEST_STATUS_EXTENDED = 'EXTENDED'.freeze,
      REQUEST_STATUS_EXTENSION_REJECTED = 'EXTENSION_REJECTED'.freeze,
      REQUEST_STATUS_EXTENSION_FAILED = 'EXTENSION_FAILED'.freeze,
      REQUEST_STATUS_COMPLETING = 'COMPLETING'.freeze,
      REQUEST_STATUS_COMPLETED = 'COMPLETED'.freeze,
      REQUEST_STATUS_EXPIRED = 'EXPIRED'.freeze,
      REQUEST_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUDIT_TYPES_ENUM = [
      AUDIT_TYPES_COMMAND_AUDIT = 'COMMAND_AUDIT'.freeze,
      AUDIT_TYPES_COMMAND_KEYSTROKE_AUDIT = 'COMMAND_KEYSTROKE_AUDIT'.freeze,
      AUDIT_TYPES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the Delegated Resource Access Request.
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the compartment that contains the Delegated Resource Access Request.
    # @return [String]
    attr_accessor :compartment_id

    # Display name. This is generated by the system automatically.
    # @return [String]
    attr_accessor :display_name

    # A list of ticket numbers related to this Delegated Resource Access Request, e.g. Service Request (SR) number and JIRA ticket number.
    # @return [Array<String>]
    attr_accessor :ticket_numbers

    # **[Required]** A short description explaining why this Delegated Resource Access Request is needed by the support operator.
    # @return [String]
    attr_accessor :reason_for_request

    # **[Required]** Detailed description of this Delegated Resource Access Request.
    # @return [String]
    attr_accessor :description

    # Requested access start time in UTC.
    # @return [DateTime]
    attr_accessor :time_access_requested

    # **[Required]** The OCID of the target resource associated with the Delegated Resource Access Request. The support operator raises a Delegated Resource Access Request to get approval to
    # access the target resource.
    #
    # @return [String]
    attr_accessor :resource_id

    # The name of the target resource associated with the Delegated Resource Access Request. The support operator raises a Delegated Resource Access Request to get approval to
    # access the target resource.
    #
    # @return [String]
    attr_accessor :resource_name

    # Resource type for which the associated Delegation Control is applicable to.
    # @return [String]
    attr_reader :resource_type

    # Requester type
    # @return [String]
    attr_reader :requester_type

    # List of Service Provider Action names for which approval is sought by the support operator user. The list of pre-defined Service Provider Actions can be obtained from the ListServiceProviderActions API.
    # @return [Array<String>]
    attr_accessor :requested_action_names

    # List of Database unique names for which access is requested. This parameter is required for DLGT_MGMT_SYS_MAINT_ACCESS cage when database access in needed.
    # @return [Array<String>]
    attr_accessor :database_name_list

    # List of Service Provider Service Types being provided by the support operator user.
    # @return [Array<String>]
    attr_reader :provided_service_types

    # List of Delegation Subscription OCID that are associated with this Delegated Resource Access Request based on the service types being requested.
    # @return [Array<String>]
    attr_accessor :delegation_subscription_ids

    # Priority assigned to the Delegated Resource Access Request by the support operator
    # @return [String]
    attr_reader :severity

    # Duration in hours for which access is sought on the target resource.
    # @return [Integer]
    attr_accessor :duration_in_hours

    # Duration in hours for which extension access is sought on the target resource.
    # @return [Integer]
    attr_accessor :extend_duration_in_hours

    # Set to true if the request is approved automatically based on preApprovedServiceProviderActionNames or isAutoApproveDuringMaintenance in the associated Delegation Control.
    # @return [BOOLEAN]
    attr_accessor :is_auto_approved

    # The current lifecycle state of the Delegated Resource Access Request.
    # @return [String]
    attr_reader :lifecycle_state

    # Description of the current lifecycle state in more detail.
    # @return [String]
    attr_accessor :lifecycle_state_details

    # The current status of the Delegated Resource Access Request.
    # @return [String]
    attr_reader :request_status

    # Time when the Delegated Resource Access Request was created in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format, e.g. '2020-05-22T21:10:29.600Z'.
    #
    # @return [DateTime]
    attr_accessor :time_created

    # Time when the Delegated Resource Access Request was last modified in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format, e.g. '2020-05-22T21:10:29.600Z'.
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # Number of initial approvals that have been obtained so far.
    # @return [Integer]
    attr_accessor :num_initial_approvals

    # Number of extension approvals that have been obtained so far.
    # @return [Integer]
    attr_accessor :num_extension_approvals

    # In case of single approval, this will have only one item. Else, a list of approvals.
    # @return [Array<OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestApprovalDetails>]
    attr_accessor :approval_info

    # The comment entered by the support operator while closing the request.
    # @return [String]
    attr_accessor :closure_comment

    # The OCID of the Delegation Control governing the target resource.
    # @return [String]
    attr_accessor :delegation_control_id

    # Specifies the type of auditing to be enabled. There are two levels of auditing: command-level and keystroke-level.
    # By default, both command-level and keystroke-level auditing are enabled, i.e. commands and key strokes issued by the support operator are logged.
    #
    # @return [Array<String>]
    attr_reader :audit_types

    # Indicates if the delegated resource access request is waiting on more information from the operator
    # @return [BOOLEAN]
    attr_accessor :is_pending_more_info

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    #
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'ticket_numbers': :'ticketNumbers',
        'reason_for_request': :'reasonForRequest',
        'description': :'description',
        'time_access_requested': :'timeAccessRequested',
        'resource_id': :'resourceId',
        'resource_name': :'resourceName',
        'resource_type': :'resourceType',
        'requester_type': :'requesterType',
        'requested_action_names': :'requestedActionNames',
        'database_name_list': :'databaseNameList',
        'provided_service_types': :'providedServiceTypes',
        'delegation_subscription_ids': :'delegationSubscriptionIds',
        'severity': :'severity',
        'duration_in_hours': :'durationInHours',
        'extend_duration_in_hours': :'extendDurationInHours',
        'is_auto_approved': :'isAutoApproved',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_state_details': :'lifecycleStateDetails',
        'request_status': :'requestStatus',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'num_initial_approvals': :'numInitialApprovals',
        'num_extension_approvals': :'numExtensionApprovals',
        'approval_info': :'approvalInfo',
        'closure_comment': :'closureComment',
        'delegation_control_id': :'delegationControlId',
        'audit_types': :'auditTypes',
        'is_pending_more_info': :'isPendingMoreInfo',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'ticket_numbers': :'Array<String>',
        'reason_for_request': :'String',
        'description': :'String',
        'time_access_requested': :'DateTime',
        'resource_id': :'String',
        'resource_name': :'String',
        'resource_type': :'String',
        'requester_type': :'String',
        'requested_action_names': :'Array<String>',
        'database_name_list': :'Array<String>',
        'provided_service_types': :'Array<String>',
        'delegation_subscription_ids': :'Array<String>',
        'severity': :'String',
        'duration_in_hours': :'Integer',
        'extend_duration_in_hours': :'Integer',
        'is_auto_approved': :'BOOLEAN',
        'lifecycle_state': :'String',
        'lifecycle_state_details': :'String',
        'request_status': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'num_initial_approvals': :'Integer',
        'num_extension_approvals': :'Integer',
        'approval_info': :'Array<OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestApprovalDetails>',
        'closure_comment': :'String',
        'delegation_control_id': :'String',
        'audit_types': :'Array<String>',
        'is_pending_more_info': :'BOOLEAN',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Array<String>] :ticket_numbers The value to assign to the {#ticket_numbers} property
    # @option attributes [String] :reason_for_request The value to assign to the {#reason_for_request} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [DateTime] :time_access_requested The value to assign to the {#time_access_requested} property
    # @option attributes [String] :resource_id The value to assign to the {#resource_id} property
    # @option attributes [String] :resource_name The value to assign to the {#resource_name} property
    # @option attributes [String] :resource_type The value to assign to the {#resource_type} property
    # @option attributes [String] :requester_type The value to assign to the {#requester_type} property
    # @option attributes [Array<String>] :requested_action_names The value to assign to the {#requested_action_names} property
    # @option attributes [Array<String>] :database_name_list The value to assign to the {#database_name_list} property
    # @option attributes [Array<String>] :provided_service_types The value to assign to the {#provided_service_types} property
    # @option attributes [Array<String>] :delegation_subscription_ids The value to assign to the {#delegation_subscription_ids} property
    # @option attributes [String] :severity The value to assign to the {#severity} property
    # @option attributes [Integer] :duration_in_hours The value to assign to the {#duration_in_hours} property
    # @option attributes [Integer] :extend_duration_in_hours The value to assign to the {#extend_duration_in_hours} property
    # @option attributes [BOOLEAN] :is_auto_approved The value to assign to the {#is_auto_approved} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_state_details The value to assign to the {#lifecycle_state_details} property
    # @option attributes [String] :request_status The value to assign to the {#request_status} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [Integer] :num_initial_approvals The value to assign to the {#num_initial_approvals} property
    # @option attributes [Integer] :num_extension_approvals The value to assign to the {#num_extension_approvals} property
    # @option attributes [Array<OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestApprovalDetails>] :approval_info The value to assign to the {#approval_info} property
    # @option attributes [String] :closure_comment The value to assign to the {#closure_comment} property
    # @option attributes [String] :delegation_control_id The value to assign to the {#delegation_control_id} property
    # @option attributes [Array<String>] :audit_types The value to assign to the {#audit_types} property
    # @option attributes [BOOLEAN] :is_pending_more_info The value to assign to the {#is_pending_more_info} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.ticket_numbers = attributes[:'ticketNumbers'] if attributes[:'ticketNumbers']

      raise 'You cannot provide both :ticketNumbers and :ticket_numbers' if attributes.key?(:'ticketNumbers') && attributes.key?(:'ticket_numbers')

      self.ticket_numbers = attributes[:'ticket_numbers'] if attributes[:'ticket_numbers']

      self.reason_for_request = attributes[:'reasonForRequest'] if attributes[:'reasonForRequest']

      raise 'You cannot provide both :reasonForRequest and :reason_for_request' if attributes.key?(:'reasonForRequest') && attributes.key?(:'reason_for_request')

      self.reason_for_request = attributes[:'reason_for_request'] if attributes[:'reason_for_request']

      self.description = attributes[:'description'] if attributes[:'description']

      self.time_access_requested = attributes[:'timeAccessRequested'] if attributes[:'timeAccessRequested']

      raise 'You cannot provide both :timeAccessRequested and :time_access_requested' if attributes.key?(:'timeAccessRequested') && attributes.key?(:'time_access_requested')

      self.time_access_requested = attributes[:'time_access_requested'] if attributes[:'time_access_requested']

      self.resource_id = attributes[:'resourceId'] if attributes[:'resourceId']

      raise 'You cannot provide both :resourceId and :resource_id' if attributes.key?(:'resourceId') && attributes.key?(:'resource_id')

      self.resource_id = attributes[:'resource_id'] if attributes[:'resource_id']

      self.resource_name = attributes[:'resourceName'] if attributes[:'resourceName']

      raise 'You cannot provide both :resourceName and :resource_name' if attributes.key?(:'resourceName') && attributes.key?(:'resource_name')

      self.resource_name = attributes[:'resource_name'] if attributes[:'resource_name']

      self.resource_type = attributes[:'resourceType'] if attributes[:'resourceType']

      raise 'You cannot provide both :resourceType and :resource_type' if attributes.key?(:'resourceType') && attributes.key?(:'resource_type')

      self.resource_type = attributes[:'resource_type'] if attributes[:'resource_type']

      self.requester_type = attributes[:'requesterType'] if attributes[:'requesterType']

      raise 'You cannot provide both :requesterType and :requester_type' if attributes.key?(:'requesterType') && attributes.key?(:'requester_type')

      self.requester_type = attributes[:'requester_type'] if attributes[:'requester_type']

      self.requested_action_names = attributes[:'requestedActionNames'] if attributes[:'requestedActionNames']

      raise 'You cannot provide both :requestedActionNames and :requested_action_names' if attributes.key?(:'requestedActionNames') && attributes.key?(:'requested_action_names')

      self.requested_action_names = attributes[:'requested_action_names'] if attributes[:'requested_action_names']

      self.database_name_list = attributes[:'databaseNameList'] if attributes[:'databaseNameList']

      raise 'You cannot provide both :databaseNameList and :database_name_list' if attributes.key?(:'databaseNameList') && attributes.key?(:'database_name_list')

      self.database_name_list = attributes[:'database_name_list'] if attributes[:'database_name_list']

      self.provided_service_types = attributes[:'providedServiceTypes'] if attributes[:'providedServiceTypes']

      raise 'You cannot provide both :providedServiceTypes and :provided_service_types' if attributes.key?(:'providedServiceTypes') && attributes.key?(:'provided_service_types')

      self.provided_service_types = attributes[:'provided_service_types'] if attributes[:'provided_service_types']

      self.delegation_subscription_ids = attributes[:'delegationSubscriptionIds'] if attributes[:'delegationSubscriptionIds']

      raise 'You cannot provide both :delegationSubscriptionIds and :delegation_subscription_ids' if attributes.key?(:'delegationSubscriptionIds') && attributes.key?(:'delegation_subscription_ids')

      self.delegation_subscription_ids = attributes[:'delegation_subscription_ids'] if attributes[:'delegation_subscription_ids']

      self.severity = attributes[:'severity'] if attributes[:'severity']

      self.duration_in_hours = attributes[:'durationInHours'] if attributes[:'durationInHours']

      raise 'You cannot provide both :durationInHours and :duration_in_hours' if attributes.key?(:'durationInHours') && attributes.key?(:'duration_in_hours')

      self.duration_in_hours = attributes[:'duration_in_hours'] if attributes[:'duration_in_hours']

      self.extend_duration_in_hours = attributes[:'extendDurationInHours'] if attributes[:'extendDurationInHours']

      raise 'You cannot provide both :extendDurationInHours and :extend_duration_in_hours' if attributes.key?(:'extendDurationInHours') && attributes.key?(:'extend_duration_in_hours')

      self.extend_duration_in_hours = attributes[:'extend_duration_in_hours'] if attributes[:'extend_duration_in_hours']

      self.is_auto_approved = attributes[:'isAutoApproved'] unless attributes[:'isAutoApproved'].nil?

      raise 'You cannot provide both :isAutoApproved and :is_auto_approved' if attributes.key?(:'isAutoApproved') && attributes.key?(:'is_auto_approved')

      self.is_auto_approved = attributes[:'is_auto_approved'] unless attributes[:'is_auto_approved'].nil?

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_state_details = attributes[:'lifecycleStateDetails'] if attributes[:'lifecycleStateDetails']

      raise 'You cannot provide both :lifecycleStateDetails and :lifecycle_state_details' if attributes.key?(:'lifecycleStateDetails') && attributes.key?(:'lifecycle_state_details')

      self.lifecycle_state_details = attributes[:'lifecycle_state_details'] if attributes[:'lifecycle_state_details']

      self.request_status = attributes[:'requestStatus'] if attributes[:'requestStatus']

      raise 'You cannot provide both :requestStatus and :request_status' if attributes.key?(:'requestStatus') && attributes.key?(:'request_status')

      self.request_status = attributes[:'request_status'] if attributes[:'request_status']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.num_initial_approvals = attributes[:'numInitialApprovals'] if attributes[:'numInitialApprovals']

      raise 'You cannot provide both :numInitialApprovals and :num_initial_approvals' if attributes.key?(:'numInitialApprovals') && attributes.key?(:'num_initial_approvals')

      self.num_initial_approvals = attributes[:'num_initial_approvals'] if attributes[:'num_initial_approvals']

      self.num_extension_approvals = attributes[:'numExtensionApprovals'] if attributes[:'numExtensionApprovals']

      raise 'You cannot provide both :numExtensionApprovals and :num_extension_approvals' if attributes.key?(:'numExtensionApprovals') && attributes.key?(:'num_extension_approvals')

      self.num_extension_approvals = attributes[:'num_extension_approvals'] if attributes[:'num_extension_approvals']

      self.approval_info = attributes[:'approvalInfo'] if attributes[:'approvalInfo']

      raise 'You cannot provide both :approvalInfo and :approval_info' if attributes.key?(:'approvalInfo') && attributes.key?(:'approval_info')

      self.approval_info = attributes[:'approval_info'] if attributes[:'approval_info']

      self.closure_comment = attributes[:'closureComment'] if attributes[:'closureComment']

      raise 'You cannot provide both :closureComment and :closure_comment' if attributes.key?(:'closureComment') && attributes.key?(:'closure_comment')

      self.closure_comment = attributes[:'closure_comment'] if attributes[:'closure_comment']

      self.delegation_control_id = attributes[:'delegationControlId'] if attributes[:'delegationControlId']

      raise 'You cannot provide both :delegationControlId and :delegation_control_id' if attributes.key?(:'delegationControlId') && attributes.key?(:'delegation_control_id')

      self.delegation_control_id = attributes[:'delegation_control_id'] if attributes[:'delegation_control_id']

      self.audit_types = attributes[:'auditTypes'] if attributes[:'auditTypes']

      raise 'You cannot provide both :auditTypes and :audit_types' if attributes.key?(:'auditTypes') && attributes.key?(:'audit_types')

      self.audit_types = attributes[:'audit_types'] if attributes[:'audit_types']

      self.is_pending_more_info = attributes[:'isPendingMoreInfo'] unless attributes[:'isPendingMoreInfo'].nil?

      raise 'You cannot provide both :isPendingMoreInfo and :is_pending_more_info' if attributes.key?(:'isPendingMoreInfo') && attributes.key?(:'is_pending_more_info')

      self.is_pending_more_info = attributes[:'is_pending_more_info'] unless attributes[:'is_pending_more_info'].nil?

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      # rubocop:disable Style/ConditionalAssignment
      if resource_type && !RESOURCE_TYPE_ENUM.include?(resource_type)
        OCI.logger.debug("Unknown value for 'resource_type' [" + resource_type + "]. Mapping to 'RESOURCE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @resource_type = RESOURCE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @resource_type = resource_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] requester_type Object to be assigned
    def requester_type=(requester_type)
      # rubocop:disable Style/ConditionalAssignment
      if requester_type && !REQUESTER_TYPE_ENUM.include?(requester_type)
        OCI.logger.debug("Unknown value for 'requester_type' [" + requester_type + "]. Mapping to 'REQUESTER_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @requester_type = REQUESTER_TYPE_UNKNOWN_ENUM_VALUE
      else
        @requester_type = requester_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] provided_service_types Object to be assigned
    def provided_service_types=(provided_service_types)
      # rubocop:disable Style/ConditionalAssignment
      if provided_service_types.nil?
        @provided_service_types = nil
      else
        @provided_service_types =
          provided_service_types.collect do |item|
            if PROVIDED_SERVICE_TYPES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'provided_service_types' [#{item}]. Mapping to 'PROVIDED_SERVICE_TYPES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              PROVIDED_SERVICE_TYPES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      # rubocop:disable Style/ConditionalAssignment
      if severity && !SEVERITY_ENUM.include?(severity)
        OCI.logger.debug("Unknown value for 'severity' [" + severity + "]. Mapping to 'SEVERITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @severity = SEVERITY_UNKNOWN_ENUM_VALUE
      else
        @severity = severity
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_status Object to be assigned
    def request_status=(request_status)
      # rubocop:disable Style/ConditionalAssignment
      if request_status && !REQUEST_STATUS_ENUM.include?(request_status)
        OCI.logger.debug("Unknown value for 'request_status' [" + request_status + "]. Mapping to 'REQUEST_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @request_status = REQUEST_STATUS_UNKNOWN_ENUM_VALUE
      else
        @request_status = request_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] audit_types Object to be assigned
    def audit_types=(audit_types)
      # rubocop:disable Style/ConditionalAssignment
      if audit_types.nil?
        @audit_types = nil
      else
        @audit_types =
          audit_types.collect do |item|
            if AUDIT_TYPES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'audit_types' [#{item}]. Mapping to 'AUDIT_TYPES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              AUDIT_TYPES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        ticket_numbers == other.ticket_numbers &&
        reason_for_request == other.reason_for_request &&
        description == other.description &&
        time_access_requested == other.time_access_requested &&
        resource_id == other.resource_id &&
        resource_name == other.resource_name &&
        resource_type == other.resource_type &&
        requester_type == other.requester_type &&
        requested_action_names == other.requested_action_names &&
        database_name_list == other.database_name_list &&
        provided_service_types == other.provided_service_types &&
        delegation_subscription_ids == other.delegation_subscription_ids &&
        severity == other.severity &&
        duration_in_hours == other.duration_in_hours &&
        extend_duration_in_hours == other.extend_duration_in_hours &&
        is_auto_approved == other.is_auto_approved &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_state_details == other.lifecycle_state_details &&
        request_status == other.request_status &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        num_initial_approvals == other.num_initial_approvals &&
        num_extension_approvals == other.num_extension_approvals &&
        approval_info == other.approval_info &&
        closure_comment == other.closure_comment &&
        delegation_control_id == other.delegation_control_id &&
        audit_types == other.audit_types &&
        is_pending_more_info == other.is_pending_more_info &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, ticket_numbers, reason_for_request, description, time_access_requested, resource_id, resource_name, resource_type, requester_type, requested_action_names, database_name_list, provided_service_types, delegation_subscription_ids, severity, duration_in_hours, extend_duration_in_hours, is_auto_approved, lifecycle_state, lifecycle_state_details, request_status, time_created, time_updated, num_initial_approvals, num_extension_approvals, approval_info, closure_comment, delegation_control_id, audit_types, is_pending_more_info, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
