# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230801
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of customer and operator conversation.
  class DelegateAccessControl::Models::ServiceProviderInteractionSummary
    USER_TYPE_ENUM = [
      USER_TYPE_CUSTOMER = 'CUSTOMER'.freeze,
      USER_TYPE_OPERATOR = 'OPERATOR'.freeze,
      USER_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The unique identifier of the message within the scope of the associated access request.
    # @return [String]
    attr_accessor :message_identifier

    # ID of the customer or operator who is part of this conversation. For operator, this field is null.
    # @return [String]
    attr_accessor :user_id

    # Name of the customer or operator who is part of this conversation. For operator, the name is \"Operator\".
    # @return [String]
    attr_accessor :user_name

    # The information exchanged between the customer and the operator.
    # @return [String]
    attr_accessor :message

    # Indicates whether the user is a customer or an operator.
    # @return [String]
    attr_reader :user_type

    # Time when the conversation happened in [RFC 3339](https://tools.ietf.org/html/rfc3339)timestamp format, e.g. '2020-05-22T21:10:29.600Z'.
    #
    # @return [DateTime]
    attr_accessor :timestamp

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'message_identifier': :'messageIdentifier',
        'user_id': :'userId',
        'user_name': :'userName',
        'message': :'message',
        'user_type': :'userType',
        'timestamp': :'timestamp'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'message_identifier': :'String',
        'user_id': :'String',
        'user_name': :'String',
        'message': :'String',
        'user_type': :'String',
        'timestamp': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :message_identifier The value to assign to the {#message_identifier} property
    # @option attributes [String] :user_id The value to assign to the {#user_id} property
    # @option attributes [String] :user_name The value to assign to the {#user_name} property
    # @option attributes [String] :message The value to assign to the {#message} property
    # @option attributes [String] :user_type The value to assign to the {#user_type} property
    # @option attributes [DateTime] :timestamp The value to assign to the {#timestamp} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.message_identifier = attributes[:'messageIdentifier'] if attributes[:'messageIdentifier']

      raise 'You cannot provide both :messageIdentifier and :message_identifier' if attributes.key?(:'messageIdentifier') && attributes.key?(:'message_identifier')

      self.message_identifier = attributes[:'message_identifier'] if attributes[:'message_identifier']

      self.user_id = attributes[:'userId'] if attributes[:'userId']

      raise 'You cannot provide both :userId and :user_id' if attributes.key?(:'userId') && attributes.key?(:'user_id')

      self.user_id = attributes[:'user_id'] if attributes[:'user_id']

      self.user_name = attributes[:'userName'] if attributes[:'userName']

      raise 'You cannot provide both :userName and :user_name' if attributes.key?(:'userName') && attributes.key?(:'user_name')

      self.user_name = attributes[:'user_name'] if attributes[:'user_name']

      self.message = attributes[:'message'] if attributes[:'message']

      self.user_type = attributes[:'userType'] if attributes[:'userType']

      raise 'You cannot provide both :userType and :user_type' if attributes.key?(:'userType') && attributes.key?(:'user_type')

      self.user_type = attributes[:'user_type'] if attributes[:'user_type']

      self.timestamp = attributes[:'timestamp'] if attributes[:'timestamp']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_type Object to be assigned
    def user_type=(user_type)
      # rubocop:disable Style/ConditionalAssignment
      if user_type && !USER_TYPE_ENUM.include?(user_type)
        OCI.logger.debug("Unknown value for 'user_type' [" + user_type + "]. Mapping to 'USER_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @user_type = USER_TYPE_UNKNOWN_ENUM_VALUE
      else
        @user_type = user_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        message_identifier == other.message_identifier &&
        user_id == other.user_id &&
        user_name == other.user_name &&
        message == other.message &&
        user_type == other.user_type &&
        timestamp == other.timestamp
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [message_identifier, user_id, user_name, message, user_type, timestamp].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
