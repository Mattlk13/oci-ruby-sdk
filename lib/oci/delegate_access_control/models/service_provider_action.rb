# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230801
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the Service Provider Action. Service provider actions are a pre-defined set of commands available to the support operator on different layers of the infrastructure. Although the groupings may differ depending on the infrastructure layers,
  # the groups are designed to enable the support operator access to commands to resolve a specific set of issues.
  #
  class DelegateAccessControl::Models::ServiceProviderAction
    RESOURCE_TYPE_ENUM = [
      RESOURCE_TYPE_VMCLUSTER = 'VMCLUSTER'.freeze,
      RESOURCE_TYPE_CLOUDVMCLUSTER = 'CLOUDVMCLUSTER'.freeze,
      RESOURCE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SERVICE_PROVIDER_SERVICE_TYPES_ENUM = [
      SERVICE_PROVIDER_SERVICE_TYPES_TROUBLESHOOTING = 'TROUBLESHOOTING'.freeze,
      SERVICE_PROVIDER_SERVICE_TYPES_ASSISTED_PATCHING = 'ASSISTED_PATCHING'.freeze,
      SERVICE_PROVIDER_SERVICE_TYPES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique Oracle assigned identifier for the Service Provider Action.
    # @return [String]
    attr_accessor :id

    # **[Required]** Unique name of the Service Provider Action.
    # @return [String]
    attr_accessor :name

    # Display Name of the Service Provider Action.
    # @return [String]
    attr_accessor :customer_display_name

    # Name of the infrastructure layer associated with the Service Provider Action.
    # @return [String]
    attr_accessor :component

    # resourceType for which the ServiceProviderAction is applicable
    # @return [String]
    attr_reader :resource_type

    # List of Service Provider Service Types that this Service Provider Action is applicable to.
    # @return [Array<String>]
    attr_reader :service_provider_service_types

    # The current lifecycle state of the Service Provider Action.
    # @return [String]
    attr_reader :lifecycle_state

    # Description of the Service Provider Action in terms of associated risk profile, and characteristics of the operating system commands made
    # available to the support operator under this Service Provider Action.
    #
    # @return [String]
    attr_accessor :description

    # Fine grained properties associated with the Delegation Control.
    # @return [Array<OCI::DelegateAccessControl::Models::ServiceProviderActionProperties>]
    attr_accessor :properties

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'name': :'name',
        'customer_display_name': :'customerDisplayName',
        'component': :'component',
        'resource_type': :'resourceType',
        'service_provider_service_types': :'serviceProviderServiceTypes',
        'lifecycle_state': :'lifecycleState',
        'description': :'description',
        'properties': :'properties'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'name': :'String',
        'customer_display_name': :'String',
        'component': :'String',
        'resource_type': :'String',
        'service_provider_service_types': :'Array<String>',
        'lifecycle_state': :'String',
        'description': :'String',
        'properties': :'Array<OCI::DelegateAccessControl::Models::ServiceProviderActionProperties>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :customer_display_name The value to assign to the {#customer_display_name} property
    # @option attributes [String] :component The value to assign to the {#component} property
    # @option attributes [String] :resource_type The value to assign to the {#resource_type} property
    # @option attributes [Array<String>] :service_provider_service_types The value to assign to the {#service_provider_service_types} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Array<OCI::DelegateAccessControl::Models::ServiceProviderActionProperties>] :properties The value to assign to the {#properties} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.customer_display_name = attributes[:'customerDisplayName'] if attributes[:'customerDisplayName']

      raise 'You cannot provide both :customerDisplayName and :customer_display_name' if attributes.key?(:'customerDisplayName') && attributes.key?(:'customer_display_name')

      self.customer_display_name = attributes[:'customer_display_name'] if attributes[:'customer_display_name']

      self.component = attributes[:'component'] if attributes[:'component']

      self.resource_type = attributes[:'resourceType'] if attributes[:'resourceType']

      raise 'You cannot provide both :resourceType and :resource_type' if attributes.key?(:'resourceType') && attributes.key?(:'resource_type')

      self.resource_type = attributes[:'resource_type'] if attributes[:'resource_type']

      self.service_provider_service_types = attributes[:'serviceProviderServiceTypes'] if attributes[:'serviceProviderServiceTypes']

      raise 'You cannot provide both :serviceProviderServiceTypes and :service_provider_service_types' if attributes.key?(:'serviceProviderServiceTypes') && attributes.key?(:'service_provider_service_types')

      self.service_provider_service_types = attributes[:'service_provider_service_types'] if attributes[:'service_provider_service_types']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.description = attributes[:'description'] if attributes[:'description']

      self.properties = attributes[:'properties'] if attributes[:'properties']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      # rubocop:disable Style/ConditionalAssignment
      if resource_type && !RESOURCE_TYPE_ENUM.include?(resource_type)
        OCI.logger.debug("Unknown value for 'resource_type' [" + resource_type + "]. Mapping to 'RESOURCE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @resource_type = RESOURCE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @resource_type = resource_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_provider_service_types Object to be assigned
    def service_provider_service_types=(service_provider_service_types)
      # rubocop:disable Style/ConditionalAssignment
      if service_provider_service_types.nil?
        @service_provider_service_types = nil
      else
        @service_provider_service_types =
          service_provider_service_types.collect do |item|
            if SERVICE_PROVIDER_SERVICE_TYPES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'service_provider_service_types' [#{item}]. Mapping to 'SERVICE_PROVIDER_SERVICE_TYPES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              SERVICE_PROVIDER_SERVICE_TYPES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        customer_display_name == other.customer_display_name &&
        component == other.component &&
        resource_type == other.resource_type &&
        service_provider_service_types == other.service_provider_service_types &&
        lifecycle_state == other.lifecycle_state &&
        description == other.description &&
        properties == other.properties
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, customer_display_name, component, resource_type, service_provider_service_types, lifecycle_state, description, properties].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
