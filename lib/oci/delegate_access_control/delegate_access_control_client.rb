# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230801

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Oracle Delegate Access Control allows ExaCC and ExaCS customers to delegate management of their Exadata resources operators outside their tenancies.
  # With Delegate Access Control, Support Providers can deliver managed services using comprehensive and robust tooling built on the OCI platform.
  # Customers maintain control over who has access to the delegated resources in their tenancy and what actions can be taken.
  # Enterprises managing resources across multiple tenants can use Delegate Access Control to streamline management tasks.
  # Using logging service, customers can view a near real-time audit report of all actions performed by a Service Provider operator.
  class DelegateAccessControl::DelegateAccessControlClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new DelegateAccessControlClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20230801'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "DelegateAccessControlClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://delegate-access-control.{region}.oci.{secondLevelDomain}') + '/20230801'
      logger.info "DelegateAccessControlClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Approves a Delegated Resource Access Request.
    #
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [OCI::DelegateAccessControl::Models::ApproveDelegatedResourceAccessRequestDetails] approve_delegated_resource_access_request_details Details regarding the approval of a Delegated Resource Access Request created by the support operator.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/approve_delegated_resource_access_request.rb.html) to see an example of how to use approve_delegated_resource_access_request API.
    def approve_delegated_resource_access_request(delegated_resource_access_request_id, approve_delegated_resource_access_request_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#approve_delegated_resource_access_request.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling approve_delegated_resource_access_request." if delegated_resource_access_request_id.nil?
      raise "Missing the required parameter 'approve_delegated_resource_access_request_details' when calling approve_delegated_resource_access_request." if approve_delegated_resource_access_request_details.nil?
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/approve'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(approve_delegated_resource_access_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#approve_delegated_resource_access_request') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves the Delegation Control resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
    #
    # @param [String] delegation_control_id unique Delegation Control identifier
    # @param [OCI::DelegateAccessControl::Models::ChangeDelegationControlCompartmentDetails] change_delegation_control_compartment_details Moves the Delegation Control resource into a different compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/change_delegation_control_compartment.rb.html) to see an example of how to use change_delegation_control_compartment API.
    def change_delegation_control_compartment(delegation_control_id, change_delegation_control_compartment_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#change_delegation_control_compartment.' if logger

      raise "Missing the required parameter 'delegation_control_id' when calling change_delegation_control_compartment." if delegation_control_id.nil?
      raise "Missing the required parameter 'change_delegation_control_compartment_details' when calling change_delegation_control_compartment." if change_delegation_control_compartment_details.nil?
      raise "Parameter value for 'delegation_control_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_control_id)

      path = '/delegationControls/{delegationControlId}/actions/changeCompartment'.sub('{delegationControlId}', delegation_control_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_delegation_control_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#change_delegation_control_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves the Delegation Subscription resource into a different compartment. When provided, 'If-Match' is checked against 'ETag' values of the resource.
    #
    # @param [String] delegation_subscription_id unique Delegation Subscription identifier
    # @param [OCI::DelegateAccessControl::Models::ChangeDelegationSubscriptionCompartmentDetails] change_delegation_subscription_compartment_details Moves the Delegation Subscription resource into a different compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/change_delegation_subscription_compartment.rb.html) to see an example of how to use change_delegation_subscription_compartment API.
    def change_delegation_subscription_compartment(delegation_subscription_id, change_delegation_subscription_compartment_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#change_delegation_subscription_compartment.' if logger

      raise "Missing the required parameter 'delegation_subscription_id' when calling change_delegation_subscription_compartment." if delegation_subscription_id.nil?
      raise "Missing the required parameter 'change_delegation_subscription_compartment_details' when calling change_delegation_subscription_compartment." if change_delegation_subscription_compartment_details.nil?
      raise "Parameter value for 'delegation_subscription_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_subscription_id)

      path = '/delegationSubscriptions/{delegationSubscriptionId}/actions/changeCompartment'.sub('{delegationSubscriptionId}', delegation_subscription_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_delegation_subscription_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#change_delegation_subscription_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a Delegation Control.
    #
    # @param [OCI::DelegateAccessControl::Models::CreateDelegationControlDetails] create_delegation_control_details Details for the new Delegation Control.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationControl DelegationControl}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/create_delegation_control.rb.html) to see an example of how to use create_delegation_control API.
    def create_delegation_control(create_delegation_control_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#create_delegation_control.' if logger

      raise "Missing the required parameter 'create_delegation_control_details' when calling create_delegation_control." if create_delegation_control_details.nil?

      path = '/delegationControls'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_delegation_control_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#create_delegation_control') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationControl'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates Delegation Subscription in Delegation Control.
    #
    # @param [OCI::DelegateAccessControl::Models::CreateDelegationSubscriptionDetails] create_delegation_subscription_details Details for creating Delegation Subscription in Delegation Control.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationSubscription DelegationSubscription}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/create_delegation_subscription.rb.html) to see an example of how to use create_delegation_subscription API.
    def create_delegation_subscription(create_delegation_subscription_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#create_delegation_subscription.' if logger

      raise "Missing the required parameter 'create_delegation_subscription_details' when calling create_delegation_subscription." if create_delegation_subscription_details.nil?

      path = '/delegationSubscriptions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_delegation_subscription_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#create_delegation_subscription') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationSubscription'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a Delegation Control. You cannot delete a Delegation Control if it is assigned to govern any target resource currently or in the future.
    # In that case, first, delete all of the current and future assignments before deleting the Delegation Control. A Delegation Control that was previously assigned to a target
    # resource is marked as DELETED following a successful deletion. However, it is not completely deleted from the system. This is to ensure auditing information for the accesses
    # done under the Delegation Control is preserved for future needs. The system purges the deleted Delegation Control only when all of the audit data associated with the
    # Delegation Control are also deleted. Therefore, you cannot reuse the name of the deleted Delegation Control until the system purges the Delegation Control.
    #
    # @param [String] delegation_control_id unique Delegation Control identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :description Reason why this Delegation Control is deleted.
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/delete_delegation_control.rb.html) to see an example of how to use delete_delegation_control API.
    def delete_delegation_control(delegation_control_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#delete_delegation_control.' if logger

      raise "Missing the required parameter 'delegation_control_id' when calling delete_delegation_control." if delegation_control_id.nil?
      raise "Parameter value for 'delegation_control_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_control_id)

      path = '/delegationControls/{delegationControlId}'.sub('{delegationControlId}', delegation_control_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:description] = opts[:description] if opts[:description]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#delete_delegation_control') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # eletes an Delegation Subscription in Delegation Control.
    # @param [String] delegation_subscription_id unique Delegation Subscription identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/delete_delegation_subscription.rb.html) to see an example of how to use delete_delegation_subscription API.
    def delete_delegation_subscription(delegation_subscription_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#delete_delegation_subscription.' if logger

      raise "Missing the required parameter 'delegation_subscription_id' when calling delete_delegation_subscription." if delegation_subscription_id.nil?
      raise "Parameter value for 'delegation_subscription_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_subscription_id)

      path = '/delegationSubscriptions/{delegationSubscriptionId}'.sub('{delegationSubscriptionId}', delegation_subscription_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#delete_delegation_subscription') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets details of a Delegated Resource Access Request.
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequest DelegatedResourceAccessRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/get_delegated_resource_access_request.rb.html) to see an example of how to use get_delegated_resource_access_request API.
    def get_delegated_resource_access_request(delegated_resource_access_request_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#get_delegated_resource_access_request.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling get_delegated_resource_access_request." if delegated_resource_access_request_id.nil?
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#get_delegated_resource_access_request') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the audit log report for the given Delegated Resource Access Request.
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [BOOLEAN] :is_process_tree_enabled Set to true to enable process tree computation in audit report (default to false)
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestAuditLogReport DelegatedResourceAccessRequestAuditLogReport}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/get_delegated_resource_access_request_audit_log_report.rb.html) to see an example of how to use get_delegated_resource_access_request_audit_log_report API.
    def get_delegated_resource_access_request_audit_log_report(delegated_resource_access_request_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#get_delegated_resource_access_request_audit_log_report.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling get_delegated_resource_access_request_audit_log_report." if delegated_resource_access_request_id.nil?
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/delegatedResourceAccessRequestAuditLogReport'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:isProcessTreeEnabled] = opts[:is_process_tree_enabled] if !opts[:is_process_tree_enabled].nil?

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#get_delegated_resource_access_request_audit_log_report') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestAuditLogReport'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the Delegation Control associated with the specified Delegation Control ID.
    # @param [String] delegation_control_id unique Delegation Control identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationControl DelegationControl}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/get_delegation_control.rb.html) to see an example of how to use get_delegation_control API.
    def get_delegation_control(delegation_control_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#get_delegation_control.' if logger

      raise "Missing the required parameter 'delegation_control_id' when calling get_delegation_control." if delegation_control_id.nil?
      raise "Parameter value for 'delegation_control_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_control_id)

      path = '/delegationControls/{delegationControlId}'.sub('{delegationControlId}', delegation_control_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#get_delegation_control') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationControl'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a DelegationSubscription by identifier
    # @param [String] delegation_subscription_id unique Delegation Subscription identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationSubscription DelegationSubscription}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/get_delegation_subscription.rb.html) to see an example of how to use get_delegation_subscription API.
    def get_delegation_subscription(delegation_subscription_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#get_delegation_subscription.' if logger

      raise "Missing the required parameter 'delegation_subscription_id' when calling get_delegation_subscription." if delegation_subscription_id.nil?
      raise "Parameter value for 'delegation_subscription_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_subscription_id)

      path = '/delegationSubscriptions/{delegationSubscriptionId}'.sub('{delegationSubscriptionId}', delegation_subscription_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#get_delegation_subscription') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationSubscription'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets a ServiceProvider by identifier
    # @param [String] service_provider_id unique Service Provider identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::ServiceProvider ServiceProvider}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/get_service_provider.rb.html) to see an example of how to use get_service_provider API.
    def get_service_provider(service_provider_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#get_service_provider.' if logger

      raise "Missing the required parameter 'service_provider_id' when calling get_service_provider." if service_provider_id.nil?
      raise "Parameter value for 'service_provider_id' must not be blank" if OCI::Internal::Util.blank_string?(service_provider_id)

      path = '/serviceProviders/{serviceProviderId}'.sub('{serviceProviderId}', service_provider_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#get_service_provider') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::ServiceProvider'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the Service Provider Action associated with the specified Service Provider Action ID.
    # @param [String] service_provider_action_id Unique Oracle supplied identifier associated with the Service Provider Action.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::ServiceProviderAction ServiceProviderAction}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/get_service_provider_action.rb.html) to see an example of how to use get_service_provider_action API.
    def get_service_provider_action(service_provider_action_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#get_service_provider_action.' if logger

      raise "Missing the required parameter 'service_provider_action_id' when calling get_service_provider_action." if service_provider_action_id.nil?
      raise "Parameter value for 'service_provider_action_id' must not be blank" if OCI::Internal::Util.blank_string?(service_provider_action_id)

      path = '/serviceProviderActions/{serviceProviderActionId}'.sub('{serviceProviderActionId}', service_provider_action_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#get_service_provider_action') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::ServiceProviderAction'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a history of all status associated with the Delegated Resource Access RequestId.
    #
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :sort_order The sort order to use, either 'asc' or 'desc'. (default to DESC)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timestamp is descending. If no value is specified, timestamp is default.
    #    (default to timestamp)
    #   Allowed values are: timestamp
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestHistoryCollection DelegatedResourceAccessRequestHistoryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_delegated_resource_access_request_histories.rb.html) to see an example of how to use list_delegated_resource_access_request_histories API.
    def list_delegated_resource_access_request_histories(delegated_resource_access_request_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_delegated_resource_access_request_histories.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling list_delegated_resource_access_request_histories." if delegated_resource_access_request_id.nil?

      if opts[:sort_order] && !OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.'
      end

      if opts[:sort_by] && !%w[timestamp].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timestamp.'
      end
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/history'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_delegated_resource_access_request_histories') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestHistoryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all Delegated Resource Access Requests in the compartment. Note that only one of lifecycleState or requestStatus query parameter can be used.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :delegation_control_id unique Delegation Control identifier
    # @option opts [String] :resource_id A filter to return only Delegated Resource Access Requests for the given resource identifier.
    # @option opts [String] :lifecycle_state A filter to return only Delegated Resource Access Requests whose lifecycleState matches the given Delegated Resource Access Request lifecycleState.
    # @option opts [String] :request_status A filter to return only Delegated Resource Access Requests whose status matches the given Delegated Resource Access Request status.
    # @option opts [DateTime] :time_start Query start time in UTC in ISO 8601 format(inclusive).
    #   Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ).
    #   timeIntervalStart and timeIntervalEnd parameters cannot be used together.
    #
    # @option opts [DateTime] :time_end Query end time in UTC in ISO 8601 format(inclusive).
    #   Example 2019-10-30T00:00:00Z (yyyy-MM-ddThh:mm:ssZ).
    #   timeIntervalStart and timeIntervalEnd parameters cannot be used together.
    #
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :sort_order The sort order to use, either 'asc' or 'desc'. (default to DESC)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending. If no value is specified, default is timeCreated.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestSummaryCollection DelegatedResourceAccessRequestSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_delegated_resource_access_requests.rb.html) to see an example of how to use list_delegated_resource_access_requests API.
    def list_delegated_resource_access_requests(compartment_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_delegated_resource_access_requests.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_delegated_resource_access_requests." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequest::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequest::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:request_status] && !OCI::DelegateAccessControl::Models::DELEGATED_RESOURCE_ACCESS_REQUEST_STATUS_ENUM.include?(opts[:request_status])
        raise 'Invalid value for "request_status", must be one of the values in OCI::DelegateAccessControl::Models::DELEGATED_RESOURCE_ACCESS_REQUEST_STATUS_ENUM.'
      end

      if opts[:sort_order] && !OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/delegatedResourceAccessRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:delegationControlId] = opts[:delegation_control_id] if opts[:delegation_control_id]
      query_params[:resourceId] = opts[:resource_id] if opts[:resource_id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:requestStatus] = opts[:request_status] if opts[:request_status]
      query_params[:timeStart] = opts[:time_start] if opts[:time_start]
      query_params[:timeEnd] = opts[:time_end] if opts[:time_end]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_delegated_resource_access_requests') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegatedResourceAccessRequestSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns a list of resources associated with the Delegation Control.
    #
    # @param [String] delegation_control_id unique Delegation Control identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationControlResourceCollection DelegationControlResourceCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_delegation_control_resources.rb.html) to see an example of how to use list_delegation_control_resources API.
    def list_delegation_control_resources(delegation_control_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_delegation_control_resources.' if logger

      raise "Missing the required parameter 'delegation_control_id' when calling list_delegation_control_resources." if delegation_control_id.nil?
      raise "Parameter value for 'delegation_control_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_control_id)

      path = '/delegationControls/{delegationControlId}/resources'.sub('{delegationControlId}', delegation_control_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_delegation_control_resources') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationControlResourceCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the Delegation Controls in the compartment.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :lifecycle_state A filter to return only Delegation Control resources whose lifecycleState matches the given Delegation Control lifecycle state.
    # @option opts [String] :display_name A filter to return Delegation Control resources that match the given display name.
    # @option opts [String] :resource_type A filter to return only resources that match the given resource type.
    # @option opts [String] :resource_id A filter to return Delegation Control resources that match the given resource ID.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :sort_order The sort order to use, either 'asc' or 'desc'. (default to DESC)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending. If no value is specified, default is timeCreated.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationControlSummaryCollection DelegationControlSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_delegation_controls.rb.html) to see an example of how to use list_delegation_controls API.
    def list_delegation_controls(compartment_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_delegation_controls.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_delegation_controls." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::DelegateAccessControl::Models::DelegationControl::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DelegateAccessControl::Models::DelegationControl::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:resource_type] && !OCI::DelegateAccessControl::Models::DELEGATION_CONTROL_RESOURCE_TYPE_ENUM.include?(opts[:resource_type])
        raise 'Invalid value for "resource_type", must be one of the values in OCI::DelegateAccessControl::Models::DELEGATION_CONTROL_RESOURCE_TYPE_ENUM.'
      end

      if opts[:sort_order] && !OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/delegationControls'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:resourceType] = opts[:resource_type] if opts[:resource_type]
      query_params[:resourceId] = opts[:resource_id] if opts[:resource_id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_delegation_controls') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationControlSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the Delegation Subscriptions in Delegation Control.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :lifecycle_state A filter to return only Delegation Subscription resources whose lifecycleState matches the given Delegation Subscription lifecycle state.
    # @option opts [String] :display_name A filter to return Delegation Subscription resources that match the given display name.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :sort_order The sort order to use, either 'asc' or 'desc'. (default to DESC)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for displayName is ascending. If no value is specified, timeCreated is default.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationSubscriptionSummaryCollection DelegationSubscriptionSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_delegation_subscriptions.rb.html) to see an example of how to use list_delegation_subscriptions API.
    def list_delegation_subscriptions(compartment_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_delegation_subscriptions.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_delegation_subscriptions." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::DelegateAccessControl::Models::DelegationSubscription::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DelegateAccessControl::Models::DelegationSubscription::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/delegationSubscriptions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_delegation_subscriptions') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationSubscriptionSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all the ServiceProviderActions available in the system.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :name A filter to return only resources that match the entire name given.
    # @option opts [String] :resource_type A filter to return only resources that match the given resource type.
    # @option opts [Array<String>] :service_provider_service_type A filter to return only resources that match the given Service Provider service type.
    #   Allowed values are: TROUBLESHOOTING, ASSISTED_PATCHING
    # @option opts [String] :lifecycle_state A filter to return only resources whose lifecycleState matches the given Service Provider Action lifecycleState.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :sort_order The sort order to use, either 'asc' or 'desc'. (default to DESC)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for name is ascending. If no value is specified, default is timeCreated.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, name
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::ServiceProviderActionSummaryCollection ServiceProviderActionSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_service_provider_actions.rb.html) to see an example of how to use list_service_provider_actions API.
    def list_service_provider_actions(compartment_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_service_provider_actions.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_service_provider_actions." if compartment_id.nil?

      if opts[:resource_type] && !OCI::DelegateAccessControl::Models::DELEGATION_CONTROL_RESOURCE_TYPE_ENUM.include?(opts[:resource_type])
        raise 'Invalid value for "resource_type", must be one of the values in OCI::DelegateAccessControl::Models::DELEGATION_CONTROL_RESOURCE_TYPE_ENUM.'
      end


      service_provider_service_type_allowable_values = %w[TROUBLESHOOTING ASSISTED_PATCHING]
      if opts[:service_provider_service_type] && !opts[:service_provider_service_type].empty?
        opts[:service_provider_service_type].each do |val_to_check|
          unless service_provider_service_type_allowable_values.include?(val_to_check)
            raise 'Invalid value for "service_provider_service_type", must be one of TROUBLESHOOTING, ASSISTED_PATCHING.'
          end
        end
      end

      if opts[:lifecycle_state] && !OCI::DelegateAccessControl::Models::ServiceProviderAction::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DelegateAccessControl::Models::ServiceProviderAction::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated name].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, name.'
      end

      path = '/serviceProviderActions'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:resourceType] = opts[:resource_type] if opts[:resource_type]
      query_params[:serviceProviderServiceType] = OCI::ApiClient.build_collection_params(opts[:service_provider_service_type], :multi) if opts[:service_provider_service_type] && !opts[:service_provider_service_type].empty?
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_service_provider_actions') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::ServiceProviderActionSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the MoreInformation interaction between customer and support operators.
    #
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::ServiceProviderInteractionCollection ServiceProviderInteractionCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_service_provider_interactions.rb.html) to see an example of how to use list_service_provider_interactions API.
    def list_service_provider_interactions(delegated_resource_access_request_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_service_provider_interactions.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling list_service_provider_interactions." if delegated_resource_access_request_id.nil?
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/serviceProviderInteractions'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_service_provider_interactions') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::ServiceProviderInteractionCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the Service Providers.
    #
    # @param [String] compartment_id The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :lifecycle_state A filter to return only Service Provider resources whose lifecycleState matches the given Service Provider lifecycle state.
    # @option opts [String] :name A filter to return Service Provider resources that match the given name.
    # @option opts [String] :supported_resource_type A filter to return only Service Provider resources whose supported resource type matches the given resource type.
    # @option opts [String] :service_provider_type A filter to return only Service Provider resources whose provider type matches the given provider type.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :sort_order The sort order to use, either 'asc' or 'desc'. (default to DESC)
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for timeCreated is descending. Default order for name is ascending. If no value is specified, timeCreated is default.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::ServiceProviderSummaryCollection ServiceProviderSummaryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/list_service_providers.rb.html) to see an example of how to use list_service_providers API.
    def list_service_providers(compartment_id, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#list_service_providers.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_service_providers." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::DelegateAccessControl::Models::ServiceProvider::LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DelegateAccessControl::Models::ServiceProvider::LIFECYCLE_STATE_ENUM.'
      end

      if opts[:supported_resource_type] && !OCI::DelegateAccessControl::Models::DELEGATION_CONTROL_RESOURCE_TYPE_ENUM.include?(opts[:supported_resource_type])
        raise 'Invalid value for "supported_resource_type", must be one of the values in OCI::DelegateAccessControl::Models::DELEGATION_CONTROL_RESOURCE_TYPE_ENUM.'
      end

      if opts[:service_provider_type] && !OCI::DelegateAccessControl::Models::ServiceProvider::SERVICE_PROVIDER_TYPE_ENUM.include?(opts[:service_provider_type])
        raise 'Invalid value for "service_provider_type", must be one of the values in OCI::DelegateAccessControl::Models::ServiceProvider::SERVICE_PROVIDER_TYPE_ENUM.'
      end

      if opts[:sort_order] && !OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::DelegateAccessControl::Models::SORT_ORDERS_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/serviceProviders'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:supportedResourceType] = opts[:supported_resource_type] if opts[:supported_resource_type]
      query_params[:serviceProviderType] = opts[:service_provider_type] if opts[:service_provider_type]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#list_service_providers') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::ServiceProviderSummaryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Rejects a Delegated Resource Access Request.
    #
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [OCI::DelegateAccessControl::Models::RejectDelegatedResourceAccessRequestDetails] reject_delegated_resource_access_request_details Details regarding the rejection of a Delegated Resource Access Request created by the support operator.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/reject_delegated_resource_access_request.rb.html) to see an example of how to use reject_delegated_resource_access_request API.
    def reject_delegated_resource_access_request(delegated_resource_access_request_id, reject_delegated_resource_access_request_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#reject_delegated_resource_access_request.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling reject_delegated_resource_access_request." if delegated_resource_access_request_id.nil?
      raise "Missing the required parameter 'reject_delegated_resource_access_request_details' when calling reject_delegated_resource_access_request." if reject_delegated_resource_access_request_details.nil?
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/reject'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(reject_delegated_resource_access_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#reject_delegated_resource_access_request') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Revokes an already approved Delegated Resource Access Request.
    #
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [OCI::DelegateAccessControl::Models::RevokeDelegatedResourceAccessRequestDetails] revoke_delegated_resource_access_request_details Details regarding the revocation of a Delegated Resource Access Request created by the support operator.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/revoke_delegated_resource_access_request.rb.html) to see an example of how to use revoke_delegated_resource_access_request API.
    def revoke_delegated_resource_access_request(delegated_resource_access_request_id, revoke_delegated_resource_access_request_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#revoke_delegated_resource_access_request.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling revoke_delegated_resource_access_request." if delegated_resource_access_request_id.nil?
      raise "Missing the required parameter 'revoke_delegated_resource_access_request_details' when calling revoke_delegated_resource_access_request." if revoke_delegated_resource_access_request_details.nil?
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/revoke'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(revoke_delegated_resource_access_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#revoke_delegated_resource_access_request') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Posts query for additional information for the given Delegated Resource Access Request.
    #
    # @param [String] delegated_resource_access_request_id Unique Delegated Resource Access Request identifier
    # @param [OCI::DelegateAccessControl::Models::ServiceProviderInteractionRequestDetails] service_provider_interaction_request_details Details containing Query for additional information provided by Customer.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/service_provider_interaction_request.rb.html) to see an example of how to use service_provider_interaction_request API.
    def service_provider_interaction_request(delegated_resource_access_request_id, service_provider_interaction_request_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#service_provider_interaction_request.' if logger

      raise "Missing the required parameter 'delegated_resource_access_request_id' when calling service_provider_interaction_request." if delegated_resource_access_request_id.nil?
      raise "Missing the required parameter 'service_provider_interaction_request_details' when calling service_provider_interaction_request." if service_provider_interaction_request_details.nil?
      raise "Parameter value for 'delegated_resource_access_request_id' must not be blank" if OCI::Internal::Util.blank_string?(delegated_resource_access_request_id)

      path = '/delegatedResourceAccessRequests/{delegatedResourceAccessRequestId}/actions/serviceProviderInteractionRequest'.sub('{delegatedResourceAccessRequestId}', delegated_resource_access_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(service_provider_interaction_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#service_provider_interaction_request') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the existing DelegationControl for a given Delegation Control ID.
    #
    # @param [String] delegation_control_id unique Delegation Control identifier
    # @param [OCI::DelegateAccessControl::Models::UpdateDelegationControlDetails] update_delegation_control_details Details for the new DelegationControl.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationControl DelegationControl}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/update_delegation_control.rb.html) to see an example of how to use update_delegation_control API.
    def update_delegation_control(delegation_control_id, update_delegation_control_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#update_delegation_control.' if logger

      raise "Missing the required parameter 'delegation_control_id' when calling update_delegation_control." if delegation_control_id.nil?
      raise "Missing the required parameter 'update_delegation_control_details' when calling update_delegation_control." if update_delegation_control_details.nil?
      raise "Parameter value for 'delegation_control_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_control_id)

      path = '/delegationControls/{delegationControlId}'.sub('{delegationControlId}', delegation_control_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_delegation_control_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#update_delegation_control') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationControl'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the existing DelegationSubscription for a given Delegation Subscription ID.
    #
    # @param [String] delegation_subscription_id unique Delegation Subscription identifier
    # @param [OCI::DelegateAccessControl::Models::UpdateDelegationSubscriptionDetails] update_delegation_subscription_details Details for the DelegationSubscription to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing.
    # @return [Response] A Response object with data of type {OCI::DelegateAccessControl::Models::DelegationSubscription DelegationSubscription}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/delegateaccesscontrol/update_delegation_subscription.rb.html) to see an example of how to use update_delegation_subscription API.
    def update_delegation_subscription(delegation_subscription_id, update_delegation_subscription_details, opts = {})
      logger.debug 'Calling operation DelegateAccessControlClient#update_delegation_subscription.' if logger

      raise "Missing the required parameter 'delegation_subscription_id' when calling update_delegation_subscription." if delegation_subscription_id.nil?
      raise "Missing the required parameter 'update_delegation_subscription_details' when calling update_delegation_subscription." if update_delegation_subscription_details.nil?
      raise "Parameter value for 'delegation_subscription_id' must not be blank" if OCI::Internal::Util.blank_string?(delegation_subscription_id)

      path = '/delegationSubscriptions/{delegationSubscriptionId}'.sub('{delegationSubscriptionId}', delegation_subscription_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_delegation_subscription_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DelegateAccessControlClient#update_delegation_subscription') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DelegateAccessControl::Models::DelegationSubscription'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
