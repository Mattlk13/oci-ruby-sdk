# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230701
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the SDDC.
  class Ocvp::Models::CreateSddcDetails
    HCX_MODE_ENUM = [
      HCX_MODE_DISABLED = 'DISABLED'.freeze,
      HCX_MODE_ADVANCED = 'ADVANCED'.freeze,
      HCX_MODE_ENTERPRISE = 'ENTERPRISE'.freeze
    ].freeze

    # A descriptive name for the SDDC.
    # SDDC name requirements are 1-16 character length limit, Must start with a letter, Must be English letters, numbers, - only, No repeating hyphens, Must be unique within the region.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The VMware software bundle to install on the ESXi hosts in the SDDC. To get a
    # list of the available versions, use
    # {#list_supported_vmware_software_versions list_supported_vmware_software_versions}.
    #
    # @return [String]
    attr_accessor :vmware_software_version

    # The ESXi software bundle to install on the ESXi hosts in the SDDC.
    # Only versions under the same vmwareSoftwareVersion and have been validate by Oracle Cloud VMware Solution will be accepted.
    # To get a list of the available versions, use
    # {#list_supported_vmware_software_versions list_supported_vmware_software_versions}.
    #
    # @return [String]
    attr_accessor :esxi_software_version

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment to contain the SDDC.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** HCX configuration of the SDDC.
    #
    # @return [String]
    attr_reader :hcx_mode

    # This attribute is required.
    # @return [OCI::Ocvp::Models::InitialConfiguration]
    attr_accessor :initial_configuration

    # Indicates whether this SDDC is designated for only single ESXi host.
    # @return [BOOLEAN]
    attr_accessor :is_single_host_sddc

    # **[Required]** One or more public SSH keys to be included in the `~/.ssh/authorized_keys` file for
    # the default user on each ESXi host. Use a newline character to separate multiple keys.
    # The SSH keys must be in the format required for the `authorized_keys` file
    #
    # @return [String]
    attr_accessor :ssh_authorized_keys

    # Free-form tags for this resource. Each tag is a simple key-value pair with no
    # predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a
    # namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'vmware_software_version': :'vmwareSoftwareVersion',
        'esxi_software_version': :'esxiSoftwareVersion',
        'compartment_id': :'compartmentId',
        'hcx_mode': :'hcxMode',
        'initial_configuration': :'initialConfiguration',
        'is_single_host_sddc': :'isSingleHostSddc',
        'ssh_authorized_keys': :'sshAuthorizedKeys',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'vmware_software_version': :'String',
        'esxi_software_version': :'String',
        'compartment_id': :'String',
        'hcx_mode': :'String',
        'initial_configuration': :'OCI::Ocvp::Models::InitialConfiguration',
        'is_single_host_sddc': :'BOOLEAN',
        'ssh_authorized_keys': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :vmware_software_version The value to assign to the {#vmware_software_version} property
    # @option attributes [String] :esxi_software_version The value to assign to the {#esxi_software_version} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :hcx_mode The value to assign to the {#hcx_mode} property
    # @option attributes [OCI::Ocvp::Models::InitialConfiguration] :initial_configuration The value to assign to the {#initial_configuration} property
    # @option attributes [BOOLEAN] :is_single_host_sddc The value to assign to the {#is_single_host_sddc} property
    # @option attributes [String] :ssh_authorized_keys The value to assign to the {#ssh_authorized_keys} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.vmware_software_version = attributes[:'vmwareSoftwareVersion'] if attributes[:'vmwareSoftwareVersion']

      raise 'You cannot provide both :vmwareSoftwareVersion and :vmware_software_version' if attributes.key?(:'vmwareSoftwareVersion') && attributes.key?(:'vmware_software_version')

      self.vmware_software_version = attributes[:'vmware_software_version'] if attributes[:'vmware_software_version']

      self.esxi_software_version = attributes[:'esxiSoftwareVersion'] if attributes[:'esxiSoftwareVersion']

      raise 'You cannot provide both :esxiSoftwareVersion and :esxi_software_version' if attributes.key?(:'esxiSoftwareVersion') && attributes.key?(:'esxi_software_version')

      self.esxi_software_version = attributes[:'esxi_software_version'] if attributes[:'esxi_software_version']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.hcx_mode = attributes[:'hcxMode'] if attributes[:'hcxMode']

      raise 'You cannot provide both :hcxMode and :hcx_mode' if attributes.key?(:'hcxMode') && attributes.key?(:'hcx_mode')

      self.hcx_mode = attributes[:'hcx_mode'] if attributes[:'hcx_mode']

      self.initial_configuration = attributes[:'initialConfiguration'] if attributes[:'initialConfiguration']

      raise 'You cannot provide both :initialConfiguration and :initial_configuration' if attributes.key?(:'initialConfiguration') && attributes.key?(:'initial_configuration')

      self.initial_configuration = attributes[:'initial_configuration'] if attributes[:'initial_configuration']

      self.is_single_host_sddc = attributes[:'isSingleHostSddc'] unless attributes[:'isSingleHostSddc'].nil?
      self.is_single_host_sddc = false if is_single_host_sddc.nil? && !attributes.key?(:'isSingleHostSddc') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSingleHostSddc and :is_single_host_sddc' if attributes.key?(:'isSingleHostSddc') && attributes.key?(:'is_single_host_sddc')

      self.is_single_host_sddc = attributes[:'is_single_host_sddc'] unless attributes[:'is_single_host_sddc'].nil?
      self.is_single_host_sddc = false if is_single_host_sddc.nil? && !attributes.key?(:'isSingleHostSddc') && !attributes.key?(:'is_single_host_sddc') # rubocop:disable Style/StringLiterals

      self.ssh_authorized_keys = attributes[:'sshAuthorizedKeys'] if attributes[:'sshAuthorizedKeys']

      raise 'You cannot provide both :sshAuthorizedKeys and :ssh_authorized_keys' if attributes.key?(:'sshAuthorizedKeys') && attributes.key?(:'ssh_authorized_keys')

      self.ssh_authorized_keys = attributes[:'ssh_authorized_keys'] if attributes[:'ssh_authorized_keys']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hcx_mode Object to be assigned
    def hcx_mode=(hcx_mode)
      raise "Invalid value for 'hcx_mode': this must be one of the values in HCX_MODE_ENUM." if hcx_mode && !HCX_MODE_ENUM.include?(hcx_mode)

      @hcx_mode = hcx_mode
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        vmware_software_version == other.vmware_software_version &&
        esxi_software_version == other.esxi_software_version &&
        compartment_id == other.compartment_id &&
        hcx_mode == other.hcx_mode &&
        initial_configuration == other.initial_configuration &&
        is_single_host_sddc == other.is_single_host_sddc &&
        ssh_authorized_keys == other.ssh_authorized_keys &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, vmware_software_version, esxi_software_version, compartment_id, hcx_mode, initial_configuration, is_single_host_sddc, ssh_authorized_keys, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
