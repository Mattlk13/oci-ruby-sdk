# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230701
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # An [Oracle Cloud VMware Solution](https://docs.cloud.oracle.com/iaas/Content/VMware/Concepts/ocvsoverview.htm) Cluster contains the resources required for a
  # functional VMware environment. Instances in a Cluster
  # (see {EsxiHost}) run in a virtual cloud network (VCN)
  # and are preconfigured with VMware and storage. Use the vCenter utility to manage
  # and deploy VMware virtual machines (VMs) in the Cluster.
  #
  # The Cluster uses a single management subnet for provisioning the Cluster. It also uses a
  # set of VLANs for various components of the VMware environment (vSphere, vMotion,
  # vSAN, and so on). See the Core Services API for information about VCN subnets and VLANs.
  #
  class Ocvp::Models::Cluster
    INITIAL_COMMITMENT_ENUM = [
      INITIAL_COMMITMENT_HOUR = 'HOUR'.freeze,
      INITIAL_COMMITMENT_MONTH = 'MONTH'.freeze,
      INITIAL_COMMITMENT_ONE_YEAR = 'ONE_YEAR'.freeze,
      INITIAL_COMMITMENT_THREE_YEARS = 'THREE_YEARS'.freeze,
      INITIAL_COMMITMENT_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    VSPHERE_TYPE_ENUM = [
      VSPHERE_TYPE_MANAGEMENT = 'MANAGEMENT'.freeze,
      VSPHERE_TYPE_WORKLOAD = 'WORKLOAD'.freeze,
      VSPHERE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Cluster.
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** The availability domain the ESXi hosts are running in. For Multi-AD Cluster, it is `multi-AD`.
    #
    # Example: `Uocm:PHX-AD-1`, `multi-AD`
    #
    # @return [String]
    attr_accessor :compute_availability_domain

    # **[Required]** A descriptive name for the Cluster. It must be unique, start with a letter, and contain only letters, digits,
    # whitespaces, dashes and underscores.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :display_name

    # A prefix used in the name of each ESXi host and Compute instance in the Cluster.
    # If this isn't set, the Cluster's `displayName` is used as the prefix.
    #
    # For example, if the value is `MyCluster`, the ESXi hosts are named `MyCluster-1`,
    # `MyCluster-2`, and so on.
    #
    # @return [String]
    attr_accessor :instance_display_name_prefix

    # **[Required]** In general, this is a specific version of bundled VMware software supported by
    # Oracle Cloud VMware Solution (see
    # {#list_supported_vmware_software_versions list_supported_vmware_software_versions}).
    #
    # This attribute is not guaranteed to reflect the version of
    # software currently installed on the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the version of software that the Oracle
    # Cloud VMware Solution will install on any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you upgrade the existing ESXi hosts in the Cluster to use a newer
    # version of bundled VMware software supported by the Oracle Cloud VMware Solution, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `vmwareSoftwareVersion` with that new version.
    #
    # @return [String]
    attr_accessor :vmware_software_version

    # In general, this is a specific version of bundled ESXi software supported by
    # Oracle Cloud VMware Solution (see
    # {#list_supported_vmware_software_versions list_supported_vmware_software_versions}).
    #
    # This attribute is not guaranteed to reflect the version of
    # software currently installed on the ESXi hosts in the SDDC. The purpose
    # of this attribute is to show the version of software that the Oracle
    # Cloud VMware Solution will install on any new ESXi hosts that you *add to this
    # SDDC in the future* with {#create_esxi_host create_esxi_host}
    # unless a different version is configured on the ESXi host level.
    #
    # Therefore, if you upgrade the existing ESXi hosts in the Cluster to use a newer
    # version of bundled ESXi software supported by the Oracle Cloud VMware Solution, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `esxiSoftwareVersion` with that new version.
    #
    # @return [String]
    attr_accessor :esxi_software_version

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment that
    # contains the Cluster.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the SDDC that the
    # Cluster belongs to.
    #
    # @return [String]
    attr_accessor :sddc_id

    # **[Required]** The number of ESXi hosts in the Cluster.
    # @return [Integer]
    attr_accessor :esxi_hosts_count

    # The billing option selected during Cluster creation.
    # {#list_supported_commitments list_supported_commitments}.
    #
    # @return [String]
    attr_reader :initial_commitment

    # The CIDR block for the IP addresses that VMware VMs in the SDDC use to run application
    # workloads.
    #
    # @return [String]
    attr_accessor :workload_network_cidr

    # This attribute is required.
    # @return [OCI::Ocvp::Models::NetworkConfiguration]
    attr_accessor :network_configuration

    # **[Required]** The date and time the Cluster was created, in the format defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # The date and time the Cluster was updated, in the format defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # The current state of the Cluster.
    # @return [String]
    attr_reader :lifecycle_state

    # The vSphere licenses to use when upgrading the Cluster.
    #
    # @return [Array<OCI::Ocvp::Models::VsphereLicense>]
    attr_accessor :upgrade_licenses

    # The links to binary objects needed to upgrade vSphere.
    #
    # @return [Array<OCI::Ocvp::Models::VsphereUpgradeObject>]
    attr_accessor :vsphere_upgrade_objects

    # **[Required]** The initial compute shape of the Cluster's ESXi hosts.
    # {#list_supported_host_shapes list_supported_host_shapes}.
    #
    # @return [String]
    attr_accessor :initial_host_shape_name

    # The initial OCPU count of the Cluster's ESXi hosts.
    #
    # @return [Float]
    attr_accessor :initial_host_ocpu_count

    # Indicates whether shielded instance is enabled at the Cluster level.
    #
    # @return [BOOLEAN]
    attr_accessor :is_shielded_instance_enabled

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
    #
    # @return [String]
    attr_accessor :capacity_reservation_id

    # Datastores used for the Cluster.
    #
    # @return [Array<OCI::Ocvp::Models::DatastoreDetails>]
    attr_accessor :datastores

    # **[Required]** vSphere Cluster types.
    #
    # @return [String]
    attr_reader :vsphere_type

    # **[Required]** Free-form tags for this resource. Each tag is a simple key-value pair with no
    # predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a
    # namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{orcl-cloud: {free-tier-retain: true}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compute_availability_domain': :'computeAvailabilityDomain',
        'display_name': :'displayName',
        'instance_display_name_prefix': :'instanceDisplayNamePrefix',
        'vmware_software_version': :'vmwareSoftwareVersion',
        'esxi_software_version': :'esxiSoftwareVersion',
        'compartment_id': :'compartmentId',
        'sddc_id': :'sddcId',
        'esxi_hosts_count': :'esxiHostsCount',
        'initial_commitment': :'initialCommitment',
        'workload_network_cidr': :'workloadNetworkCidr',
        'network_configuration': :'networkConfiguration',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'upgrade_licenses': :'upgradeLicenses',
        'vsphere_upgrade_objects': :'vsphereUpgradeObjects',
        'initial_host_shape_name': :'initialHostShapeName',
        'initial_host_ocpu_count': :'initialHostOcpuCount',
        'is_shielded_instance_enabled': :'isShieldedInstanceEnabled',
        'capacity_reservation_id': :'capacityReservationId',
        'datastores': :'datastores',
        'vsphere_type': :'vsphereType',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compute_availability_domain': :'String',
        'display_name': :'String',
        'instance_display_name_prefix': :'String',
        'vmware_software_version': :'String',
        'esxi_software_version': :'String',
        'compartment_id': :'String',
        'sddc_id': :'String',
        'esxi_hosts_count': :'Integer',
        'initial_commitment': :'String',
        'workload_network_cidr': :'String',
        'network_configuration': :'OCI::Ocvp::Models::NetworkConfiguration',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'upgrade_licenses': :'Array<OCI::Ocvp::Models::VsphereLicense>',
        'vsphere_upgrade_objects': :'Array<OCI::Ocvp::Models::VsphereUpgradeObject>',
        'initial_host_shape_name': :'String',
        'initial_host_ocpu_count': :'Float',
        'is_shielded_instance_enabled': :'BOOLEAN',
        'capacity_reservation_id': :'String',
        'datastores': :'Array<OCI::Ocvp::Models::DatastoreDetails>',
        'vsphere_type': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compute_availability_domain The value to assign to the {#compute_availability_domain} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :instance_display_name_prefix The value to assign to the {#instance_display_name_prefix} property
    # @option attributes [String] :vmware_software_version The value to assign to the {#vmware_software_version} property
    # @option attributes [String] :esxi_software_version The value to assign to the {#esxi_software_version} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :sddc_id The value to assign to the {#sddc_id} property
    # @option attributes [Integer] :esxi_hosts_count The value to assign to the {#esxi_hosts_count} property
    # @option attributes [String] :initial_commitment The value to assign to the {#initial_commitment} property
    # @option attributes [String] :workload_network_cidr The value to assign to the {#workload_network_cidr} property
    # @option attributes [OCI::Ocvp::Models::NetworkConfiguration] :network_configuration The value to assign to the {#network_configuration} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Array<OCI::Ocvp::Models::VsphereLicense>] :upgrade_licenses The value to assign to the {#upgrade_licenses} property
    # @option attributes [Array<OCI::Ocvp::Models::VsphereUpgradeObject>] :vsphere_upgrade_objects The value to assign to the {#vsphere_upgrade_objects} property
    # @option attributes [String] :initial_host_shape_name The value to assign to the {#initial_host_shape_name} property
    # @option attributes [Float] :initial_host_ocpu_count The value to assign to the {#initial_host_ocpu_count} property
    # @option attributes [BOOLEAN] :is_shielded_instance_enabled The value to assign to the {#is_shielded_instance_enabled} property
    # @option attributes [String] :capacity_reservation_id The value to assign to the {#capacity_reservation_id} property
    # @option attributes [Array<OCI::Ocvp::Models::DatastoreDetails>] :datastores The value to assign to the {#datastores} property
    # @option attributes [String] :vsphere_type The value to assign to the {#vsphere_type} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compute_availability_domain = attributes[:'computeAvailabilityDomain'] if attributes[:'computeAvailabilityDomain']

      raise 'You cannot provide both :computeAvailabilityDomain and :compute_availability_domain' if attributes.key?(:'computeAvailabilityDomain') && attributes.key?(:'compute_availability_domain')

      self.compute_availability_domain = attributes[:'compute_availability_domain'] if attributes[:'compute_availability_domain']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.instance_display_name_prefix = attributes[:'instanceDisplayNamePrefix'] if attributes[:'instanceDisplayNamePrefix']

      raise 'You cannot provide both :instanceDisplayNamePrefix and :instance_display_name_prefix' if attributes.key?(:'instanceDisplayNamePrefix') && attributes.key?(:'instance_display_name_prefix')

      self.instance_display_name_prefix = attributes[:'instance_display_name_prefix'] if attributes[:'instance_display_name_prefix']

      self.vmware_software_version = attributes[:'vmwareSoftwareVersion'] if attributes[:'vmwareSoftwareVersion']

      raise 'You cannot provide both :vmwareSoftwareVersion and :vmware_software_version' if attributes.key?(:'vmwareSoftwareVersion') && attributes.key?(:'vmware_software_version')

      self.vmware_software_version = attributes[:'vmware_software_version'] if attributes[:'vmware_software_version']

      self.esxi_software_version = attributes[:'esxiSoftwareVersion'] if attributes[:'esxiSoftwareVersion']

      raise 'You cannot provide both :esxiSoftwareVersion and :esxi_software_version' if attributes.key?(:'esxiSoftwareVersion') && attributes.key?(:'esxi_software_version')

      self.esxi_software_version = attributes[:'esxi_software_version'] if attributes[:'esxi_software_version']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.sddc_id = attributes[:'sddcId'] if attributes[:'sddcId']

      raise 'You cannot provide both :sddcId and :sddc_id' if attributes.key?(:'sddcId') && attributes.key?(:'sddc_id')

      self.sddc_id = attributes[:'sddc_id'] if attributes[:'sddc_id']

      self.esxi_hosts_count = attributes[:'esxiHostsCount'] if attributes[:'esxiHostsCount']

      raise 'You cannot provide both :esxiHostsCount and :esxi_hosts_count' if attributes.key?(:'esxiHostsCount') && attributes.key?(:'esxi_hosts_count')

      self.esxi_hosts_count = attributes[:'esxi_hosts_count'] if attributes[:'esxi_hosts_count']

      self.initial_commitment = attributes[:'initialCommitment'] if attributes[:'initialCommitment']

      raise 'You cannot provide both :initialCommitment and :initial_commitment' if attributes.key?(:'initialCommitment') && attributes.key?(:'initial_commitment')

      self.initial_commitment = attributes[:'initial_commitment'] if attributes[:'initial_commitment']

      self.workload_network_cidr = attributes[:'workloadNetworkCidr'] if attributes[:'workloadNetworkCidr']

      raise 'You cannot provide both :workloadNetworkCidr and :workload_network_cidr' if attributes.key?(:'workloadNetworkCidr') && attributes.key?(:'workload_network_cidr')

      self.workload_network_cidr = attributes[:'workload_network_cidr'] if attributes[:'workload_network_cidr']

      self.network_configuration = attributes[:'networkConfiguration'] if attributes[:'networkConfiguration']

      raise 'You cannot provide both :networkConfiguration and :network_configuration' if attributes.key?(:'networkConfiguration') && attributes.key?(:'network_configuration')

      self.network_configuration = attributes[:'network_configuration'] if attributes[:'network_configuration']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.upgrade_licenses = attributes[:'upgradeLicenses'] if attributes[:'upgradeLicenses']

      raise 'You cannot provide both :upgradeLicenses and :upgrade_licenses' if attributes.key?(:'upgradeLicenses') && attributes.key?(:'upgrade_licenses')

      self.upgrade_licenses = attributes[:'upgrade_licenses'] if attributes[:'upgrade_licenses']

      self.vsphere_upgrade_objects = attributes[:'vsphereUpgradeObjects'] if attributes[:'vsphereUpgradeObjects']

      raise 'You cannot provide both :vsphereUpgradeObjects and :vsphere_upgrade_objects' if attributes.key?(:'vsphereUpgradeObjects') && attributes.key?(:'vsphere_upgrade_objects')

      self.vsphere_upgrade_objects = attributes[:'vsphere_upgrade_objects'] if attributes[:'vsphere_upgrade_objects']

      self.initial_host_shape_name = attributes[:'initialHostShapeName'] if attributes[:'initialHostShapeName']

      raise 'You cannot provide both :initialHostShapeName and :initial_host_shape_name' if attributes.key?(:'initialHostShapeName') && attributes.key?(:'initial_host_shape_name')

      self.initial_host_shape_name = attributes[:'initial_host_shape_name'] if attributes[:'initial_host_shape_name']

      self.initial_host_ocpu_count = attributes[:'initialHostOcpuCount'] if attributes[:'initialHostOcpuCount']

      raise 'You cannot provide both :initialHostOcpuCount and :initial_host_ocpu_count' if attributes.key?(:'initialHostOcpuCount') && attributes.key?(:'initial_host_ocpu_count')

      self.initial_host_ocpu_count = attributes[:'initial_host_ocpu_count'] if attributes[:'initial_host_ocpu_count']

      self.is_shielded_instance_enabled = attributes[:'isShieldedInstanceEnabled'] unless attributes[:'isShieldedInstanceEnabled'].nil?
      self.is_shielded_instance_enabled = false if is_shielded_instance_enabled.nil? && !attributes.key?(:'isShieldedInstanceEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isShieldedInstanceEnabled and :is_shielded_instance_enabled' if attributes.key?(:'isShieldedInstanceEnabled') && attributes.key?(:'is_shielded_instance_enabled')

      self.is_shielded_instance_enabled = attributes[:'is_shielded_instance_enabled'] unless attributes[:'is_shielded_instance_enabled'].nil?
      self.is_shielded_instance_enabled = false if is_shielded_instance_enabled.nil? && !attributes.key?(:'isShieldedInstanceEnabled') && !attributes.key?(:'is_shielded_instance_enabled') # rubocop:disable Style/StringLiterals

      self.capacity_reservation_id = attributes[:'capacityReservationId'] if attributes[:'capacityReservationId']

      raise 'You cannot provide both :capacityReservationId and :capacity_reservation_id' if attributes.key?(:'capacityReservationId') && attributes.key?(:'capacity_reservation_id')

      self.capacity_reservation_id = attributes[:'capacity_reservation_id'] if attributes[:'capacity_reservation_id']

      self.datastores = attributes[:'datastores'] if attributes[:'datastores']

      self.vsphere_type = attributes[:'vsphereType'] if attributes[:'vsphereType']

      raise 'You cannot provide both :vsphereType and :vsphere_type' if attributes.key?(:'vsphereType') && attributes.key?(:'vsphere_type')

      self.vsphere_type = attributes[:'vsphere_type'] if attributes[:'vsphere_type']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] initial_commitment Object to be assigned
    def initial_commitment=(initial_commitment)
      # rubocop:disable Style/ConditionalAssignment
      if initial_commitment && !INITIAL_COMMITMENT_ENUM.include?(initial_commitment)
        OCI.logger.debug("Unknown value for 'initial_commitment' [" + initial_commitment + "]. Mapping to 'INITIAL_COMMITMENT_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @initial_commitment = INITIAL_COMMITMENT_UNKNOWN_ENUM_VALUE
      else
        @initial_commitment = initial_commitment
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vsphere_type Object to be assigned
    def vsphere_type=(vsphere_type)
      # rubocop:disable Style/ConditionalAssignment
      if vsphere_type && !VSPHERE_TYPE_ENUM.include?(vsphere_type)
        OCI.logger.debug("Unknown value for 'vsphere_type' [" + vsphere_type + "]. Mapping to 'VSPHERE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @vsphere_type = VSPHERE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @vsphere_type = vsphere_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compute_availability_domain == other.compute_availability_domain &&
        display_name == other.display_name &&
        instance_display_name_prefix == other.instance_display_name_prefix &&
        vmware_software_version == other.vmware_software_version &&
        esxi_software_version == other.esxi_software_version &&
        compartment_id == other.compartment_id &&
        sddc_id == other.sddc_id &&
        esxi_hosts_count == other.esxi_hosts_count &&
        initial_commitment == other.initial_commitment &&
        workload_network_cidr == other.workload_network_cidr &&
        network_configuration == other.network_configuration &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        upgrade_licenses == other.upgrade_licenses &&
        vsphere_upgrade_objects == other.vsphere_upgrade_objects &&
        initial_host_shape_name == other.initial_host_shape_name &&
        initial_host_ocpu_count == other.initial_host_ocpu_count &&
        is_shielded_instance_enabled == other.is_shielded_instance_enabled &&
        capacity_reservation_id == other.capacity_reservation_id &&
        datastores == other.datastores &&
        vsphere_type == other.vsphere_type &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compute_availability_domain, display_name, instance_display_name_prefix, vmware_software_version, esxi_software_version, compartment_id, sddc_id, esxi_hosts_count, initial_commitment, workload_network_cidr, network_configuration, time_created, time_updated, lifecycle_state, upgrade_licenses, vsphere_upgrade_objects, initial_host_shape_name, initial_host_ocpu_count, is_shielded_instance_enabled, capacity_reservation_id, datastores, vsphere_type, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
