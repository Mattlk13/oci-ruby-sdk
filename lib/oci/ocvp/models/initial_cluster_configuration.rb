# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230701
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the initial Cluster of SDDC.
  class Ocvp::Models::InitialClusterConfiguration
    VSPHERE_TYPE_ENUM = [
      VSPHERE_TYPE_MANAGEMENT = 'MANAGEMENT'.freeze,
      VSPHERE_TYPE_WORKLOAD = 'WORKLOAD'.freeze,
      VSPHERE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    INITIAL_COMMITMENT_ENUM = [
      INITIAL_COMMITMENT_HOUR = 'HOUR'.freeze,
      INITIAL_COMMITMENT_MONTH = 'MONTH'.freeze,
      INITIAL_COMMITMENT_ONE_YEAR = 'ONE_YEAR'.freeze,
      INITIAL_COMMITMENT_THREE_YEARS = 'THREE_YEARS'.freeze,
      INITIAL_COMMITMENT_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** vSphere Cluster types.
    #
    # @return [String]
    attr_reader :vsphere_type

    # **[Required]** The availability domain to create the Cluster's ESXi hosts in. For multi-AD Cluster deployment, set to `multi-AD`.
    #
    # @return [String]
    attr_accessor :compute_availability_domain

    # A descriptive name for the Cluster.
    # Cluster name requirements are 1-16 character length limit, Must start with a letter, Must be English letters, numbers, - only, No repeating hyphens, Must be unique within the region.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :display_name

    # A prefix used in the name of each ESXi host and Compute instance in the Cluster.
    # If this isn't set, the Cluster's `displayName` is used as the prefix.
    #
    # For example, if the value is `myCluster`, the ESXi hosts are named `myCluster-1`,
    # `myCluster-2`, and so on.
    #
    # @return [String]
    attr_accessor :instance_display_name_prefix

    # **[Required]** The number of ESXi hosts to create in the Cluster. You can add more hosts later
    # (see {#create_esxi_host create_esxi_host}). Creating
    # a Cluster with a ESXi host count of 1 will be considered a single ESXi host Cluster.
    #
    # **Note:** If you later delete EXSi hosts from a production Cluster to total less
    # than 3, you are still billed for the 3 minimum recommended ESXi hosts. Also,
    # you cannot add more VMware workloads to the Cluster until it again has at least
    # 3 ESXi hosts.
    #
    # @return [Integer]
    attr_accessor :esxi_hosts_count

    # This attribute is required.
    # @return [OCI::Ocvp::Models::NetworkConfiguration]
    attr_accessor :network_configuration

    # The billing option selected during Cluster creation.
    # {#list_supported_commitments list_supported_commitments}.
    #
    # @return [String]
    attr_reader :initial_commitment

    # The CIDR block for the IP addresses that VMware VMs in the Cluster use to run application
    # workloads.
    #
    # @return [String]
    attr_accessor :workload_network_cidr

    # The initial compute shape of the Cluster's ESXi hosts.
    # {#list_supported_host_shapes list_supported_host_shapes}.
    #
    # @return [String]
    attr_accessor :initial_host_shape_name

    # The initial OCPU count of the Cluster's ESXi hosts.
    #
    # @return [Float]
    attr_accessor :initial_host_ocpu_count

    # Indicates whether shielded instance is enabled for this Cluster.
    #
    # @return [BOOLEAN]
    attr_accessor :is_shielded_instance_enabled

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Capacity Reservation.
    #
    # @return [String]
    attr_accessor :capacity_reservation_id

    # A list of datastore info for the Cluster.
    # This value is required only when `initialHostShapeName` is a standard shape.
    #
    # @return [Array<OCI::Ocvp::Models::DatastoreInfo>]
    attr_accessor :datastores

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'vsphere_type': :'vsphereType',
        'compute_availability_domain': :'computeAvailabilityDomain',
        'display_name': :'displayName',
        'instance_display_name_prefix': :'instanceDisplayNamePrefix',
        'esxi_hosts_count': :'esxiHostsCount',
        'network_configuration': :'networkConfiguration',
        'initial_commitment': :'initialCommitment',
        'workload_network_cidr': :'workloadNetworkCidr',
        'initial_host_shape_name': :'initialHostShapeName',
        'initial_host_ocpu_count': :'initialHostOcpuCount',
        'is_shielded_instance_enabled': :'isShieldedInstanceEnabled',
        'capacity_reservation_id': :'capacityReservationId',
        'datastores': :'datastores'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'vsphere_type': :'String',
        'compute_availability_domain': :'String',
        'display_name': :'String',
        'instance_display_name_prefix': :'String',
        'esxi_hosts_count': :'Integer',
        'network_configuration': :'OCI::Ocvp::Models::NetworkConfiguration',
        'initial_commitment': :'String',
        'workload_network_cidr': :'String',
        'initial_host_shape_name': :'String',
        'initial_host_ocpu_count': :'Float',
        'is_shielded_instance_enabled': :'BOOLEAN',
        'capacity_reservation_id': :'String',
        'datastores': :'Array<OCI::Ocvp::Models::DatastoreInfo>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :vsphere_type The value to assign to the {#vsphere_type} property
    # @option attributes [String] :compute_availability_domain The value to assign to the {#compute_availability_domain} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :instance_display_name_prefix The value to assign to the {#instance_display_name_prefix} property
    # @option attributes [Integer] :esxi_hosts_count The value to assign to the {#esxi_hosts_count} property
    # @option attributes [OCI::Ocvp::Models::NetworkConfiguration] :network_configuration The value to assign to the {#network_configuration} property
    # @option attributes [String] :initial_commitment The value to assign to the {#initial_commitment} property
    # @option attributes [String] :workload_network_cidr The value to assign to the {#workload_network_cidr} property
    # @option attributes [String] :initial_host_shape_name The value to assign to the {#initial_host_shape_name} property
    # @option attributes [Float] :initial_host_ocpu_count The value to assign to the {#initial_host_ocpu_count} property
    # @option attributes [BOOLEAN] :is_shielded_instance_enabled The value to assign to the {#is_shielded_instance_enabled} property
    # @option attributes [String] :capacity_reservation_id The value to assign to the {#capacity_reservation_id} property
    # @option attributes [Array<OCI::Ocvp::Models::DatastoreInfo>] :datastores The value to assign to the {#datastores} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.vsphere_type = attributes[:'vsphereType'] if attributes[:'vsphereType']

      raise 'You cannot provide both :vsphereType and :vsphere_type' if attributes.key?(:'vsphereType') && attributes.key?(:'vsphere_type')

      self.vsphere_type = attributes[:'vsphere_type'] if attributes[:'vsphere_type']

      self.compute_availability_domain = attributes[:'computeAvailabilityDomain'] if attributes[:'computeAvailabilityDomain']

      raise 'You cannot provide both :computeAvailabilityDomain and :compute_availability_domain' if attributes.key?(:'computeAvailabilityDomain') && attributes.key?(:'compute_availability_domain')

      self.compute_availability_domain = attributes[:'compute_availability_domain'] if attributes[:'compute_availability_domain']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.instance_display_name_prefix = attributes[:'instanceDisplayNamePrefix'] if attributes[:'instanceDisplayNamePrefix']

      raise 'You cannot provide both :instanceDisplayNamePrefix and :instance_display_name_prefix' if attributes.key?(:'instanceDisplayNamePrefix') && attributes.key?(:'instance_display_name_prefix')

      self.instance_display_name_prefix = attributes[:'instance_display_name_prefix'] if attributes[:'instance_display_name_prefix']

      self.esxi_hosts_count = attributes[:'esxiHostsCount'] if attributes[:'esxiHostsCount']

      raise 'You cannot provide both :esxiHostsCount and :esxi_hosts_count' if attributes.key?(:'esxiHostsCount') && attributes.key?(:'esxi_hosts_count')

      self.esxi_hosts_count = attributes[:'esxi_hosts_count'] if attributes[:'esxi_hosts_count']

      self.network_configuration = attributes[:'networkConfiguration'] if attributes[:'networkConfiguration']

      raise 'You cannot provide both :networkConfiguration and :network_configuration' if attributes.key?(:'networkConfiguration') && attributes.key?(:'network_configuration')

      self.network_configuration = attributes[:'network_configuration'] if attributes[:'network_configuration']

      self.initial_commitment = attributes[:'initialCommitment'] if attributes[:'initialCommitment']
      self.initial_commitment = "HOUR" if initial_commitment.nil? && !attributes.key?(:'initialCommitment') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :initialCommitment and :initial_commitment' if attributes.key?(:'initialCommitment') && attributes.key?(:'initial_commitment')

      self.initial_commitment = attributes[:'initial_commitment'] if attributes[:'initial_commitment']
      self.initial_commitment = "HOUR" if initial_commitment.nil? && !attributes.key?(:'initialCommitment') && !attributes.key?(:'initial_commitment') # rubocop:disable Style/StringLiterals

      self.workload_network_cidr = attributes[:'workloadNetworkCidr'] if attributes[:'workloadNetworkCidr']

      raise 'You cannot provide both :workloadNetworkCidr and :workload_network_cidr' if attributes.key?(:'workloadNetworkCidr') && attributes.key?(:'workload_network_cidr')

      self.workload_network_cidr = attributes[:'workload_network_cidr'] if attributes[:'workload_network_cidr']

      self.initial_host_shape_name = attributes[:'initialHostShapeName'] if attributes[:'initialHostShapeName']
      self.initial_host_shape_name = "BM.DenseIO2.52" if initial_host_shape_name.nil? && !attributes.key?(:'initialHostShapeName') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :initialHostShapeName and :initial_host_shape_name' if attributes.key?(:'initialHostShapeName') && attributes.key?(:'initial_host_shape_name')

      self.initial_host_shape_name = attributes[:'initial_host_shape_name'] if attributes[:'initial_host_shape_name']
      self.initial_host_shape_name = "BM.DenseIO2.52" if initial_host_shape_name.nil? && !attributes.key?(:'initialHostShapeName') && !attributes.key?(:'initial_host_shape_name') # rubocop:disable Style/StringLiterals

      self.initial_host_ocpu_count = attributes[:'initialHostOcpuCount'] if attributes[:'initialHostOcpuCount']

      raise 'You cannot provide both :initialHostOcpuCount and :initial_host_ocpu_count' if attributes.key?(:'initialHostOcpuCount') && attributes.key?(:'initial_host_ocpu_count')

      self.initial_host_ocpu_count = attributes[:'initial_host_ocpu_count'] if attributes[:'initial_host_ocpu_count']

      self.is_shielded_instance_enabled = attributes[:'isShieldedInstanceEnabled'] unless attributes[:'isShieldedInstanceEnabled'].nil?
      self.is_shielded_instance_enabled = false if is_shielded_instance_enabled.nil? && !attributes.key?(:'isShieldedInstanceEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isShieldedInstanceEnabled and :is_shielded_instance_enabled' if attributes.key?(:'isShieldedInstanceEnabled') && attributes.key?(:'is_shielded_instance_enabled')

      self.is_shielded_instance_enabled = attributes[:'is_shielded_instance_enabled'] unless attributes[:'is_shielded_instance_enabled'].nil?
      self.is_shielded_instance_enabled = false if is_shielded_instance_enabled.nil? && !attributes.key?(:'isShieldedInstanceEnabled') && !attributes.key?(:'is_shielded_instance_enabled') # rubocop:disable Style/StringLiterals

      self.capacity_reservation_id = attributes[:'capacityReservationId'] if attributes[:'capacityReservationId']

      raise 'You cannot provide both :capacityReservationId and :capacity_reservation_id' if attributes.key?(:'capacityReservationId') && attributes.key?(:'capacity_reservation_id')

      self.capacity_reservation_id = attributes[:'capacity_reservation_id'] if attributes[:'capacity_reservation_id']

      self.datastores = attributes[:'datastores'] if attributes[:'datastores']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vsphere_type Object to be assigned
    def vsphere_type=(vsphere_type)
      # rubocop:disable Style/ConditionalAssignment
      if vsphere_type && !VSPHERE_TYPE_ENUM.include?(vsphere_type)
        OCI.logger.debug("Unknown value for 'vsphere_type' [" + vsphere_type + "]. Mapping to 'VSPHERE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @vsphere_type = VSPHERE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @vsphere_type = vsphere_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] initial_commitment Object to be assigned
    def initial_commitment=(initial_commitment)
      # rubocop:disable Style/ConditionalAssignment
      if initial_commitment && !INITIAL_COMMITMENT_ENUM.include?(initial_commitment)
        OCI.logger.debug("Unknown value for 'initial_commitment' [" + initial_commitment + "]. Mapping to 'INITIAL_COMMITMENT_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @initial_commitment = INITIAL_COMMITMENT_UNKNOWN_ENUM_VALUE
      else
        @initial_commitment = initial_commitment
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        vsphere_type == other.vsphere_type &&
        compute_availability_domain == other.compute_availability_domain &&
        display_name == other.display_name &&
        instance_display_name_prefix == other.instance_display_name_prefix &&
        esxi_hosts_count == other.esxi_hosts_count &&
        network_configuration == other.network_configuration &&
        initial_commitment == other.initial_commitment &&
        workload_network_cidr == other.workload_network_cidr &&
        initial_host_shape_name == other.initial_host_shape_name &&
        initial_host_ocpu_count == other.initial_host_ocpu_count &&
        is_shielded_instance_enabled == other.is_shielded_instance_enabled &&
        capacity_reservation_id == other.capacity_reservation_id &&
        datastores == other.datastores
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [vsphere_type, compute_availability_domain, display_name, instance_display_name_prefix, esxi_hosts_count, network_configuration, initial_commitment, workload_network_cidr, initial_host_shape_name, initial_host_ocpu_count, is_shielded_instance_enabled, capacity_reservation_id, datastores].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
