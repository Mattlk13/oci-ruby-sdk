# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230701
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The network configurations used by Cluster, including
  # [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the management subnet and VLANs.
  #
  class Ocvp::Models::NetworkConfiguration
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the management subnet used
    # to provision the Cluster.
    #
    # @return [String]
    attr_accessor :provisioning_subnet_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC
    # for the vSphere component of the VMware environment. This VLAN is a mandatory attribute
    # for Management Cluster.
    #
    # This attribute is not guaranteed to reflect the vSphere VLAN
    # currently used by the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the vSphere VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the Cluster to use a different VLAN
    # for the vSphere component of the VMware environment, you
    # should use {#update_sddc update_sddc} to update the Cluster's
    # `vsphereVlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :vsphere_vlan_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the Cluster
    # for the vMotion component of the VMware environment.
    #
    # This attribute is not guaranteed to reflect the vMotion VLAN
    # currently used by the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the vMotion VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the Cluster to use a different VLAN
    # for the vMotion component of the VMware environment, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `vmotionVlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :vmotion_vlan_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the Cluster
    # for the vSAN component of the VMware environment.
    #
    # This attribute is not guaranteed to reflect the vSAN VLAN
    # currently used by the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the vSAN VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the Cluster to use a different VLAN
    # for the vSAN component of the VMware environment, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `vsanVlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :vsan_vlan_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the Cluster
    # for the NSX VTEP component of the VMware environment.
    #
    # This attribute is not guaranteed to reflect the NSX VTEP VLAN
    # currently used by the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the NSX VTEP VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the Cluster to use a different VLAN
    # for the NSX VTEP component of the VMware environment, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `nsxVTepVlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :nsx_v_tep_vlan_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the Cluster
    # for the NSX Edge VTEP component of the VMware environment.
    #
    # This attribute is not guaranteed to reflect the NSX Edge VTEP VLAN
    # currently used by the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the NSX Edge VTEP VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the Cluster to use a different VLAN
    # for the NSX Edge VTEP component of the VMware environment, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `nsxEdgeVTepVlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :nsx_edge_v_tep_vlan_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC
    # for the NSX Edge Uplink 1 component of the VMware environment. This VLAN is a mandatory
    # attribute for Management Cluster.
    #
    # This attribute is not guaranteed to reflect the NSX Edge Uplink 1 VLAN
    # currently used by the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the NSX Edge Uplink 1 VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the Cluster to use a different VLAN
    # for the NSX Edge Uplink 1 component of the VMware environment, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `nsxEdgeUplink1VlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :nsx_edge_uplink1_vlan_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC
    # for the NSX Edge Uplink 2 component of the VMware environment. This VLAN is a mandatory
    # attribute for Management Cluster.
    #
    # This attribute is not guaranteed to reflect the NSX Edge Uplink 2 VLAN
    # currently used by the ESXi hosts in the Cluster. The purpose
    # of this attribute is to show the NSX Edge Uplink 2 VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # Cluster in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the Cluster to use a different VLAN
    # for the NSX Edge Uplink 2 component of the VMware environment, you
    # should use {#update_cluster update_cluster} to update the Cluster's
    # `nsxEdgeUplink2VlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :nsx_edge_uplink2_vlan_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the Cluster
    # for the vSphere Replication component of the VMware environment.
    #
    # @return [String]
    attr_accessor :replication_vlan_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the Cluster
    # for the Provisioning component of the VMware environment.
    #
    # @return [String]
    attr_accessor :provisioning_vlan_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the VLAN used by the SDDC
    # for the HCX component of the VMware environment. This VLAN is a mandatory attribute
    # for Management Cluster when HCX is enabled.
    #
    # This attribute is not guaranteed to reflect the HCX VLAN
    # currently used by the ESXi hosts in the SDDC. The purpose
    # of this attribute is to show the HCX VLAN that the Oracle
    # Cloud VMware Solution will use for any new ESXi hosts that you *add to this
    # SDDC in the future* with {#create_esxi_host create_esxi_host}.
    #
    # Therefore, if you change the existing ESXi hosts in the SDDC to use a different VLAN
    # for the HCX component of the VMware environment, you
    # should use {#update_sddc update_sddc} to update the SDDC's
    # `hcxVlanId` with that new VLAN's OCID.
    #
    # @return [String]
    attr_accessor :hcx_vlan_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'provisioning_subnet_id': :'provisioningSubnetId',
        'vsphere_vlan_id': :'vsphereVlanId',
        'vmotion_vlan_id': :'vmotionVlanId',
        'vsan_vlan_id': :'vsanVlanId',
        'nsx_v_tep_vlan_id': :'nsxVTepVlanId',
        'nsx_edge_v_tep_vlan_id': :'nsxEdgeVTepVlanId',
        'nsx_edge_uplink1_vlan_id': :'nsxEdgeUplink1VlanId',
        'nsx_edge_uplink2_vlan_id': :'nsxEdgeUplink2VlanId',
        'replication_vlan_id': :'replicationVlanId',
        'provisioning_vlan_id': :'provisioningVlanId',
        'hcx_vlan_id': :'hcxVlanId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'provisioning_subnet_id': :'String',
        'vsphere_vlan_id': :'String',
        'vmotion_vlan_id': :'String',
        'vsan_vlan_id': :'String',
        'nsx_v_tep_vlan_id': :'String',
        'nsx_edge_v_tep_vlan_id': :'String',
        'nsx_edge_uplink1_vlan_id': :'String',
        'nsx_edge_uplink2_vlan_id': :'String',
        'replication_vlan_id': :'String',
        'provisioning_vlan_id': :'String',
        'hcx_vlan_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :provisioning_subnet_id The value to assign to the {#provisioning_subnet_id} property
    # @option attributes [String] :vsphere_vlan_id The value to assign to the {#vsphere_vlan_id} property
    # @option attributes [String] :vmotion_vlan_id The value to assign to the {#vmotion_vlan_id} property
    # @option attributes [String] :vsan_vlan_id The value to assign to the {#vsan_vlan_id} property
    # @option attributes [String] :nsx_v_tep_vlan_id The value to assign to the {#nsx_v_tep_vlan_id} property
    # @option attributes [String] :nsx_edge_v_tep_vlan_id The value to assign to the {#nsx_edge_v_tep_vlan_id} property
    # @option attributes [String] :nsx_edge_uplink1_vlan_id The value to assign to the {#nsx_edge_uplink1_vlan_id} property
    # @option attributes [String] :nsx_edge_uplink2_vlan_id The value to assign to the {#nsx_edge_uplink2_vlan_id} property
    # @option attributes [String] :replication_vlan_id The value to assign to the {#replication_vlan_id} property
    # @option attributes [String] :provisioning_vlan_id The value to assign to the {#provisioning_vlan_id} property
    # @option attributes [String] :hcx_vlan_id The value to assign to the {#hcx_vlan_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.provisioning_subnet_id = attributes[:'provisioningSubnetId'] if attributes[:'provisioningSubnetId']

      raise 'You cannot provide both :provisioningSubnetId and :provisioning_subnet_id' if attributes.key?(:'provisioningSubnetId') && attributes.key?(:'provisioning_subnet_id')

      self.provisioning_subnet_id = attributes[:'provisioning_subnet_id'] if attributes[:'provisioning_subnet_id']

      self.vsphere_vlan_id = attributes[:'vsphereVlanId'] if attributes[:'vsphereVlanId']

      raise 'You cannot provide both :vsphereVlanId and :vsphere_vlan_id' if attributes.key?(:'vsphereVlanId') && attributes.key?(:'vsphere_vlan_id')

      self.vsphere_vlan_id = attributes[:'vsphere_vlan_id'] if attributes[:'vsphere_vlan_id']

      self.vmotion_vlan_id = attributes[:'vmotionVlanId'] if attributes[:'vmotionVlanId']

      raise 'You cannot provide both :vmotionVlanId and :vmotion_vlan_id' if attributes.key?(:'vmotionVlanId') && attributes.key?(:'vmotion_vlan_id')

      self.vmotion_vlan_id = attributes[:'vmotion_vlan_id'] if attributes[:'vmotion_vlan_id']

      self.vsan_vlan_id = attributes[:'vsanVlanId'] if attributes[:'vsanVlanId']

      raise 'You cannot provide both :vsanVlanId and :vsan_vlan_id' if attributes.key?(:'vsanVlanId') && attributes.key?(:'vsan_vlan_id')

      self.vsan_vlan_id = attributes[:'vsan_vlan_id'] if attributes[:'vsan_vlan_id']

      self.nsx_v_tep_vlan_id = attributes[:'nsxVTepVlanId'] if attributes[:'nsxVTepVlanId']

      raise 'You cannot provide both :nsxVTepVlanId and :nsx_v_tep_vlan_id' if attributes.key?(:'nsxVTepVlanId') && attributes.key?(:'nsx_v_tep_vlan_id')

      self.nsx_v_tep_vlan_id = attributes[:'nsx_v_tep_vlan_id'] if attributes[:'nsx_v_tep_vlan_id']

      self.nsx_edge_v_tep_vlan_id = attributes[:'nsxEdgeVTepVlanId'] if attributes[:'nsxEdgeVTepVlanId']

      raise 'You cannot provide both :nsxEdgeVTepVlanId and :nsx_edge_v_tep_vlan_id' if attributes.key?(:'nsxEdgeVTepVlanId') && attributes.key?(:'nsx_edge_v_tep_vlan_id')

      self.nsx_edge_v_tep_vlan_id = attributes[:'nsx_edge_v_tep_vlan_id'] if attributes[:'nsx_edge_v_tep_vlan_id']

      self.nsx_edge_uplink1_vlan_id = attributes[:'nsxEdgeUplink1VlanId'] if attributes[:'nsxEdgeUplink1VlanId']

      raise 'You cannot provide both :nsxEdgeUplink1VlanId and :nsx_edge_uplink1_vlan_id' if attributes.key?(:'nsxEdgeUplink1VlanId') && attributes.key?(:'nsx_edge_uplink1_vlan_id')

      self.nsx_edge_uplink1_vlan_id = attributes[:'nsx_edge_uplink1_vlan_id'] if attributes[:'nsx_edge_uplink1_vlan_id']

      self.nsx_edge_uplink2_vlan_id = attributes[:'nsxEdgeUplink2VlanId'] if attributes[:'nsxEdgeUplink2VlanId']

      raise 'You cannot provide both :nsxEdgeUplink2VlanId and :nsx_edge_uplink2_vlan_id' if attributes.key?(:'nsxEdgeUplink2VlanId') && attributes.key?(:'nsx_edge_uplink2_vlan_id')

      self.nsx_edge_uplink2_vlan_id = attributes[:'nsx_edge_uplink2_vlan_id'] if attributes[:'nsx_edge_uplink2_vlan_id']

      self.replication_vlan_id = attributes[:'replicationVlanId'] if attributes[:'replicationVlanId']

      raise 'You cannot provide both :replicationVlanId and :replication_vlan_id' if attributes.key?(:'replicationVlanId') && attributes.key?(:'replication_vlan_id')

      self.replication_vlan_id = attributes[:'replication_vlan_id'] if attributes[:'replication_vlan_id']

      self.provisioning_vlan_id = attributes[:'provisioningVlanId'] if attributes[:'provisioningVlanId']

      raise 'You cannot provide both :provisioningVlanId and :provisioning_vlan_id' if attributes.key?(:'provisioningVlanId') && attributes.key?(:'provisioning_vlan_id')

      self.provisioning_vlan_id = attributes[:'provisioning_vlan_id'] if attributes[:'provisioning_vlan_id']

      self.hcx_vlan_id = attributes[:'hcxVlanId'] if attributes[:'hcxVlanId']

      raise 'You cannot provide both :hcxVlanId and :hcx_vlan_id' if attributes.key?(:'hcxVlanId') && attributes.key?(:'hcx_vlan_id')

      self.hcx_vlan_id = attributes[:'hcx_vlan_id'] if attributes[:'hcx_vlan_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        provisioning_subnet_id == other.provisioning_subnet_id &&
        vsphere_vlan_id == other.vsphere_vlan_id &&
        vmotion_vlan_id == other.vmotion_vlan_id &&
        vsan_vlan_id == other.vsan_vlan_id &&
        nsx_v_tep_vlan_id == other.nsx_v_tep_vlan_id &&
        nsx_edge_v_tep_vlan_id == other.nsx_edge_v_tep_vlan_id &&
        nsx_edge_uplink1_vlan_id == other.nsx_edge_uplink1_vlan_id &&
        nsx_edge_uplink2_vlan_id == other.nsx_edge_uplink2_vlan_id &&
        replication_vlan_id == other.replication_vlan_id &&
        provisioning_vlan_id == other.provisioning_vlan_id &&
        hcx_vlan_id == other.hcx_vlan_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [provisioning_subnet_id, vsphere_vlan_id, vmotion_vlan_id, vsan_vlan_id, nsx_v_tep_vlan_id, nsx_edge_v_tep_vlan_id, nsx_edge_uplink1_vlan_id, nsx_edge_uplink2_vlan_id, replication_vlan_id, provisioning_vlan_id, hcx_vlan_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
