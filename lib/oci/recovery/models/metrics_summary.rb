# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210216
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Backup performance and storage utilization metrics for the Protected Database.
  class Recovery::Models::MetricsSummary
    # Backup storage space, in gigabytes, utilized by the protected database. Oracle charges for the total storage used.
    # @return [Float]
    attr_accessor :backup_space_used_in_gbs

    # The estimated backup storage space, in gigabytes, required to meet the recovery window goal, including foot print and backups for the protected database.
    # @return [Float]
    attr_accessor :backup_space_estimate_in_gbs

    # This is the time window when there is data loss exposure. The point after which recovery is impossible unless additional redo is available.
    # This is the time we received the last backup or last redo-log shipped.
    #
    # @return [Float]
    attr_accessor :unprotected_window_in_seconds

    # The estimated space, in gigabytes, consumed by the protected database. The database size is based on the size of the data files in the catalog, and does not include archive logs.
    # @return [Float]
    attr_accessor :db_size_in_gbs

    # The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service.
    # Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups.
    #
    # @return [BOOLEAN]
    attr_accessor :is_redo_logs_enabled

    # The maximum number of days to retain backups for a protected database.
    # @return [Float]
    attr_accessor :retention_period_in_days

    # Number of seconds backups are currently retained for this database.
    # @return [Float]
    attr_accessor :current_retention_period_in_seconds

    # Number of days of redo/archive to be applied to recover database.
    # @return [Float]
    attr_accessor :minimum_recovery_needed_in_days

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'backup_space_used_in_gbs': :'backupSpaceUsedInGBs',
        'backup_space_estimate_in_gbs': :'backupSpaceEstimateInGBs',
        'unprotected_window_in_seconds': :'unprotectedWindowInSeconds',
        'db_size_in_gbs': :'dbSizeInGBs',
        'is_redo_logs_enabled': :'isRedoLogsEnabled',
        'retention_period_in_days': :'retentionPeriodInDays',
        'current_retention_period_in_seconds': :'currentRetentionPeriodInSeconds',
        'minimum_recovery_needed_in_days': :'minimumRecoveryNeededInDays'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'backup_space_used_in_gbs': :'Float',
        'backup_space_estimate_in_gbs': :'Float',
        'unprotected_window_in_seconds': :'Float',
        'db_size_in_gbs': :'Float',
        'is_redo_logs_enabled': :'BOOLEAN',
        'retention_period_in_days': :'Float',
        'current_retention_period_in_seconds': :'Float',
        'minimum_recovery_needed_in_days': :'Float'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Float] :backup_space_used_in_gbs The value to assign to the {#backup_space_used_in_gbs} property
    # @option attributes [Float] :backup_space_estimate_in_gbs The value to assign to the {#backup_space_estimate_in_gbs} property
    # @option attributes [Float] :unprotected_window_in_seconds The value to assign to the {#unprotected_window_in_seconds} property
    # @option attributes [Float] :db_size_in_gbs The value to assign to the {#db_size_in_gbs} property
    # @option attributes [BOOLEAN] :is_redo_logs_enabled The value to assign to the {#is_redo_logs_enabled} property
    # @option attributes [Float] :retention_period_in_days The value to assign to the {#retention_period_in_days} property
    # @option attributes [Float] :current_retention_period_in_seconds The value to assign to the {#current_retention_period_in_seconds} property
    # @option attributes [Float] :minimum_recovery_needed_in_days The value to assign to the {#minimum_recovery_needed_in_days} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.backup_space_used_in_gbs = attributes[:'backupSpaceUsedInGBs'] if attributes[:'backupSpaceUsedInGBs']

      raise 'You cannot provide both :backupSpaceUsedInGBs and :backup_space_used_in_gbs' if attributes.key?(:'backupSpaceUsedInGBs') && attributes.key?(:'backup_space_used_in_gbs')

      self.backup_space_used_in_gbs = attributes[:'backup_space_used_in_gbs'] if attributes[:'backup_space_used_in_gbs']

      self.backup_space_estimate_in_gbs = attributes[:'backupSpaceEstimateInGBs'] if attributes[:'backupSpaceEstimateInGBs']

      raise 'You cannot provide both :backupSpaceEstimateInGBs and :backup_space_estimate_in_gbs' if attributes.key?(:'backupSpaceEstimateInGBs') && attributes.key?(:'backup_space_estimate_in_gbs')

      self.backup_space_estimate_in_gbs = attributes[:'backup_space_estimate_in_gbs'] if attributes[:'backup_space_estimate_in_gbs']

      self.unprotected_window_in_seconds = attributes[:'unprotectedWindowInSeconds'] if attributes[:'unprotectedWindowInSeconds']

      raise 'You cannot provide both :unprotectedWindowInSeconds and :unprotected_window_in_seconds' if attributes.key?(:'unprotectedWindowInSeconds') && attributes.key?(:'unprotected_window_in_seconds')

      self.unprotected_window_in_seconds = attributes[:'unprotected_window_in_seconds'] if attributes[:'unprotected_window_in_seconds']

      self.db_size_in_gbs = attributes[:'dbSizeInGBs'] if attributes[:'dbSizeInGBs']

      raise 'You cannot provide both :dbSizeInGBs and :db_size_in_gbs' if attributes.key?(:'dbSizeInGBs') && attributes.key?(:'db_size_in_gbs')

      self.db_size_in_gbs = attributes[:'db_size_in_gbs'] if attributes[:'db_size_in_gbs']

      self.is_redo_logs_enabled = attributes[:'isRedoLogsEnabled'] unless attributes[:'isRedoLogsEnabled'].nil?

      raise 'You cannot provide both :isRedoLogsEnabled and :is_redo_logs_enabled' if attributes.key?(:'isRedoLogsEnabled') && attributes.key?(:'is_redo_logs_enabled')

      self.is_redo_logs_enabled = attributes[:'is_redo_logs_enabled'] unless attributes[:'is_redo_logs_enabled'].nil?

      self.retention_period_in_days = attributes[:'retentionPeriodInDays'] if attributes[:'retentionPeriodInDays']

      raise 'You cannot provide both :retentionPeriodInDays and :retention_period_in_days' if attributes.key?(:'retentionPeriodInDays') && attributes.key?(:'retention_period_in_days')

      self.retention_period_in_days = attributes[:'retention_period_in_days'] if attributes[:'retention_period_in_days']

      self.current_retention_period_in_seconds = attributes[:'currentRetentionPeriodInSeconds'] if attributes[:'currentRetentionPeriodInSeconds']

      raise 'You cannot provide both :currentRetentionPeriodInSeconds and :current_retention_period_in_seconds' if attributes.key?(:'currentRetentionPeriodInSeconds') && attributes.key?(:'current_retention_period_in_seconds')

      self.current_retention_period_in_seconds = attributes[:'current_retention_period_in_seconds'] if attributes[:'current_retention_period_in_seconds']

      self.minimum_recovery_needed_in_days = attributes[:'minimumRecoveryNeededInDays'] if attributes[:'minimumRecoveryNeededInDays']

      raise 'You cannot provide both :minimumRecoveryNeededInDays and :minimum_recovery_needed_in_days' if attributes.key?(:'minimumRecoveryNeededInDays') && attributes.key?(:'minimum_recovery_needed_in_days')

      self.minimum_recovery_needed_in_days = attributes[:'minimum_recovery_needed_in_days'] if attributes[:'minimum_recovery_needed_in_days']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        backup_space_used_in_gbs == other.backup_space_used_in_gbs &&
        backup_space_estimate_in_gbs == other.backup_space_estimate_in_gbs &&
        unprotected_window_in_seconds == other.unprotected_window_in_seconds &&
        db_size_in_gbs == other.db_size_in_gbs &&
        is_redo_logs_enabled == other.is_redo_logs_enabled &&
        retention_period_in_days == other.retention_period_in_days &&
        current_retention_period_in_seconds == other.current_retention_period_in_seconds &&
        minimum_recovery_needed_in_days == other.minimum_recovery_needed_in_days
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [backup_space_used_in_gbs, backup_space_estimate_in_gbs, unprotected_window_in_seconds, db_size_in_gbs, is_redo_logs_enabled, retention_period_in_days, current_retention_period_in_seconds, minimum_recovery_needed_in_days].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
