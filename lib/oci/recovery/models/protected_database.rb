# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210216
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A protected database is an Oracle Cloud Database whose
  # backups are managed by Oracle Database Autonomous Recovery Service. Each protected database
  # requires a recovery service subnet and a protection policy to use Recovery Service as
  # the backup destination for centralized backup and recovery
  #
  class Recovery::Models::ProtectedDatabase
    DATABASE_SIZE_ENUM = [
      DATABASE_SIZE_XS = 'XS'.freeze,
      DATABASE_SIZE_S = 'S'.freeze,
      DATABASE_SIZE_M = 'M'.freeze,
      DATABASE_SIZE_L = 'L'.freeze,
      DATABASE_SIZE_XL = 'XL'.freeze,
      DATABASE_SIZE_XXL = 'XXL'.freeze,
      DATABASE_SIZE_AUTO = 'AUTO'.freeze,
      DATABASE_SIZE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETE_SCHEDULED = 'DELETE_SCHEDULED'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    HEALTH_ENUM = [
      HEALTH_PROTECTED = 'PROTECTED'.freeze,
      HEALTH_WARNING = 'WARNING'.freeze,
      HEALTH_ALERT = 'ALERT'.freeze,
      HEALTH_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the protected database.
    # @return [String]
    attr_accessor :id

    # The protected database name. You can change the displayName. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The OCID of the compartment that contains the protected database.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The dbUniqueName for the protected database in Recovery Service. You cannot change the unique name.
    # @return [String]
    attr_accessor :db_unique_name

    # **[Required]** The virtual private catalog (VPC) user credentials that authenticates the protected database to access Recovery Service.
    # @return [String]
    attr_accessor :vpc_user_name

    # **[Required]** The size of the protected database. XS - Less than 5GB, S - 5GB to 50GB, M - 50GB to 500GB, L - 500GB to 1TB, XL - 1TB to 5TB, XXL - Greater than 5TB.
    # @return [String]
    attr_reader :database_size

    # **[Required]** The OCID of the protection policy associated with the protected database.
    # @return [String]
    attr_accessor :protection_policy_id

    # An RFC3339 formatted datetime string that specifies the exact date and time for the retention lock to take effect and permanently lock the retention period defined in the policy.
    #
    # The retention lock feature controls whether Recovery Service strictly preserves backups for the duration defined in a policy. Retention lock is useful to enforce recovery window compliance and to prevent unintentional modifications to protected database backups.
    # Recovery Service enforces a 14-day delay before the retention lock set for a policy can take effect.
    #
    # @return [String]
    attr_accessor :policy_locked_date_time

    # **[Required]** List of recovery service subnet resources associated with the protected database.
    # @return [Array<OCI::Recovery::Models::RecoveryServiceSubnetDetails>]
    attr_accessor :recovery_service_subnets

    # The OCID of the protected database.
    # @return [String]
    attr_accessor :database_id

    # The size of the database in GBs, in gigabytes.
    # @return [Integer]
    attr_accessor :database_size_in_gbs

    # The percentage of data changes that exist in the database between successive incremental backups.
    # @return [Float]
    attr_accessor :change_rate

    # The compression ratio of the protected database. The compression ratio represents the ratio of compressed block size to expanded block size.
    # @return [Float]
    attr_accessor :compression_ratio

    # The value TRUE indicates that the protected database is configured to use Real-time data protection, and redo-data is sent from the protected database to Recovery Service.
    # Real-time data protection substantially reduces the window of potential data loss that exists between successive archived redo log backups. For this to be effective, additional
    # configuration is needed on client side.
    #
    # @return [BOOLEAN]
    attr_accessor :is_redo_logs_shipped

    # An RFC3339 formatted datetime string that indicates the created time for a protected database. For example: '2020-05-22T21:10:29.600Z'
    #
    # @return [DateTime]
    attr_accessor :time_created

    # An RFC3339 formatted datetime string that indicates the last updated time for a protected database. For example: '2020-05-22T21:10:29.600Z'
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # The current state of the Protected Database.
    # @return [String]
    attr_reader :lifecycle_state

    # Indicates the protection status of the database.
    #
    # A 'PROTECTED' status indicates that Recovery Service can ensure database recovery to any point in time within the entire recovery window. The potential data loss exposure since the last backup is:
    #  - Less than 10 seconds, if Real-time data protection is enabled
    #  - Less than 70 minutes if Real-time data protection is disabled
    #
    # A 'WARNING' status indicates that Recovery Service can ensure database recovery within the current recovery window - 1 day. The potential data loss exposure since the last backup is:
    #  - Greater than 10 seconds, if Real-time data protection is enabled
    #  - Greater than 60 minutes, if if Real-time data protection is disabled
    #
    # An 'ALERT' status indicates that Recovery Service cannot recover the database within the current recovery window.
    #
    # @return [String]
    attr_reader :health

    # Indicates whether the protected database is created by Recovery Service or created manually.
    # Set to <b>TRUE</b> for a service-defined protected database. When you enable the OCI-managed automatic backups option for a database and set Recovery Service as the backup destination, then Recovery Service creates the associated protected database resource.
    # Set to <b>FALSE</b> for a user-defined protected database.
    #
    # @return [BOOLEAN]
    attr_accessor :is_read_only_resource

    # Detailed description about the current lifecycle state of the protected database. For example, it can be used to provide actionable information for a resource in a Failed state.
    # @return [String]
    attr_accessor :lifecycle_details

    # A message describing the current health of the protected database.
    # @return [String]
    attr_accessor :health_details

    # @return [OCI::Recovery::Models::Metrics]
    attr_accessor :metrics

    # The OCID of the cloud service subscription to which the protected database is linked.
    # @return [String]
    attr_accessor :subscription_id

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`. For more information, see [Resource Tags](https://docs.oracle.com/en-us/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'db_unique_name': :'dbUniqueName',
        'vpc_user_name': :'vpcUserName',
        'database_size': :'databaseSize',
        'protection_policy_id': :'protectionPolicyId',
        'policy_locked_date_time': :'policyLockedDateTime',
        'recovery_service_subnets': :'recoveryServiceSubnets',
        'database_id': :'databaseId',
        'database_size_in_gbs': :'databaseSizeInGBs',
        'change_rate': :'changeRate',
        'compression_ratio': :'compressionRatio',
        'is_redo_logs_shipped': :'isRedoLogsShipped',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'health': :'health',
        'is_read_only_resource': :'isReadOnlyResource',
        'lifecycle_details': :'lifecycleDetails',
        'health_details': :'healthDetails',
        'metrics': :'metrics',
        'subscription_id': :'subscriptionId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'compartment_id': :'String',
        'db_unique_name': :'String',
        'vpc_user_name': :'String',
        'database_size': :'String',
        'protection_policy_id': :'String',
        'policy_locked_date_time': :'String',
        'recovery_service_subnets': :'Array<OCI::Recovery::Models::RecoveryServiceSubnetDetails>',
        'database_id': :'String',
        'database_size_in_gbs': :'Integer',
        'change_rate': :'Float',
        'compression_ratio': :'Float',
        'is_redo_logs_shipped': :'BOOLEAN',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'health': :'String',
        'is_read_only_resource': :'BOOLEAN',
        'lifecycle_details': :'String',
        'health_details': :'String',
        'metrics': :'OCI::Recovery::Models::Metrics',
        'subscription_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :db_unique_name The value to assign to the {#db_unique_name} property
    # @option attributes [String] :vpc_user_name The value to assign to the {#vpc_user_name} property
    # @option attributes [String] :database_size The value to assign to the {#database_size} property
    # @option attributes [String] :protection_policy_id The value to assign to the {#protection_policy_id} property
    # @option attributes [String] :policy_locked_date_time The value to assign to the {#policy_locked_date_time} property
    # @option attributes [Array<OCI::Recovery::Models::RecoveryServiceSubnetDetails>] :recovery_service_subnets The value to assign to the {#recovery_service_subnets} property
    # @option attributes [String] :database_id The value to assign to the {#database_id} property
    # @option attributes [Integer] :database_size_in_gbs The value to assign to the {#database_size_in_gbs} property
    # @option attributes [Float] :change_rate The value to assign to the {#change_rate} property
    # @option attributes [Float] :compression_ratio The value to assign to the {#compression_ratio} property
    # @option attributes [BOOLEAN] :is_redo_logs_shipped The value to assign to the {#is_redo_logs_shipped} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :health The value to assign to the {#health} property
    # @option attributes [BOOLEAN] :is_read_only_resource The value to assign to the {#is_read_only_resource} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :health_details The value to assign to the {#health_details} property
    # @option attributes [OCI::Recovery::Models::Metrics] :metrics The value to assign to the {#metrics} property
    # @option attributes [String] :subscription_id The value to assign to the {#subscription_id} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.db_unique_name = attributes[:'dbUniqueName'] if attributes[:'dbUniqueName']

      raise 'You cannot provide both :dbUniqueName and :db_unique_name' if attributes.key?(:'dbUniqueName') && attributes.key?(:'db_unique_name')

      self.db_unique_name = attributes[:'db_unique_name'] if attributes[:'db_unique_name']

      self.vpc_user_name = attributes[:'vpcUserName'] if attributes[:'vpcUserName']

      raise 'You cannot provide both :vpcUserName and :vpc_user_name' if attributes.key?(:'vpcUserName') && attributes.key?(:'vpc_user_name')

      self.vpc_user_name = attributes[:'vpc_user_name'] if attributes[:'vpc_user_name']

      self.database_size = attributes[:'databaseSize'] if attributes[:'databaseSize']

      raise 'You cannot provide both :databaseSize and :database_size' if attributes.key?(:'databaseSize') && attributes.key?(:'database_size')

      self.database_size = attributes[:'database_size'] if attributes[:'database_size']

      self.protection_policy_id = attributes[:'protectionPolicyId'] if attributes[:'protectionPolicyId']

      raise 'You cannot provide both :protectionPolicyId and :protection_policy_id' if attributes.key?(:'protectionPolicyId') && attributes.key?(:'protection_policy_id')

      self.protection_policy_id = attributes[:'protection_policy_id'] if attributes[:'protection_policy_id']

      self.policy_locked_date_time = attributes[:'policyLockedDateTime'] if attributes[:'policyLockedDateTime']

      raise 'You cannot provide both :policyLockedDateTime and :policy_locked_date_time' if attributes.key?(:'policyLockedDateTime') && attributes.key?(:'policy_locked_date_time')

      self.policy_locked_date_time = attributes[:'policy_locked_date_time'] if attributes[:'policy_locked_date_time']

      self.recovery_service_subnets = attributes[:'recoveryServiceSubnets'] if attributes[:'recoveryServiceSubnets']

      raise 'You cannot provide both :recoveryServiceSubnets and :recovery_service_subnets' if attributes.key?(:'recoveryServiceSubnets') && attributes.key?(:'recovery_service_subnets')

      self.recovery_service_subnets = attributes[:'recovery_service_subnets'] if attributes[:'recovery_service_subnets']

      self.database_id = attributes[:'databaseId'] if attributes[:'databaseId']

      raise 'You cannot provide both :databaseId and :database_id' if attributes.key?(:'databaseId') && attributes.key?(:'database_id')

      self.database_id = attributes[:'database_id'] if attributes[:'database_id']

      self.database_size_in_gbs = attributes[:'databaseSizeInGBs'] if attributes[:'databaseSizeInGBs']

      raise 'You cannot provide both :databaseSizeInGBs and :database_size_in_gbs' if attributes.key?(:'databaseSizeInGBs') && attributes.key?(:'database_size_in_gbs')

      self.database_size_in_gbs = attributes[:'database_size_in_gbs'] if attributes[:'database_size_in_gbs']

      self.change_rate = attributes[:'changeRate'] if attributes[:'changeRate']

      raise 'You cannot provide both :changeRate and :change_rate' if attributes.key?(:'changeRate') && attributes.key?(:'change_rate')

      self.change_rate = attributes[:'change_rate'] if attributes[:'change_rate']

      self.compression_ratio = attributes[:'compressionRatio'] if attributes[:'compressionRatio']

      raise 'You cannot provide both :compressionRatio and :compression_ratio' if attributes.key?(:'compressionRatio') && attributes.key?(:'compression_ratio')

      self.compression_ratio = attributes[:'compression_ratio'] if attributes[:'compression_ratio']

      self.is_redo_logs_shipped = attributes[:'isRedoLogsShipped'] unless attributes[:'isRedoLogsShipped'].nil?

      raise 'You cannot provide both :isRedoLogsShipped and :is_redo_logs_shipped' if attributes.key?(:'isRedoLogsShipped') && attributes.key?(:'is_redo_logs_shipped')

      self.is_redo_logs_shipped = attributes[:'is_redo_logs_shipped'] unless attributes[:'is_redo_logs_shipped'].nil?

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.health = attributes[:'health'] if attributes[:'health']

      self.is_read_only_resource = attributes[:'isReadOnlyResource'] unless attributes[:'isReadOnlyResource'].nil?

      raise 'You cannot provide both :isReadOnlyResource and :is_read_only_resource' if attributes.key?(:'isReadOnlyResource') && attributes.key?(:'is_read_only_resource')

      self.is_read_only_resource = attributes[:'is_read_only_resource'] unless attributes[:'is_read_only_resource'].nil?

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.health_details = attributes[:'healthDetails'] if attributes[:'healthDetails']

      raise 'You cannot provide both :healthDetails and :health_details' if attributes.key?(:'healthDetails') && attributes.key?(:'health_details')

      self.health_details = attributes[:'health_details'] if attributes[:'health_details']

      self.metrics = attributes[:'metrics'] if attributes[:'metrics']

      self.subscription_id = attributes[:'subscriptionId'] if attributes[:'subscriptionId']

      raise 'You cannot provide both :subscriptionId and :subscription_id' if attributes.key?(:'subscriptionId') && attributes.key?(:'subscription_id')

      self.subscription_id = attributes[:'subscription_id'] if attributes[:'subscription_id']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] database_size Object to be assigned
    def database_size=(database_size)
      # rubocop:disable Style/ConditionalAssignment
      if database_size && !DATABASE_SIZE_ENUM.include?(database_size)
        OCI.logger.debug("Unknown value for 'database_size' [" + database_size + "]. Mapping to 'DATABASE_SIZE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @database_size = DATABASE_SIZE_UNKNOWN_ENUM_VALUE
      else
        @database_size = database_size
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] health Object to be assigned
    def health=(health)
      # rubocop:disable Style/ConditionalAssignment
      if health && !HEALTH_ENUM.include?(health)
        OCI.logger.debug("Unknown value for 'health' [" + health + "]. Mapping to 'HEALTH_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @health = HEALTH_UNKNOWN_ENUM_VALUE
      else
        @health = health
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        db_unique_name == other.db_unique_name &&
        vpc_user_name == other.vpc_user_name &&
        database_size == other.database_size &&
        protection_policy_id == other.protection_policy_id &&
        policy_locked_date_time == other.policy_locked_date_time &&
        recovery_service_subnets == other.recovery_service_subnets &&
        database_id == other.database_id &&
        database_size_in_gbs == other.database_size_in_gbs &&
        change_rate == other.change_rate &&
        compression_ratio == other.compression_ratio &&
        is_redo_logs_shipped == other.is_redo_logs_shipped &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        health == other.health &&
        is_read_only_resource == other.is_read_only_resource &&
        lifecycle_details == other.lifecycle_details &&
        health_details == other.health_details &&
        metrics == other.metrics &&
        subscription_id == other.subscription_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, compartment_id, db_unique_name, vpc_user_name, database_size, protection_policy_id, policy_locked_date_time, recovery_service_subnets, database_id, database_size_in_gbs, change_rate, compression_ratio, is_redo_logs_shipped, time_created, time_updated, lifecycle_state, health, is_read_only_resource, lifecycle_details, health_details, metrics, subscription_id, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
