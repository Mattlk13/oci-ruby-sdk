# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This class provides a wrapper around {OCI::DisasterRecovery::DisasterRecoveryClient} and offers convenience methods
  # for operations that would otherwise need to be chained together. For example, instead of performing an action
  # on a resource (e.g. launching an instance, creating a load balancer) and then using a waiter to wait for the resource
  # to enter a given state, you can call a single method in this class to accomplish the same functionality
  class DisasterRecovery::DisasterRecoveryClientCompositeOperations
    # The {OCI::DisasterRecovery::DisasterRecoveryClient} used to communicate with the service_client
    #
    # @return [OCI::DisasterRecovery::DisasterRecoveryClient]
    attr_reader :service_client

    # Initializes a new DisasterRecoveryClientCompositeOperations
    #
    # @param [OCI::DisasterRecovery::DisasterRecoveryClient] service_client The client used to communicate with the service.
    #   Defaults to a new service client created via {OCI::DisasterRecovery::DisasterRecoveryClient#initialize} with no arguments
    def initialize(service_client = OCI::DisasterRecovery::DisasterRecoveryClient.new)
      @service_client = service_client
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#associate_dr_protection_group} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::AssociateDrProtectionGroupDetails] associate_dr_protection_group_details Details for creating an association between two DR protection groups.
    # @param [String] dr_protection_group_id The OCID of the DR protection group.
    #
    #   Example: `ocid1.drprotectiongroup.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#associate_dr_protection_group}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def associate_dr_protection_group_and_wait_for_state(associate_dr_protection_group_details, dr_protection_group_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.associate_dr_protection_group(associate_dr_protection_group_details, dr_protection_group_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#cancel_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::CancelDrPlanExecutionDetails] cancel_dr_plan_execution_details Details for canceling the DR plan execution.
    # @param [String] dr_plan_execution_id The OCID of the DR plan execution.
    #
    #   Example: `ocid1.drplanexecution.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#cancel_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def cancel_dr_plan_execution_and_wait_for_state(cancel_dr_plan_execution_details, dr_plan_execution_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.cancel_dr_plan_execution(cancel_dr_plan_execution_details, dr_plan_execution_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#change_dr_protection_group_compartment} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::ChangeDrProtectionGroupCompartmentDetails] change_dr_protection_group_compartment_details Details for changing the DR protection group compartment.
    # @param [String] dr_protection_group_id The OCID of the DR protection group.
    #
    #   Example: `ocid1.drprotectiongroup.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#change_dr_protection_group_compartment}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def change_dr_protection_group_compartment_and_wait_for_state(change_dr_protection_group_compartment_details, dr_protection_group_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.change_dr_protection_group_compartment(change_dr_protection_group_compartment_details, dr_protection_group_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#create_dr_plan} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::CreateDrPlanDetails] create_dr_plan_details Details for creating the new DR plan.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#create_dr_plan}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def create_dr_plan_and_wait_for_state(create_dr_plan_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_dr_plan(create_dr_plan_details, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#create_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::CreateDrPlanExecutionDetails] create_dr_plan_execution_details Details for creating the DR plan execution.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#create_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def create_dr_plan_execution_and_wait_for_state(create_dr_plan_execution_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_dr_plan_execution(create_dr_plan_execution_details, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#create_dr_protection_group} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::CreateDrProtectionGroupDetails] create_dr_protection_group_details Details for creating the DR protection group.
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#create_dr_protection_group}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def create_dr_protection_group_and_wait_for_state(create_dr_protection_group_details, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.create_dr_protection_group(create_dr_protection_group_details, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#delete_dr_plan} and then waits for the {OCI::DisasterRecovery::Models::DrPlan} acted upon
    # to enter the given state(s).
    #
    # @param [String] dr_plan_id The OCID of the DR plan.
    #
    #   Example: `ocid1.drplan.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::DrPlan#lifecycle_state}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#delete_dr_plan}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object with data of type nil
    def delete_dr_plan_and_wait_for_state(dr_plan_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      initial_get_result = @service_client.get_dr_plan(dr_plan_id)
      operation_result = @service_client.delete_dr_plan(dr_plan_id, base_operation_opts)

      return operation_result if wait_for_states.empty?

      lowered_wait_for_states = wait_for_states.map(&:downcase)

      begin
        waiter_result = initial_get_result.wait_until(
          eval_proc: ->(response) { response.data.respond_to?(:lifecycle_state) && lowered_wait_for_states.include?(response.data.lifecycle_state.downcase) },
          max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
          max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200,
          succeed_on_not_found: true
        )
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#delete_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [String] dr_plan_execution_id The OCID of the DR plan execution.
    #
    #   Example: `ocid1.drplanexecution.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#delete_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def delete_dr_plan_execution_and_wait_for_state(dr_plan_execution_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.delete_dr_plan_execution(dr_plan_execution_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#delete_dr_protection_group} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [String] dr_protection_group_id The OCID of the DR protection group.
    #
    #   Example: `ocid1.drprotectiongroup.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#delete_dr_protection_group}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def delete_dr_protection_group_and_wait_for_state(dr_protection_group_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.delete_dr_protection_group(dr_protection_group_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#disassociate_dr_protection_group} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::DisassociateDrProtectionGroupDetails] disassociate_dr_protection_group_details Details for deleting the association between two DR protection groups.
    # @param [String] dr_protection_group_id The OCID of the DR protection group.
    #
    #   Example: `ocid1.drprotectiongroup.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#disassociate_dr_protection_group}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def disassociate_dr_protection_group_and_wait_for_state(disassociate_dr_protection_group_details, dr_protection_group_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.disassociate_dr_protection_group(disassociate_dr_protection_group_details, dr_protection_group_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#ignore_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::IgnoreDrPlanExecutionDetails] ignore_dr_plan_execution_details Details for ignoring the failed group or step and resuming execution.
    # @param [String] dr_plan_execution_id The OCID of the DR plan execution.
    #
    #   Example: `ocid1.drplanexecution.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#ignore_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def ignore_dr_plan_execution_and_wait_for_state(ignore_dr_plan_execution_details, dr_plan_execution_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.ignore_dr_plan_execution(ignore_dr_plan_execution_details, dr_plan_execution_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#pause_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::PauseDrPlanExecutionDetails] pause_dr_plan_execution_details Details for pausing the DR plan execution.
    # @param [String] dr_plan_execution_id The OCID of the DR plan execution.
    #
    #   Example: `ocid1.drplanexecution.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#pause_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def pause_dr_plan_execution_and_wait_for_state(pause_dr_plan_execution_details, dr_plan_execution_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.pause_dr_plan_execution(pause_dr_plan_execution_details, dr_plan_execution_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#resume_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::ResumeDrPlanExecutionDetails] resume_dr_plan_execution_details Details for resuming the DR plan execution.
    # @param [String] dr_plan_execution_id The OCID of the DR plan execution.
    #
    #   Example: `ocid1.drplanexecution.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#resume_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def resume_dr_plan_execution_and_wait_for_state(resume_dr_plan_execution_details, dr_plan_execution_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.resume_dr_plan_execution(resume_dr_plan_execution_details, dr_plan_execution_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#retry_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::RetryDrPlanExecutionDetails] retry_dr_plan_execution_details Details for retrying execution of the failed group or step.
    # @param [String] dr_plan_execution_id The OCID of the DR plan execution.
    #
    #   Example: `ocid1.drplanexecution.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#retry_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def retry_dr_plan_execution_and_wait_for_state(retry_dr_plan_execution_details, dr_plan_execution_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.retry_dr_plan_execution(retry_dr_plan_execution_details, dr_plan_execution_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_plan} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::UpdateDrPlanDetails] update_dr_plan_details Details for updating the DR plan.
    # @param [String] dr_plan_id The OCID of the DR plan.
    #
    #   Example: `ocid1.drplan.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_plan}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def update_dr_plan_and_wait_for_state(update_dr_plan_details, dr_plan_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_dr_plan(update_dr_plan_details, dr_plan_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_plan_execution} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::UpdateDrPlanExecutionDetails] update_dr_plan_execution_details Details for updating the DR plan execution.
    # @param [String] dr_plan_execution_id The OCID of the DR plan execution.
    #
    #   Example: `ocid1.drplanexecution.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_plan_execution}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def update_dr_plan_execution_and_wait_for_state(update_dr_plan_execution_details, dr_plan_execution_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_dr_plan_execution(update_dr_plan_execution_details, dr_plan_execution_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_protection_group} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::UpdateDrProtectionGroupDetails] update_dr_protection_group_details Details for updating the the DR protection group.
    # @param [String] dr_protection_group_id The OCID of the DR protection group.
    #
    #   Example: `ocid1.drprotectiongroup.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_protection_group}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def update_dr_protection_group_and_wait_for_state(update_dr_protection_group_details, dr_protection_group_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_dr_protection_group(update_dr_protection_group_details, dr_protection_group_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:disable Layout/EmptyLines


    # Calls {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_protection_group_role} and then waits for the {OCI::DisasterRecovery::Models::WorkRequest}
    # to enter the given state(s).
    #
    # @param [OCI::DisasterRecovery::Models::UpdateDrProtectionGroupRoleDetails] update_dr_protection_group_role_details The role details for the DR protection group to be updated.
    # @param [String] dr_protection_group_id The OCID of the DR protection group.
    #
    #   Example: `ocid1.drprotectiongroup.oc1..uniqueID`
    #
    # @param [Array<String>] wait_for_states An array of states to wait on. These should be valid values for {OCI::DisasterRecovery::Models::WorkRequest#status}
    # @param [Hash] base_operation_opts Any optional arguments accepted by {OCI::DisasterRecovery::DisasterRecoveryClient#update_dr_protection_group_role}
    # @param [Hash] waiter_opts Optional arguments for the waiter. Keys should be symbols, and the following keys are supported:
    #   * max_interval_seconds: The maximum interval between queries, in seconds.
    #   * max_wait_seconds The maximum time to wait, in seconds
    #
    # @return [OCI::Response] A {OCI::Response} object containing the completed {OCI::DisasterRecovery::Models::WorkRequest}
    def update_dr_protection_group_role_and_wait_for_state(update_dr_protection_group_role_details, dr_protection_group_id, wait_for_states = [], base_operation_opts = {}, waiter_opts = {})
      operation_result = @service_client.update_dr_protection_group_role(update_dr_protection_group_role_details, dr_protection_group_id, base_operation_opts)
      use_util = OCI::DisasterRecovery::Util.respond_to?(:wait_on_work_request)

      return operation_result if wait_for_states.empty? && !use_util

      lowered_wait_for_states = wait_for_states.map(&:downcase)
      wait_for_resource_id = operation_result.headers['opc-work-request-id']

      begin
        if use_util
          waiter_result = OCI::DisasterRecovery::Util.wait_on_work_request(
            @service_client,
            wait_for_resource_id,
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        else
          waiter_result = @service_client.get_work_request(wait_for_resource_id).wait_until(
            eval_proc: ->(response) { response.data.respond_to?(:status) && lowered_wait_for_states.include?(response.data.status.downcase) },
            max_interval_seconds: waiter_opts.key?(:max_interval_seconds) ? waiter_opts[:max_interval_seconds] : 30,
            max_wait_seconds: waiter_opts.key?(:max_wait_seconds) ? waiter_opts[:max_wait_seconds] : 1200
          )
        end
        result_to_return = waiter_result

        return result_to_return
      rescue StandardError
        raise OCI::Errors::CompositeOperationError.new(partial_results: [operation_result])
      end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/ParameterLists, Metrics/PerceivedComplexity
    # rubocop:enable Layout/EmptyLines
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
