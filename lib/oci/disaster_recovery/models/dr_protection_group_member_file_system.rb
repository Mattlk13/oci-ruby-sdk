# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125
require 'date'
require_relative 'dr_protection_group_member'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The properties for a file system member of a DR protection group.
  #
  class DisasterRecovery::Models::DrProtectionGroupMemberFileSystem < DisasterRecovery::Models::DrProtectionGroupMember
    # The availability domain of the destination mount target.
    #
    # Example: `BBTh:region-AD`
    #
    # @return [String]
    attr_accessor :destination_availability_domain

    # A list of mappings between the primary region file system export and destination region mount target.
    #
    # @return [Array<OCI::DisasterRecovery::Models::FileSystemExportMapping>]
    attr_accessor :export_mappings

    # @return [OCI::DisasterRecovery::Models::VaultAndEncryptionKey]
    attr_accessor :destination_encryption_key

    # The OCID of the snapshot policy to use in the destination region. This policy will be attached to the file system after it moves to the destination region.
    #
    # Example: `ocid1.filesystemsnapshotpolicy.oc1..uniqueID`
    #
    # @return [String]
    attr_accessor :destination_snapshot_policy_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'member_id': :'memberId',
        'member_type': :'memberType',
        'destination_availability_domain': :'destinationAvailabilityDomain',
        'export_mappings': :'exportMappings',
        'destination_encryption_key': :'destinationEncryptionKey',
        'destination_snapshot_policy_id': :'destinationSnapshotPolicyId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'member_id': :'String',
        'member_type': :'String',
        'destination_availability_domain': :'String',
        'export_mappings': :'Array<OCI::DisasterRecovery::Models::FileSystemExportMapping>',
        'destination_encryption_key': :'OCI::DisasterRecovery::Models::VaultAndEncryptionKey',
        'destination_snapshot_policy_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :member_id The value to assign to the {OCI::DisasterRecovery::Models::DrProtectionGroupMember#member_id #member_id} proprety
    # @option attributes [String] :destination_availability_domain The value to assign to the {#destination_availability_domain} property
    # @option attributes [Array<OCI::DisasterRecovery::Models::FileSystemExportMapping>] :export_mappings The value to assign to the {#export_mappings} property
    # @option attributes [OCI::DisasterRecovery::Models::VaultAndEncryptionKey] :destination_encryption_key The value to assign to the {#destination_encryption_key} property
    # @option attributes [String] :destination_snapshot_policy_id The value to assign to the {#destination_snapshot_policy_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['memberType'] = 'FILE_SYSTEM'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.destination_availability_domain = attributes[:'destinationAvailabilityDomain'] if attributes[:'destinationAvailabilityDomain']

      raise 'You cannot provide both :destinationAvailabilityDomain and :destination_availability_domain' if attributes.key?(:'destinationAvailabilityDomain') && attributes.key?(:'destination_availability_domain')

      self.destination_availability_domain = attributes[:'destination_availability_domain'] if attributes[:'destination_availability_domain']

      self.export_mappings = attributes[:'exportMappings'] if attributes[:'exportMappings']

      raise 'You cannot provide both :exportMappings and :export_mappings' if attributes.key?(:'exportMappings') && attributes.key?(:'export_mappings')

      self.export_mappings = attributes[:'export_mappings'] if attributes[:'export_mappings']

      self.destination_encryption_key = attributes[:'destinationEncryptionKey'] if attributes[:'destinationEncryptionKey']

      raise 'You cannot provide both :destinationEncryptionKey and :destination_encryption_key' if attributes.key?(:'destinationEncryptionKey') && attributes.key?(:'destination_encryption_key')

      self.destination_encryption_key = attributes[:'destination_encryption_key'] if attributes[:'destination_encryption_key']

      self.destination_snapshot_policy_id = attributes[:'destinationSnapshotPolicyId'] if attributes[:'destinationSnapshotPolicyId']

      raise 'You cannot provide both :destinationSnapshotPolicyId and :destination_snapshot_policy_id' if attributes.key?(:'destinationSnapshotPolicyId') && attributes.key?(:'destination_snapshot_policy_id')

      self.destination_snapshot_policy_id = attributes[:'destination_snapshot_policy_id'] if attributes[:'destination_snapshot_policy_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        member_id == other.member_id &&
        member_type == other.member_type &&
        destination_availability_domain == other.destination_availability_domain &&
        export_mappings == other.export_mappings &&
        destination_encryption_key == other.destination_encryption_key &&
        destination_snapshot_policy_id == other.destination_snapshot_policy_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [member_id, member_type, destination_availability_domain, export_mappings, destination_encryption_key, destination_snapshot_policy_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
