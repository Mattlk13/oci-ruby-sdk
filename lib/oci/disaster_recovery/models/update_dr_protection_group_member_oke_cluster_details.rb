# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125
require 'date'
require_relative 'update_dr_protection_group_member_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Update properties for an OKE member.
  class DisasterRecovery::Models::UpdateDrProtectionGroupMemberOkeClusterDetails < DisasterRecovery::Models::UpdateDrProtectionGroupMemberDetails
    # The OCID of the peer OKE cluster.
    # This property applies to the OKE cluster member in both the primary and standby region.
    #
    # Example: `ocid1.cluster.oc1..uniqueID`
    #
    # @return [String]
    attr_accessor :peer_cluster_id

    # The OCID of the compute instance member that is designated as a jump host.
    # This compute instance will be used to perform DR operations on the cluster using Oracle Cloud Agent's Run Command feature.
    #
    # Example: `ocid1.instance.oc1..uniqueID`
    #
    # @return [String]
    attr_accessor :jump_host_id

    # @return [OCI::DisasterRecovery::Models::UpdateOkeBackupLocationDetails]
    attr_accessor :backup_location

    # @return [OCI::DisasterRecovery::Models::UpdateOkeClusterBackupConfigDetails]
    attr_accessor :backup_config

    # The list of source-to-destination load balancer mappings required for DR operations.
    # This property applies to the OKE cluster member in primary region.
    #
    # @return [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterLoadBalancerMappingDetails>]
    attr_accessor :load_balancer_mappings

    # The list of source-to-destination network load balancer mappings required for DR operations.
    # This property applies to the OKE cluster member in primary region.
    #
    # @return [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterNetworkLoadBalancerMappingDetails>]
    attr_accessor :network_load_balancer_mappings

    # The list of source-to-destination vault mappings required for DR operations.
    # This property applies to the OKE cluster member in primary region.
    #
    # @return [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterVaultMappingDetails>]
    attr_accessor :vault_mappings

    # The list of managed node pools with configurations for minimum and maximum node counts.
    # This property applies to the OKE cluster member in both the primary and standby region.
    #
    # @return [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterManagedNodePoolConfigurationDetails>]
    attr_accessor :managed_node_pool_configs

    # The list of virtual node pools with configurations for minimum and maximum node counts.
    # This property applies to the OKE cluster member in both the primary and standby region.
    #
    # @return [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterVirtualNodePoolConfigurationDetails>]
    attr_accessor :virtual_node_pool_configs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'member_id': :'memberId',
        'member_type': :'memberType',
        'peer_cluster_id': :'peerClusterId',
        'jump_host_id': :'jumpHostId',
        'backup_location': :'backupLocation',
        'backup_config': :'backupConfig',
        'load_balancer_mappings': :'loadBalancerMappings',
        'network_load_balancer_mappings': :'networkLoadBalancerMappings',
        'vault_mappings': :'vaultMappings',
        'managed_node_pool_configs': :'managedNodePoolConfigs',
        'virtual_node_pool_configs': :'virtualNodePoolConfigs'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'member_id': :'String',
        'member_type': :'String',
        'peer_cluster_id': :'String',
        'jump_host_id': :'String',
        'backup_location': :'OCI::DisasterRecovery::Models::UpdateOkeBackupLocationDetails',
        'backup_config': :'OCI::DisasterRecovery::Models::UpdateOkeClusterBackupConfigDetails',
        'load_balancer_mappings': :'Array<OCI::DisasterRecovery::Models::UpdateOkeClusterLoadBalancerMappingDetails>',
        'network_load_balancer_mappings': :'Array<OCI::DisasterRecovery::Models::UpdateOkeClusterNetworkLoadBalancerMappingDetails>',
        'vault_mappings': :'Array<OCI::DisasterRecovery::Models::UpdateOkeClusterVaultMappingDetails>',
        'managed_node_pool_configs': :'Array<OCI::DisasterRecovery::Models::UpdateOkeClusterManagedNodePoolConfigurationDetails>',
        'virtual_node_pool_configs': :'Array<OCI::DisasterRecovery::Models::UpdateOkeClusterVirtualNodePoolConfigurationDetails>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :member_id The value to assign to the {OCI::DisasterRecovery::Models::UpdateDrProtectionGroupMemberDetails#member_id #member_id} proprety
    # @option attributes [String] :peer_cluster_id The value to assign to the {#peer_cluster_id} property
    # @option attributes [String] :jump_host_id The value to assign to the {#jump_host_id} property
    # @option attributes [OCI::DisasterRecovery::Models::UpdateOkeBackupLocationDetails] :backup_location The value to assign to the {#backup_location} property
    # @option attributes [OCI::DisasterRecovery::Models::UpdateOkeClusterBackupConfigDetails] :backup_config The value to assign to the {#backup_config} property
    # @option attributes [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterLoadBalancerMappingDetails>] :load_balancer_mappings The value to assign to the {#load_balancer_mappings} property
    # @option attributes [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterNetworkLoadBalancerMappingDetails>] :network_load_balancer_mappings The value to assign to the {#network_load_balancer_mappings} property
    # @option attributes [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterVaultMappingDetails>] :vault_mappings The value to assign to the {#vault_mappings} property
    # @option attributes [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterManagedNodePoolConfigurationDetails>] :managed_node_pool_configs The value to assign to the {#managed_node_pool_configs} property
    # @option attributes [Array<OCI::DisasterRecovery::Models::UpdateOkeClusterVirtualNodePoolConfigurationDetails>] :virtual_node_pool_configs The value to assign to the {#virtual_node_pool_configs} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['memberType'] = 'OKE_CLUSTER'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.peer_cluster_id = attributes[:'peerClusterId'] if attributes[:'peerClusterId']

      raise 'You cannot provide both :peerClusterId and :peer_cluster_id' if attributes.key?(:'peerClusterId') && attributes.key?(:'peer_cluster_id')

      self.peer_cluster_id = attributes[:'peer_cluster_id'] if attributes[:'peer_cluster_id']

      self.jump_host_id = attributes[:'jumpHostId'] if attributes[:'jumpHostId']

      raise 'You cannot provide both :jumpHostId and :jump_host_id' if attributes.key?(:'jumpHostId') && attributes.key?(:'jump_host_id')

      self.jump_host_id = attributes[:'jump_host_id'] if attributes[:'jump_host_id']

      self.backup_location = attributes[:'backupLocation'] if attributes[:'backupLocation']

      raise 'You cannot provide both :backupLocation and :backup_location' if attributes.key?(:'backupLocation') && attributes.key?(:'backup_location')

      self.backup_location = attributes[:'backup_location'] if attributes[:'backup_location']

      self.backup_config = attributes[:'backupConfig'] if attributes[:'backupConfig']

      raise 'You cannot provide both :backupConfig and :backup_config' if attributes.key?(:'backupConfig') && attributes.key?(:'backup_config')

      self.backup_config = attributes[:'backup_config'] if attributes[:'backup_config']

      self.load_balancer_mappings = attributes[:'loadBalancerMappings'] if attributes[:'loadBalancerMappings']

      raise 'You cannot provide both :loadBalancerMappings and :load_balancer_mappings' if attributes.key?(:'loadBalancerMappings') && attributes.key?(:'load_balancer_mappings')

      self.load_balancer_mappings = attributes[:'load_balancer_mappings'] if attributes[:'load_balancer_mappings']

      self.network_load_balancer_mappings = attributes[:'networkLoadBalancerMappings'] if attributes[:'networkLoadBalancerMappings']

      raise 'You cannot provide both :networkLoadBalancerMappings and :network_load_balancer_mappings' if attributes.key?(:'networkLoadBalancerMappings') && attributes.key?(:'network_load_balancer_mappings')

      self.network_load_balancer_mappings = attributes[:'network_load_balancer_mappings'] if attributes[:'network_load_balancer_mappings']

      self.vault_mappings = attributes[:'vaultMappings'] if attributes[:'vaultMappings']

      raise 'You cannot provide both :vaultMappings and :vault_mappings' if attributes.key?(:'vaultMappings') && attributes.key?(:'vault_mappings')

      self.vault_mappings = attributes[:'vault_mappings'] if attributes[:'vault_mappings']

      self.managed_node_pool_configs = attributes[:'managedNodePoolConfigs'] if attributes[:'managedNodePoolConfigs']

      raise 'You cannot provide both :managedNodePoolConfigs and :managed_node_pool_configs' if attributes.key?(:'managedNodePoolConfigs') && attributes.key?(:'managed_node_pool_configs')

      self.managed_node_pool_configs = attributes[:'managed_node_pool_configs'] if attributes[:'managed_node_pool_configs']

      self.virtual_node_pool_configs = attributes[:'virtualNodePoolConfigs'] if attributes[:'virtualNodePoolConfigs']

      raise 'You cannot provide both :virtualNodePoolConfigs and :virtual_node_pool_configs' if attributes.key?(:'virtualNodePoolConfigs') && attributes.key?(:'virtual_node_pool_configs')

      self.virtual_node_pool_configs = attributes[:'virtual_node_pool_configs'] if attributes[:'virtual_node_pool_configs']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        member_id == other.member_id &&
        member_type == other.member_type &&
        peer_cluster_id == other.peer_cluster_id &&
        jump_host_id == other.jump_host_id &&
        backup_location == other.backup_location &&
        backup_config == other.backup_config &&
        load_balancer_mappings == other.load_balancer_mappings &&
        network_load_balancer_mappings == other.network_load_balancer_mappings &&
        vault_mappings == other.vault_mappings &&
        managed_node_pool_configs == other.managed_node_pool_configs &&
        virtual_node_pool_configs == other.virtual_node_pool_configs
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [member_id, member_type, peer_cluster_id, jump_host_id, backup_location, backup_config, load_balancer_mappings, network_load_balancer_mappings, vault_mappings, managed_node_pool_configs, virtual_node_pool_configs].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
