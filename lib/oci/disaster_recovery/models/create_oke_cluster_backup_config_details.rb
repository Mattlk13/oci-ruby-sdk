# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Create backup configuration properties for an OKE member.
  class DisasterRecovery::Models::CreateOkeClusterBackupConfigDetails
    REPLICATE_IMAGES_ENUM = [
      REPLICATE_IMAGES_ENABLE = 'ENABLE'.freeze,
      REPLICATE_IMAGES_DISABLE = 'DISABLE'.freeze
    ].freeze

    # A list of namespaces that need to be backed up.
    # The default value is null. If a list of namespaces is not provided, all namespaces will be backed up.
    # This property applies to the OKE cluster member in primary region.
    #
    # Example: [\"default\", \"pv-nginx\"]
    #
    # @return [Array<String>]
    attr_accessor :namespaces

    # The schedule for backing up namespaces to the destination region. If a backup schedule is not specified, only a single backup will be created.
    # This format of the string specifying the backup schedule must conform with RFC-5545 (see examples below).
    # This schedule will use the UTC timezone.
    # This property applies to the OKE cluster member in primary region.
    #
    # The backup frequency can be HOURLY, DAILY, WEEKLY or MONTHLY, and the upper and lower interval bounds are as follows
    #   HOURLY
    #     - Minimum = 1
    #     - Maximum = 24
    #   DAILY
    #     - Minimum = 1
    #     - Maximum = 30
    #   WEEKLY
    #     - Minimum = 1
    #     - Maximum = 1
    #   MONTHLY
    #     - Minimum = 1
    #     - Maximum = 12
    #
    # Examples:
    #         FREQ=WEEKLY;BYDAY=MO,WE;BYHOUR=10;INTERVAL=1 -> Run a backup every Monday and Wednesday at 10:00 AM.
    #         FREQ=WEEKLY;BYDAY=MO,WE;BYHOUR=10;INTERVAL=2 -> Invalid configuration (Cannot specify an interval of 2).
    #
    #         FREQ=HOURLY;INTERVAL=25 -> Invalid configuration (Cannot specify an interval of 25).
    #         FREQ=HOURLY;INTERVAL=0 -> Invalid configuration (Cannot specify an interval of 0).
    #         FREQ=HOURLY;INTERVAL=24 -> Run a backup every 24 hours.
    #         FREQ=HOURLY;INTERVAL=1 -> Run a backup every hour.
    #         FREQ=HOURLY;BYMINUTE=30;INTERVAL=15 -> Run a backup every 15 hours at the 30th minute.
    #
    #         FREQ=DAILY;INTERVAL=31 -> Invalid configuration (Cannot specify an interval of 31).
    #         FREQ=DAILY;INTERVAL=0 -> Invalid configuration (Cannot specify an interval of 0).
    #         FREQ=DAILY;INTERVAL=30 -> Run a backup every 30 days at 12:00 midnight.
    #         FREQ=DAILY;BYHOUR=17;BYMINUTE=10;INTERVAL=1 -> Run a backup daily at 05:10 PM.
    #
    # @return [String]
    attr_accessor :backup_schedule

    # Controls the behaviour of image replication across regions.
    # Image replication is enabled by default for DR Protection Groups with a primary role.
    # This property applies to the OKE cluster member in primary region.
    #
    # @return [String]
    attr_reader :replicate_images

    # The maximum number of backups that should be retained.
    # This property applies to the OKE cluster member in primary region.
    #
    # @return [Integer]
    attr_accessor :max_number_of_backups_retained

    # The OCID of the vault secret that stores the image credential.
    # This property applies to the OKE cluster member in both the primary and standby region.
    #
    # @return [String]
    attr_accessor :image_replication_vault_secret_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'namespaces': :'namespaces',
        'backup_schedule': :'backupSchedule',
        'replicate_images': :'replicateImages',
        'max_number_of_backups_retained': :'maxNumberOfBackupsRetained',
        'image_replication_vault_secret_id': :'imageReplicationVaultSecretId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'namespaces': :'Array<String>',
        'backup_schedule': :'String',
        'replicate_images': :'String',
        'max_number_of_backups_retained': :'Integer',
        'image_replication_vault_secret_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :namespaces The value to assign to the {#namespaces} property
    # @option attributes [String] :backup_schedule The value to assign to the {#backup_schedule} property
    # @option attributes [String] :replicate_images The value to assign to the {#replicate_images} property
    # @option attributes [Integer] :max_number_of_backups_retained The value to assign to the {#max_number_of_backups_retained} property
    # @option attributes [String] :image_replication_vault_secret_id The value to assign to the {#image_replication_vault_secret_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.namespaces = attributes[:'namespaces'] if attributes[:'namespaces']

      self.backup_schedule = attributes[:'backupSchedule'] if attributes[:'backupSchedule']
      self.backup_schedule = "FREQ=WEEKLY;BYDAY=SU;BYMINUTE=0;BYSECONDS=0;INTERVAL=1" if backup_schedule.nil? && !attributes.key?(:'backupSchedule') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :backupSchedule and :backup_schedule' if attributes.key?(:'backupSchedule') && attributes.key?(:'backup_schedule')

      self.backup_schedule = attributes[:'backup_schedule'] if attributes[:'backup_schedule']
      self.backup_schedule = "FREQ=WEEKLY;BYDAY=SU;BYMINUTE=0;BYSECONDS=0;INTERVAL=1" if backup_schedule.nil? && !attributes.key?(:'backupSchedule') && !attributes.key?(:'backup_schedule') # rubocop:disable Style/StringLiterals

      self.replicate_images = attributes[:'replicateImages'] if attributes[:'replicateImages']

      raise 'You cannot provide both :replicateImages and :replicate_images' if attributes.key?(:'replicateImages') && attributes.key?(:'replicate_images')

      self.replicate_images = attributes[:'replicate_images'] if attributes[:'replicate_images']

      self.max_number_of_backups_retained = attributes[:'maxNumberOfBackupsRetained'] if attributes[:'maxNumberOfBackupsRetained']
      self.max_number_of_backups_retained = 5 if max_number_of_backups_retained.nil? && !attributes.key?(:'maxNumberOfBackupsRetained') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :maxNumberOfBackupsRetained and :max_number_of_backups_retained' if attributes.key?(:'maxNumberOfBackupsRetained') && attributes.key?(:'max_number_of_backups_retained')

      self.max_number_of_backups_retained = attributes[:'max_number_of_backups_retained'] if attributes[:'max_number_of_backups_retained']
      self.max_number_of_backups_retained = 5 if max_number_of_backups_retained.nil? && !attributes.key?(:'maxNumberOfBackupsRetained') && !attributes.key?(:'max_number_of_backups_retained') # rubocop:disable Style/StringLiterals

      self.image_replication_vault_secret_id = attributes[:'imageReplicationVaultSecretId'] if attributes[:'imageReplicationVaultSecretId']

      raise 'You cannot provide both :imageReplicationVaultSecretId and :image_replication_vault_secret_id' if attributes.key?(:'imageReplicationVaultSecretId') && attributes.key?(:'image_replication_vault_secret_id')

      self.image_replication_vault_secret_id = attributes[:'image_replication_vault_secret_id'] if attributes[:'image_replication_vault_secret_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replicate_images Object to be assigned
    def replicate_images=(replicate_images)
      raise "Invalid value for 'replicate_images': this must be one of the values in REPLICATE_IMAGES_ENUM." if replicate_images && !REPLICATE_IMAGES_ENUM.include?(replicate_images)

      @replicate_images = replicate_images
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        namespaces == other.namespaces &&
        backup_schedule == other.backup_schedule &&
        replicate_images == other.replicate_images &&
        max_number_of_backups_retained == other.max_number_of_backups_retained &&
        image_replication_vault_secret_id == other.image_replication_vault_secret_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [namespaces, backup_schedule, replicate_images, max_number_of_backups_retained, image_replication_vault_secret_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
