# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of a step execution in a DR plan execution.
  class DisasterRecovery::Models::DrPlanStepExecution
    TYPE_ENUM = [
      TYPE_COMPUTE_INSTANCE_STOP_PRECHECK = 'COMPUTE_INSTANCE_STOP_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_LAUNCH_PRECHECK = 'COMPUTE_INSTANCE_LAUNCH_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_TERMINATE_PRECHECK = 'COMPUTE_INSTANCE_TERMINATE_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_REMOVE_PRECHECK = 'COMPUTE_INSTANCE_REMOVE_PRECHECK'.freeze,
      TYPE_VOLUME_GROUP_RESTORE_SWITCHOVER_PRECHECK = 'VOLUME_GROUP_RESTORE_SWITCHOVER_PRECHECK'.freeze,
      TYPE_VOLUME_GROUP_RESTORE_FAILOVER_PRECHECK = 'VOLUME_GROUP_RESTORE_FAILOVER_PRECHECK'.freeze,
      TYPE_DATABASE_SWITCHOVER_PRECHECK = 'DATABASE_SWITCHOVER_PRECHECK'.freeze,
      TYPE_DATABASE_FAILOVER_PRECHECK = 'DATABASE_FAILOVER_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_SWITCHOVER_PRECHECK = 'AUTONOMOUS_DATABASE_SWITCHOVER_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_FAILOVER_PRECHECK = 'AUTONOMOUS_DATABASE_FAILOVER_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER_PRECHECK = 'AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_FAILOVER_PRECHECK = 'AUTONOMOUS_CONTAINER_DATABASE_FAILOVER_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK = 'AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK = 'AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER = 'AUTONOMOUS_CONTAINER_DATABASE_SWITCHOVER'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_FAILOVER = 'AUTONOMOUS_CONTAINER_DATABASE_FAILOVER'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY = 'AUTONOMOUS_CONTAINER_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY'.freeze,
      TYPE_AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY = 'AUTONOMOUS_CONTAINER_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY'.freeze,
      TYPE_AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY_PRECHECK = 'AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY_PRECHECK = 'AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK = 'AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK = 'AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY = 'AUTONOMOUS_DATABASE_START_DRILL_CREATE_CLONE_STANDBY'.freeze,
      TYPE_AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY = 'AUTONOMOUS_DATABASE_STOP_DRILL_DELETE_CLONE_STANDBY'.freeze,
      TYPE_AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY = 'AUTONOMOUS_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY'.freeze,
      TYPE_AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY = 'AUTONOMOUS_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY'.freeze,
      TYPE_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK = 'DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY_PRECHECK'.freeze,
      TYPE_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK = 'DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY_PRECHECK'.freeze,
      TYPE_DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY = 'DATABASE_START_DRILL_CONVERT_TO_SNAPSHOT_STANDBY'.freeze,
      TYPE_DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY = 'DATABASE_STOP_DRILL_CONVERT_TO_PHYSICAL_STANDBY'.freeze,
      TYPE_USER_DEFINED_PRECHECK = 'USER_DEFINED_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_LAUNCH = 'COMPUTE_INSTANCE_LAUNCH'.freeze,
      TYPE_COMPUTE_INSTANCE_STOP = 'COMPUTE_INSTANCE_STOP'.freeze,
      TYPE_COMPUTE_INSTANCE_TERMINATE = 'COMPUTE_INSTANCE_TERMINATE'.freeze,
      TYPE_COMPUTE_INSTANCE_REMOVE = 'COMPUTE_INSTANCE_REMOVE'.freeze,
      TYPE_DATABASE_SWITCHOVER = 'DATABASE_SWITCHOVER'.freeze,
      TYPE_DATABASE_FAILOVER = 'DATABASE_FAILOVER'.freeze,
      TYPE_AUTONOMOUS_DATABASE_SWITCHOVER = 'AUTONOMOUS_DATABASE_SWITCHOVER'.freeze,
      TYPE_AUTONOMOUS_DATABASE_FAILOVER = 'AUTONOMOUS_DATABASE_FAILOVER'.freeze,
      TYPE_VOLUME_GROUP_RESTORE_SWITCHOVER = 'VOLUME_GROUP_RESTORE_SWITCHOVER'.freeze,
      TYPE_VOLUME_GROUP_RESTORE_FAILOVER = 'VOLUME_GROUP_RESTORE_FAILOVER'.freeze,
      TYPE_VOLUME_GROUP_REVERSE = 'VOLUME_GROUP_REVERSE'.freeze,
      TYPE_VOLUME_GROUP_DELETE = 'VOLUME_GROUP_DELETE'.freeze,
      TYPE_VOLUME_GROUP_REMOVE = 'VOLUME_GROUP_REMOVE'.freeze,
      TYPE_VOLUME_GROUP_TERMINATE = 'VOLUME_GROUP_TERMINATE'.freeze,
      TYPE_USER_DEFINED = 'USER_DEFINED'.freeze,
      TYPE_USER_DEFINED_CUSTOM_PRECHECK = 'USER_DEFINED_CUSTOM_PRECHECK'.freeze,
      TYPE_VOLUME_GROUP_RESTORE_START_DRILL_PRECHECK = 'VOLUME_GROUP_RESTORE_START_DRILL_PRECHECK'.freeze,
      TYPE_VOLUME_GROUP_REMOVE_PRECHECK = 'VOLUME_GROUP_REMOVE_PRECHECK'.freeze,
      TYPE_VOLUME_GROUP_TERMINATE_PRECHECK = 'VOLUME_GROUP_TERMINATE_PRECHECK'.freeze,
      TYPE_VOLUME_GROUP_RESTORE_START_DRILL = 'VOLUME_GROUP_RESTORE_START_DRILL'.freeze,
      TYPE_AUTONOMOUS_DATABASE_CREATE_CLONE_PRECHECK = 'AUTONOMOUS_DATABASE_CREATE_CLONE_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_DELETE_CLONE_PRECHECK = 'AUTONOMOUS_DATABASE_DELETE_CLONE_PRECHECK'.freeze,
      TYPE_LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET_PRECHECK = 'LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET_PRECHECK'.freeze,
      TYPE_LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET_PRECHECK = 'LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_SWITCHOVER_PRECHECK = 'FILE_SYSTEM_SWITCHOVER_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_FAILOVER_PRECHECK = 'FILE_SYSTEM_FAILOVER_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_START_DRILL_PRECHECK = 'FILE_SYSTEM_START_DRILL_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_STOP_DRILL_PRECHECK = 'FILE_SYSTEM_STOP_DRILL_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_REMOVE_PRECHECK = 'FILE_SYSTEM_REMOVE_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_TERMINATE_PRECHECK = 'FILE_SYSTEM_TERMINATE_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_MOUNT_PRECHECK = 'FILE_SYSTEM_MOUNT_PRECHECK'.freeze,
      TYPE_FILE_SYSTEM_UNMOUNT_PRECHECK = 'FILE_SYSTEM_UNMOUNT_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_START_PRECHECK = 'COMPUTE_INSTANCE_START_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES_PRECHECK = 'COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES_PRECHECK = 'COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_MOUNT_BLOCK_VOLUMES_PRECHECK = 'COMPUTE_INSTANCE_MOUNT_BLOCK_VOLUMES_PRECHECK'.freeze,
      TYPE_COMPUTE_INSTANCE_UNMOUNT_BLOCK_VOLUMES_PRECHECK = 'COMPUTE_INSTANCE_UNMOUNT_BLOCK_VOLUMES_PRECHECK'.freeze,
      TYPE_COMPUTE_CAPACITY_RESERVATION_START_DRILL_PRECHECK = 'COMPUTE_CAPACITY_RESERVATION_START_DRILL_PRECHECK'.freeze,
      TYPE_COMPUTE_CAPACITY_AVAILABILITY_START_DRILL_PRECHECK = 'COMPUTE_CAPACITY_AVAILABILITY_START_DRILL_PRECHECK'.freeze,
      TYPE_AUTONOMOUS_DATABASE_CREATE_CLONE = 'AUTONOMOUS_DATABASE_CREATE_CLONE'.freeze,
      TYPE_AUTONOMOUS_DATABASE_DELETE_CLONE = 'AUTONOMOUS_DATABASE_DELETE_CLONE'.freeze,
      TYPE_LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET = 'LOAD_BALANCER_UPDATE_PRIMARY_BACKEND_SET'.freeze,
      TYPE_LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET = 'LOAD_BALANCER_UPDATE_STANDBY_BACKEND_SET'.freeze,
      TYPE_FILE_SYSTEM_SWITCHOVER = 'FILE_SYSTEM_SWITCHOVER'.freeze,
      TYPE_FILE_SYSTEM_FAILOVER = 'FILE_SYSTEM_FAILOVER'.freeze,
      TYPE_FILE_SYSTEM_REMOVE = 'FILE_SYSTEM_REMOVE'.freeze,
      TYPE_FILE_SYSTEM_REVERSE = 'FILE_SYSTEM_REVERSE'.freeze,
      TYPE_FILE_SYSTEM_TERMINATE = 'FILE_SYSTEM_TERMINATE'.freeze,
      TYPE_FILE_SYSTEM_START_DRILL = 'FILE_SYSTEM_START_DRILL'.freeze,
      TYPE_FILE_SYSTEM_STOP_DRILL = 'FILE_SYSTEM_STOP_DRILL'.freeze,
      TYPE_COMPUTE_INSTANCE_START = 'COMPUTE_INSTANCE_START'.freeze,
      TYPE_COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES = 'COMPUTE_INSTANCE_ATTACH_BLOCK_VOLUMES'.freeze,
      TYPE_COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES = 'COMPUTE_INSTANCE_DETACH_BLOCK_VOLUMES'.freeze,
      TYPE_FILE_SYSTEM_MOUNT = 'FILE_SYSTEM_MOUNT'.freeze,
      TYPE_FILE_SYSTEM_UNMOUNT = 'FILE_SYSTEM_UNMOUNT'.freeze,
      TYPE_COMPUTE_CAPACITY_RESERVATION_SWITCHOVER_PRECHECK = 'COMPUTE_CAPACITY_RESERVATION_SWITCHOVER_PRECHECK'.freeze,
      TYPE_COMPUTE_CAPACITY_RESERVATION_FAILOVER_PRECHECK = 'COMPUTE_CAPACITY_RESERVATION_FAILOVER_PRECHECK'.freeze,
      TYPE_COMPUTE_CAPACITY_AVAILABILITY_SWITCHOVER_PRECHECK = 'COMPUTE_CAPACITY_AVAILABILITY_SWITCHOVER_PRECHECK'.freeze,
      TYPE_COMPUTE_CAPACITY_AVAILABILITY_FAILOVER_PRECHECK = 'COMPUTE_CAPACITY_AVAILABILITY_FAILOVER_PRECHECK'.freeze,
      TYPE_OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY_PRECHECK = 'OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY_PRECHECK'.freeze,
      TYPE_OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY_PRECHECK = 'OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY_PRECHECK'.freeze,
      TYPE_OKE_CLUSTER_FAILOVER_RESTORE_STANDBY_PRECHECK = 'OKE_CLUSTER_FAILOVER_RESTORE_STANDBY_PRECHECK'.freeze,
      TYPE_OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY_PRECHECK = 'OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY_PRECHECK'.freeze,
      TYPE_OKE_CLUSTER_START_DRILL_RESTORE_STANDBY_PRECHECK = 'OKE_CLUSTER_START_DRILL_RESTORE_STANDBY_PRECHECK'.freeze,
      TYPE_OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY = 'OKE_CLUSTER_SWITCHOVER_CLEANUP_PRIMARY'.freeze,
      TYPE_OKE_CLUSTER_SWITCHOVER_SCALE_UP_STANDBY = 'OKE_CLUSTER_SWITCHOVER_SCALE_UP_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY = 'OKE_CLUSTER_SWITCHOVER_RESTORE_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_SWITCHOVER_REVERSE_BACKUP_STANDBY = 'OKE_CLUSTER_SWITCHOVER_REVERSE_BACKUP_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_SWITCHOVER_SCALE_DOWN_PRIMARY = 'OKE_CLUSTER_SWITCHOVER_SCALE_DOWN_PRIMARY'.freeze,
      TYPE_OKE_CLUSTER_FAILOVER_RESTORE_STANDBY = 'OKE_CLUSTER_FAILOVER_RESTORE_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_FAILOVER_SCALE_UP_STANDBY = 'OKE_CLUSTER_FAILOVER_SCALE_UP_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_START_DRILL_RESTORE_STANDBY = 'OKE_CLUSTER_START_DRILL_RESTORE_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_START_DRILL_SCALE_UP_STANDBY = 'OKE_CLUSTER_START_DRILL_SCALE_UP_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY = 'OKE_CLUSTER_STOP_DRILL_CLEANUP_STANDBY'.freeze,
      TYPE_OKE_CLUSTER_STOP_DRILL_SCALE_DOWN_STANDBY = 'OKE_CLUSTER_STOP_DRILL_SCALE_DOWN_STANDBY'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY_PRECHECK = 'OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY_PRECHECK'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK = 'OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY_PRECHECK = 'OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY_PRECHECK'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK = 'OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY_PRECHECK'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY = 'OBJECT_STORAGE_BUCKET_SWITCHOVER_DELETE_REPLICATION_PRIMARY'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY = 'OBJECT_STORAGE_BUCKET_SWITCHOVER_SETUP_REVERSE_REPLICATION_STANDBY'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY = 'OBJECT_STORAGE_BUCKET_FAILOVER_DELETE_REPLICATION_STANDBY'.freeze,
      TYPE_OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY = 'OBJECT_STORAGE_BUCKET_FAILOVER_SETUP_REVERSE_REPLICATION_STANDBY'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_QUEUED = 'QUEUED'.freeze,
      STATUS_DISABLED = 'DISABLED'.freeze,
      STATUS_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      STATUS_SUCCEEDED = 'SUCCEEDED'.freeze,
      STATUS_FAILED = 'FAILED'.freeze,
      STATUS_FAILED_IGNORED = 'FAILED_IGNORED'.freeze,
      STATUS_TIMED_OUT = 'TIMED_OUT'.freeze,
      STATUS_TIMED_OUT_IGNORED = 'TIMED_OUT_IGNORED'.freeze,
      STATUS_PAUSED = 'PAUSED'.freeze,
      STATUS_CANCELED = 'CANCELED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The unique id of the step. Must not be modified by user.
    #
    # Example: `sgid1.step..uniqueID`
    #
    # @return [String]
    attr_accessor :step_id

    # **[Required]** The step type.
    #
    # @return [String]
    attr_reader :type

    # **[Required]** The unique id of the group to which this step belongs. Must not be modified by user.
    #
    # Example: `sgid1.group..uniqueID`
    #
    # @return [String]
    attr_accessor :group_id

    # **[Required]** The display name of the step execution.
    #
    # Example: `DATABASE_SWITCHOVER`
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The display name of the DR Plan step type.
    #
    # Example: `Database Switchover`
    #
    # @return [String]
    attr_accessor :type_display_name

    # This attribute is required.
    # @return [OCI::DisasterRecovery::Models::ObjectStorageLogLocation]
    attr_accessor :log_location

    # **[Required]** The status of the step execution.
    #
    # @return [String]
    attr_reader :status

    # Additional details on the step execution status.
    #
    # Example: `This step failed to complete due to a timeout`
    #
    # @return [String]
    attr_accessor :status_details

    # The time when step execution began. An RFC3339 formatted datetime string.
    #
    # Example: `2019-03-29T09:36:42Z`
    #
    # @return [DateTime]
    attr_accessor :time_started

    # The time when execution ended. An RFC3339 formatted datetime string.
    #
    # Example: `2019-03-29T09:36:42Z`
    #
    # @return [DateTime]
    attr_accessor :time_ended

    # The total duration in seconds taken to complete the step execution.
    #
    # Example: `35`
    #
    # @return [Integer]
    attr_accessor :execution_duration_in_sec

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'step_id': :'stepId',
        'type': :'type',
        'group_id': :'groupId',
        'display_name': :'displayName',
        'type_display_name': :'typeDisplayName',
        'log_location': :'logLocation',
        'status': :'status',
        'status_details': :'statusDetails',
        'time_started': :'timeStarted',
        'time_ended': :'timeEnded',
        'execution_duration_in_sec': :'executionDurationInSec'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'step_id': :'String',
        'type': :'String',
        'group_id': :'String',
        'display_name': :'String',
        'type_display_name': :'String',
        'log_location': :'OCI::DisasterRecovery::Models::ObjectStorageLogLocation',
        'status': :'String',
        'status_details': :'String',
        'time_started': :'DateTime',
        'time_ended': :'DateTime',
        'execution_duration_in_sec': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :step_id The value to assign to the {#step_id} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :group_id The value to assign to the {#group_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :type_display_name The value to assign to the {#type_display_name} property
    # @option attributes [OCI::DisasterRecovery::Models::ObjectStorageLogLocation] :log_location The value to assign to the {#log_location} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :status_details The value to assign to the {#status_details} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_ended The value to assign to the {#time_ended} property
    # @option attributes [Integer] :execution_duration_in_sec The value to assign to the {#execution_duration_in_sec} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.step_id = attributes[:'stepId'] if attributes[:'stepId']

      raise 'You cannot provide both :stepId and :step_id' if attributes.key?(:'stepId') && attributes.key?(:'step_id')

      self.step_id = attributes[:'step_id'] if attributes[:'step_id']

      self.type = attributes[:'type'] if attributes[:'type']

      self.group_id = attributes[:'groupId'] if attributes[:'groupId']

      raise 'You cannot provide both :groupId and :group_id' if attributes.key?(:'groupId') && attributes.key?(:'group_id')

      self.group_id = attributes[:'group_id'] if attributes[:'group_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.type_display_name = attributes[:'typeDisplayName'] if attributes[:'typeDisplayName']

      raise 'You cannot provide both :typeDisplayName and :type_display_name' if attributes.key?(:'typeDisplayName') && attributes.key?(:'type_display_name')

      self.type_display_name = attributes[:'type_display_name'] if attributes[:'type_display_name']

      self.log_location = attributes[:'logLocation'] if attributes[:'logLocation']

      raise 'You cannot provide both :logLocation and :log_location' if attributes.key?(:'logLocation') && attributes.key?(:'log_location')

      self.log_location = attributes[:'log_location'] if attributes[:'log_location']

      self.status = attributes[:'status'] if attributes[:'status']

      self.status_details = attributes[:'statusDetails'] if attributes[:'statusDetails']

      raise 'You cannot provide both :statusDetails and :status_details' if attributes.key?(:'statusDetails') && attributes.key?(:'status_details')

      self.status_details = attributes[:'status_details'] if attributes[:'status_details']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_ended = attributes[:'timeEnded'] if attributes[:'timeEnded']

      raise 'You cannot provide both :timeEnded and :time_ended' if attributes.key?(:'timeEnded') && attributes.key?(:'time_ended')

      self.time_ended = attributes[:'time_ended'] if attributes[:'time_ended']

      self.execution_duration_in_sec = attributes[:'executionDurationInSec'] if attributes[:'executionDurationInSec']

      raise 'You cannot provide both :executionDurationInSec and :execution_duration_in_sec' if attributes.key?(:'executionDurationInSec') && attributes.key?(:'execution_duration_in_sec')

      self.execution_duration_in_sec = attributes[:'execution_duration_in_sec'] if attributes[:'execution_duration_in_sec']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        step_id == other.step_id &&
        type == other.type &&
        group_id == other.group_id &&
        display_name == other.display_name &&
        type_display_name == other.type_display_name &&
        log_location == other.log_location &&
        status == other.status &&
        status_details == other.status_details &&
        time_started == other.time_started &&
        time_ended == other.time_ended &&
        execution_duration_in_sec == other.execution_duration_in_sec
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [step_id, type, group_id, display_name, type_display_name, log_location, status, status_details, time_started, time_ended, execution_duration_in_sec].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
