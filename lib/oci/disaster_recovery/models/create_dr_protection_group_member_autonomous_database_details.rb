# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220125
require 'date'
require_relative 'create_dr_protection_group_member_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Create properties for an Autonomous Database Serverless member.
  class DisasterRecovery::Models::CreateDrProtectionGroupMemberAutonomousDatabaseDetails < DisasterRecovery::Models::CreateDrProtectionGroupMemberDetails
    AUTONOMOUS_DATABASE_STANDBY_TYPE_FOR_DR_DRILLS_ENUM = [
      AUTONOMOUS_DATABASE_STANDBY_TYPE_FOR_DR_DRILLS_FULL_CLONE = 'FULL_CLONE'.freeze,
      AUTONOMOUS_DATABASE_STANDBY_TYPE_FOR_DR_DRILLS_REFRESHABLE_CLONE = 'REFRESHABLE_CLONE'.freeze,
      AUTONOMOUS_DATABASE_STANDBY_TYPE_FOR_DR_DRILLS_SNAPSHOT_STANDBY = 'SNAPSHOT_STANDBY'.freeze
    ].freeze

    # This specifies the mechanism used to create a temporary Autonomous Database instance for DR Drills.
    # See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-clone-about.html for information about these clone types.
    # See https://docs.oracle.com/en/cloud/paas/autonomous-database/serverless/adbsb/autonomous-data-guard-snapshot-standby.html for information about snapshot standby.
    #
    # @return [String]
    attr_reader :autonomous_database_standby_type_for_dr_drills

    # The OCID of the vault secret where the database SYSDBA password is stored.
    # This password is required and used for performing database DR Drill operations when using full clone.
    #
    # Example: `ocid1.vaultsecret.oc1..uniqueID`
    #
    # @return [String]
    attr_accessor :password_vault_secret_id

    # @return [OCI::DisasterRecovery::Models::CreateVaultAndEncryptionKeyDetails]
    attr_accessor :destination_encryption_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'member_id': :'memberId',
        'member_type': :'memberType',
        'autonomous_database_standby_type_for_dr_drills': :'autonomousDatabaseStandbyTypeForDrDrills',
        'password_vault_secret_id': :'passwordVaultSecretId',
        'destination_encryption_key': :'destinationEncryptionKey'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'member_id': :'String',
        'member_type': :'String',
        'autonomous_database_standby_type_for_dr_drills': :'String',
        'password_vault_secret_id': :'String',
        'destination_encryption_key': :'OCI::DisasterRecovery::Models::CreateVaultAndEncryptionKeyDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :member_id The value to assign to the {OCI::DisasterRecovery::Models::CreateDrProtectionGroupMemberDetails#member_id #member_id} proprety
    # @option attributes [String] :autonomous_database_standby_type_for_dr_drills The value to assign to the {#autonomous_database_standby_type_for_dr_drills} property
    # @option attributes [String] :password_vault_secret_id The value to assign to the {#password_vault_secret_id} property
    # @option attributes [OCI::DisasterRecovery::Models::CreateVaultAndEncryptionKeyDetails] :destination_encryption_key The value to assign to the {#destination_encryption_key} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['memberType'] = 'AUTONOMOUS_DATABASE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.autonomous_database_standby_type_for_dr_drills = attributes[:'autonomousDatabaseStandbyTypeForDrDrills'] if attributes[:'autonomousDatabaseStandbyTypeForDrDrills']
      self.autonomous_database_standby_type_for_dr_drills = "REFRESHABLE_CLONE" if autonomous_database_standby_type_for_dr_drills.nil? && !attributes.key?(:'autonomousDatabaseStandbyTypeForDrDrills') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :autonomousDatabaseStandbyTypeForDrDrills and :autonomous_database_standby_type_for_dr_drills' if attributes.key?(:'autonomousDatabaseStandbyTypeForDrDrills') && attributes.key?(:'autonomous_database_standby_type_for_dr_drills')

      self.autonomous_database_standby_type_for_dr_drills = attributes[:'autonomous_database_standby_type_for_dr_drills'] if attributes[:'autonomous_database_standby_type_for_dr_drills']
      self.autonomous_database_standby_type_for_dr_drills = "REFRESHABLE_CLONE" if autonomous_database_standby_type_for_dr_drills.nil? && !attributes.key?(:'autonomousDatabaseStandbyTypeForDrDrills') && !attributes.key?(:'autonomous_database_standby_type_for_dr_drills') # rubocop:disable Style/StringLiterals

      self.password_vault_secret_id = attributes[:'passwordVaultSecretId'] if attributes[:'passwordVaultSecretId']

      raise 'You cannot provide both :passwordVaultSecretId and :password_vault_secret_id' if attributes.key?(:'passwordVaultSecretId') && attributes.key?(:'password_vault_secret_id')

      self.password_vault_secret_id = attributes[:'password_vault_secret_id'] if attributes[:'password_vault_secret_id']

      self.destination_encryption_key = attributes[:'destinationEncryptionKey'] if attributes[:'destinationEncryptionKey']

      raise 'You cannot provide both :destinationEncryptionKey and :destination_encryption_key' if attributes.key?(:'destinationEncryptionKey') && attributes.key?(:'destination_encryption_key')

      self.destination_encryption_key = attributes[:'destination_encryption_key'] if attributes[:'destination_encryption_key']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] autonomous_database_standby_type_for_dr_drills Object to be assigned
    def autonomous_database_standby_type_for_dr_drills=(autonomous_database_standby_type_for_dr_drills)
      raise "Invalid value for 'autonomous_database_standby_type_for_dr_drills': this must be one of the values in AUTONOMOUS_DATABASE_STANDBY_TYPE_FOR_DR_DRILLS_ENUM." if autonomous_database_standby_type_for_dr_drills && !AUTONOMOUS_DATABASE_STANDBY_TYPE_FOR_DR_DRILLS_ENUM.include?(autonomous_database_standby_type_for_dr_drills)

      @autonomous_database_standby_type_for_dr_drills = autonomous_database_standby_type_for_dr_drills
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        member_id == other.member_id &&
        member_type == other.member_type &&
        autonomous_database_standby_type_for_dr_drills == other.autonomous_database_standby_type_for_dr_drills &&
        password_vault_secret_id == other.password_vault_secret_id &&
        destination_encryption_key == other.destination_encryption_key
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [member_id, member_type, autonomous_database_standby_type_for_dr_drills, password_vault_secret_id, destination_encryption_key].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
