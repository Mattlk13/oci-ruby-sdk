# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250320
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The data to create a new MacOrder.
  class Mngdmac::Models::CreateMacOrderDetails
    # **[Required]** OCID of the compartment to which the resource belongs to.
    # @return [String]
    attr_accessor :compartment_id

    # A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # Example: `My new resource`
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** A user-friendly description. To provide some insight about the resource.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :order_description

    # **[Required]** Number of macs requested in this MacOrder.
    # @return [Integer]
    attr_accessor :order_size

    # The IP Range specified by the customer for this order.
    # @return [String]
    attr_accessor :ip_range

    # **[Required]** The requested shape of the MacDevices in the MacOrder.
    # @return [String]
    attr_accessor :shape

    # **[Required]** Enum that indicates the agreed commitment term for the MacDevices.
    # @return [String]
    attr_accessor :commitment_term

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'order_description': :'orderDescription',
        'order_size': :'orderSize',
        'ip_range': :'ipRange',
        'shape': :'shape',
        'commitment_term': :'commitmentTerm'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'display_name': :'String',
        'order_description': :'String',
        'order_size': :'Integer',
        'ip_range': :'String',
        'shape': :'String',
        'commitment_term': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :order_description The value to assign to the {#order_description} property
    # @option attributes [Integer] :order_size The value to assign to the {#order_size} property
    # @option attributes [String] :ip_range The value to assign to the {#ip_range} property
    # @option attributes [String] :shape The value to assign to the {#shape} property
    # @option attributes [String] :commitment_term The value to assign to the {#commitment_term} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.order_description = attributes[:'orderDescription'] if attributes[:'orderDescription']

      raise 'You cannot provide both :orderDescription and :order_description' if attributes.key?(:'orderDescription') && attributes.key?(:'order_description')

      self.order_description = attributes[:'order_description'] if attributes[:'order_description']

      self.order_size = attributes[:'orderSize'] if attributes[:'orderSize']

      raise 'You cannot provide both :orderSize and :order_size' if attributes.key?(:'orderSize') && attributes.key?(:'order_size')

      self.order_size = attributes[:'order_size'] if attributes[:'order_size']

      self.ip_range = attributes[:'ipRange'] if attributes[:'ipRange']

      raise 'You cannot provide both :ipRange and :ip_range' if attributes.key?(:'ipRange') && attributes.key?(:'ip_range')

      self.ip_range = attributes[:'ip_range'] if attributes[:'ip_range']

      self.shape = attributes[:'shape'] if attributes[:'shape']

      self.commitment_term = attributes[:'commitmentTerm'] if attributes[:'commitmentTerm']
      self.commitment_term = "YEARS_3" if commitment_term.nil? && !attributes.key?(:'commitmentTerm') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :commitmentTerm and :commitment_term' if attributes.key?(:'commitmentTerm') && attributes.key?(:'commitment_term')

      self.commitment_term = attributes[:'commitment_term'] if attributes[:'commitment_term']
      self.commitment_term = "YEARS_3" if commitment_term.nil? && !attributes.key?(:'commitmentTerm') && !attributes.key?(:'commitment_term') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        order_description == other.order_description &&
        order_size == other.order_size &&
        ip_range == other.ip_range &&
        shape == other.shape &&
        commitment_term == other.commitment_term
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, display_name, order_description, order_size, ip_range, shape, commitment_term].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
