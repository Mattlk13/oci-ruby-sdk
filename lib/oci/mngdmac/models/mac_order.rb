# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250320
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A description of a MacOrder resource.
  #
  class Mngdmac::Models::MacOrder
    SHAPE_ENUM = [
      SHAPE_M2_PRO_MAC_MINI_32_GB_1_TB = 'M2_PRO_MAC_MINI_32GB_1TB'.freeze,
      SHAPE_M2_ULTRA_MAC_STUDIO_64_GB_4_TB = 'M2_ULTRA_MAC_STUDIO_64GB_4TB'.freeze,
      SHAPE_M2_ULTRA_MAC_STUDIO_192_GB_4_TB = 'M2_ULTRA_MAC_STUDIO_192GB_4TB'.freeze,
      SHAPE_M4_PRO_MAC_MINI_64_GB_2_TB = 'M4_PRO_MAC_MINI_64GB_2TB'.freeze,
      SHAPE_M4_PRO_MAC_MINI_64_GB_4_TB = 'M4_PRO_MAC_MINI_64GB_4TB'.freeze,
      SHAPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    COMMITMENT_TERM_ENUM = [
      COMMITMENT_TERM_YEARS_3 = 'YEARS_3'.freeze,
      COMMITMENT_TERM_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ORDER_STATUS_ENUM = [
      ORDER_STATUS_SUBMITTED = 'SUBMITTED'.freeze,
      ORDER_STATUS_PENDING_DOCUSIGN = 'PENDING_DOCUSIGN'.freeze,
      ORDER_STATUS_ORDER_REVIEW = 'ORDER_REVIEW'.freeze,
      ORDER_STATUS_CUSTOMER_REVIEW = 'CUSTOMER_REVIEW'.freeze,
      ORDER_STATUS_CUSTOMER_APPROVED = 'CUSTOMER_APPROVED'.freeze,
      ORDER_STATUS_FUNDING_APPROVED = 'FUNDING_APPROVED'.freeze,
      ORDER_STATUS_PROVISIONING = 'PROVISIONING'.freeze,
      ORDER_STATUS_CUSTOMER_ACCEPTED = 'CUSTOMER_ACCEPTED'.freeze,
      ORDER_STATUS_COMPLETED = 'COMPLETED'.freeze,
      ORDER_STATUS_CANCELED = 'CANCELED'.freeze,
      ORDER_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the resource.
    # @return [String]
    attr_accessor :id

    # **[Required]** OCID of the compartment to which the resource belongs to.
    # @return [String]
    attr_accessor :compartment_id

    # A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # Example: `My new resource`
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** A user-friendly description. To provide some insight about the resource.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :order_description

    # **[Required]** Number of macs requested in this MacOrder.
    # @return [Integer]
    attr_accessor :order_size

    # The IP Range specified by the customer for this order.
    # @return [String]
    attr_accessor :ip_range

    # **[Required]** Checkbox value that indicates whether the customer completed docusign process.
    # @return [BOOLEAN]
    attr_accessor :is_docusigned

    # **[Required]** Enum indicating the requested shape for the MacDevices.
    # @return [String]
    attr_reader :shape

    # **[Required]** The time this resource was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # The time this resource was last updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** Enum indicating the agreed commitment term for the requested MacDevices.
    # @return [String]
    attr_reader :commitment_term

    # An RFC3339-formatted datetime string containing the date and time that billing for this MacOrder begins.
    # @return [DateTime]
    attr_accessor :time_billing_started

    # An RFC3339-formatted datetime string containing the date and time that billing for this MacOrder ends.
    # @return [DateTime]
    attr_accessor :time_billing_ended

    # **[Required]** The current status of the MacOrder.
    # @return [String]
    attr_reader :order_status

    # **[Required]** The current state of the MacOrder.
    # @return [String]
    attr_reader :lifecycle_state

    # A message that describes the current state of the MacOrder in more detail.
    #
    # @return [String]
    attr_accessor :lifecycle_details

    # The reason for the MacOrder cancellation.
    # @return [String]
    attr_accessor :cancel_reason

    # An RFC3339-formatted datetime string containing the time this MacOrder was cancelled.
    # @return [DateTime]
    attr_accessor :time_canceled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'order_description': :'orderDescription',
        'order_size': :'orderSize',
        'ip_range': :'ipRange',
        'is_docusigned': :'isDocusigned',
        'shape': :'shape',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'commitment_term': :'commitmentTerm',
        'time_billing_started': :'timeBillingStarted',
        'time_billing_ended': :'timeBillingEnded',
        'order_status': :'orderStatus',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'cancel_reason': :'cancelReason',
        'time_canceled': :'timeCanceled'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'order_description': :'String',
        'order_size': :'Integer',
        'ip_range': :'String',
        'is_docusigned': :'BOOLEAN',
        'shape': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'commitment_term': :'String',
        'time_billing_started': :'DateTime',
        'time_billing_ended': :'DateTime',
        'order_status': :'String',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'cancel_reason': :'String',
        'time_canceled': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :order_description The value to assign to the {#order_description} property
    # @option attributes [Integer] :order_size The value to assign to the {#order_size} property
    # @option attributes [String] :ip_range The value to assign to the {#ip_range} property
    # @option attributes [BOOLEAN] :is_docusigned The value to assign to the {#is_docusigned} property
    # @option attributes [String] :shape The value to assign to the {#shape} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :commitment_term The value to assign to the {#commitment_term} property
    # @option attributes [DateTime] :time_billing_started The value to assign to the {#time_billing_started} property
    # @option attributes [DateTime] :time_billing_ended The value to assign to the {#time_billing_ended} property
    # @option attributes [String] :order_status The value to assign to the {#order_status} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :cancel_reason The value to assign to the {#cancel_reason} property
    # @option attributes [DateTime] :time_canceled The value to assign to the {#time_canceled} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.order_description = attributes[:'orderDescription'] if attributes[:'orderDescription']

      raise 'You cannot provide both :orderDescription and :order_description' if attributes.key?(:'orderDescription') && attributes.key?(:'order_description')

      self.order_description = attributes[:'order_description'] if attributes[:'order_description']

      self.order_size = attributes[:'orderSize'] if attributes[:'orderSize']

      raise 'You cannot provide both :orderSize and :order_size' if attributes.key?(:'orderSize') && attributes.key?(:'order_size')

      self.order_size = attributes[:'order_size'] if attributes[:'order_size']

      self.ip_range = attributes[:'ipRange'] if attributes[:'ipRange']

      raise 'You cannot provide both :ipRange and :ip_range' if attributes.key?(:'ipRange') && attributes.key?(:'ip_range')

      self.ip_range = attributes[:'ip_range'] if attributes[:'ip_range']

      self.is_docusigned = attributes[:'isDocusigned'] unless attributes[:'isDocusigned'].nil?
      self.is_docusigned = false if is_docusigned.nil? && !attributes.key?(:'isDocusigned') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDocusigned and :is_docusigned' if attributes.key?(:'isDocusigned') && attributes.key?(:'is_docusigned')

      self.is_docusigned = attributes[:'is_docusigned'] unless attributes[:'is_docusigned'].nil?
      self.is_docusigned = false if is_docusigned.nil? && !attributes.key?(:'isDocusigned') && !attributes.key?(:'is_docusigned') # rubocop:disable Style/StringLiterals

      self.shape = attributes[:'shape'] if attributes[:'shape']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.commitment_term = attributes[:'commitmentTerm'] if attributes[:'commitmentTerm']

      raise 'You cannot provide both :commitmentTerm and :commitment_term' if attributes.key?(:'commitmentTerm') && attributes.key?(:'commitment_term')

      self.commitment_term = attributes[:'commitment_term'] if attributes[:'commitment_term']

      self.time_billing_started = attributes[:'timeBillingStarted'] if attributes[:'timeBillingStarted']

      raise 'You cannot provide both :timeBillingStarted and :time_billing_started' if attributes.key?(:'timeBillingStarted') && attributes.key?(:'time_billing_started')

      self.time_billing_started = attributes[:'time_billing_started'] if attributes[:'time_billing_started']

      self.time_billing_ended = attributes[:'timeBillingEnded'] if attributes[:'timeBillingEnded']

      raise 'You cannot provide both :timeBillingEnded and :time_billing_ended' if attributes.key?(:'timeBillingEnded') && attributes.key?(:'time_billing_ended')

      self.time_billing_ended = attributes[:'time_billing_ended'] if attributes[:'time_billing_ended']

      self.order_status = attributes[:'orderStatus'] if attributes[:'orderStatus']

      raise 'You cannot provide both :orderStatus and :order_status' if attributes.key?(:'orderStatus') && attributes.key?(:'order_status')

      self.order_status = attributes[:'order_status'] if attributes[:'order_status']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.cancel_reason = attributes[:'cancelReason'] if attributes[:'cancelReason']

      raise 'You cannot provide both :cancelReason and :cancel_reason' if attributes.key?(:'cancelReason') && attributes.key?(:'cancel_reason')

      self.cancel_reason = attributes[:'cancel_reason'] if attributes[:'cancel_reason']

      self.time_canceled = attributes[:'timeCanceled'] if attributes[:'timeCanceled']

      raise 'You cannot provide both :timeCanceled and :time_canceled' if attributes.key?(:'timeCanceled') && attributes.key?(:'time_canceled')

      self.time_canceled = attributes[:'time_canceled'] if attributes[:'time_canceled']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] shape Object to be assigned
    def shape=(shape)
      # rubocop:disable Style/ConditionalAssignment
      if shape && !SHAPE_ENUM.include?(shape)
        OCI.logger.debug("Unknown value for 'shape' [" + shape + "]. Mapping to 'SHAPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @shape = SHAPE_UNKNOWN_ENUM_VALUE
      else
        @shape = shape
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] commitment_term Object to be assigned
    def commitment_term=(commitment_term)
      # rubocop:disable Style/ConditionalAssignment
      if commitment_term && !COMMITMENT_TERM_ENUM.include?(commitment_term)
        OCI.logger.debug("Unknown value for 'commitment_term' [" + commitment_term + "]. Mapping to 'COMMITMENT_TERM_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @commitment_term = COMMITMENT_TERM_UNKNOWN_ENUM_VALUE
      else
        @commitment_term = commitment_term
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] order_status Object to be assigned
    def order_status=(order_status)
      # rubocop:disable Style/ConditionalAssignment
      if order_status && !ORDER_STATUS_ENUM.include?(order_status)
        OCI.logger.debug("Unknown value for 'order_status' [" + order_status + "]. Mapping to 'ORDER_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @order_status = ORDER_STATUS_UNKNOWN_ENUM_VALUE
      else
        @order_status = order_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        order_description == other.order_description &&
        order_size == other.order_size &&
        ip_range == other.ip_range &&
        is_docusigned == other.is_docusigned &&
        shape == other.shape &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        commitment_term == other.commitment_term &&
        time_billing_started == other.time_billing_started &&
        time_billing_ended == other.time_billing_ended &&
        order_status == other.order_status &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        cancel_reason == other.cancel_reason &&
        time_canceled == other.time_canceled
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, order_description, order_size, ip_range, is_docusigned, shape, time_created, time_updated, commitment_term, time_billing_started, time_billing_ended, order_status, lifecycle_state, lifecycle_details, cancel_reason, time_canceled].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
