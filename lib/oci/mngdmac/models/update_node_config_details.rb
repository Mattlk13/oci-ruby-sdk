# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250320
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The data to update a new NodeConfig.
  class Mngdmac::Models::UpdateNodeConfigDetails
    # The macAddress.
    # @return [String]
    attr_accessor :mac_address

    # The macOrderId.
    # @return [String]
    attr_accessor :mac_order_id

    # The switchHostname.
    # @return [String]
    attr_accessor :switch_hostname

    # The switchEthPort.
    # @return [String]
    attr_accessor :switch_eth_port

    # The ipKvmHostname.
    # @return [String]
    attr_accessor :ip_kvm_hostname

    # The ipKvmPortNumber.
    # @return [Integer]
    attr_accessor :ip_kvm_port_number

    # The pduHostname.
    # @return [String]
    attr_accessor :pdu_hostname

    # The pduPort.
    # @return [Integer]
    attr_accessor :pdu_port

    # The buildVlanId.
    # @return [Integer]
    attr_accessor :build_vlan_id

    # The buildIpAddress.
    # @return [String]
    attr_accessor :build_ip_address

    # The prodVlanId.
    # @return [Integer]
    attr_accessor :prod_vlan_id

    # The prodIpAddress.
    # @return [String]
    attr_accessor :prod_ip_address

    # The rackLocation.
    # @return [String]
    attr_accessor :rack_location

    # The chipSetn.
    # @return [String]
    attr_accessor :chip_set

    # The osVersion.
    # @return [String]
    attr_accessor :os_version

    # The tenancyId.
    # @return [String]
    attr_accessor :tenancy_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'mac_address': :'macAddress',
        'mac_order_id': :'macOrderId',
        'switch_hostname': :'switchHostname',
        'switch_eth_port': :'switchEthPort',
        'ip_kvm_hostname': :'ipKvmHostname',
        'ip_kvm_port_number': :'ipKvmPortNumber',
        'pdu_hostname': :'pduHostname',
        'pdu_port': :'pduPort',
        'build_vlan_id': :'buildVlanId',
        'build_ip_address': :'buildIpAddress',
        'prod_vlan_id': :'prodVlanId',
        'prod_ip_address': :'prodIpAddress',
        'rack_location': :'rackLocation',
        'chip_set': :'chipSet',
        'os_version': :'osVersion',
        'tenancy_id': :'tenancyId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'mac_address': :'String',
        'mac_order_id': :'String',
        'switch_hostname': :'String',
        'switch_eth_port': :'String',
        'ip_kvm_hostname': :'String',
        'ip_kvm_port_number': :'Integer',
        'pdu_hostname': :'String',
        'pdu_port': :'Integer',
        'build_vlan_id': :'Integer',
        'build_ip_address': :'String',
        'prod_vlan_id': :'Integer',
        'prod_ip_address': :'String',
        'rack_location': :'String',
        'chip_set': :'String',
        'os_version': :'String',
        'tenancy_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :mac_address The value to assign to the {#mac_address} property
    # @option attributes [String] :mac_order_id The value to assign to the {#mac_order_id} property
    # @option attributes [String] :switch_hostname The value to assign to the {#switch_hostname} property
    # @option attributes [String] :switch_eth_port The value to assign to the {#switch_eth_port} property
    # @option attributes [String] :ip_kvm_hostname The value to assign to the {#ip_kvm_hostname} property
    # @option attributes [Integer] :ip_kvm_port_number The value to assign to the {#ip_kvm_port_number} property
    # @option attributes [String] :pdu_hostname The value to assign to the {#pdu_hostname} property
    # @option attributes [Integer] :pdu_port The value to assign to the {#pdu_port} property
    # @option attributes [Integer] :build_vlan_id The value to assign to the {#build_vlan_id} property
    # @option attributes [String] :build_ip_address The value to assign to the {#build_ip_address} property
    # @option attributes [Integer] :prod_vlan_id The value to assign to the {#prod_vlan_id} property
    # @option attributes [String] :prod_ip_address The value to assign to the {#prod_ip_address} property
    # @option attributes [String] :rack_location The value to assign to the {#rack_location} property
    # @option attributes [String] :chip_set The value to assign to the {#chip_set} property
    # @option attributes [String] :os_version The value to assign to the {#os_version} property
    # @option attributes [String] :tenancy_id The value to assign to the {#tenancy_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.mac_address = attributes[:'macAddress'] if attributes[:'macAddress']

      raise 'You cannot provide both :macAddress and :mac_address' if attributes.key?(:'macAddress') && attributes.key?(:'mac_address')

      self.mac_address = attributes[:'mac_address'] if attributes[:'mac_address']

      self.mac_order_id = attributes[:'macOrderId'] if attributes[:'macOrderId']

      raise 'You cannot provide both :macOrderId and :mac_order_id' if attributes.key?(:'macOrderId') && attributes.key?(:'mac_order_id')

      self.mac_order_id = attributes[:'mac_order_id'] if attributes[:'mac_order_id']

      self.switch_hostname = attributes[:'switchHostname'] if attributes[:'switchHostname']

      raise 'You cannot provide both :switchHostname and :switch_hostname' if attributes.key?(:'switchHostname') && attributes.key?(:'switch_hostname')

      self.switch_hostname = attributes[:'switch_hostname'] if attributes[:'switch_hostname']

      self.switch_eth_port = attributes[:'switchEthPort'] if attributes[:'switchEthPort']

      raise 'You cannot provide both :switchEthPort and :switch_eth_port' if attributes.key?(:'switchEthPort') && attributes.key?(:'switch_eth_port')

      self.switch_eth_port = attributes[:'switch_eth_port'] if attributes[:'switch_eth_port']

      self.ip_kvm_hostname = attributes[:'ipKvmHostname'] if attributes[:'ipKvmHostname']

      raise 'You cannot provide both :ipKvmHostname and :ip_kvm_hostname' if attributes.key?(:'ipKvmHostname') && attributes.key?(:'ip_kvm_hostname')

      self.ip_kvm_hostname = attributes[:'ip_kvm_hostname'] if attributes[:'ip_kvm_hostname']

      self.ip_kvm_port_number = attributes[:'ipKvmPortNumber'] if attributes[:'ipKvmPortNumber']

      raise 'You cannot provide both :ipKvmPortNumber and :ip_kvm_port_number' if attributes.key?(:'ipKvmPortNumber') && attributes.key?(:'ip_kvm_port_number')

      self.ip_kvm_port_number = attributes[:'ip_kvm_port_number'] if attributes[:'ip_kvm_port_number']

      self.pdu_hostname = attributes[:'pduHostname'] if attributes[:'pduHostname']

      raise 'You cannot provide both :pduHostname and :pdu_hostname' if attributes.key?(:'pduHostname') && attributes.key?(:'pdu_hostname')

      self.pdu_hostname = attributes[:'pdu_hostname'] if attributes[:'pdu_hostname']

      self.pdu_port = attributes[:'pduPort'] if attributes[:'pduPort']

      raise 'You cannot provide both :pduPort and :pdu_port' if attributes.key?(:'pduPort') && attributes.key?(:'pdu_port')

      self.pdu_port = attributes[:'pdu_port'] if attributes[:'pdu_port']

      self.build_vlan_id = attributes[:'buildVlanId'] if attributes[:'buildVlanId']

      raise 'You cannot provide both :buildVlanId and :build_vlan_id' if attributes.key?(:'buildVlanId') && attributes.key?(:'build_vlan_id')

      self.build_vlan_id = attributes[:'build_vlan_id'] if attributes[:'build_vlan_id']

      self.build_ip_address = attributes[:'buildIpAddress'] if attributes[:'buildIpAddress']

      raise 'You cannot provide both :buildIpAddress and :build_ip_address' if attributes.key?(:'buildIpAddress') && attributes.key?(:'build_ip_address')

      self.build_ip_address = attributes[:'build_ip_address'] if attributes[:'build_ip_address']

      self.prod_vlan_id = attributes[:'prodVlanId'] if attributes[:'prodVlanId']

      raise 'You cannot provide both :prodVlanId and :prod_vlan_id' if attributes.key?(:'prodVlanId') && attributes.key?(:'prod_vlan_id')

      self.prod_vlan_id = attributes[:'prod_vlan_id'] if attributes[:'prod_vlan_id']

      self.prod_ip_address = attributes[:'prodIpAddress'] if attributes[:'prodIpAddress']

      raise 'You cannot provide both :prodIpAddress and :prod_ip_address' if attributes.key?(:'prodIpAddress') && attributes.key?(:'prod_ip_address')

      self.prod_ip_address = attributes[:'prod_ip_address'] if attributes[:'prod_ip_address']

      self.rack_location = attributes[:'rackLocation'] if attributes[:'rackLocation']

      raise 'You cannot provide both :rackLocation and :rack_location' if attributes.key?(:'rackLocation') && attributes.key?(:'rack_location')

      self.rack_location = attributes[:'rack_location'] if attributes[:'rack_location']

      self.chip_set = attributes[:'chipSet'] if attributes[:'chipSet']

      raise 'You cannot provide both :chipSet and :chip_set' if attributes.key?(:'chipSet') && attributes.key?(:'chip_set')

      self.chip_set = attributes[:'chip_set'] if attributes[:'chip_set']

      self.os_version = attributes[:'osVersion'] if attributes[:'osVersion']

      raise 'You cannot provide both :osVersion and :os_version' if attributes.key?(:'osVersion') && attributes.key?(:'os_version')

      self.os_version = attributes[:'os_version'] if attributes[:'os_version']

      self.tenancy_id = attributes[:'tenancyId'] if attributes[:'tenancyId']

      raise 'You cannot provide both :tenancyId and :tenancy_id' if attributes.key?(:'tenancyId') && attributes.key?(:'tenancy_id')

      self.tenancy_id = attributes[:'tenancy_id'] if attributes[:'tenancy_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        mac_address == other.mac_address &&
        mac_order_id == other.mac_order_id &&
        switch_hostname == other.switch_hostname &&
        switch_eth_port == other.switch_eth_port &&
        ip_kvm_hostname == other.ip_kvm_hostname &&
        ip_kvm_port_number == other.ip_kvm_port_number &&
        pdu_hostname == other.pdu_hostname &&
        pdu_port == other.pdu_port &&
        build_vlan_id == other.build_vlan_id &&
        build_ip_address == other.build_ip_address &&
        prod_vlan_id == other.prod_vlan_id &&
        prod_ip_address == other.prod_ip_address &&
        rack_location == other.rack_location &&
        chip_set == other.chip_set &&
        os_version == other.os_version &&
        tenancy_id == other.tenancy_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [mac_address, mac_order_id, switch_hostname, switch_eth_port, ip_kvm_hostname, ip_kvm_port_number, pdu_hostname, pdu_port, build_vlan_id, build_ip_address, prod_vlan_id, prod_ip_address, rack_location, chip_set, os_version, tenancy_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
