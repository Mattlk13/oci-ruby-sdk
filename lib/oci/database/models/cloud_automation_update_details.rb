# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Specifies the properties necessary for cloud automation updates. This includes modifying the apply update time preference, enabling or disabling early adoption, and enabling, modifying, or disabling the update freeze period.
  #
  class Database::Models::CloudAutomationUpdateDetails
    # Annotates whether the cluster should be part of early access to apply VM cloud automation software updates. Those clusters annotated as early access will download the software bits for cloud automation in the first week after the update is available, while other clusters will have to wait until the following week.
    #
    # @return [BOOLEAN]
    attr_accessor :is_early_adoption_enabled

    # Specifies if the freeze period is enabled for the VM cluster to prevent the VMs from receiving cloud automation software updates during critical business cycles. Freeze period starts at 12:00 AM UTC and ends at 11:59:59 PM UTC on the selected date. Ensure that the freezing period does not exceed 45 days.
    #
    # @return [BOOLEAN]
    attr_accessor :is_freeze_period_enabled

    # @return [OCI::Database::Models::CloudAutomationApplyUpdateTimePreference]
    attr_accessor :apply_update_time_preference

    # @return [OCI::Database::Models::CloudAutomationFreezePeriod]
    attr_accessor :freeze_period

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'is_early_adoption_enabled': :'isEarlyAdoptionEnabled',
        'is_freeze_period_enabled': :'isFreezePeriodEnabled',
        'apply_update_time_preference': :'applyUpdateTimePreference',
        'freeze_period': :'freezePeriod'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'is_early_adoption_enabled': :'BOOLEAN',
        'is_freeze_period_enabled': :'BOOLEAN',
        'apply_update_time_preference': :'OCI::Database::Models::CloudAutomationApplyUpdateTimePreference',
        'freeze_period': :'OCI::Database::Models::CloudAutomationFreezePeriod'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_early_adoption_enabled The value to assign to the {#is_early_adoption_enabled} property
    # @option attributes [BOOLEAN] :is_freeze_period_enabled The value to assign to the {#is_freeze_period_enabled} property
    # @option attributes [OCI::Database::Models::CloudAutomationApplyUpdateTimePreference] :apply_update_time_preference The value to assign to the {#apply_update_time_preference} property
    # @option attributes [OCI::Database::Models::CloudAutomationFreezePeriod] :freeze_period The value to assign to the {#freeze_period} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.is_early_adoption_enabled = attributes[:'isEarlyAdoptionEnabled'] unless attributes[:'isEarlyAdoptionEnabled'].nil?

      raise 'You cannot provide both :isEarlyAdoptionEnabled and :is_early_adoption_enabled' if attributes.key?(:'isEarlyAdoptionEnabled') && attributes.key?(:'is_early_adoption_enabled')

      self.is_early_adoption_enabled = attributes[:'is_early_adoption_enabled'] unless attributes[:'is_early_adoption_enabled'].nil?

      self.is_freeze_period_enabled = attributes[:'isFreezePeriodEnabled'] unless attributes[:'isFreezePeriodEnabled'].nil?

      raise 'You cannot provide both :isFreezePeriodEnabled and :is_freeze_period_enabled' if attributes.key?(:'isFreezePeriodEnabled') && attributes.key?(:'is_freeze_period_enabled')

      self.is_freeze_period_enabled = attributes[:'is_freeze_period_enabled'] unless attributes[:'is_freeze_period_enabled'].nil?

      self.apply_update_time_preference = attributes[:'applyUpdateTimePreference'] if attributes[:'applyUpdateTimePreference']

      raise 'You cannot provide both :applyUpdateTimePreference and :apply_update_time_preference' if attributes.key?(:'applyUpdateTimePreference') && attributes.key?(:'apply_update_time_preference')

      self.apply_update_time_preference = attributes[:'apply_update_time_preference'] if attributes[:'apply_update_time_preference']

      self.freeze_period = attributes[:'freezePeriod'] if attributes[:'freezePeriod']

      raise 'You cannot provide both :freezePeriod and :freeze_period' if attributes.key?(:'freezePeriod') && attributes.key?(:'freeze_period')

      self.freeze_period = attributes[:'freeze_period'] if attributes[:'freeze_period']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        is_early_adoption_enabled == other.is_early_adoption_enabled &&
        is_freeze_period_enabled == other.is_freeze_period_enabled &&
        apply_update_time_preference == other.apply_update_time_preference &&
        freeze_period == other.freeze_period
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_early_adoption_enabled, is_freeze_period_enabled, apply_update_time_preference, freeze_period].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
