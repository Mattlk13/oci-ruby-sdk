# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the Exadata VM cluster on Exascale Infrastructure. Applies to Exadata Database Service on Exascale Infrastructure only.
  #
  class Database::Models::ExadbVmCluster
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_PROVISIONING = 'PROVISIONING'.freeze,
      LIFECYCLE_STATE_AVAILABLE = 'AVAILABLE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_TERMINATING = 'TERMINATING'.freeze,
      LIFECYCLE_STATE_TERMINATED = 'TERMINATED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_MAINTENANCE_IN_PROGRESS = 'MAINTENANCE_IN_PROGRESS'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    GRID_IMAGE_TYPE_ENUM = [
      GRID_IMAGE_TYPE_RELEASE_UPDATE = 'RELEASE_UPDATE'.freeze,
      GRID_IMAGE_TYPE_CUSTOM_IMAGE = 'CUSTOM_IMAGE'.freeze,
      GRID_IMAGE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LICENSE_MODEL_ENUM = [
      LICENSE_MODEL_LICENSE_INCLUDED = 'LICENSE_INCLUDED'.freeze,
      LICENSE_MODEL_BRING_YOUR_OWN_LICENSE = 'BRING_YOUR_OWN_LICENSE'.freeze,
      LICENSE_MODEL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # @return [OCI::Database::Models::ExadataIormConfig]
    attr_accessor :iorm_config_cache

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Exadata VM cluster on Exascale Infrastructure.
    # @return [String]
    attr_accessor :id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The name of the availability domain in which the Exadata VM cluster on Exascale Infrastructure is located.
    #
    # @return [String]
    attr_accessor :availability_domain

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the subnet associated with the Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [String]
    attr_accessor :subnet_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the backup network subnet associated with the Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [String]
    attr_accessor :backup_subnet_id

    # The list of [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/Content/Network/Concepts/securityrules.htm).
    # **NsgIds restrictions:**
    # - A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
    #
    # @return [Array<String>]
    attr_accessor :nsg_ids

    # A list of the [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the network security groups (NSGs) that the backup network of this DB system belongs to. Setting this to an empty array after the list is created removes the resource from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/Content/Network/Concepts/securityrules.htm). Applicable only to Exadata systems.
    #
    # @return [Array<String>]
    attr_accessor :backup_network_nsg_ids

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the last maintenance update history entry. This value is updated when a maintenance update starts.
    # @return [String]
    attr_accessor :last_update_history_entry_id

    # The port number configured for the listener on the Exadata VM cluster on Exascale Infrastructure.
    # @return [Integer]
    attr_accessor :listener_port

    # **[Required]** The current state of the Exadata VM cluster on Exascale Infrastructure.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The number of nodes in the Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [Integer]
    attr_accessor :node_count

    # **[Required]** The shape of the Exadata VM cluster on Exascale Infrastructure resource
    #
    # @return [String]
    attr_accessor :shape

    # **[Required]** The user-friendly name for the Exadata VM cluster on Exascale Infrastructure. The name does not need to be unique.
    # @return [String]
    attr_accessor :display_name

    # The date and time that the Exadata VM cluster on Exascale Infrastructure was created.
    # @return [DateTime]
    attr_accessor :time_created

    # Additional information about the current lifecycle state.
    # @return [String]
    attr_accessor :lifecycle_details

    # The time zone to use for the Exadata VM cluster on Exascale Infrastructure. For details, see [Time Zones](https://docs.cloud.oracle.com/Content/Database/References/timezones.htm).
    #
    # @return [String]
    attr_accessor :time_zone

    # **[Required]** The hostname for the Exadata VM cluster on Exascale Infrastructure. The hostname must begin with an alphabetic character, and
    # can contain alphanumeric characters and hyphens (-). For Exadata systems, the maximum length of the hostname is 12 characters.
    #
    # The maximum length of the combined hostname and domain is 63 characters.
    #
    # **Note:** The hostname must be unique within the subnet. If it is not unique,
    # then the Exadata VM cluster on Exascale Infrastructure will fail to provision.
    #
    # @return [String]
    attr_accessor :hostname

    # **[Required]** A domain name used for the Exadata VM cluster on Exascale Infrastructure. If the Oracle-provided internet and VCN
    # resolver is enabled for the specified subnet, then the domain name for the subnet is used
    # (do not provide one). Otherwise, provide a valid DNS domain name. Hyphens (-) are not permitted.
    # Applies to Exadata Database Service on Exascale Infrastructure only.
    #
    # @return [String]
    attr_accessor :domain

    # The cluster name for Exadata VM cluster on Exascale Infrastructure. The cluster name must begin with an alphabetic character, and may contain hyphens (-). Underscores (_) are not permitted. The cluster name can be no longer than 11 characters and is not case sensitive.
    #
    # @return [String]
    attr_accessor :cluster_name

    # A valid Oracle Grid Infrastructure (GI) software version.
    # @return [String]
    attr_accessor :gi_version

    # Grid Setup will be done using this grid image id.
    #
    # The grid image ID can be obtained using the API /20160918/giVersions/{majorVersion}/minorVersions?compartmentId=<compartmentId>&shapeFamily=EXADB_XS&availabilityDomain=<AD name>.
    # The list of supported major versions can be obtained using the API /20160918/giVersions?compartmentId=<compartmentId>&shape=ExaDbXS&availabilityDomain=<AD name>
    #
    # @return [String]
    attr_accessor :grid_image_id

    # The type of Grid Image
    # @return [String]
    attr_reader :grid_image_type

    # Operating system version of the image.
    # @return [String]
    attr_accessor :system_version

    # **[Required]** The public key portion of one or more key pairs used for SSH access to the Exadata VM cluster on Exascale Infrastructure.
    # @return [Array<String>]
    attr_accessor :ssh_public_keys

    # The Oracle license model that applies to the Exadata VM cluster on Exascale Infrastructure. The default is BRING_YOUR_OWN_LICENSE.
    #
    # @return [String]
    attr_reader :license_model

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Single Client Access Name (SCAN) IP addresses associated with the Exadata VM cluster on Exascale Infrastructure.
    # SCAN IP addresses are typically used for load balancing and are not assigned to any interface.
    # Oracle Clusterware directs the requests to the appropriate nodes in the cluster.
    #
    # **Note:** For a single-node DB system, this list is empty.
    #
    # @return [Array<String>]
    attr_accessor :scan_ip_ids

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the virtual IP (VIP) addresses associated with the Exadata VM cluster on Exascale Infrastructure.
    # The Cluster Ready Services (CRS) creates and maintains one VIP address for each node in the Exadata Cloud Service instance to
    # enable failover. If one node fails, then the VIP is reassigned to another active node in the cluster.
    #
    # @return [Array<String>]
    attr_accessor :vip_ids

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [String]
    attr_accessor :scan_dns_record_id

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Security Attributes for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Oracle-ZPR\": {\"MaxEgressCount\": {\"value\": \"42\", \"mode\": \"audit\"}}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :security_attributes

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # The FQDN of the DNS record for the SCAN IP addresses that are associated with the Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [String]
    attr_accessor :scan_dns_name

    # The OCID of the zone with which the Exadata VM cluster on Exascale Infrastructure is associated.
    #
    # @return [String]
    attr_accessor :zone_id

    # The TCP Single Client Access Name (SCAN) port. The default port is 1521.
    # @return [Integer]
    attr_accessor :scan_listener_port_tcp

    # The Secured Communication (TCPS) protocol Single Client Access Name (SCAN) port. The default port is 2484.
    #
    # @return [Integer]
    attr_accessor :scan_listener_port_tcp_ssl

    # The private zone ID in which you want DNS records to be created.
    #
    # @return [String]
    attr_accessor :private_zone_id

    # @return [OCI::Database::Models::DataCollectionOptions]
    attr_accessor :data_collection_options

    # **[Required]** The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [Integer]
    attr_accessor :total_e_cpu_count

    # **[Required]** The number of ECPUs to enable for an Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [Integer]
    attr_accessor :enabled_e_cpu_count

    # This attribute is required.
    # @return [OCI::Database::Models::ExadbVmClusterStorageDetails]
    attr_accessor :vm_file_system_storage

    # @return [OCI::Database::Models::ExadbVmClusterStorageDetails]
    attr_accessor :snapshot_file_system_storage

    # @return [OCI::Database::Models::ExadbVmClusterStorageDetails]
    attr_accessor :total_file_system_storage

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Exadata Database Storage Vault.
    # @return [String]
    attr_accessor :exascale_db_storage_vault_id

    # The memory that you want to be allocated in GBs. Memory is calculated based on 11 GB per VM core reserved.
    #
    # @return [Integer]
    attr_accessor :memory_size_in_gbs

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the cluster placement group of the Exadata Infrastructure.
    # @return [String]
    attr_accessor :cluster_placement_group_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the subscription with which resource needs to be associated with.
    # @return [String]
    attr_accessor :subscription_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'iorm_config_cache': :'iormConfigCache',
        'id': :'id',
        'compartment_id': :'compartmentId',
        'availability_domain': :'availabilityDomain',
        'subnet_id': :'subnetId',
        'backup_subnet_id': :'backupSubnetId',
        'nsg_ids': :'nsgIds',
        'backup_network_nsg_ids': :'backupNetworkNsgIds',
        'last_update_history_entry_id': :'lastUpdateHistoryEntryId',
        'listener_port': :'listenerPort',
        'lifecycle_state': :'lifecycleState',
        'node_count': :'nodeCount',
        'shape': :'shape',
        'display_name': :'displayName',
        'time_created': :'timeCreated',
        'lifecycle_details': :'lifecycleDetails',
        'time_zone': :'timeZone',
        'hostname': :'hostname',
        'domain': :'domain',
        'cluster_name': :'clusterName',
        'gi_version': :'giVersion',
        'grid_image_id': :'gridImageId',
        'grid_image_type': :'gridImageType',
        'system_version': :'systemVersion',
        'ssh_public_keys': :'sshPublicKeys',
        'license_model': :'licenseModel',
        'scan_ip_ids': :'scanIpIds',
        'vip_ids': :'vipIds',
        'scan_dns_record_id': :'scanDnsRecordId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'security_attributes': :'securityAttributes',
        'system_tags': :'systemTags',
        'scan_dns_name': :'scanDnsName',
        'zone_id': :'zoneId',
        'scan_listener_port_tcp': :'scanListenerPortTcp',
        'scan_listener_port_tcp_ssl': :'scanListenerPortTcpSsl',
        'private_zone_id': :'privateZoneId',
        'data_collection_options': :'dataCollectionOptions',
        'total_e_cpu_count': :'totalECpuCount',
        'enabled_e_cpu_count': :'enabledECpuCount',
        'vm_file_system_storage': :'vmFileSystemStorage',
        'snapshot_file_system_storage': :'snapshotFileSystemStorage',
        'total_file_system_storage': :'totalFileSystemStorage',
        'exascale_db_storage_vault_id': :'exascaleDbStorageVaultId',
        'memory_size_in_gbs': :'memorySizeInGBs',
        'cluster_placement_group_id': :'clusterPlacementGroupId',
        'subscription_id': :'subscriptionId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'iorm_config_cache': :'OCI::Database::Models::ExadataIormConfig',
        'id': :'String',
        'compartment_id': :'String',
        'availability_domain': :'String',
        'subnet_id': :'String',
        'backup_subnet_id': :'String',
        'nsg_ids': :'Array<String>',
        'backup_network_nsg_ids': :'Array<String>',
        'last_update_history_entry_id': :'String',
        'listener_port': :'Integer',
        'lifecycle_state': :'String',
        'node_count': :'Integer',
        'shape': :'String',
        'display_name': :'String',
        'time_created': :'DateTime',
        'lifecycle_details': :'String',
        'time_zone': :'String',
        'hostname': :'String',
        'domain': :'String',
        'cluster_name': :'String',
        'gi_version': :'String',
        'grid_image_id': :'String',
        'grid_image_type': :'String',
        'system_version': :'String',
        'ssh_public_keys': :'Array<String>',
        'license_model': :'String',
        'scan_ip_ids': :'Array<String>',
        'vip_ids': :'Array<String>',
        'scan_dns_record_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'security_attributes': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'scan_dns_name': :'String',
        'zone_id': :'String',
        'scan_listener_port_tcp': :'Integer',
        'scan_listener_port_tcp_ssl': :'Integer',
        'private_zone_id': :'String',
        'data_collection_options': :'OCI::Database::Models::DataCollectionOptions',
        'total_e_cpu_count': :'Integer',
        'enabled_e_cpu_count': :'Integer',
        'vm_file_system_storage': :'OCI::Database::Models::ExadbVmClusterStorageDetails',
        'snapshot_file_system_storage': :'OCI::Database::Models::ExadbVmClusterStorageDetails',
        'total_file_system_storage': :'OCI::Database::Models::ExadbVmClusterStorageDetails',
        'exascale_db_storage_vault_id': :'String',
        'memory_size_in_gbs': :'Integer',
        'cluster_placement_group_id': :'String',
        'subscription_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::Database::Models::ExadataIormConfig] :iorm_config_cache The value to assign to the {#iorm_config_cache} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [String] :subnet_id The value to assign to the {#subnet_id} property
    # @option attributes [String] :backup_subnet_id The value to assign to the {#backup_subnet_id} property
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {#nsg_ids} property
    # @option attributes [Array<String>] :backup_network_nsg_ids The value to assign to the {#backup_network_nsg_ids} property
    # @option attributes [String] :last_update_history_entry_id The value to assign to the {#last_update_history_entry_id} property
    # @option attributes [Integer] :listener_port The value to assign to the {#listener_port} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Integer] :node_count The value to assign to the {#node_count} property
    # @option attributes [String] :shape The value to assign to the {#shape} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :time_zone The value to assign to the {#time_zone} property
    # @option attributes [String] :hostname The value to assign to the {#hostname} property
    # @option attributes [String] :domain The value to assign to the {#domain} property
    # @option attributes [String] :cluster_name The value to assign to the {#cluster_name} property
    # @option attributes [String] :gi_version The value to assign to the {#gi_version} property
    # @option attributes [String] :grid_image_id The value to assign to the {#grid_image_id} property
    # @option attributes [String] :grid_image_type The value to assign to the {#grid_image_type} property
    # @option attributes [String] :system_version The value to assign to the {#system_version} property
    # @option attributes [Array<String>] :ssh_public_keys The value to assign to the {#ssh_public_keys} property
    # @option attributes [String] :license_model The value to assign to the {#license_model} property
    # @option attributes [Array<String>] :scan_ip_ids The value to assign to the {#scan_ip_ids} property
    # @option attributes [Array<String>] :vip_ids The value to assign to the {#vip_ids} property
    # @option attributes [String] :scan_dns_record_id The value to assign to the {#scan_dns_record_id} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :security_attributes The value to assign to the {#security_attributes} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    # @option attributes [String] :scan_dns_name The value to assign to the {#scan_dns_name} property
    # @option attributes [String] :zone_id The value to assign to the {#zone_id} property
    # @option attributes [Integer] :scan_listener_port_tcp The value to assign to the {#scan_listener_port_tcp} property
    # @option attributes [Integer] :scan_listener_port_tcp_ssl The value to assign to the {#scan_listener_port_tcp_ssl} property
    # @option attributes [String] :private_zone_id The value to assign to the {#private_zone_id} property
    # @option attributes [OCI::Database::Models::DataCollectionOptions] :data_collection_options The value to assign to the {#data_collection_options} property
    # @option attributes [Integer] :total_e_cpu_count The value to assign to the {#total_e_cpu_count} property
    # @option attributes [Integer] :enabled_e_cpu_count The value to assign to the {#enabled_e_cpu_count} property
    # @option attributes [OCI::Database::Models::ExadbVmClusterStorageDetails] :vm_file_system_storage The value to assign to the {#vm_file_system_storage} property
    # @option attributes [OCI::Database::Models::ExadbVmClusterStorageDetails] :snapshot_file_system_storage The value to assign to the {#snapshot_file_system_storage} property
    # @option attributes [OCI::Database::Models::ExadbVmClusterStorageDetails] :total_file_system_storage The value to assign to the {#total_file_system_storage} property
    # @option attributes [String] :exascale_db_storage_vault_id The value to assign to the {#exascale_db_storage_vault_id} property
    # @option attributes [Integer] :memory_size_in_gbs The value to assign to the {#memory_size_in_gbs} property
    # @option attributes [String] :cluster_placement_group_id The value to assign to the {#cluster_placement_group_id} property
    # @option attributes [String] :subscription_id The value to assign to the {#subscription_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.iorm_config_cache = attributes[:'iormConfigCache'] if attributes[:'iormConfigCache']

      raise 'You cannot provide both :iormConfigCache and :iorm_config_cache' if attributes.key?(:'iormConfigCache') && attributes.key?(:'iorm_config_cache')

      self.iorm_config_cache = attributes[:'iorm_config_cache'] if attributes[:'iorm_config_cache']

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.subnet_id = attributes[:'subnetId'] if attributes[:'subnetId']

      raise 'You cannot provide both :subnetId and :subnet_id' if attributes.key?(:'subnetId') && attributes.key?(:'subnet_id')

      self.subnet_id = attributes[:'subnet_id'] if attributes[:'subnet_id']

      self.backup_subnet_id = attributes[:'backupSubnetId'] if attributes[:'backupSubnetId']

      raise 'You cannot provide both :backupSubnetId and :backup_subnet_id' if attributes.key?(:'backupSubnetId') && attributes.key?(:'backup_subnet_id')

      self.backup_subnet_id = attributes[:'backup_subnet_id'] if attributes[:'backup_subnet_id']

      self.nsg_ids = attributes[:'nsgIds'] if attributes[:'nsgIds']

      raise 'You cannot provide both :nsgIds and :nsg_ids' if attributes.key?(:'nsgIds') && attributes.key?(:'nsg_ids')

      self.nsg_ids = attributes[:'nsg_ids'] if attributes[:'nsg_ids']

      self.backup_network_nsg_ids = attributes[:'backupNetworkNsgIds'] if attributes[:'backupNetworkNsgIds']

      raise 'You cannot provide both :backupNetworkNsgIds and :backup_network_nsg_ids' if attributes.key?(:'backupNetworkNsgIds') && attributes.key?(:'backup_network_nsg_ids')

      self.backup_network_nsg_ids = attributes[:'backup_network_nsg_ids'] if attributes[:'backup_network_nsg_ids']

      self.last_update_history_entry_id = attributes[:'lastUpdateHistoryEntryId'] if attributes[:'lastUpdateHistoryEntryId']

      raise 'You cannot provide both :lastUpdateHistoryEntryId and :last_update_history_entry_id' if attributes.key?(:'lastUpdateHistoryEntryId') && attributes.key?(:'last_update_history_entry_id')

      self.last_update_history_entry_id = attributes[:'last_update_history_entry_id'] if attributes[:'last_update_history_entry_id']

      self.listener_port = attributes[:'listenerPort'] if attributes[:'listenerPort']

      raise 'You cannot provide both :listenerPort and :listener_port' if attributes.key?(:'listenerPort') && attributes.key?(:'listener_port')

      self.listener_port = attributes[:'listener_port'] if attributes[:'listener_port']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.node_count = attributes[:'nodeCount'] if attributes[:'nodeCount']

      raise 'You cannot provide both :nodeCount and :node_count' if attributes.key?(:'nodeCount') && attributes.key?(:'node_count')

      self.node_count = attributes[:'node_count'] if attributes[:'node_count']

      self.shape = attributes[:'shape'] if attributes[:'shape']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.time_zone = attributes[:'timeZone'] if attributes[:'timeZone']

      raise 'You cannot provide both :timeZone and :time_zone' if attributes.key?(:'timeZone') && attributes.key?(:'time_zone')

      self.time_zone = attributes[:'time_zone'] if attributes[:'time_zone']

      self.hostname = attributes[:'hostname'] if attributes[:'hostname']

      self.domain = attributes[:'domain'] if attributes[:'domain']

      self.cluster_name = attributes[:'clusterName'] if attributes[:'clusterName']

      raise 'You cannot provide both :clusterName and :cluster_name' if attributes.key?(:'clusterName') && attributes.key?(:'cluster_name')

      self.cluster_name = attributes[:'cluster_name'] if attributes[:'cluster_name']

      self.gi_version = attributes[:'giVersion'] if attributes[:'giVersion']

      raise 'You cannot provide both :giVersion and :gi_version' if attributes.key?(:'giVersion') && attributes.key?(:'gi_version')

      self.gi_version = attributes[:'gi_version'] if attributes[:'gi_version']

      self.grid_image_id = attributes[:'gridImageId'] if attributes[:'gridImageId']

      raise 'You cannot provide both :gridImageId and :grid_image_id' if attributes.key?(:'gridImageId') && attributes.key?(:'grid_image_id')

      self.grid_image_id = attributes[:'grid_image_id'] if attributes[:'grid_image_id']

      self.grid_image_type = attributes[:'gridImageType'] if attributes[:'gridImageType']

      raise 'You cannot provide both :gridImageType and :grid_image_type' if attributes.key?(:'gridImageType') && attributes.key?(:'grid_image_type')

      self.grid_image_type = attributes[:'grid_image_type'] if attributes[:'grid_image_type']

      self.system_version = attributes[:'systemVersion'] if attributes[:'systemVersion']

      raise 'You cannot provide both :systemVersion and :system_version' if attributes.key?(:'systemVersion') && attributes.key?(:'system_version')

      self.system_version = attributes[:'system_version'] if attributes[:'system_version']

      self.ssh_public_keys = attributes[:'sshPublicKeys'] if attributes[:'sshPublicKeys']

      raise 'You cannot provide both :sshPublicKeys and :ssh_public_keys' if attributes.key?(:'sshPublicKeys') && attributes.key?(:'ssh_public_keys')

      self.ssh_public_keys = attributes[:'ssh_public_keys'] if attributes[:'ssh_public_keys']

      self.license_model = attributes[:'licenseModel'] if attributes[:'licenseModel']

      raise 'You cannot provide both :licenseModel and :license_model' if attributes.key?(:'licenseModel') && attributes.key?(:'license_model')

      self.license_model = attributes[:'license_model'] if attributes[:'license_model']

      self.scan_ip_ids = attributes[:'scanIpIds'] if attributes[:'scanIpIds']

      raise 'You cannot provide both :scanIpIds and :scan_ip_ids' if attributes.key?(:'scanIpIds') && attributes.key?(:'scan_ip_ids')

      self.scan_ip_ids = attributes[:'scan_ip_ids'] if attributes[:'scan_ip_ids']

      self.vip_ids = attributes[:'vipIds'] if attributes[:'vipIds']

      raise 'You cannot provide both :vipIds and :vip_ids' if attributes.key?(:'vipIds') && attributes.key?(:'vip_ids')

      self.vip_ids = attributes[:'vip_ids'] if attributes[:'vip_ids']

      self.scan_dns_record_id = attributes[:'scanDnsRecordId'] if attributes[:'scanDnsRecordId']

      raise 'You cannot provide both :scanDnsRecordId and :scan_dns_record_id' if attributes.key?(:'scanDnsRecordId') && attributes.key?(:'scan_dns_record_id')

      self.scan_dns_record_id = attributes[:'scan_dns_record_id'] if attributes[:'scan_dns_record_id']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.security_attributes = attributes[:'securityAttributes'] if attributes[:'securityAttributes']

      raise 'You cannot provide both :securityAttributes and :security_attributes' if attributes.key?(:'securityAttributes') && attributes.key?(:'security_attributes')

      self.security_attributes = attributes[:'security_attributes'] if attributes[:'security_attributes']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']

      self.scan_dns_name = attributes[:'scanDnsName'] if attributes[:'scanDnsName']

      raise 'You cannot provide both :scanDnsName and :scan_dns_name' if attributes.key?(:'scanDnsName') && attributes.key?(:'scan_dns_name')

      self.scan_dns_name = attributes[:'scan_dns_name'] if attributes[:'scan_dns_name']

      self.zone_id = attributes[:'zoneId'] if attributes[:'zoneId']

      raise 'You cannot provide both :zoneId and :zone_id' if attributes.key?(:'zoneId') && attributes.key?(:'zone_id')

      self.zone_id = attributes[:'zone_id'] if attributes[:'zone_id']

      self.scan_listener_port_tcp = attributes[:'scanListenerPortTcp'] if attributes[:'scanListenerPortTcp']

      raise 'You cannot provide both :scanListenerPortTcp and :scan_listener_port_tcp' if attributes.key?(:'scanListenerPortTcp') && attributes.key?(:'scan_listener_port_tcp')

      self.scan_listener_port_tcp = attributes[:'scan_listener_port_tcp'] if attributes[:'scan_listener_port_tcp']

      self.scan_listener_port_tcp_ssl = attributes[:'scanListenerPortTcpSsl'] if attributes[:'scanListenerPortTcpSsl']

      raise 'You cannot provide both :scanListenerPortTcpSsl and :scan_listener_port_tcp_ssl' if attributes.key?(:'scanListenerPortTcpSsl') && attributes.key?(:'scan_listener_port_tcp_ssl')

      self.scan_listener_port_tcp_ssl = attributes[:'scan_listener_port_tcp_ssl'] if attributes[:'scan_listener_port_tcp_ssl']

      self.private_zone_id = attributes[:'privateZoneId'] if attributes[:'privateZoneId']

      raise 'You cannot provide both :privateZoneId and :private_zone_id' if attributes.key?(:'privateZoneId') && attributes.key?(:'private_zone_id')

      self.private_zone_id = attributes[:'private_zone_id'] if attributes[:'private_zone_id']

      self.data_collection_options = attributes[:'dataCollectionOptions'] if attributes[:'dataCollectionOptions']

      raise 'You cannot provide both :dataCollectionOptions and :data_collection_options' if attributes.key?(:'dataCollectionOptions') && attributes.key?(:'data_collection_options')

      self.data_collection_options = attributes[:'data_collection_options'] if attributes[:'data_collection_options']

      self.total_e_cpu_count = attributes[:'totalECpuCount'] if attributes[:'totalECpuCount']

      raise 'You cannot provide both :totalECpuCount and :total_e_cpu_count' if attributes.key?(:'totalECpuCount') && attributes.key?(:'total_e_cpu_count')

      self.total_e_cpu_count = attributes[:'total_e_cpu_count'] if attributes[:'total_e_cpu_count']

      self.enabled_e_cpu_count = attributes[:'enabledECpuCount'] if attributes[:'enabledECpuCount']

      raise 'You cannot provide both :enabledECpuCount and :enabled_e_cpu_count' if attributes.key?(:'enabledECpuCount') && attributes.key?(:'enabled_e_cpu_count')

      self.enabled_e_cpu_count = attributes[:'enabled_e_cpu_count'] if attributes[:'enabled_e_cpu_count']

      self.vm_file_system_storage = attributes[:'vmFileSystemStorage'] if attributes[:'vmFileSystemStorage']

      raise 'You cannot provide both :vmFileSystemStorage and :vm_file_system_storage' if attributes.key?(:'vmFileSystemStorage') && attributes.key?(:'vm_file_system_storage')

      self.vm_file_system_storage = attributes[:'vm_file_system_storage'] if attributes[:'vm_file_system_storage']

      self.snapshot_file_system_storage = attributes[:'snapshotFileSystemStorage'] if attributes[:'snapshotFileSystemStorage']

      raise 'You cannot provide both :snapshotFileSystemStorage and :snapshot_file_system_storage' if attributes.key?(:'snapshotFileSystemStorage') && attributes.key?(:'snapshot_file_system_storage')

      self.snapshot_file_system_storage = attributes[:'snapshot_file_system_storage'] if attributes[:'snapshot_file_system_storage']

      self.total_file_system_storage = attributes[:'totalFileSystemStorage'] if attributes[:'totalFileSystemStorage']

      raise 'You cannot provide both :totalFileSystemStorage and :total_file_system_storage' if attributes.key?(:'totalFileSystemStorage') && attributes.key?(:'total_file_system_storage')

      self.total_file_system_storage = attributes[:'total_file_system_storage'] if attributes[:'total_file_system_storage']

      self.exascale_db_storage_vault_id = attributes[:'exascaleDbStorageVaultId'] if attributes[:'exascaleDbStorageVaultId']

      raise 'You cannot provide both :exascaleDbStorageVaultId and :exascale_db_storage_vault_id' if attributes.key?(:'exascaleDbStorageVaultId') && attributes.key?(:'exascale_db_storage_vault_id')

      self.exascale_db_storage_vault_id = attributes[:'exascale_db_storage_vault_id'] if attributes[:'exascale_db_storage_vault_id']

      self.memory_size_in_gbs = attributes[:'memorySizeInGBs'] if attributes[:'memorySizeInGBs']

      raise 'You cannot provide both :memorySizeInGBs and :memory_size_in_gbs' if attributes.key?(:'memorySizeInGBs') && attributes.key?(:'memory_size_in_gbs')

      self.memory_size_in_gbs = attributes[:'memory_size_in_gbs'] if attributes[:'memory_size_in_gbs']

      self.cluster_placement_group_id = attributes[:'clusterPlacementGroupId'] if attributes[:'clusterPlacementGroupId']

      raise 'You cannot provide both :clusterPlacementGroupId and :cluster_placement_group_id' if attributes.key?(:'clusterPlacementGroupId') && attributes.key?(:'cluster_placement_group_id')

      self.cluster_placement_group_id = attributes[:'cluster_placement_group_id'] if attributes[:'cluster_placement_group_id']

      self.subscription_id = attributes[:'subscriptionId'] if attributes[:'subscriptionId']

      raise 'You cannot provide both :subscriptionId and :subscription_id' if attributes.key?(:'subscriptionId') && attributes.key?(:'subscription_id')

      self.subscription_id = attributes[:'subscription_id'] if attributes[:'subscription_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grid_image_type Object to be assigned
    def grid_image_type=(grid_image_type)
      # rubocop:disable Style/ConditionalAssignment
      if grid_image_type && !GRID_IMAGE_TYPE_ENUM.include?(grid_image_type)
        OCI.logger.debug("Unknown value for 'grid_image_type' [" + grid_image_type + "]. Mapping to 'GRID_IMAGE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @grid_image_type = GRID_IMAGE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @grid_image_type = grid_image_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_model Object to be assigned
    def license_model=(license_model)
      # rubocop:disable Style/ConditionalAssignment
      if license_model && !LICENSE_MODEL_ENUM.include?(license_model)
        OCI.logger.debug("Unknown value for 'license_model' [" + license_model + "]. Mapping to 'LICENSE_MODEL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @license_model = LICENSE_MODEL_UNKNOWN_ENUM_VALUE
      else
        @license_model = license_model
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        iorm_config_cache == other.iorm_config_cache &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        availability_domain == other.availability_domain &&
        subnet_id == other.subnet_id &&
        backup_subnet_id == other.backup_subnet_id &&
        nsg_ids == other.nsg_ids &&
        backup_network_nsg_ids == other.backup_network_nsg_ids &&
        last_update_history_entry_id == other.last_update_history_entry_id &&
        listener_port == other.listener_port &&
        lifecycle_state == other.lifecycle_state &&
        node_count == other.node_count &&
        shape == other.shape &&
        display_name == other.display_name &&
        time_created == other.time_created &&
        lifecycle_details == other.lifecycle_details &&
        time_zone == other.time_zone &&
        hostname == other.hostname &&
        domain == other.domain &&
        cluster_name == other.cluster_name &&
        gi_version == other.gi_version &&
        grid_image_id == other.grid_image_id &&
        grid_image_type == other.grid_image_type &&
        system_version == other.system_version &&
        ssh_public_keys == other.ssh_public_keys &&
        license_model == other.license_model &&
        scan_ip_ids == other.scan_ip_ids &&
        vip_ids == other.vip_ids &&
        scan_dns_record_id == other.scan_dns_record_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        security_attributes == other.security_attributes &&
        system_tags == other.system_tags &&
        scan_dns_name == other.scan_dns_name &&
        zone_id == other.zone_id &&
        scan_listener_port_tcp == other.scan_listener_port_tcp &&
        scan_listener_port_tcp_ssl == other.scan_listener_port_tcp_ssl &&
        private_zone_id == other.private_zone_id &&
        data_collection_options == other.data_collection_options &&
        total_e_cpu_count == other.total_e_cpu_count &&
        enabled_e_cpu_count == other.enabled_e_cpu_count &&
        vm_file_system_storage == other.vm_file_system_storage &&
        snapshot_file_system_storage == other.snapshot_file_system_storage &&
        total_file_system_storage == other.total_file_system_storage &&
        exascale_db_storage_vault_id == other.exascale_db_storage_vault_id &&
        memory_size_in_gbs == other.memory_size_in_gbs &&
        cluster_placement_group_id == other.cluster_placement_group_id &&
        subscription_id == other.subscription_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [iorm_config_cache, id, compartment_id, availability_domain, subnet_id, backup_subnet_id, nsg_ids, backup_network_nsg_ids, last_update_history_entry_id, listener_port, lifecycle_state, node_count, shape, display_name, time_created, lifecycle_details, time_zone, hostname, domain, cluster_name, gi_version, grid_image_id, grid_image_type, system_version, ssh_public_keys, license_model, scan_ip_ids, vip_ids, scan_dns_record_id, freeform_tags, defined_tags, security_attributes, system_tags, scan_dns_name, zone_id, scan_listener_port_tcp, scan_listener_port_tcp_ssl, private_zone_id, data_collection_options, total_e_cpu_count, enabled_e_cpu_count, vm_file_system_storage, snapshot_file_system_storage, total_file_system_storage, exascale_db_storage_vault_id, memory_size_in_gbs, cluster_placement_group_id, subscription_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
