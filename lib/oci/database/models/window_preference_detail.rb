# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The Single Scheduling Window details.
  #
  class Database::Models::WindowPreferenceDetail
    # Months during the year when scheduled window should be performed.
    # @return [Array<OCI::Database::Models::Month>]
    attr_accessor :months

    # **[Required]** Weeks during the month when scheduled window should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week.
    # For example, to allow scheduling window during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Scheduling window cannot be scheduled for the fifth week of months that contain more than 28 days.
    # Note that this parameter works in conjunction with the  daysOfWeek and startTime parameters to allow you to specify specific days of the week and hours that scheduled window will be performed.
    #
    # @return [Array<Integer>]
    attr_accessor :weeks_of_month

    # **[Required]** Days during the week when scheduling window should be performed.
    # @return [Array<OCI::Database::Models::DayOfWeek>]
    attr_accessor :days_of_week

    # **[Required]** The scheduling window start time. The value must use the ISO-8601 format \"hh:mm\".
    # @return [String]
    attr_accessor :start_time

    # **[Required]** Duration window allows user to set a duration they plan to allocate for Scheduling window. The duration is in minutes.
    #
    # @return [Integer]
    attr_accessor :duration

    # **[Required]** Indicates if duration the user plans to allocate for scheduling window is strictly enforced. The default value is `FALSE`.
    # @return [BOOLEAN]
    attr_accessor :is_enforced_duration

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'months': :'months',
        'weeks_of_month': :'weeksOfMonth',
        'days_of_week': :'daysOfWeek',
        'start_time': :'startTime',
        'duration': :'duration',
        'is_enforced_duration': :'isEnforcedDuration'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'months': :'Array<OCI::Database::Models::Month>',
        'weeks_of_month': :'Array<Integer>',
        'days_of_week': :'Array<OCI::Database::Models::DayOfWeek>',
        'start_time': :'String',
        'duration': :'Integer',
        'is_enforced_duration': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<OCI::Database::Models::Month>] :months The value to assign to the {#months} property
    # @option attributes [Array<Integer>] :weeks_of_month The value to assign to the {#weeks_of_month} property
    # @option attributes [Array<OCI::Database::Models::DayOfWeek>] :days_of_week The value to assign to the {#days_of_week} property
    # @option attributes [String] :start_time The value to assign to the {#start_time} property
    # @option attributes [Integer] :duration The value to assign to the {#duration} property
    # @option attributes [BOOLEAN] :is_enforced_duration The value to assign to the {#is_enforced_duration} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.months = attributes[:'months'] if attributes[:'months']

      self.weeks_of_month = attributes[:'weeksOfMonth'] if attributes[:'weeksOfMonth']

      raise 'You cannot provide both :weeksOfMonth and :weeks_of_month' if attributes.key?(:'weeksOfMonth') && attributes.key?(:'weeks_of_month')

      self.weeks_of_month = attributes[:'weeks_of_month'] if attributes[:'weeks_of_month']

      self.days_of_week = attributes[:'daysOfWeek'] if attributes[:'daysOfWeek']

      raise 'You cannot provide both :daysOfWeek and :days_of_week' if attributes.key?(:'daysOfWeek') && attributes.key?(:'days_of_week')

      self.days_of_week = attributes[:'days_of_week'] if attributes[:'days_of_week']

      self.start_time = attributes[:'startTime'] if attributes[:'startTime']

      raise 'You cannot provide both :startTime and :start_time' if attributes.key?(:'startTime') && attributes.key?(:'start_time')

      self.start_time = attributes[:'start_time'] if attributes[:'start_time']

      self.duration = attributes[:'duration'] if attributes[:'duration']

      self.is_enforced_duration = attributes[:'isEnforcedDuration'] unless attributes[:'isEnforcedDuration'].nil?
      self.is_enforced_duration = false if is_enforced_duration.nil? && !attributes.key?(:'isEnforcedDuration') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEnforcedDuration and :is_enforced_duration' if attributes.key?(:'isEnforcedDuration') && attributes.key?(:'is_enforced_duration')

      self.is_enforced_duration = attributes[:'is_enforced_duration'] unless attributes[:'is_enforced_duration'].nil?
      self.is_enforced_duration = false if is_enforced_duration.nil? && !attributes.key?(:'isEnforcedDuration') && !attributes.key?(:'is_enforced_duration') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        months == other.months &&
        weeks_of_month == other.weeks_of_month &&
        days_of_week == other.days_of_week &&
        start_time == other.start_time &&
        duration == other.duration &&
        is_enforced_duration == other.is_enforced_duration
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [months, weeks_of_month, days_of_week, start_time, duration, is_enforced_duration].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
