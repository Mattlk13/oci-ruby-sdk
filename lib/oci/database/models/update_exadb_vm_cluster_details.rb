# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for updating the Exadata VM cluster on Exascale Infrastructure. Applies to Exadata Database Service on Exascale Infrastructure only.
  #
  class Database::Models::UpdateExadbVmClusterDetails
    LICENSE_MODEL_ENUM = [
      LICENSE_MODEL_LICENSE_INCLUDED = 'LICENSE_INCLUDED'.freeze,
      LICENSE_MODEL_BRING_YOUR_OWN_LICENSE = 'BRING_YOUR_OWN_LICENSE'.freeze
    ].freeze

    UPDATE_ACTION_ENUM = [
      UPDATE_ACTION_ROLLING_APPLY = 'ROLLING_APPLY'.freeze,
      UPDATE_ACTION_NON_ROLLING_APPLY = 'NON_ROLLING_APPLY'.freeze,
      UPDATE_ACTION_PRECHECK = 'PRECHECK'.freeze,
      UPDATE_ACTION_ROLLBACK = 'ROLLBACK'.freeze
    ].freeze

    # The user-friendly name for the Exadata VM cluster on Exascale Infrastructure. The name does not need to be unique.
    # @return [String]
    attr_accessor :display_name

    # The number of Total ECPUs for an Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [Integer]
    attr_accessor :total_e_cpu_count

    # The number of ECPUs to enable for an Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [Integer]
    attr_accessor :enabled_e_cpu_count

    # @return [OCI::Database::Models::ExadbVmClusterStorageDetails]
    attr_accessor :vm_file_system_storage

    # The number of nodes to be added in the Exadata VM cluster on Exascale Infrastructure.
    #
    # @return [Integer]
    attr_accessor :node_count

    # The Oracle license model that applies to the Exadata VM cluster on Exascale Infrastructure. The default is BRING_YOUR_OWN_LICENSE.
    #
    # @return [String]
    attr_reader :license_model

    # The public key portion of one or more key pairs used for SSH access to the Exadata VM cluster on Exascale Infrastructure.
    # @return [Array<String>]
    attr_accessor :ssh_public_keys

    # The list of [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/Content/Network/Concepts/securityrules.htm).
    # **NsgIds restrictions:**
    # - A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
    #
    # @return [Array<String>]
    attr_accessor :nsg_ids

    # A list of the [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the network security groups (NSGs) that the backup network of this DB system belongs to. Setting this to an empty array after the list is created removes the resource from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/Content/Network/Concepts/securityrules.htm). Applicable only to Exadata systems.
    #
    # @return [Array<String>]
    attr_accessor :backup_network_nsg_ids

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Security Attributes for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Oracle-ZPR\": {\"MaxEgressCount\": {\"value\": \"42\", \"mode\": \"audit\"}}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :security_attributes

    # @return [OCI::Database::Models::DataCollectionOptions]
    attr_accessor :data_collection_options

    # Operating system version of the image.
    # @return [String]
    attr_accessor :system_version

    # Grid Setup will be done using this grid image id.
    #
    # The grid image ID can be obtained using the API /20160918/giVersions/{majorVersion}/minorVersions?compartmentId=<compartmentId>&shapeFamily=EXADB_XS&availabilityDomain=<AD name>.
    # The list of supported major versions can be obtained using the API /20160918/giVersions?compartmentId=<compartmentId>&shape=ExaDbXS&availabilityDomain=<AD name>
    #
    # @return [String]
    attr_accessor :grid_image_id

    # The update action.
    # @return [String]
    attr_reader :update_action

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'total_e_cpu_count': :'totalECpuCount',
        'enabled_e_cpu_count': :'enabledECpuCount',
        'vm_file_system_storage': :'vmFileSystemStorage',
        'node_count': :'nodeCount',
        'license_model': :'licenseModel',
        'ssh_public_keys': :'sshPublicKeys',
        'nsg_ids': :'nsgIds',
        'backup_network_nsg_ids': :'backupNetworkNsgIds',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'security_attributes': :'securityAttributes',
        'data_collection_options': :'dataCollectionOptions',
        'system_version': :'systemVersion',
        'grid_image_id': :'gridImageId',
        'update_action': :'updateAction'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'total_e_cpu_count': :'Integer',
        'enabled_e_cpu_count': :'Integer',
        'vm_file_system_storage': :'OCI::Database::Models::ExadbVmClusterStorageDetails',
        'node_count': :'Integer',
        'license_model': :'String',
        'ssh_public_keys': :'Array<String>',
        'nsg_ids': :'Array<String>',
        'backup_network_nsg_ids': :'Array<String>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'security_attributes': :'Hash<String, Hash<String, Object>>',
        'data_collection_options': :'OCI::Database::Models::DataCollectionOptions',
        'system_version': :'String',
        'grid_image_id': :'String',
        'update_action': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Integer] :total_e_cpu_count The value to assign to the {#total_e_cpu_count} property
    # @option attributes [Integer] :enabled_e_cpu_count The value to assign to the {#enabled_e_cpu_count} property
    # @option attributes [OCI::Database::Models::ExadbVmClusterStorageDetails] :vm_file_system_storage The value to assign to the {#vm_file_system_storage} property
    # @option attributes [Integer] :node_count The value to assign to the {#node_count} property
    # @option attributes [String] :license_model The value to assign to the {#license_model} property
    # @option attributes [Array<String>] :ssh_public_keys The value to assign to the {#ssh_public_keys} property
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {#nsg_ids} property
    # @option attributes [Array<String>] :backup_network_nsg_ids The value to assign to the {#backup_network_nsg_ids} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :security_attributes The value to assign to the {#security_attributes} property
    # @option attributes [OCI::Database::Models::DataCollectionOptions] :data_collection_options The value to assign to the {#data_collection_options} property
    # @option attributes [String] :system_version The value to assign to the {#system_version} property
    # @option attributes [String] :grid_image_id The value to assign to the {#grid_image_id} property
    # @option attributes [String] :update_action The value to assign to the {#update_action} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.total_e_cpu_count = attributes[:'totalECpuCount'] if attributes[:'totalECpuCount']

      raise 'You cannot provide both :totalECpuCount and :total_e_cpu_count' if attributes.key?(:'totalECpuCount') && attributes.key?(:'total_e_cpu_count')

      self.total_e_cpu_count = attributes[:'total_e_cpu_count'] if attributes[:'total_e_cpu_count']

      self.enabled_e_cpu_count = attributes[:'enabledECpuCount'] if attributes[:'enabledECpuCount']

      raise 'You cannot provide both :enabledECpuCount and :enabled_e_cpu_count' if attributes.key?(:'enabledECpuCount') && attributes.key?(:'enabled_e_cpu_count')

      self.enabled_e_cpu_count = attributes[:'enabled_e_cpu_count'] if attributes[:'enabled_e_cpu_count']

      self.vm_file_system_storage = attributes[:'vmFileSystemStorage'] if attributes[:'vmFileSystemStorage']

      raise 'You cannot provide both :vmFileSystemStorage and :vm_file_system_storage' if attributes.key?(:'vmFileSystemStorage') && attributes.key?(:'vm_file_system_storage')

      self.vm_file_system_storage = attributes[:'vm_file_system_storage'] if attributes[:'vm_file_system_storage']

      self.node_count = attributes[:'nodeCount'] if attributes[:'nodeCount']

      raise 'You cannot provide both :nodeCount and :node_count' if attributes.key?(:'nodeCount') && attributes.key?(:'node_count')

      self.node_count = attributes[:'node_count'] if attributes[:'node_count']

      self.license_model = attributes[:'licenseModel'] if attributes[:'licenseModel']

      raise 'You cannot provide both :licenseModel and :license_model' if attributes.key?(:'licenseModel') && attributes.key?(:'license_model')

      self.license_model = attributes[:'license_model'] if attributes[:'license_model']

      self.ssh_public_keys = attributes[:'sshPublicKeys'] if attributes[:'sshPublicKeys']

      raise 'You cannot provide both :sshPublicKeys and :ssh_public_keys' if attributes.key?(:'sshPublicKeys') && attributes.key?(:'ssh_public_keys')

      self.ssh_public_keys = attributes[:'ssh_public_keys'] if attributes[:'ssh_public_keys']

      self.nsg_ids = attributes[:'nsgIds'] if attributes[:'nsgIds']

      raise 'You cannot provide both :nsgIds and :nsg_ids' if attributes.key?(:'nsgIds') && attributes.key?(:'nsg_ids')

      self.nsg_ids = attributes[:'nsg_ids'] if attributes[:'nsg_ids']

      self.backup_network_nsg_ids = attributes[:'backupNetworkNsgIds'] if attributes[:'backupNetworkNsgIds']

      raise 'You cannot provide both :backupNetworkNsgIds and :backup_network_nsg_ids' if attributes.key?(:'backupNetworkNsgIds') && attributes.key?(:'backup_network_nsg_ids')

      self.backup_network_nsg_ids = attributes[:'backup_network_nsg_ids'] if attributes[:'backup_network_nsg_ids']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.security_attributes = attributes[:'securityAttributes'] if attributes[:'securityAttributes']

      raise 'You cannot provide both :securityAttributes and :security_attributes' if attributes.key?(:'securityAttributes') && attributes.key?(:'security_attributes')

      self.security_attributes = attributes[:'security_attributes'] if attributes[:'security_attributes']

      self.data_collection_options = attributes[:'dataCollectionOptions'] if attributes[:'dataCollectionOptions']

      raise 'You cannot provide both :dataCollectionOptions and :data_collection_options' if attributes.key?(:'dataCollectionOptions') && attributes.key?(:'data_collection_options')

      self.data_collection_options = attributes[:'data_collection_options'] if attributes[:'data_collection_options']

      self.system_version = attributes[:'systemVersion'] if attributes[:'systemVersion']

      raise 'You cannot provide both :systemVersion and :system_version' if attributes.key?(:'systemVersion') && attributes.key?(:'system_version')

      self.system_version = attributes[:'system_version'] if attributes[:'system_version']

      self.grid_image_id = attributes[:'gridImageId'] if attributes[:'gridImageId']

      raise 'You cannot provide both :gridImageId and :grid_image_id' if attributes.key?(:'gridImageId') && attributes.key?(:'grid_image_id')

      self.grid_image_id = attributes[:'grid_image_id'] if attributes[:'grid_image_id']

      self.update_action = attributes[:'updateAction'] if attributes[:'updateAction']

      raise 'You cannot provide both :updateAction and :update_action' if attributes.key?(:'updateAction') && attributes.key?(:'update_action')

      self.update_action = attributes[:'update_action'] if attributes[:'update_action']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_model Object to be assigned
    def license_model=(license_model)
      raise "Invalid value for 'license_model': this must be one of the values in LICENSE_MODEL_ENUM." if license_model && !LICENSE_MODEL_ENUM.include?(license_model)

      @license_model = license_model
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update_action Object to be assigned
    def update_action=(update_action)
      raise "Invalid value for 'update_action': this must be one of the values in UPDATE_ACTION_ENUM." if update_action && !UPDATE_ACTION_ENUM.include?(update_action)

      @update_action = update_action
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        total_e_cpu_count == other.total_e_cpu_count &&
        enabled_e_cpu_count == other.enabled_e_cpu_count &&
        vm_file_system_storage == other.vm_file_system_storage &&
        node_count == other.node_count &&
        license_model == other.license_model &&
        ssh_public_keys == other.ssh_public_keys &&
        nsg_ids == other.nsg_ids &&
        backup_network_nsg_ids == other.backup_network_nsg_ids &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        security_attributes == other.security_attributes &&
        data_collection_options == other.data_collection_options &&
        system_version == other.system_version &&
        grid_image_id == other.grid_image_id &&
        update_action == other.update_action
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, total_e_cpu_count, enabled_e_cpu_count, vm_file_system_storage, node_count, license_model, ssh_public_keys, nsg_ids, backup_network_nsg_ids, freeform_tags, defined_tags, security_attributes, data_collection_options, system_version, grid_image_id, update_action].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
