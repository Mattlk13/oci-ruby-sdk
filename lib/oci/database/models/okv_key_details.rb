# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require_relative 'autonomous_database_encryption_key_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for OKV encryption key.
  class Database::Models::OkvKeyDetails < Database::Models::AutonomousDatabaseEncryptionKeyDetails
    # **[Required]** URI of OKV server
    # @return [String]
    attr_accessor :okv_uri

    # **[Required]** UUID of OKV KMS Key
    # @return [String]
    attr_accessor :okv_kms_key

    # **[Required]** OKV wallet directory name
    # @return [String]
    attr_accessor :directory_name

    # **[Required]** OKV certificate directory name
    # @return [String]
    attr_accessor :certificate_directory_name

    # OKV certificate id
    # @return [String]
    attr_accessor :certificate_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'provider': :'provider',
        'okv_uri': :'okvUri',
        'okv_kms_key': :'okvKmsKey',
        'directory_name': :'directoryName',
        'certificate_directory_name': :'certificateDirectoryName',
        'certificate_id': :'certificateId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'provider': :'String',
        'okv_uri': :'String',
        'okv_kms_key': :'String',
        'directory_name': :'String',
        'certificate_directory_name': :'String',
        'certificate_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :okv_uri The value to assign to the {#okv_uri} property
    # @option attributes [String] :okv_kms_key The value to assign to the {#okv_kms_key} property
    # @option attributes [String] :directory_name The value to assign to the {#directory_name} property
    # @option attributes [String] :certificate_directory_name The value to assign to the {#certificate_directory_name} property
    # @option attributes [String] :certificate_id The value to assign to the {#certificate_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['provider'] = 'OKV'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.okv_uri = attributes[:'okvUri'] if attributes[:'okvUri']

      raise 'You cannot provide both :okvUri and :okv_uri' if attributes.key?(:'okvUri') && attributes.key?(:'okv_uri')

      self.okv_uri = attributes[:'okv_uri'] if attributes[:'okv_uri']

      self.okv_kms_key = attributes[:'okvKmsKey'] if attributes[:'okvKmsKey']

      raise 'You cannot provide both :okvKmsKey and :okv_kms_key' if attributes.key?(:'okvKmsKey') && attributes.key?(:'okv_kms_key')

      self.okv_kms_key = attributes[:'okv_kms_key'] if attributes[:'okv_kms_key']

      self.directory_name = attributes[:'directoryName'] if attributes[:'directoryName']

      raise 'You cannot provide both :directoryName and :directory_name' if attributes.key?(:'directoryName') && attributes.key?(:'directory_name')

      self.directory_name = attributes[:'directory_name'] if attributes[:'directory_name']

      self.certificate_directory_name = attributes[:'certificateDirectoryName'] if attributes[:'certificateDirectoryName']

      raise 'You cannot provide both :certificateDirectoryName and :certificate_directory_name' if attributes.key?(:'certificateDirectoryName') && attributes.key?(:'certificate_directory_name')

      self.certificate_directory_name = attributes[:'certificate_directory_name'] if attributes[:'certificate_directory_name']

      self.certificate_id = attributes[:'certificateId'] if attributes[:'certificateId']

      raise 'You cannot provide both :certificateId and :certificate_id' if attributes.key?(:'certificateId') && attributes.key?(:'certificate_id')

      self.certificate_id = attributes[:'certificate_id'] if attributes[:'certificate_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        provider == other.provider &&
        okv_uri == other.okv_uri &&
        okv_kms_key == other.okv_kms_key &&
        directory_name == other.directory_name &&
        certificate_directory_name == other.certificate_directory_name &&
        certificate_id == other.certificate_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [provider, okv_uri, okv_kms_key, directory_name, certificate_directory_name, certificate_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
