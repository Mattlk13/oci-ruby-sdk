# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A summary model for the Occm demand signal resource properties.
  #
  class CapacityManagement::Models::OccmDemandSignalResourcePropertiesSummary
    # **[Required]** The name of demand signal resource's property.
    #
    # @return [String]
    attr_accessor :property_name

    # **[Required]** Default value of demand signal resource's property.
    #
    # @return [String]
    attr_accessor :property_value

    # The minimum value of demand signal resource's property. This is an optional parameter.
    #
    # @return [Integer]
    attr_accessor :property_min_value

    # The maximum value of demand signal resource's property. This is an optional parameter.
    #
    # @return [Integer]
    attr_accessor :property_max_value

    # Predefined options for demand signal resource's property. This is an optional parameter.
    #
    # @return [Array<OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertyOptionSummary>]
    attr_accessor :property_options

    # Unit for demand signal resource's property.
    #
    # @return [String]
    attr_accessor :property_unit

    # **[Required]** This will indicate if demand signal resource's property is editable.
    #
    # @return [BOOLEAN]
    attr_accessor :is_editable

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'property_name': :'propertyName',
        'property_value': :'propertyValue',
        'property_min_value': :'propertyMinValue',
        'property_max_value': :'propertyMaxValue',
        'property_options': :'propertyOptions',
        'property_unit': :'propertyUnit',
        'is_editable': :'isEditable'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'property_name': :'String',
        'property_value': :'String',
        'property_min_value': :'Integer',
        'property_max_value': :'Integer',
        'property_options': :'Array<OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertyOptionSummary>',
        'property_unit': :'String',
        'is_editable': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :property_name The value to assign to the {#property_name} property
    # @option attributes [String] :property_value The value to assign to the {#property_value} property
    # @option attributes [Integer] :property_min_value The value to assign to the {#property_min_value} property
    # @option attributes [Integer] :property_max_value The value to assign to the {#property_max_value} property
    # @option attributes [Array<OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertyOptionSummary>] :property_options The value to assign to the {#property_options} property
    # @option attributes [String] :property_unit The value to assign to the {#property_unit} property
    # @option attributes [BOOLEAN] :is_editable The value to assign to the {#is_editable} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.property_name = attributes[:'propertyName'] if attributes[:'propertyName']

      raise 'You cannot provide both :propertyName and :property_name' if attributes.key?(:'propertyName') && attributes.key?(:'property_name')

      self.property_name = attributes[:'property_name'] if attributes[:'property_name']

      self.property_value = attributes[:'propertyValue'] if attributes[:'propertyValue']

      raise 'You cannot provide both :propertyValue and :property_value' if attributes.key?(:'propertyValue') && attributes.key?(:'property_value')

      self.property_value = attributes[:'property_value'] if attributes[:'property_value']

      self.property_min_value = attributes[:'propertyMinValue'] if attributes[:'propertyMinValue']

      raise 'You cannot provide both :propertyMinValue and :property_min_value' if attributes.key?(:'propertyMinValue') && attributes.key?(:'property_min_value')

      self.property_min_value = attributes[:'property_min_value'] if attributes[:'property_min_value']

      self.property_max_value = attributes[:'propertyMaxValue'] if attributes[:'propertyMaxValue']

      raise 'You cannot provide both :propertyMaxValue and :property_max_value' if attributes.key?(:'propertyMaxValue') && attributes.key?(:'property_max_value')

      self.property_max_value = attributes[:'property_max_value'] if attributes[:'property_max_value']

      self.property_options = attributes[:'propertyOptions'] if attributes[:'propertyOptions']

      raise 'You cannot provide both :propertyOptions and :property_options' if attributes.key?(:'propertyOptions') && attributes.key?(:'property_options')

      self.property_options = attributes[:'property_options'] if attributes[:'property_options']

      self.property_unit = attributes[:'propertyUnit'] if attributes[:'propertyUnit']

      raise 'You cannot provide both :propertyUnit and :property_unit' if attributes.key?(:'propertyUnit') && attributes.key?(:'property_unit')

      self.property_unit = attributes[:'property_unit'] if attributes[:'property_unit']

      self.is_editable = attributes[:'isEditable'] unless attributes[:'isEditable'].nil?

      raise 'You cannot provide both :isEditable and :is_editable' if attributes.key?(:'isEditable') && attributes.key?(:'is_editable')

      self.is_editable = attributes[:'is_editable'] unless attributes[:'is_editable'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        property_name == other.property_name &&
        property_value == other.property_value &&
        property_min_value == other.property_min_value &&
        property_max_value == other.property_max_value &&
        property_options == other.property_options &&
        property_unit == other.property_unit &&
        is_editable == other.is_editable
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [property_name, property_value, property_min_value, property_max_value, property_options, property_unit, is_editable].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
