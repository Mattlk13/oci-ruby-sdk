# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # An internal model that contains information about the demand signal item delivery from OCI to customers.
  #
  class CapacityManagement::Models::InternalOccmDemandSignalDelivery
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_DETAILS_ENUM = [
      LIFECYCLE_DETAILS_SUBMITTED = 'SUBMITTED'.freeze,
      LIFECYCLE_DETAILS_IN_REVIEW = 'IN_REVIEW'.freeze,
      LIFECYCLE_DETAILS_ACCEPTED = 'ACCEPTED'.freeze,
      LIFECYCLE_DETAILS_DECLINED = 'DECLINED'.freeze,
      LIFECYCLE_DETAILS_DELIVERED = 'DELIVERED'.freeze,
      LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of this demand signal delivery resource.
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the tenancy from which the demand signal delivery resource is created.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The OCID of the corresponding customer group to which this demand signal delivery resource belongs to.
    #
    # @return [String]
    attr_accessor :occ_customer_group_id

    # **[Required]** The OCID of the demand signal under which this delivery will be grouped.
    #
    # @return [String]
    attr_accessor :demand_signal_id

    # **[Required]** The OCID of the demand signal item corresponding to which this delivery is made.
    #
    # @return [String]
    attr_accessor :demand_signal_item_id

    # **[Required]** The quantity of the resource that OCI will supply to the customer.
    #
    # @return [Integer]
    attr_accessor :accepted_quantity

    # **[Required]** The current lifecycle state of the resource.
    #
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The enum values corresponding to the various states associated with the delivery resource.
    #
    # SUBMITTED -> The state where operators have started working and thinking on the quantity that OCI can delivery for the corresponding demand signal item.
    # IN_REVIEW -> The operators are waiting on approvals from different teams/folks in this state.
    # ACCEPTED -> OCI has accepted your resource request and will deliver the quantity as specified by acceptance quantity of this resource.
    # DECLINED -> OCI has declined you resource request.
    # DELIVERED -> OCI has delivered the accepted quantity to the customers.
    #
    # NOTE: The resource becomes visible to customers in ACCEPTED, DECLINED or DELIVERED state.
    #
    # @return [String]
    attr_reader :lifecycle_details

    # This field could be used by OCI to communicate the reason for accepting or declining the request.
    #
    # @return [String]
    attr_accessor :justification

    # The date on which the OCI delivered the resource to the customers. The default value for this will be the corresponding demand signal item resource's need by date.
    #
    # @return [DateTime]
    attr_accessor :time_delivered

    # This field acts as a notes section for operators.
    #
    # @return [String]
    attr_accessor :notes

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'occ_customer_group_id': :'occCustomerGroupId',
        'demand_signal_id': :'demandSignalId',
        'demand_signal_item_id': :'demandSignalItemId',
        'accepted_quantity': :'acceptedQuantity',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'justification': :'justification',
        'time_delivered': :'timeDelivered',
        'notes': :'notes',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'occ_customer_group_id': :'String',
        'demand_signal_id': :'String',
        'demand_signal_item_id': :'String',
        'accepted_quantity': :'Integer',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'justification': :'String',
        'time_delivered': :'DateTime',
        'notes': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :occ_customer_group_id The value to assign to the {#occ_customer_group_id} property
    # @option attributes [String] :demand_signal_id The value to assign to the {#demand_signal_id} property
    # @option attributes [String] :demand_signal_item_id The value to assign to the {#demand_signal_item_id} property
    # @option attributes [Integer] :accepted_quantity The value to assign to the {#accepted_quantity} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :justification The value to assign to the {#justification} property
    # @option attributes [DateTime] :time_delivered The value to assign to the {#time_delivered} property
    # @option attributes [String] :notes The value to assign to the {#notes} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.occ_customer_group_id = attributes[:'occCustomerGroupId'] if attributes[:'occCustomerGroupId']

      raise 'You cannot provide both :occCustomerGroupId and :occ_customer_group_id' if attributes.key?(:'occCustomerGroupId') && attributes.key?(:'occ_customer_group_id')

      self.occ_customer_group_id = attributes[:'occ_customer_group_id'] if attributes[:'occ_customer_group_id']

      self.demand_signal_id = attributes[:'demandSignalId'] if attributes[:'demandSignalId']

      raise 'You cannot provide both :demandSignalId and :demand_signal_id' if attributes.key?(:'demandSignalId') && attributes.key?(:'demand_signal_id')

      self.demand_signal_id = attributes[:'demand_signal_id'] if attributes[:'demand_signal_id']

      self.demand_signal_item_id = attributes[:'demandSignalItemId'] if attributes[:'demandSignalItemId']

      raise 'You cannot provide both :demandSignalItemId and :demand_signal_item_id' if attributes.key?(:'demandSignalItemId') && attributes.key?(:'demand_signal_item_id')

      self.demand_signal_item_id = attributes[:'demand_signal_item_id'] if attributes[:'demand_signal_item_id']

      self.accepted_quantity = attributes[:'acceptedQuantity'] if attributes[:'acceptedQuantity']

      raise 'You cannot provide both :acceptedQuantity and :accepted_quantity' if attributes.key?(:'acceptedQuantity') && attributes.key?(:'accepted_quantity')

      self.accepted_quantity = attributes[:'accepted_quantity'] if attributes[:'accepted_quantity']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.justification = attributes[:'justification'] if attributes[:'justification']

      self.time_delivered = attributes[:'timeDelivered'] if attributes[:'timeDelivered']

      raise 'You cannot provide both :timeDelivered and :time_delivered' if attributes.key?(:'timeDelivered') && attributes.key?(:'time_delivered')

      self.time_delivered = attributes[:'time_delivered'] if attributes[:'time_delivered']

      self.notes = attributes[:'notes'] if attributes[:'notes']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_details Object to be assigned
    def lifecycle_details=(lifecycle_details)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_details && !LIFECYCLE_DETAILS_ENUM.include?(lifecycle_details)
        OCI.logger.debug("Unknown value for 'lifecycle_details' [" + lifecycle_details + "]. Mapping to 'LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_details = LIFECYCLE_DETAILS_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_details = lifecycle_details
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        occ_customer_group_id == other.occ_customer_group_id &&
        demand_signal_id == other.demand_signal_id &&
        demand_signal_item_id == other.demand_signal_item_id &&
        accepted_quantity == other.accepted_quantity &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        justification == other.justification &&
        time_delivered == other.time_delivered &&
        notes == other.notes &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, occ_customer_group_id, demand_signal_id, demand_signal_item_id, accepted_quantity, lifecycle_state, lifecycle_details, justification, time_delivered, notes, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
