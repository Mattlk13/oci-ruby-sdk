# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The overview summary is used to represent an array item that shall be used to represent the overview of the catalog resources along with their corresponding capacity requests.
  #
  class CapacityManagement::Models::OccOverviewSummary
    # **[Required]** The OCID of the compartment from which the api call is made. This will be used for authorizing the request.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The name of the month along with year for which this summary corresponds to.
    # @return [String]
    attr_accessor :period_value

    # **[Required]** The name of the resource for which we have aggregated the value.
    # @return [String]
    attr_accessor :resource_name

    # **[Required]** The quantity of the resource which is available at the end of the period of aggregationDetails model in consideration.
    # @return [Integer]
    attr_accessor :total_available

    # **[Required]** The quantity of the resource which is demanded by customers via capacity requests against the resource name at the end of the time period in consideration for overview.
    # @return [Integer]
    attr_accessor :total_demanded

    # **[Required]** The quantity of the resource which is supplied by Oracle to the customer against the resource name at the end of the time period in consideration.
    # @return [Integer]
    attr_accessor :total_supplied

    # **[Required]** The quantity of the resource which is rejected by Oracle.
    # @return [Integer]
    attr_accessor :total_rejected

    # **[Required]** The quantity of the resource which is cancelled by the customer. Once the capacity request was submitted, the customer can still cancel it. This field sums up those values.
    # @return [Integer]
    attr_accessor :total_cancelled

    # **[Required]** The quantity of the resource which Oracle was unable to supply. For a given capacity request, Oracle sometimes cannot supply the entire value demanded by the customer. In such cases a partial value is provided, thereby leaving behind a portion of unfulfilled values. This field sums that up.
    # @return [Integer]
    attr_accessor :total_unfulfilled

    # **[Required]** A raw json blob containing breakdown of totalAvailable, totalDemanded, totalSupplied, totalRejected, totalCancelled and totalUnfulfilled by workload types
    # @return [String]
    attr_accessor :workload_type_breakdown_blob

    # A raw json blob containing all the capacity requests corresponding to the resource name
    # @return [String]
    attr_accessor :capacity_requests_blob

    # **[Required]** The unit e.g SERVER in which the above values like totalAvailable, totalSupplied etc is measured.
    # @return [String]
    attr_accessor :unit

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'period_value': :'periodValue',
        'resource_name': :'resourceName',
        'total_available': :'totalAvailable',
        'total_demanded': :'totalDemanded',
        'total_supplied': :'totalSupplied',
        'total_rejected': :'totalRejected',
        'total_cancelled': :'totalCancelled',
        'total_unfulfilled': :'totalUnfulfilled',
        'workload_type_breakdown_blob': :'workloadTypeBreakdownBlob',
        'capacity_requests_blob': :'capacityRequestsBlob',
        'unit': :'unit'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'period_value': :'String',
        'resource_name': :'String',
        'total_available': :'Integer',
        'total_demanded': :'Integer',
        'total_supplied': :'Integer',
        'total_rejected': :'Integer',
        'total_cancelled': :'Integer',
        'total_unfulfilled': :'Integer',
        'workload_type_breakdown_blob': :'String',
        'capacity_requests_blob': :'String',
        'unit': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :period_value The value to assign to the {#period_value} property
    # @option attributes [String] :resource_name The value to assign to the {#resource_name} property
    # @option attributes [Integer] :total_available The value to assign to the {#total_available} property
    # @option attributes [Integer] :total_demanded The value to assign to the {#total_demanded} property
    # @option attributes [Integer] :total_supplied The value to assign to the {#total_supplied} property
    # @option attributes [Integer] :total_rejected The value to assign to the {#total_rejected} property
    # @option attributes [Integer] :total_cancelled The value to assign to the {#total_cancelled} property
    # @option attributes [Integer] :total_unfulfilled The value to assign to the {#total_unfulfilled} property
    # @option attributes [String] :workload_type_breakdown_blob The value to assign to the {#workload_type_breakdown_blob} property
    # @option attributes [String] :capacity_requests_blob The value to assign to the {#capacity_requests_blob} property
    # @option attributes [String] :unit The value to assign to the {#unit} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.period_value = attributes[:'periodValue'] if attributes[:'periodValue']

      raise 'You cannot provide both :periodValue and :period_value' if attributes.key?(:'periodValue') && attributes.key?(:'period_value')

      self.period_value = attributes[:'period_value'] if attributes[:'period_value']

      self.resource_name = attributes[:'resourceName'] if attributes[:'resourceName']

      raise 'You cannot provide both :resourceName and :resource_name' if attributes.key?(:'resourceName') && attributes.key?(:'resource_name')

      self.resource_name = attributes[:'resource_name'] if attributes[:'resource_name']

      self.total_available = attributes[:'totalAvailable'] if attributes[:'totalAvailable']

      raise 'You cannot provide both :totalAvailable and :total_available' if attributes.key?(:'totalAvailable') && attributes.key?(:'total_available')

      self.total_available = attributes[:'total_available'] if attributes[:'total_available']

      self.total_demanded = attributes[:'totalDemanded'] if attributes[:'totalDemanded']

      raise 'You cannot provide both :totalDemanded and :total_demanded' if attributes.key?(:'totalDemanded') && attributes.key?(:'total_demanded')

      self.total_demanded = attributes[:'total_demanded'] if attributes[:'total_demanded']

      self.total_supplied = attributes[:'totalSupplied'] if attributes[:'totalSupplied']

      raise 'You cannot provide both :totalSupplied and :total_supplied' if attributes.key?(:'totalSupplied') && attributes.key?(:'total_supplied')

      self.total_supplied = attributes[:'total_supplied'] if attributes[:'total_supplied']

      self.total_rejected = attributes[:'totalRejected'] if attributes[:'totalRejected']

      raise 'You cannot provide both :totalRejected and :total_rejected' if attributes.key?(:'totalRejected') && attributes.key?(:'total_rejected')

      self.total_rejected = attributes[:'total_rejected'] if attributes[:'total_rejected']

      self.total_cancelled = attributes[:'totalCancelled'] if attributes[:'totalCancelled']

      raise 'You cannot provide both :totalCancelled and :total_cancelled' if attributes.key?(:'totalCancelled') && attributes.key?(:'total_cancelled')

      self.total_cancelled = attributes[:'total_cancelled'] if attributes[:'total_cancelled']

      self.total_unfulfilled = attributes[:'totalUnfulfilled'] if attributes[:'totalUnfulfilled']

      raise 'You cannot provide both :totalUnfulfilled and :total_unfulfilled' if attributes.key?(:'totalUnfulfilled') && attributes.key?(:'total_unfulfilled')

      self.total_unfulfilled = attributes[:'total_unfulfilled'] if attributes[:'total_unfulfilled']

      self.workload_type_breakdown_blob = attributes[:'workloadTypeBreakdownBlob'] if attributes[:'workloadTypeBreakdownBlob']

      raise 'You cannot provide both :workloadTypeBreakdownBlob and :workload_type_breakdown_blob' if attributes.key?(:'workloadTypeBreakdownBlob') && attributes.key?(:'workload_type_breakdown_blob')

      self.workload_type_breakdown_blob = attributes[:'workload_type_breakdown_blob'] if attributes[:'workload_type_breakdown_blob']

      self.capacity_requests_blob = attributes[:'capacityRequestsBlob'] if attributes[:'capacityRequestsBlob']

      raise 'You cannot provide both :capacityRequestsBlob and :capacity_requests_blob' if attributes.key?(:'capacityRequestsBlob') && attributes.key?(:'capacity_requests_blob')

      self.capacity_requests_blob = attributes[:'capacity_requests_blob'] if attributes[:'capacity_requests_blob']

      self.unit = attributes[:'unit'] if attributes[:'unit']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        period_value == other.period_value &&
        resource_name == other.resource_name &&
        total_available == other.total_available &&
        total_demanded == other.total_demanded &&
        total_supplied == other.total_supplied &&
        total_rejected == other.total_rejected &&
        total_cancelled == other.total_cancelled &&
        total_unfulfilled == other.total_unfulfilled &&
        workload_type_breakdown_blob == other.workload_type_breakdown_blob &&
        capacity_requests_blob == other.capacity_requests_blob &&
        unit == other.unit
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, period_value, resource_name, total_available, total_demanded, total_supplied, total_rejected, total_cancelled, total_unfulfilled, workload_type_breakdown_blob, capacity_requests_blob, unit].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
