# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A summary model containing information about the details of a demand signal catalog resource.
  #
  class CapacityManagement::Models::OccmDemandSignalCatalogResourceSummary
    NAMESPACE_ENUM = [
      NAMESPACE_COMPUTE = 'COMPUTE'.freeze,
      NAMESPACE_NETWORK = 'NETWORK'.freeze,
      NAMESPACE_GPU = 'GPU'.freeze,
      NAMESPACE_STORAGE = 'STORAGE'.freeze,
      NAMESPACE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the demand signal catalog resource.
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the tenancy from which the request to create the demand signal was made.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The name of the OCI service in consideration for demand signal submission. For example: COMPUTE, NETWORK, GPU etc.
    #
    # @return [String]
    attr_reader :namespace

    # **[Required]** The name of the OCI resource that you want to request.
    #
    # @return [String]
    attr_accessor :name

    # The OCID of the customer tenancy for which this resource will be available for the customer to order against.
    #
    # @return [String]
    attr_accessor :target_compartment_id

    # The name of region for which you want to request the OCI resource. This is an optional parameter.
    #
    # @return [String]
    attr_accessor :region

    # The name of the availability domain for which you want to request the OCI resource. This is an optional parameter.
    #
    # @return [String]
    attr_accessor :availability_domain

    # @return [OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertiesCollection]
    attr_accessor :resource_properties

    # @return [OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertyConstraintsCollection]
    attr_accessor :resource_property_constraints

    # **[Required]** The current lifecycles state of the demand signal catalog resource.
    #
    # @return [String]
    attr_accessor :lifecycle_state

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # **[Required]** The time when the demand signal catalog resource was created.
    #
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The time when the demand signal catalog resource was last updated.
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'namespace': :'namespace',
        'name': :'name',
        'target_compartment_id': :'targetCompartmentId',
        'region': :'region',
        'availability_domain': :'availabilityDomain',
        'resource_properties': :'resourceProperties',
        'resource_property_constraints': :'resourcePropertyConstraints',
        'lifecycle_state': :'lifecycleState',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'namespace': :'String',
        'name': :'String',
        'target_compartment_id': :'String',
        'region': :'String',
        'availability_domain': :'String',
        'resource_properties': :'OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertiesCollection',
        'resource_property_constraints': :'OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertyConstraintsCollection',
        'lifecycle_state': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'time_created': :'DateTime',
        'time_updated': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :namespace The value to assign to the {#namespace} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :target_compartment_id The value to assign to the {#target_compartment_id} property
    # @option attributes [String] :region The value to assign to the {#region} property
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertiesCollection] :resource_properties The value to assign to the {#resource_properties} property
    # @option attributes [OCI::CapacityManagement::Models::OccmDemandSignalResourcePropertyConstraintsCollection] :resource_property_constraints The value to assign to the {#resource_property_constraints} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.namespace = attributes[:'namespace'] if attributes[:'namespace']

      self.name = attributes[:'name'] if attributes[:'name']

      self.target_compartment_id = attributes[:'targetCompartmentId'] if attributes[:'targetCompartmentId']

      raise 'You cannot provide both :targetCompartmentId and :target_compartment_id' if attributes.key?(:'targetCompartmentId') && attributes.key?(:'target_compartment_id')

      self.target_compartment_id = attributes[:'target_compartment_id'] if attributes[:'target_compartment_id']

      self.region = attributes[:'region'] if attributes[:'region']

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.resource_properties = attributes[:'resourceProperties'] if attributes[:'resourceProperties']

      raise 'You cannot provide both :resourceProperties and :resource_properties' if attributes.key?(:'resourceProperties') && attributes.key?(:'resource_properties')

      self.resource_properties = attributes[:'resource_properties'] if attributes[:'resource_properties']

      self.resource_property_constraints = attributes[:'resourcePropertyConstraints'] if attributes[:'resourcePropertyConstraints']

      raise 'You cannot provide both :resourcePropertyConstraints and :resource_property_constraints' if attributes.key?(:'resourcePropertyConstraints') && attributes.key?(:'resource_property_constraints')

      self.resource_property_constraints = attributes[:'resource_property_constraints'] if attributes[:'resource_property_constraints']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] namespace Object to be assigned
    def namespace=(namespace)
      # rubocop:disable Style/ConditionalAssignment
      if namespace && !NAMESPACE_ENUM.include?(namespace)
        OCI.logger.debug("Unknown value for 'namespace' [" + namespace + "]. Mapping to 'NAMESPACE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @namespace = NAMESPACE_UNKNOWN_ENUM_VALUE
      else
        @namespace = namespace
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        namespace == other.namespace &&
        name == other.name &&
        target_compartment_id == other.target_compartment_id &&
        region == other.region &&
        availability_domain == other.availability_domain &&
        resource_properties == other.resource_properties &&
        resource_property_constraints == other.resource_property_constraints &&
        lifecycle_state == other.lifecycle_state &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        time_created == other.time_created &&
        time_updated == other.time_updated
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, namespace, name, target_compartment_id, region, availability_domain, resource_properties, resource_property_constraints, lifecycle_state, freeform_tags, defined_tags, system_tags, time_created, time_updated].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
