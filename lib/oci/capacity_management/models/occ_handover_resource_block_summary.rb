# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details about the association of capacity requests with the corresponding resources handed over by oracle.
  #
  class CapacityManagement::Models::OccHandoverResourceBlockSummary
    NAMESPACE_ENUM = [
      NAMESPACE_COMPUTE = 'COMPUTE'.freeze,
      NAMESPACE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the resource block.
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the compartment where the resource block's are placed.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The name of the OCI service in consideration.
    # For example Compute, Exadata and so on.
    #
    # @return [String]
    attr_reader :namespace

    # **[Required]** The OCID of the customer group for which the resources were provisioned.
    #
    # @return [String]
    attr_accessor :occ_customer_group_id

    # **[Required]** The date on which the resource was handed over to the customer.
    #
    # @return [DateTime]
    attr_accessor :handover_date

    # **[Required]** The name of the resource handed over by oracle.
    # For instance for compute namespace this will be the name of the bare metal hardware resource.
    #
    # @return [String]
    attr_accessor :handover_resource_name

    # **[Required]** The total quantity of the resource that was made available to the customer by Oracle.
    #
    # @return [Integer]
    attr_accessor :total_handover_quantity

    # **[Required]** A list containing details about the capacity requests against which the resources were provisioned by oracle.
    #
    # @return [Array<OCI::CapacityManagement::Models::AssociatedCapacityRequestDetails>]
    attr_accessor :associated_capacity_requests

    # This attribute is required.
    # @return [OCI::CapacityManagement::Models::PlacementDetails]
    attr_accessor :placement_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'namespace': :'namespace',
        'occ_customer_group_id': :'occCustomerGroupId',
        'handover_date': :'handoverDate',
        'handover_resource_name': :'handoverResourceName',
        'total_handover_quantity': :'totalHandoverQuantity',
        'associated_capacity_requests': :'associatedCapacityRequests',
        'placement_details': :'placementDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'namespace': :'String',
        'occ_customer_group_id': :'String',
        'handover_date': :'DateTime',
        'handover_resource_name': :'String',
        'total_handover_quantity': :'Integer',
        'associated_capacity_requests': :'Array<OCI::CapacityManagement::Models::AssociatedCapacityRequestDetails>',
        'placement_details': :'OCI::CapacityManagement::Models::PlacementDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :namespace The value to assign to the {#namespace} property
    # @option attributes [String] :occ_customer_group_id The value to assign to the {#occ_customer_group_id} property
    # @option attributes [DateTime] :handover_date The value to assign to the {#handover_date} property
    # @option attributes [String] :handover_resource_name The value to assign to the {#handover_resource_name} property
    # @option attributes [Integer] :total_handover_quantity The value to assign to the {#total_handover_quantity} property
    # @option attributes [Array<OCI::CapacityManagement::Models::AssociatedCapacityRequestDetails>] :associated_capacity_requests The value to assign to the {#associated_capacity_requests} property
    # @option attributes [OCI::CapacityManagement::Models::PlacementDetails] :placement_details The value to assign to the {#placement_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.namespace = attributes[:'namespace'] if attributes[:'namespace']

      self.occ_customer_group_id = attributes[:'occCustomerGroupId'] if attributes[:'occCustomerGroupId']

      raise 'You cannot provide both :occCustomerGroupId and :occ_customer_group_id' if attributes.key?(:'occCustomerGroupId') && attributes.key?(:'occ_customer_group_id')

      self.occ_customer_group_id = attributes[:'occ_customer_group_id'] if attributes[:'occ_customer_group_id']

      self.handover_date = attributes[:'handoverDate'] if attributes[:'handoverDate']

      raise 'You cannot provide both :handoverDate and :handover_date' if attributes.key?(:'handoverDate') && attributes.key?(:'handover_date')

      self.handover_date = attributes[:'handover_date'] if attributes[:'handover_date']

      self.handover_resource_name = attributes[:'handoverResourceName'] if attributes[:'handoverResourceName']

      raise 'You cannot provide both :handoverResourceName and :handover_resource_name' if attributes.key?(:'handoverResourceName') && attributes.key?(:'handover_resource_name')

      self.handover_resource_name = attributes[:'handover_resource_name'] if attributes[:'handover_resource_name']

      self.total_handover_quantity = attributes[:'totalHandoverQuantity'] if attributes[:'totalHandoverQuantity']

      raise 'You cannot provide both :totalHandoverQuantity and :total_handover_quantity' if attributes.key?(:'totalHandoverQuantity') && attributes.key?(:'total_handover_quantity')

      self.total_handover_quantity = attributes[:'total_handover_quantity'] if attributes[:'total_handover_quantity']

      self.associated_capacity_requests = attributes[:'associatedCapacityRequests'] if attributes[:'associatedCapacityRequests']

      raise 'You cannot provide both :associatedCapacityRequests and :associated_capacity_requests' if attributes.key?(:'associatedCapacityRequests') && attributes.key?(:'associated_capacity_requests')

      self.associated_capacity_requests = attributes[:'associated_capacity_requests'] if attributes[:'associated_capacity_requests']

      self.placement_details = attributes[:'placementDetails'] if attributes[:'placementDetails']

      raise 'You cannot provide both :placementDetails and :placement_details' if attributes.key?(:'placementDetails') && attributes.key?(:'placement_details')

      self.placement_details = attributes[:'placement_details'] if attributes[:'placement_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] namespace Object to be assigned
    def namespace=(namespace)
      # rubocop:disable Style/ConditionalAssignment
      if namespace && !NAMESPACE_ENUM.include?(namespace)
        OCI.logger.debug("Unknown value for 'namespace' [" + namespace + "]. Mapping to 'NAMESPACE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @namespace = NAMESPACE_UNKNOWN_ENUM_VALUE
      else
        @namespace = namespace
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        namespace == other.namespace &&
        occ_customer_group_id == other.occ_customer_group_id &&
        handover_date == other.handover_date &&
        handover_resource_name == other.handover_resource_name &&
        total_handover_quantity == other.total_handover_quantity &&
        associated_capacity_requests == other.associated_capacity_requests &&
        placement_details == other.placement_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, namespace, occ_customer_group_id, handover_date, handover_resource_name, total_handover_quantity, associated_capacity_requests, placement_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
