# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # OCI Control Center (OCC) Capacity Management enables you to manage capacity requests in realms where OCI Control Center Capacity Management is available. For more information, see [OCI Control Center](/iaas/Content/control-center/home.htm).
  class CapacityManagement::InternalDemandSignalClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new InternalDemandSignalClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20231107'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "InternalDemandSignalClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://control-center-cp.{region}.oci.{secondLevelDomain}') + '/20231107'
      logger.info "InternalDemandSignalClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is a post API which is used to create a demand signal delivery resource.
    # operationId: CreateInternalOccmDemandSignalDelivery
    # summary: A post call to create a demand signal delivery.
    #
    # @param [OCI::CapacityManagement::Models::CreateInternalOccmDemandSignalDeliveryDetails] create_internal_occm_demand_signal_delivery_details The request details for creating an occm demand signal delivery resource.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignalDelivery InternalOccmDemandSignalDelivery}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/create_internal_occm_demand_signal_delivery.rb.html) to see an example of how to use create_internal_occm_demand_signal_delivery API.
    def create_internal_occm_demand_signal_delivery(create_internal_occm_demand_signal_delivery_details, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#create_internal_occm_demand_signal_delivery.' if logger

      raise "Missing the required parameter 'create_internal_occm_demand_signal_delivery_details' when calling create_internal_occm_demand_signal_delivery." if create_internal_occm_demand_signal_delivery_details.nil?

      path = '/internal/occmDemandSignalDeliveries'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_internal_occm_demand_signal_delivery_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#create_internal_occm_demand_signal_delivery') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignalDelivery'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is an internal DELETE API which is used to delete a demand signal delivery resource.
    #
    # @param [String] occm_demand_signal_delivery_id The OCID of the demand signal delivery.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/delete_internal_occm_demand_signal_delivery.rb.html) to see an example of how to use delete_internal_occm_demand_signal_delivery API.
    def delete_internal_occm_demand_signal_delivery(occm_demand_signal_delivery_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#delete_internal_occm_demand_signal_delivery.' if logger

      raise "Missing the required parameter 'occm_demand_signal_delivery_id' when calling delete_internal_occm_demand_signal_delivery." if occm_demand_signal_delivery_id.nil?
      raise "Parameter value for 'occm_demand_signal_delivery_id' must not be blank" if OCI::Internal::Util.blank_string?(occm_demand_signal_delivery_id)

      path = '/internal/occmDemandSignalDeliveries/{occmDemandSignalDeliveryId}'.sub('{occmDemandSignalDeliveryId}', occm_demand_signal_delivery_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#delete_internal_occm_demand_signal_delivery') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is an internal GET API which gets the detailed information about a specific demand signal.
    #
    # @param [String] occm_demand_signal_id The OCID of the demand signal.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignal InternalOccmDemandSignal}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/get_internal_occm_demand_signal.rb.html) to see an example of how to use get_internal_occm_demand_signal API.
    def get_internal_occm_demand_signal(occm_demand_signal_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#get_internal_occm_demand_signal.' if logger

      raise "Missing the required parameter 'occm_demand_signal_id' when calling get_internal_occm_demand_signal." if occm_demand_signal_id.nil?
      raise "Parameter value for 'occm_demand_signal_id' must not be blank" if OCI::Internal::Util.blank_string?(occm_demand_signal_id)

      path = '/internal/occmDemandSignals/{occmDemandSignalId}'.sub('{occmDemandSignalId}', occm_demand_signal_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#get_internal_occm_demand_signal') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignal'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This API helps in getting the details about a specific occm demand signal catalog.
    #
    # @param [String] occm_demand_signal_catalog_id The OCID of the demand signal catalog.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccmDemandSignalCatalog OccmDemandSignalCatalog}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/get_internal_occm_demand_signal_catalog.rb.html) to see an example of how to use get_internal_occm_demand_signal_catalog API.
    def get_internal_occm_demand_signal_catalog(occm_demand_signal_catalog_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#get_internal_occm_demand_signal_catalog.' if logger

      raise "Missing the required parameter 'occm_demand_signal_catalog_id' when calling get_internal_occm_demand_signal_catalog." if occm_demand_signal_catalog_id.nil?
      raise "Parameter value for 'occm_demand_signal_catalog_id' must not be blank" if OCI::Internal::Util.blank_string?(occm_demand_signal_catalog_id)

      path = '/internal/occmDemandSignalCatalog/{occmDemandSignalCatalogId}'.sub('{occmDemandSignalCatalogId}', occm_demand_signal_catalog_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#get_internal_occm_demand_signal_catalog') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccmDemandSignalCatalog'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is an internal GET API to get the details of a demand signal delivery resource corresponding to a demand signal item.
    #
    # @param [String] occm_demand_signal_delivery_id The OCID of the demand signal delivery.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignalDelivery InternalOccmDemandSignalDelivery}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/get_internal_occm_demand_signal_delivery.rb.html) to see an example of how to use get_internal_occm_demand_signal_delivery API.
    def get_internal_occm_demand_signal_delivery(occm_demand_signal_delivery_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#get_internal_occm_demand_signal_delivery.' if logger

      raise "Missing the required parameter 'occm_demand_signal_delivery_id' when calling get_internal_occm_demand_signal_delivery." if occm_demand_signal_delivery_id.nil?
      raise "Parameter value for 'occm_demand_signal_delivery_id' must not be blank" if OCI::Internal::Util.blank_string?(occm_demand_signal_delivery_id)

      path = '/internal/occmDemandSignalDeliveries/{occmDemandSignalDeliveryId}'.sub('{occmDemandSignalDeliveryId}', occm_demand_signal_delivery_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#get_internal_occm_demand_signal_delivery') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignalDelivery'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This API will list all the  resources across all demand signal catalogs for a given namespace and customer group.
    #
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [String] occ_customer_group_id The customer group ocid by which we would filter the list.
    # @param [String] occm_demand_signal_catalog_id The ocid of demand signal catalog id.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :name A query parameter to filter the list of demand signal catalog resource based on the resource name.
    #
    # @option opts [String] :demand_signal_namespace A query parameter to filter the list of demand signal catalog resources based on the namespace.
    #
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort the response of List Demand catalog resources API. Only one sort order may be provided. The default order for name is case sensitive alphabetical order.
    #    (default to name)
    #   Allowed values are: name
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignalCatalogResourceCollection InternalOccmDemandSignalCatalogResourceCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_internal_occm_demand_signal_catalog_resources.rb.html) to see an example of how to use list_internal_occm_demand_signal_catalog_resources API.
    def list_internal_occm_demand_signal_catalog_resources(compartment_id, occ_customer_group_id, occm_demand_signal_catalog_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#list_internal_occm_demand_signal_catalog_resources.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_internal_occm_demand_signal_catalog_resources." if compartment_id.nil?
      raise "Missing the required parameter 'occ_customer_group_id' when calling list_internal_occm_demand_signal_catalog_resources." if occ_customer_group_id.nil?
      raise "Missing the required parameter 'occm_demand_signal_catalog_id' when calling list_internal_occm_demand_signal_catalog_resources." if occm_demand_signal_catalog_id.nil?

      if opts[:demand_signal_namespace] && !OCI::CapacityManagement::Models::DEMAND_SIGNAL_NAMESPACE_ENUM.include?(opts[:demand_signal_namespace])
        raise 'Invalid value for "demand_signal_namespace", must be one of the values in OCI::CapacityManagement::Models::DEMAND_SIGNAL_NAMESPACE_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[name].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of name.'
      end

      path = '/internal/occmDemandSignalCatalogResources'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:occCustomerGroupId] = occ_customer_group_id
      query_params[:occmDemandSignalCatalogId] = occm_demand_signal_catalog_id
      query_params[:name] = opts[:name] if opts[:name]
      query_params[:demandSignalNamespace] = opts[:demand_signal_namespace] if opts[:demand_signal_namespace]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#list_internal_occm_demand_signal_catalog_resources') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignalCatalogResourceCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This API will list demand signal catalogs for a given customer group.
    #
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [String] occ_customer_group_id The customer group ocid by which we would filter the list.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name. The match is not case sensitive.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort the response of List Demand catalog  API. Only one sort order may be provided. The default order for name is case sensitive alphabetical order.
    #    (default to name)
    #   Allowed values are: name
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccmDemandSignalCatalogCollection OccmDemandSignalCatalogCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_internal_occm_demand_signal_catalogs.rb.html) to see an example of how to use list_internal_occm_demand_signal_catalogs API.
    def list_internal_occm_demand_signal_catalogs(compartment_id, occ_customer_group_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#list_internal_occm_demand_signal_catalogs.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_internal_occm_demand_signal_catalogs." if compartment_id.nil?
      raise "Missing the required parameter 'occ_customer_group_id' when calling list_internal_occm_demand_signal_catalogs." if occ_customer_group_id.nil?

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[name].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of name.'
      end

      path = '/internal/occmDemandSignalCatalog'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:occCustomerGroupId] = occ_customer_group_id
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#list_internal_occm_demand_signal_catalogs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccmDemandSignalCatalogCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This GET call is used to list all demand signal delivery resources within the customer group passed as a query parameter.
    #
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [String] occ_customer_group_id The customer group ocid by which we would filter the list.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :id A query parameter to filter the list of demand signals based on it's OCID.
    #
    # @option opts [String] :occm_demand_signal_item_id A query parameter to filter the list of demand signal items based on it's OCID.
    #
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort the response of List Demand Signal Delivery API. Only one sort order may be provided. The default order for resource name is case sensitive alphabetical order.
    #    (default to resourceName)
    #   Allowed values are: resourceName
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignalDeliveryCollection InternalOccmDemandSignalDeliveryCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_internal_occm_demand_signal_deliveries.rb.html) to see an example of how to use list_internal_occm_demand_signal_deliveries API.
    def list_internal_occm_demand_signal_deliveries(compartment_id, occ_customer_group_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#list_internal_occm_demand_signal_deliveries.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_internal_occm_demand_signal_deliveries." if compartment_id.nil?
      raise "Missing the required parameter 'occ_customer_group_id' when calling list_internal_occm_demand_signal_deliveries." if occ_customer_group_id.nil?

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[resourceName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of resourceName.'
      end

      path = '/internal/occmDemandSignalDeliveries'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:occCustomerGroupId] = occ_customer_group_id
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:occmDemandSignalItemId] = opts[:occm_demand_signal_item_id] if opts[:occm_demand_signal_item_id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#list_internal_occm_demand_signal_deliveries') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignalDeliveryCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This internal API will list the detailed information about the resources demanded as part of the demand signal.
    #
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [String] occ_customer_group_id The customer group ocid by which we would filter the list.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :occm_demand_signal_id A query parameter to filter the list of demand signal items based on a demand signal id.
    #
    # @option opts [String] :resource_name A query parameter to filter the list of demand signal details based on the resource name.
    #
    # @option opts [String] :demand_signal_namespace A query parameter to filter the list of demand signal details based on the namespace.
    #
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort the response of List Demand Signal Details API. Only one sort order may be provided. The default order for resource name is case sensitive alphabetical order.
    #    (default to resourceName)
    #   Allowed values are: resourceName
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignalItemCollection InternalOccmDemandSignalItemCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_internal_occm_demand_signal_items.rb.html) to see an example of how to use list_internal_occm_demand_signal_items API.
    def list_internal_occm_demand_signal_items(compartment_id, occ_customer_group_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#list_internal_occm_demand_signal_items.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_internal_occm_demand_signal_items." if compartment_id.nil?
      raise "Missing the required parameter 'occ_customer_group_id' when calling list_internal_occm_demand_signal_items." if occ_customer_group_id.nil?

      if opts[:demand_signal_namespace] && !OCI::CapacityManagement::Models::DEMAND_SIGNAL_NAMESPACE_ENUM.include?(opts[:demand_signal_namespace])
        raise 'Invalid value for "demand_signal_namespace", must be one of the values in OCI::CapacityManagement::Models::DEMAND_SIGNAL_NAMESPACE_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[resourceName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of resourceName.'
      end

      path = '/internal/occmDemandSignalItems'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:occCustomerGroupId] = occ_customer_group_id
      query_params[:occmDemandSignalId] = opts[:occm_demand_signal_id] if opts[:occm_demand_signal_id]
      query_params[:resourceName] = opts[:resource_name] if opts[:resource_name]
      query_params[:demandSignalNamespace] = opts[:demand_signal_namespace] if opts[:demand_signal_namespace]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#list_internal_occm_demand_signal_items') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignalItemCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is an internal GET call is used to list all demand signals within the compartment passed as a query parameter.
    #
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [String] occ_customer_group_id The customer group ocid by which we would filter the list.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :id A query parameter to filter the list of demand signals based on it's OCID.
    #
    # @option opts [String] :lifecycle_details A query parameter to filter the list of demand signals based on its state.
    #
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name. The match is not case sensitive.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort the response of List Demand Signal API. Only one sort order may be provided. The default order for timeCreated is reverse chronological order (latest date at the top). The default order for displayName is case sensitive alphabetical order.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignalCollection InternalOccmDemandSignalCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_internal_occm_demand_signals.rb.html) to see an example of how to use list_internal_occm_demand_signals API.
    def list_internal_occm_demand_signals(compartment_id, occ_customer_group_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#list_internal_occm_demand_signals.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_internal_occm_demand_signals." if compartment_id.nil?
      raise "Missing the required parameter 'occ_customer_group_id' when calling list_internal_occm_demand_signals." if occ_customer_group_id.nil?

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName.'
      end

      path = '/internal/occmDemandSignals'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:occCustomerGroupId] = occ_customer_group_id
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:lifecycleDetails] = opts[:lifecycle_details] if opts[:lifecycle_details]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#list_internal_occm_demand_signals') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignalCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is a internal PUT API which shall be used to update the metadata of the demand signal.
    #
    # @param [OCI::CapacityManagement::Models::UpdateInternalOccmDemandSignalDetails] update_internal_occm_demand_signal_details The request details for this PUT API to update the metadata for a given demand signal resource.
    #
    # @param [String] occm_demand_signal_id The OCID of the demand signal.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignal InternalOccmDemandSignal}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/update_internal_occm_demand_signal.rb.html) to see an example of how to use update_internal_occm_demand_signal API.
    def update_internal_occm_demand_signal(update_internal_occm_demand_signal_details, occm_demand_signal_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#update_internal_occm_demand_signal.' if logger

      raise "Missing the required parameter 'update_internal_occm_demand_signal_details' when calling update_internal_occm_demand_signal." if update_internal_occm_demand_signal_details.nil?
      raise "Missing the required parameter 'occm_demand_signal_id' when calling update_internal_occm_demand_signal." if occm_demand_signal_id.nil?
      raise "Parameter value for 'occm_demand_signal_id' must not be blank" if OCI::Internal::Util.blank_string?(occm_demand_signal_id)

      path = '/internal/occmDemandSignals/{occmDemandSignalId}'.sub('{occmDemandSignalId}', occm_demand_signal_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_internal_occm_demand_signal_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#update_internal_occm_demand_signal') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignal'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # This is an internal PUT API which is used to update the demand signal delivery resource.
    #
    # @param [OCI::CapacityManagement::Models::UpdateInternalOccmDemandSignalDeliveryDetails] update_internal_occm_demand_signal_delivery_details The details about the request to update the specified demand signal delivery.
    #
    # @param [String] occm_demand_signal_delivery_id The OCID of the demand signal delivery.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::InternalOccmDemandSignalDelivery InternalOccmDemandSignalDelivery}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/update_internal_occm_demand_signal_delivery.rb.html) to see an example of how to use update_internal_occm_demand_signal_delivery API.
    def update_internal_occm_demand_signal_delivery(update_internal_occm_demand_signal_delivery_details, occm_demand_signal_delivery_id, opts = {})
      logger.debug 'Calling operation InternalDemandSignalClient#update_internal_occm_demand_signal_delivery.' if logger

      raise "Missing the required parameter 'update_internal_occm_demand_signal_delivery_details' when calling update_internal_occm_demand_signal_delivery." if update_internal_occm_demand_signal_delivery_details.nil?
      raise "Missing the required parameter 'occm_demand_signal_delivery_id' when calling update_internal_occm_demand_signal_delivery." if occm_demand_signal_delivery_id.nil?
      raise "Parameter value for 'occm_demand_signal_delivery_id' must not be blank" if OCI::Internal::Util.blank_string?(occm_demand_signal_delivery_id)

      path = '/internal/occmDemandSignalDeliveries/{occmDemandSignalDeliveryId}'.sub('{occmDemandSignalDeliveryId}', occm_demand_signal_delivery_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_internal_occm_demand_signal_delivery_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'InternalDemandSignalClient#update_internal_occm_demand_signal_delivery') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::InternalOccmDemandSignalDelivery'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
