# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of the TrailFiles.
  #
  class GoldenGate::Models::TrailFileSummary
    # **[Required]** The TrailFile Id.
    #
    # @return [String]
    attr_accessor :trail_file_id

    # An object's Display Name.
    #
    # @return [String]
    attr_accessor :display_name

    # The size of the backup stored in object storage (in bytes)
    #
    # @return [Integer]
    attr_accessor :size_in_bytes

    # The time the resource was last updated. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_last_updated

    # Number of sequences for a specific trail file
    #
    # @return [Integer]
    attr_accessor :number_of_sequences

    # Minimum sequence number
    #
    # @return [String]
    attr_accessor :min_sequence_number

    # Maximum sequence number
    #
    # @return [String]
    attr_accessor :max_sequence_number

    # Producer Process Name if any.
    #
    # @return [String]
    attr_accessor :producer

    # array of consumer process names
    #
    # @return [Array<String>]
    attr_accessor :consumers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'trail_file_id': :'trailFileId',
        'display_name': :'displayName',
        'size_in_bytes': :'sizeInBytes',
        'time_last_updated': :'timeLastUpdated',
        'number_of_sequences': :'numberOfSequences',
        'min_sequence_number': :'minSequenceNumber',
        'max_sequence_number': :'maxSequenceNumber',
        'producer': :'producer',
        'consumers': :'consumers'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'trail_file_id': :'String',
        'display_name': :'String',
        'size_in_bytes': :'Integer',
        'time_last_updated': :'DateTime',
        'number_of_sequences': :'Integer',
        'min_sequence_number': :'String',
        'max_sequence_number': :'String',
        'producer': :'String',
        'consumers': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :trail_file_id The value to assign to the {#trail_file_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Integer] :size_in_bytes The value to assign to the {#size_in_bytes} property
    # @option attributes [DateTime] :time_last_updated The value to assign to the {#time_last_updated} property
    # @option attributes [Integer] :number_of_sequences The value to assign to the {#number_of_sequences} property
    # @option attributes [String] :min_sequence_number The value to assign to the {#min_sequence_number} property
    # @option attributes [String] :max_sequence_number The value to assign to the {#max_sequence_number} property
    # @option attributes [String] :producer The value to assign to the {#producer} property
    # @option attributes [Array<String>] :consumers The value to assign to the {#consumers} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.trail_file_id = attributes[:'trailFileId'] if attributes[:'trailFileId']

      raise 'You cannot provide both :trailFileId and :trail_file_id' if attributes.key?(:'trailFileId') && attributes.key?(:'trail_file_id')

      self.trail_file_id = attributes[:'trail_file_id'] if attributes[:'trail_file_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.size_in_bytes = attributes[:'sizeInBytes'] if attributes[:'sizeInBytes']

      raise 'You cannot provide both :sizeInBytes and :size_in_bytes' if attributes.key?(:'sizeInBytes') && attributes.key?(:'size_in_bytes')

      self.size_in_bytes = attributes[:'size_in_bytes'] if attributes[:'size_in_bytes']

      self.time_last_updated = attributes[:'timeLastUpdated'] if attributes[:'timeLastUpdated']

      raise 'You cannot provide both :timeLastUpdated and :time_last_updated' if attributes.key?(:'timeLastUpdated') && attributes.key?(:'time_last_updated')

      self.time_last_updated = attributes[:'time_last_updated'] if attributes[:'time_last_updated']

      self.number_of_sequences = attributes[:'numberOfSequences'] if attributes[:'numberOfSequences']

      raise 'You cannot provide both :numberOfSequences and :number_of_sequences' if attributes.key?(:'numberOfSequences') && attributes.key?(:'number_of_sequences')

      self.number_of_sequences = attributes[:'number_of_sequences'] if attributes[:'number_of_sequences']

      self.min_sequence_number = attributes[:'minSequenceNumber'] if attributes[:'minSequenceNumber']

      raise 'You cannot provide both :minSequenceNumber and :min_sequence_number' if attributes.key?(:'minSequenceNumber') && attributes.key?(:'min_sequence_number')

      self.min_sequence_number = attributes[:'min_sequence_number'] if attributes[:'min_sequence_number']

      self.max_sequence_number = attributes[:'maxSequenceNumber'] if attributes[:'maxSequenceNumber']

      raise 'You cannot provide both :maxSequenceNumber and :max_sequence_number' if attributes.key?(:'maxSequenceNumber') && attributes.key?(:'max_sequence_number')

      self.max_sequence_number = attributes[:'max_sequence_number'] if attributes[:'max_sequence_number']

      self.producer = attributes[:'producer'] if attributes[:'producer']

      self.consumers = attributes[:'consumers'] if attributes[:'consumers']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        trail_file_id == other.trail_file_id &&
        display_name == other.display_name &&
        size_in_bytes == other.size_in_bytes &&
        time_last_updated == other.time_last_updated &&
        number_of_sequences == other.number_of_sequences &&
        min_sequence_number == other.min_sequence_number &&
        max_sequence_number == other.max_sequence_number &&
        producer == other.producer &&
        consumers == other.consumers
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [trail_file_id, display_name, size_in_bytes, time_last_updated, number_of_sequences, min_sequence_number, max_sequence_number, producer, consumers].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
