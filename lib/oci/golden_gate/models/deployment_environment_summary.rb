# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The metadata specific to a production or development/testing environment.
  #
  class GoldenGate::Models::DeploymentEnvironmentSummary
    ENVIRONMENT_TYPE_ENUM = [
      ENVIRONMENT_TYPE_PRODUCTION = 'PRODUCTION'.freeze,
      ENVIRONMENT_TYPE_DEVELOPMENT_OR_TESTING = 'DEVELOPMENT_OR_TESTING'.freeze,
      ENVIRONMENT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CATEGORY_ENUM = [
      CATEGORY_DATA_REPLICATION = 'DATA_REPLICATION'.freeze,
      CATEGORY_STREAM_ANALYTICS = 'STREAM_ANALYTICS'.freeze,
      CATEGORY_DATA_TRANSFORMS = 'DATA_TRANSFORMS'.freeze,
      CATEGORY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Specifies whether the deployment is used in a production or development/testing environment.
    #
    # @return [String]
    attr_reader :environment_type

    # **[Required]** The deployment category defines the broad separation of the deployment type into three categories.
    # Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
    #
    # @return [String]
    attr_reader :category

    # An object's Display Name.
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The minimum CPU core count.
    #
    # @return [Integer]
    attr_accessor :min_cpu_core_count

    # **[Required]** The default CPU core count.
    #
    # @return [Integer]
    attr_accessor :default_cpu_core_count

    # **[Required]** The maximum CPU core count.
    #
    # @return [Integer]
    attr_accessor :max_cpu_core_count

    # **[Required]** Specifies whether the \"Auto scaling\" option should be enabled by default or not.
    #
    # @return [BOOLEAN]
    attr_accessor :is_auto_scaling_enabled_by_default

    # **[Required]** The multiplier value between CPU core count and network bandwidth.
    #
    # @return [Integer]
    attr_accessor :network_bandwidth_per_ocpu_in_gbps

    # **[Required]** The multiplier value between CPU core count and memory size.
    #
    # @return [Integer]
    attr_accessor :memory_per_ocpu_in_gbs

    # **[Required]** The multiplier value between CPU core count and storage usage limit size.
    #
    # @return [Integer]
    attr_accessor :storage_usage_limit_per_ocpu_in_gbs

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'environment_type': :'environmentType',
        'category': :'category',
        'display_name': :'displayName',
        'min_cpu_core_count': :'minCpuCoreCount',
        'default_cpu_core_count': :'defaultCpuCoreCount',
        'max_cpu_core_count': :'maxCpuCoreCount',
        'is_auto_scaling_enabled_by_default': :'isAutoScalingEnabledByDefault',
        'network_bandwidth_per_ocpu_in_gbps': :'networkBandwidthPerOcpuInGbps',
        'memory_per_ocpu_in_gbs': :'memoryPerOcpuInGBs',
        'storage_usage_limit_per_ocpu_in_gbs': :'storageUsageLimitPerOcpuInGBs'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'environment_type': :'String',
        'category': :'String',
        'display_name': :'String',
        'min_cpu_core_count': :'Integer',
        'default_cpu_core_count': :'Integer',
        'max_cpu_core_count': :'Integer',
        'is_auto_scaling_enabled_by_default': :'BOOLEAN',
        'network_bandwidth_per_ocpu_in_gbps': :'Integer',
        'memory_per_ocpu_in_gbs': :'Integer',
        'storage_usage_limit_per_ocpu_in_gbs': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :environment_type The value to assign to the {#environment_type} property
    # @option attributes [String] :category The value to assign to the {#category} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Integer] :min_cpu_core_count The value to assign to the {#min_cpu_core_count} property
    # @option attributes [Integer] :default_cpu_core_count The value to assign to the {#default_cpu_core_count} property
    # @option attributes [Integer] :max_cpu_core_count The value to assign to the {#max_cpu_core_count} property
    # @option attributes [BOOLEAN] :is_auto_scaling_enabled_by_default The value to assign to the {#is_auto_scaling_enabled_by_default} property
    # @option attributes [Integer] :network_bandwidth_per_ocpu_in_gbps The value to assign to the {#network_bandwidth_per_ocpu_in_gbps} property
    # @option attributes [Integer] :memory_per_ocpu_in_gbs The value to assign to the {#memory_per_ocpu_in_gbs} property
    # @option attributes [Integer] :storage_usage_limit_per_ocpu_in_gbs The value to assign to the {#storage_usage_limit_per_ocpu_in_gbs} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.environment_type = attributes[:'environmentType'] if attributes[:'environmentType']

      raise 'You cannot provide both :environmentType and :environment_type' if attributes.key?(:'environmentType') && attributes.key?(:'environment_type')

      self.environment_type = attributes[:'environment_type'] if attributes[:'environment_type']

      self.category = attributes[:'category'] if attributes[:'category']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.min_cpu_core_count = attributes[:'minCpuCoreCount'] if attributes[:'minCpuCoreCount']

      raise 'You cannot provide both :minCpuCoreCount and :min_cpu_core_count' if attributes.key?(:'minCpuCoreCount') && attributes.key?(:'min_cpu_core_count')

      self.min_cpu_core_count = attributes[:'min_cpu_core_count'] if attributes[:'min_cpu_core_count']

      self.default_cpu_core_count = attributes[:'defaultCpuCoreCount'] if attributes[:'defaultCpuCoreCount']

      raise 'You cannot provide both :defaultCpuCoreCount and :default_cpu_core_count' if attributes.key?(:'defaultCpuCoreCount') && attributes.key?(:'default_cpu_core_count')

      self.default_cpu_core_count = attributes[:'default_cpu_core_count'] if attributes[:'default_cpu_core_count']

      self.max_cpu_core_count = attributes[:'maxCpuCoreCount'] if attributes[:'maxCpuCoreCount']

      raise 'You cannot provide both :maxCpuCoreCount and :max_cpu_core_count' if attributes.key?(:'maxCpuCoreCount') && attributes.key?(:'max_cpu_core_count')

      self.max_cpu_core_count = attributes[:'max_cpu_core_count'] if attributes[:'max_cpu_core_count']

      self.is_auto_scaling_enabled_by_default = attributes[:'isAutoScalingEnabledByDefault'] unless attributes[:'isAutoScalingEnabledByDefault'].nil?

      raise 'You cannot provide both :isAutoScalingEnabledByDefault and :is_auto_scaling_enabled_by_default' if attributes.key?(:'isAutoScalingEnabledByDefault') && attributes.key?(:'is_auto_scaling_enabled_by_default')

      self.is_auto_scaling_enabled_by_default = attributes[:'is_auto_scaling_enabled_by_default'] unless attributes[:'is_auto_scaling_enabled_by_default'].nil?

      self.network_bandwidth_per_ocpu_in_gbps = attributes[:'networkBandwidthPerOcpuInGbps'] if attributes[:'networkBandwidthPerOcpuInGbps']

      raise 'You cannot provide both :networkBandwidthPerOcpuInGbps and :network_bandwidth_per_ocpu_in_gbps' if attributes.key?(:'networkBandwidthPerOcpuInGbps') && attributes.key?(:'network_bandwidth_per_ocpu_in_gbps')

      self.network_bandwidth_per_ocpu_in_gbps = attributes[:'network_bandwidth_per_ocpu_in_gbps'] if attributes[:'network_bandwidth_per_ocpu_in_gbps']

      self.memory_per_ocpu_in_gbs = attributes[:'memoryPerOcpuInGBs'] if attributes[:'memoryPerOcpuInGBs']

      raise 'You cannot provide both :memoryPerOcpuInGBs and :memory_per_ocpu_in_gbs' if attributes.key?(:'memoryPerOcpuInGBs') && attributes.key?(:'memory_per_ocpu_in_gbs')

      self.memory_per_ocpu_in_gbs = attributes[:'memory_per_ocpu_in_gbs'] if attributes[:'memory_per_ocpu_in_gbs']

      self.storage_usage_limit_per_ocpu_in_gbs = attributes[:'storageUsageLimitPerOcpuInGBs'] if attributes[:'storageUsageLimitPerOcpuInGBs']

      raise 'You cannot provide both :storageUsageLimitPerOcpuInGBs and :storage_usage_limit_per_ocpu_in_gbs' if attributes.key?(:'storageUsageLimitPerOcpuInGBs') && attributes.key?(:'storage_usage_limit_per_ocpu_in_gbs')

      self.storage_usage_limit_per_ocpu_in_gbs = attributes[:'storage_usage_limit_per_ocpu_in_gbs'] if attributes[:'storage_usage_limit_per_ocpu_in_gbs']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] environment_type Object to be assigned
    def environment_type=(environment_type)
      # rubocop:disable Style/ConditionalAssignment
      if environment_type && !ENVIRONMENT_TYPE_ENUM.include?(environment_type)
        OCI.logger.debug("Unknown value for 'environment_type' [" + environment_type + "]. Mapping to 'ENVIRONMENT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @environment_type = ENVIRONMENT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @environment_type = environment_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      # rubocop:disable Style/ConditionalAssignment
      if category && !CATEGORY_ENUM.include?(category)
        OCI.logger.debug("Unknown value for 'category' [" + category + "]. Mapping to 'CATEGORY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @category = CATEGORY_UNKNOWN_ENUM_VALUE
      else
        @category = category
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        environment_type == other.environment_type &&
        category == other.category &&
        display_name == other.display_name &&
        min_cpu_core_count == other.min_cpu_core_count &&
        default_cpu_core_count == other.default_cpu_core_count &&
        max_cpu_core_count == other.max_cpu_core_count &&
        is_auto_scaling_enabled_by_default == other.is_auto_scaling_enabled_by_default &&
        network_bandwidth_per_ocpu_in_gbps == other.network_bandwidth_per_ocpu_in_gbps &&
        memory_per_ocpu_in_gbs == other.memory_per_ocpu_in_gbs &&
        storage_usage_limit_per_ocpu_in_gbs == other.storage_usage_limit_per_ocpu_in_gbs
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [environment_type, category, display_name, min_cpu_core_count, default_cpu_core_count, max_cpu_core_count, is_auto_scaling_enabled_by_default, network_bandwidth_per_ocpu_in_gbps, memory_per_ocpu_in_gbs, storage_usage_limit_per_ocpu_in_gbs].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
