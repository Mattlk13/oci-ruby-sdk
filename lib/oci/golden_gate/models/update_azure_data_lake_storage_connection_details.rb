# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require_relative 'update_connection_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information to update a Azure Data Lake Storage Connection.
  #
  class GoldenGate::Models::UpdateAzureDataLakeStorageConnectionDetails < GoldenGate::Models::UpdateConnectionDetails
    # Used authentication mechanism to access Azure Data Lake Storage.
    #
    # @return [String]
    attr_accessor :authentication_type

    # Sets the Azure storage account name.
    #
    # @return [String]
    attr_accessor :account_name

    # Azure storage account key. This property is required when 'authenticationType' is set to 'SHARED_KEY'.
    # e.g.: pa3WbhVATzj56xD4DH1VjOUhApRGEGHvOo58eQJVWIzX+j8j4CUVFcTjpIqDSRaSa1Wo2LbWY5at+AStEgLOIQ==
    # Deprecated: This field is deprecated and replaced by \"accountKeySecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :account_key

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the account key is stored.
    # Note: When provided, 'accountKey' field must not be provided.
    #
    # @return [String]
    attr_accessor :account_key_secret_id

    # Credential that uses a shared access signature (SAS) to authenticate to an Azure Service. This property is
    # required when 'authenticationType' is set to 'SHARED_ACCESS_SIGNATURE'.
    # e.g.: ?sv=2020-06-08&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2020-09-10T20:27:28Z&st=2022-08-05T12:27:28Z&spr=https&sig=C1IgHsiLBmTSStYkXXGLTP8it0xBrArcgCqOsZbXwIQ%3D
    # Deprecated: This field is deprecated and replaced by \"sasTokenSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :sas_token

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the sas token is stored.
    # Note: When provided, 'sasToken' field must not be provided.
    #
    # @return [String]
    attr_accessor :sas_token_secret_id

    # Azure tenant ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'.
    # e.g.: 14593954-d337-4a61-a364-9f758c64f97f
    #
    # @return [String]
    attr_accessor :azure_tenant_id

    # Azure client ID of the application. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'.
    # e.g.: 06ecaabf-8b80-4ec8-a0ec-20cbf463703d
    #
    # @return [String]
    attr_accessor :client_id

    # Azure client secret (aka application password) for authentication. This property is required when 'authenticationType' is set to 'AZURE_ACTIVE_DIRECTORY'.
    # e.g.: dO29Q~F5-VwnA.lZdd11xFF_t5NAXCaGwDl9NbT1
    # Deprecated: This field is deprecated and replaced by \"clientSecretSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :client_secret

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the client secret is stored.
    # Note: When provided, 'clientSecret' field must not be provided.
    #
    # @return [String]
    attr_accessor :client_secret_secret_id

    # Azure Storage service endpoint.
    # e.g: https://test.blob.core.windows.net
    #
    # @return [String]
    attr_accessor :endpoint

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'connectionType',
        'display_name': :'displayName',
        'description': :'description',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'vault_id': :'vaultId',
        'key_id': :'keyId',
        'nsg_ids': :'nsgIds',
        'subnet_id': :'subnetId',
        'routing_method': :'routingMethod',
        'does_use_secret_ids': :'doesUseSecretIds',
        'authentication_type': :'authenticationType',
        'account_name': :'accountName',
        'account_key': :'accountKey',
        'account_key_secret_id': :'accountKeySecretId',
        'sas_token': :'sasToken',
        'sas_token_secret_id': :'sasTokenSecretId',
        'azure_tenant_id': :'azureTenantId',
        'client_id': :'clientId',
        'client_secret': :'clientSecret',
        'client_secret_secret_id': :'clientSecretSecretId',
        'endpoint': :'endpoint'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'String',
        'display_name': :'String',
        'description': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'vault_id': :'String',
        'key_id': :'String',
        'nsg_ids': :'Array<String>',
        'subnet_id': :'String',
        'routing_method': :'String',
        'does_use_secret_ids': :'BOOLEAN',
        'authentication_type': :'String',
        'account_name': :'String',
        'account_key': :'String',
        'account_key_secret_id': :'String',
        'sas_token': :'String',
        'sas_token_secret_id': :'String',
        'azure_tenant_id': :'String',
        'client_id': :'String',
        'client_secret': :'String',
        'client_secret_secret_id': :'String',
        'endpoint': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#description #description} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#defined_tags #defined_tags} proprety
    # @option attributes [String] :vault_id The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#vault_id #vault_id} proprety
    # @option attributes [String] :key_id The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#key_id #key_id} proprety
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#nsg_ids #nsg_ids} proprety
    # @option attributes [String] :subnet_id The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#subnet_id #subnet_id} proprety
    # @option attributes [String] :routing_method The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#routing_method #routing_method} proprety
    # @option attributes [BOOLEAN] :does_use_secret_ids The value to assign to the {OCI::GoldenGate::Models::UpdateConnectionDetails#does_use_secret_ids #does_use_secret_ids} proprety
    # @option attributes [String] :authentication_type The value to assign to the {#authentication_type} property
    # @option attributes [String] :account_name The value to assign to the {#account_name} property
    # @option attributes [String] :account_key The value to assign to the {#account_key} property
    # @option attributes [String] :account_key_secret_id The value to assign to the {#account_key_secret_id} property
    # @option attributes [String] :sas_token The value to assign to the {#sas_token} property
    # @option attributes [String] :sas_token_secret_id The value to assign to the {#sas_token_secret_id} property
    # @option attributes [String] :azure_tenant_id The value to assign to the {#azure_tenant_id} property
    # @option attributes [String] :client_id The value to assign to the {#client_id} property
    # @option attributes [String] :client_secret The value to assign to the {#client_secret} property
    # @option attributes [String] :client_secret_secret_id The value to assign to the {#client_secret_secret_id} property
    # @option attributes [String] :endpoint The value to assign to the {#endpoint} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['connectionType'] = 'AZURE_DATA_LAKE_STORAGE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.authentication_type = attributes[:'authenticationType'] if attributes[:'authenticationType']

      raise 'You cannot provide both :authenticationType and :authentication_type' if attributes.key?(:'authenticationType') && attributes.key?(:'authentication_type')

      self.authentication_type = attributes[:'authentication_type'] if attributes[:'authentication_type']

      self.account_name = attributes[:'accountName'] if attributes[:'accountName']

      raise 'You cannot provide both :accountName and :account_name' if attributes.key?(:'accountName') && attributes.key?(:'account_name')

      self.account_name = attributes[:'account_name'] if attributes[:'account_name']

      self.account_key = attributes[:'accountKey'] if attributes[:'accountKey']

      raise 'You cannot provide both :accountKey and :account_key' if attributes.key?(:'accountKey') && attributes.key?(:'account_key')

      self.account_key = attributes[:'account_key'] if attributes[:'account_key']

      self.account_key_secret_id = attributes[:'accountKeySecretId'] if attributes[:'accountKeySecretId']

      raise 'You cannot provide both :accountKeySecretId and :account_key_secret_id' if attributes.key?(:'accountKeySecretId') && attributes.key?(:'account_key_secret_id')

      self.account_key_secret_id = attributes[:'account_key_secret_id'] if attributes[:'account_key_secret_id']

      self.sas_token = attributes[:'sasToken'] if attributes[:'sasToken']

      raise 'You cannot provide both :sasToken and :sas_token' if attributes.key?(:'sasToken') && attributes.key?(:'sas_token')

      self.sas_token = attributes[:'sas_token'] if attributes[:'sas_token']

      self.sas_token_secret_id = attributes[:'sasTokenSecretId'] if attributes[:'sasTokenSecretId']

      raise 'You cannot provide both :sasTokenSecretId and :sas_token_secret_id' if attributes.key?(:'sasTokenSecretId') && attributes.key?(:'sas_token_secret_id')

      self.sas_token_secret_id = attributes[:'sas_token_secret_id'] if attributes[:'sas_token_secret_id']

      self.azure_tenant_id = attributes[:'azureTenantId'] if attributes[:'azureTenantId']

      raise 'You cannot provide both :azureTenantId and :azure_tenant_id' if attributes.key?(:'azureTenantId') && attributes.key?(:'azure_tenant_id')

      self.azure_tenant_id = attributes[:'azure_tenant_id'] if attributes[:'azure_tenant_id']

      self.client_id = attributes[:'clientId'] if attributes[:'clientId']

      raise 'You cannot provide both :clientId and :client_id' if attributes.key?(:'clientId') && attributes.key?(:'client_id')

      self.client_id = attributes[:'client_id'] if attributes[:'client_id']

      self.client_secret = attributes[:'clientSecret'] if attributes[:'clientSecret']

      raise 'You cannot provide both :clientSecret and :client_secret' if attributes.key?(:'clientSecret') && attributes.key?(:'client_secret')

      self.client_secret = attributes[:'client_secret'] if attributes[:'client_secret']

      self.client_secret_secret_id = attributes[:'clientSecretSecretId'] if attributes[:'clientSecretSecretId']

      raise 'You cannot provide both :clientSecretSecretId and :client_secret_secret_id' if attributes.key?(:'clientSecretSecretId') && attributes.key?(:'client_secret_secret_id')

      self.client_secret_secret_id = attributes[:'client_secret_secret_id'] if attributes[:'client_secret_secret_id']

      self.endpoint = attributes[:'endpoint'] if attributes[:'endpoint']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        connection_type == other.connection_type &&
        display_name == other.display_name &&
        description == other.description &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        vault_id == other.vault_id &&
        key_id == other.key_id &&
        nsg_ids == other.nsg_ids &&
        subnet_id == other.subnet_id &&
        routing_method == other.routing_method &&
        does_use_secret_ids == other.does_use_secret_ids &&
        authentication_type == other.authentication_type &&
        account_name == other.account_name &&
        account_key == other.account_key &&
        account_key_secret_id == other.account_key_secret_id &&
        sas_token == other.sas_token &&
        sas_token_secret_id == other.sas_token_secret_id &&
        azure_tenant_id == other.azure_tenant_id &&
        client_id == other.client_id &&
        client_secret == other.client_secret &&
        client_secret_secret_id == other.client_secret_secret_id &&
        endpoint == other.endpoint
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [connection_type, display_name, description, freeform_tags, defined_tags, vault_id, key_id, nsg_ids, subnet_id, routing_method, does_use_secret_ids, authentication_type, account_name, account_key, account_key_secret_id, sas_token, sas_token_secret_id, azure_tenant_id, client_id, client_secret, client_secret_secret_id, endpoint].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
