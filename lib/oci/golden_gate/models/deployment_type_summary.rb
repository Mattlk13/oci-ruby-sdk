# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The meta-data specific on particular deployment type represented by deploymentType field.
  #
  class GoldenGate::Models::DeploymentTypeSummary
    CATEGORY_ENUM = [
      CATEGORY_DATA_REPLICATION = 'DATA_REPLICATION'.freeze,
      CATEGORY_STREAM_ANALYTICS = 'STREAM_ANALYTICS'.freeze,
      CATEGORY_DATA_TRANSFORMS = 'DATA_TRANSFORMS'.freeze,
      CATEGORY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DEPLOYMENT_TYPE_ENUM = [
      DEPLOYMENT_TYPE_OGG = 'OGG'.freeze,
      DEPLOYMENT_TYPE_DATABASE_ORACLE = 'DATABASE_ORACLE'.freeze,
      DEPLOYMENT_TYPE_BIGDATA = 'BIGDATA'.freeze,
      DEPLOYMENT_TYPE_DATABASE_MICROSOFT_SQLSERVER = 'DATABASE_MICROSOFT_SQLSERVER'.freeze,
      DEPLOYMENT_TYPE_DATABASE_MYSQL = 'DATABASE_MYSQL'.freeze,
      DEPLOYMENT_TYPE_DATABASE_POSTGRESQL = 'DATABASE_POSTGRESQL'.freeze,
      DEPLOYMENT_TYPE_DATABASE_DB2_ZOS = 'DATABASE_DB2ZOS'.freeze,
      DEPLOYMENT_TYPE_GGSA = 'GGSA'.freeze,
      DEPLOYMENT_TYPE_DATA_TRANSFORMS = 'DATA_TRANSFORMS'.freeze,
      DEPLOYMENT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CONNECTION_TYPES_ENUM = [
      CONNECTION_TYPES_GOLDENGATE = 'GOLDENGATE'.freeze,
      CONNECTION_TYPES_KAFKA = 'KAFKA'.freeze,
      CONNECTION_TYPES_KAFKA_SCHEMA_REGISTRY = 'KAFKA_SCHEMA_REGISTRY'.freeze,
      CONNECTION_TYPES_MYSQL = 'MYSQL'.freeze,
      CONNECTION_TYPES_JAVA_MESSAGE_SERVICE = 'JAVA_MESSAGE_SERVICE'.freeze,
      CONNECTION_TYPES_MICROSOFT_SQLSERVER = 'MICROSOFT_SQLSERVER'.freeze,
      CONNECTION_TYPES_OCI_OBJECT_STORAGE = 'OCI_OBJECT_STORAGE'.freeze,
      CONNECTION_TYPES_ORACLE = 'ORACLE'.freeze,
      CONNECTION_TYPES_AZURE_DATA_LAKE_STORAGE = 'AZURE_DATA_LAKE_STORAGE'.freeze,
      CONNECTION_TYPES_POSTGRESQL = 'POSTGRESQL'.freeze,
      CONNECTION_TYPES_AZURE_SYNAPSE_ANALYTICS = 'AZURE_SYNAPSE_ANALYTICS'.freeze,
      CONNECTION_TYPES_SNOWFLAKE = 'SNOWFLAKE'.freeze,
      CONNECTION_TYPES_AMAZON_S3 = 'AMAZON_S3'.freeze,
      CONNECTION_TYPES_HDFS = 'HDFS'.freeze,
      CONNECTION_TYPES_ORACLE_NOSQL = 'ORACLE_NOSQL'.freeze,
      CONNECTION_TYPES_MONGODB = 'MONGODB'.freeze,
      CONNECTION_TYPES_AMAZON_KINESIS = 'AMAZON_KINESIS'.freeze,
      CONNECTION_TYPES_AMAZON_REDSHIFT = 'AMAZON_REDSHIFT'.freeze,
      CONNECTION_TYPES_REDIS = 'REDIS'.freeze,
      CONNECTION_TYPES_ELASTICSEARCH = 'ELASTICSEARCH'.freeze,
      CONNECTION_TYPES_GENERIC = 'GENERIC'.freeze,
      CONNECTION_TYPES_GOOGLE_CLOUD_STORAGE = 'GOOGLE_CLOUD_STORAGE'.freeze,
      CONNECTION_TYPES_GOOGLE_BIGQUERY = 'GOOGLE_BIGQUERY'.freeze,
      CONNECTION_TYPES_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The deployment category defines the broad separation of the deployment type into three categories.
    # Currently the separation is 'DATA_REPLICATION', 'STREAM_ANALYTICS' and 'DATA_TRANSFORMS'.
    #
    # @return [String]
    attr_reader :category

    # **[Required]** An object's Display Name.
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The type of deployment, which can be any one of the Allowed values.
    # NOTE: Use of the value 'OGG' is maintained for backward compatibility purposes.
    #     Its use is discouraged in favor of 'DATABASE_ORACLE'.
    #
    # @return [String]
    attr_reader :deployment_type

    # An array of connectionTypes.
    #
    # @return [Array<String>]
    attr_reader :connection_types

    # List of the supported technologies generally.  The value is a freeform text string generally consisting
    # of a description of the technology and optionally the speific version(s) support.  For example,
    # [ \"Oracle Database 19c\", \"Oracle Exadata\", \"OCI Streaming\" ]
    #
    # @return [Array<String>]
    attr_accessor :source_technologies

    # List of the supported technologies generally.  The value is a freeform text string generally consisting
    # of a description of the technology and optionally the speific version(s) support.  For example,
    # [ \"Oracle Database 19c\", \"Oracle Exadata\", \"OCI Streaming\" ]
    #
    # @return [Array<String>]
    attr_accessor :target_technologies

    # Version of OGG
    #
    # @return [String]
    attr_accessor :ogg_version

    # The URL to the webpage listing the supported technologies.
    #
    # @return [String]
    attr_accessor :supported_technologies_url

    # The default admin username used by deployment.
    #
    # @return [String]
    attr_accessor :default_username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'category': :'category',
        'display_name': :'displayName',
        'deployment_type': :'deploymentType',
        'connection_types': :'connectionTypes',
        'source_technologies': :'sourceTechnologies',
        'target_technologies': :'targetTechnologies',
        'ogg_version': :'oggVersion',
        'supported_technologies_url': :'supportedTechnologiesUrl',
        'default_username': :'defaultUsername'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'category': :'String',
        'display_name': :'String',
        'deployment_type': :'String',
        'connection_types': :'Array<String>',
        'source_technologies': :'Array<String>',
        'target_technologies': :'Array<String>',
        'ogg_version': :'String',
        'supported_technologies_url': :'String',
        'default_username': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :category The value to assign to the {#category} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :deployment_type The value to assign to the {#deployment_type} property
    # @option attributes [Array<String>] :connection_types The value to assign to the {#connection_types} property
    # @option attributes [Array<String>] :source_technologies The value to assign to the {#source_technologies} property
    # @option attributes [Array<String>] :target_technologies The value to assign to the {#target_technologies} property
    # @option attributes [String] :ogg_version The value to assign to the {#ogg_version} property
    # @option attributes [String] :supported_technologies_url The value to assign to the {#supported_technologies_url} property
    # @option attributes [String] :default_username The value to assign to the {#default_username} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.category = attributes[:'category'] if attributes[:'category']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.deployment_type = attributes[:'deploymentType'] if attributes[:'deploymentType']

      raise 'You cannot provide both :deploymentType and :deployment_type' if attributes.key?(:'deploymentType') && attributes.key?(:'deployment_type')

      self.deployment_type = attributes[:'deployment_type'] if attributes[:'deployment_type']

      self.connection_types = attributes[:'connectionTypes'] if attributes[:'connectionTypes']

      raise 'You cannot provide both :connectionTypes and :connection_types' if attributes.key?(:'connectionTypes') && attributes.key?(:'connection_types')

      self.connection_types = attributes[:'connection_types'] if attributes[:'connection_types']

      self.source_technologies = attributes[:'sourceTechnologies'] if attributes[:'sourceTechnologies']

      raise 'You cannot provide both :sourceTechnologies and :source_technologies' if attributes.key?(:'sourceTechnologies') && attributes.key?(:'source_technologies')

      self.source_technologies = attributes[:'source_technologies'] if attributes[:'source_technologies']

      self.target_technologies = attributes[:'targetTechnologies'] if attributes[:'targetTechnologies']

      raise 'You cannot provide both :targetTechnologies and :target_technologies' if attributes.key?(:'targetTechnologies') && attributes.key?(:'target_technologies')

      self.target_technologies = attributes[:'target_technologies'] if attributes[:'target_technologies']

      self.ogg_version = attributes[:'oggVersion'] if attributes[:'oggVersion']

      raise 'You cannot provide both :oggVersion and :ogg_version' if attributes.key?(:'oggVersion') && attributes.key?(:'ogg_version')

      self.ogg_version = attributes[:'ogg_version'] if attributes[:'ogg_version']

      self.supported_technologies_url = attributes[:'supportedTechnologiesUrl'] if attributes[:'supportedTechnologiesUrl']

      raise 'You cannot provide both :supportedTechnologiesUrl and :supported_technologies_url' if attributes.key?(:'supportedTechnologiesUrl') && attributes.key?(:'supported_technologies_url')

      self.supported_technologies_url = attributes[:'supported_technologies_url'] if attributes[:'supported_technologies_url']

      self.default_username = attributes[:'defaultUsername'] if attributes[:'defaultUsername']

      raise 'You cannot provide both :defaultUsername and :default_username' if attributes.key?(:'defaultUsername') && attributes.key?(:'default_username')

      self.default_username = attributes[:'default_username'] if attributes[:'default_username']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      # rubocop:disable Style/ConditionalAssignment
      if category && !CATEGORY_ENUM.include?(category)
        OCI.logger.debug("Unknown value for 'category' [" + category + "]. Mapping to 'CATEGORY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @category = CATEGORY_UNKNOWN_ENUM_VALUE
      else
        @category = category
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_type Object to be assigned
    def deployment_type=(deployment_type)
      # rubocop:disable Style/ConditionalAssignment
      if deployment_type && !DEPLOYMENT_TYPE_ENUM.include?(deployment_type)
        OCI.logger.debug("Unknown value for 'deployment_type' [" + deployment_type + "]. Mapping to 'DEPLOYMENT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @deployment_type = DEPLOYMENT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @deployment_type = deployment_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] connection_types Object to be assigned
    def connection_types=(connection_types)
      # rubocop:disable Style/ConditionalAssignment
      if connection_types.nil?
        @connection_types = nil
      else
        @connection_types =
          connection_types.collect do |item|
            if CONNECTION_TYPES_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'connection_types' [#{item}]. Mapping to 'CONNECTION_TYPES_UNKNOWN_ENUM_VALUE'") if OCI.logger
              CONNECTION_TYPES_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        category == other.category &&
        display_name == other.display_name &&
        deployment_type == other.deployment_type &&
        connection_types == other.connection_types &&
        source_technologies == other.source_technologies &&
        target_technologies == other.target_technologies &&
        ogg_version == other.ogg_version &&
        supported_technologies_url == other.supported_technologies_url &&
        default_username == other.default_username
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [category, display_name, deployment_type, connection_types, source_technologies, target_technologies, ogg_version, supported_technologies_url, default_username].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
