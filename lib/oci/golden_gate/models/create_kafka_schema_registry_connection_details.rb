# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require_relative 'create_connection_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about a new Kafka (e.g. Confluent) Schema Registry Connection.
  #
  class GoldenGate::Models::CreateKafkaSchemaRegistryConnectionDetails < GoldenGate::Models::CreateConnectionDetails
    # **[Required]** The Kafka (e.g. Confluent) Schema Registry technology type.
    #
    # @return [String]
    attr_accessor :technology_type

    # **[Required]** Kafka Schema Registry URL.
    # e.g.: 'https://server1.us.oracle.com:8081'
    #
    # @return [String]
    attr_accessor :url

    # **[Required]** Used authentication mechanism to access Schema Registry.
    #
    # @return [String]
    attr_accessor :authentication_type

    # The username to access Schema Registry using basic authentication.
    # This value is injected into 'schema.registry.basic.auth.user.info=user:password' configuration property.
    #
    # @return [String]
    attr_accessor :username

    # The password to access Schema Registry using basic authentication.
    # This value is injected into 'schema.registry.basic.auth.user.info=user:password' configuration property.
    # Deprecated: This field is deprecated and replaced by \"passwordSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :password

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the Kafka Schema Registry password is stored,
    # The password to access Schema Registry using basic authentication.
    # This value is injected into 'schema.registry.basic.auth.user.info=user:password' configuration property.
    # Note: When provided, 'password' field must not be provided.
    #
    # @return [String]
    attr_accessor :password_secret_id

    # The base64 encoded content of the TrustStore file.
    # Deprecated: This field is deprecated and replaced by \"trustStoreSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :trust_store

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the TrustStore file.
    # Note: When provided, 'trustStore' field must not be provided.
    #
    # @return [String]
    attr_accessor :trust_store_secret_id

    # The TrustStore password.
    # Deprecated: This field is deprecated and replaced by \"trustStorePasswordSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :trust_store_password

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl TrustStore password is stored.
    # Note: When provided, 'trustStorePassword' field must not be provided.
    #
    # @return [String]
    attr_accessor :trust_store_password_secret_id

    # The base64 encoded content of the KeyStore file.
    # Deprecated: This field is deprecated and replaced by \"keyStoreSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :key_store

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the KeyStore file.
    # Note: When provided, 'keyStore' field must not be provided.
    #
    # @return [String]
    attr_accessor :key_store_secret_id

    # The KeyStore password.
    # Deprecated: This field is deprecated and replaced by \"keyStorePasswordSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :key_store_password

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the kafka Ssl KeyStore password is stored.
    # Note: When provided, 'keyStorePassword' field must not be provided.
    #
    # @return [String]
    attr_accessor :key_store_password_secret_id

    # The password for the cert inside the KeyStore.
    # In case it differs from the KeyStore password, it should be provided.
    # Deprecated: This field is deprecated and replaced by \"sslKeyPasswordSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :ssl_key_password

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the cert inside the KeyStore.
    # In case it differs from the KeyStore password, it should be provided.
    # Note: When provided, 'sslKeyPassword' field must not be provided.
    #
    # @return [String]
    attr_accessor :ssl_key_password_secret_id

    # Deprecated: this field will be removed in future versions. Either specify the private IP in the connectionString or host
    # field, or make sure the host name is resolvable in the target VCN.
    #
    # The private IP address of the connection's endpoint in the customer's VCN, typically a
    # database endpoint or a big data endpoint (e.g. Kafka bootstrap server).
    # In case the privateIp is provided, the subnetId must also be provided.
    # In case the privateIp (and the subnetId) is not provided it is assumed the datasource is publicly accessible.
    # In case the connection is accessible only privately, the lack of privateIp will result in not being able to access the connection.
    #
    # @return [String]
    attr_accessor :private_ip

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'connectionType',
        'display_name': :'displayName',
        'description': :'description',
        'compartment_id': :'compartmentId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'locks': :'locks',
        'vault_id': :'vaultId',
        'key_id': :'keyId',
        'nsg_ids': :'nsgIds',
        'subnet_id': :'subnetId',
        'routing_method': :'routingMethod',
        'does_use_secret_ids': :'doesUseSecretIds',
        'technology_type': :'technologyType',
        'url': :'url',
        'authentication_type': :'authenticationType',
        'username': :'username',
        'password': :'password',
        'password_secret_id': :'passwordSecretId',
        'trust_store': :'trustStore',
        'trust_store_secret_id': :'trustStoreSecretId',
        'trust_store_password': :'trustStorePassword',
        'trust_store_password_secret_id': :'trustStorePasswordSecretId',
        'key_store': :'keyStore',
        'key_store_secret_id': :'keyStoreSecretId',
        'key_store_password': :'keyStorePassword',
        'key_store_password_secret_id': :'keyStorePasswordSecretId',
        'ssl_key_password': :'sslKeyPassword',
        'ssl_key_password_secret_id': :'sslKeyPasswordSecretId',
        'private_ip': :'privateIp'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'String',
        'display_name': :'String',
        'description': :'String',
        'compartment_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'locks': :'Array<OCI::GoldenGate::Models::AddResourceLockDetails>',
        'vault_id': :'String',
        'key_id': :'String',
        'nsg_ids': :'Array<String>',
        'subnet_id': :'String',
        'routing_method': :'String',
        'does_use_secret_ids': :'BOOLEAN',
        'technology_type': :'String',
        'url': :'String',
        'authentication_type': :'String',
        'username': :'String',
        'password': :'String',
        'password_secret_id': :'String',
        'trust_store': :'String',
        'trust_store_secret_id': :'String',
        'trust_store_password': :'String',
        'trust_store_password_secret_id': :'String',
        'key_store': :'String',
        'key_store_secret_id': :'String',
        'key_store_password': :'String',
        'key_store_password_secret_id': :'String',
        'ssl_key_password': :'String',
        'ssl_key_password_secret_id': :'String',
        'private_ip': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#description #description} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#compartment_id #compartment_id} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#defined_tags #defined_tags} proprety
    # @option attributes [Array<OCI::GoldenGate::Models::AddResourceLockDetails>] :locks The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#locks #locks} proprety
    # @option attributes [String] :vault_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#vault_id #vault_id} proprety
    # @option attributes [String] :key_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#key_id #key_id} proprety
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#nsg_ids #nsg_ids} proprety
    # @option attributes [String] :subnet_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#subnet_id #subnet_id} proprety
    # @option attributes [String] :routing_method The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#routing_method #routing_method} proprety
    # @option attributes [BOOLEAN] :does_use_secret_ids The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#does_use_secret_ids #does_use_secret_ids} proprety
    # @option attributes [String] :technology_type The value to assign to the {#technology_type} property
    # @option attributes [String] :url The value to assign to the {#url} property
    # @option attributes [String] :authentication_type The value to assign to the {#authentication_type} property
    # @option attributes [String] :username The value to assign to the {#username} property
    # @option attributes [String] :password The value to assign to the {#password} property
    # @option attributes [String] :password_secret_id The value to assign to the {#password_secret_id} property
    # @option attributes [String] :trust_store The value to assign to the {#trust_store} property
    # @option attributes [String] :trust_store_secret_id The value to assign to the {#trust_store_secret_id} property
    # @option attributes [String] :trust_store_password The value to assign to the {#trust_store_password} property
    # @option attributes [String] :trust_store_password_secret_id The value to assign to the {#trust_store_password_secret_id} property
    # @option attributes [String] :key_store The value to assign to the {#key_store} property
    # @option attributes [String] :key_store_secret_id The value to assign to the {#key_store_secret_id} property
    # @option attributes [String] :key_store_password The value to assign to the {#key_store_password} property
    # @option attributes [String] :key_store_password_secret_id The value to assign to the {#key_store_password_secret_id} property
    # @option attributes [String] :ssl_key_password The value to assign to the {#ssl_key_password} property
    # @option attributes [String] :ssl_key_password_secret_id The value to assign to the {#ssl_key_password_secret_id} property
    # @option attributes [String] :private_ip The value to assign to the {#private_ip} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['connectionType'] = 'KAFKA_SCHEMA_REGISTRY'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.technology_type = attributes[:'technologyType'] if attributes[:'technologyType']

      raise 'You cannot provide both :technologyType and :technology_type' if attributes.key?(:'technologyType') && attributes.key?(:'technology_type')

      self.technology_type = attributes[:'technology_type'] if attributes[:'technology_type']

      self.url = attributes[:'url'] if attributes[:'url']

      self.authentication_type = attributes[:'authenticationType'] if attributes[:'authenticationType']

      raise 'You cannot provide both :authenticationType and :authentication_type' if attributes.key?(:'authenticationType') && attributes.key?(:'authentication_type')

      self.authentication_type = attributes[:'authentication_type'] if attributes[:'authentication_type']

      self.username = attributes[:'username'] if attributes[:'username']

      self.password = attributes[:'password'] if attributes[:'password']

      self.password_secret_id = attributes[:'passwordSecretId'] if attributes[:'passwordSecretId']

      raise 'You cannot provide both :passwordSecretId and :password_secret_id' if attributes.key?(:'passwordSecretId') && attributes.key?(:'password_secret_id')

      self.password_secret_id = attributes[:'password_secret_id'] if attributes[:'password_secret_id']

      self.trust_store = attributes[:'trustStore'] if attributes[:'trustStore']

      raise 'You cannot provide both :trustStore and :trust_store' if attributes.key?(:'trustStore') && attributes.key?(:'trust_store')

      self.trust_store = attributes[:'trust_store'] if attributes[:'trust_store']

      self.trust_store_secret_id = attributes[:'trustStoreSecretId'] if attributes[:'trustStoreSecretId']

      raise 'You cannot provide both :trustStoreSecretId and :trust_store_secret_id' if attributes.key?(:'trustStoreSecretId') && attributes.key?(:'trust_store_secret_id')

      self.trust_store_secret_id = attributes[:'trust_store_secret_id'] if attributes[:'trust_store_secret_id']

      self.trust_store_password = attributes[:'trustStorePassword'] if attributes[:'trustStorePassword']

      raise 'You cannot provide both :trustStorePassword and :trust_store_password' if attributes.key?(:'trustStorePassword') && attributes.key?(:'trust_store_password')

      self.trust_store_password = attributes[:'trust_store_password'] if attributes[:'trust_store_password']

      self.trust_store_password_secret_id = attributes[:'trustStorePasswordSecretId'] if attributes[:'trustStorePasswordSecretId']

      raise 'You cannot provide both :trustStorePasswordSecretId and :trust_store_password_secret_id' if attributes.key?(:'trustStorePasswordSecretId') && attributes.key?(:'trust_store_password_secret_id')

      self.trust_store_password_secret_id = attributes[:'trust_store_password_secret_id'] if attributes[:'trust_store_password_secret_id']

      self.key_store = attributes[:'keyStore'] if attributes[:'keyStore']

      raise 'You cannot provide both :keyStore and :key_store' if attributes.key?(:'keyStore') && attributes.key?(:'key_store')

      self.key_store = attributes[:'key_store'] if attributes[:'key_store']

      self.key_store_secret_id = attributes[:'keyStoreSecretId'] if attributes[:'keyStoreSecretId']

      raise 'You cannot provide both :keyStoreSecretId and :key_store_secret_id' if attributes.key?(:'keyStoreSecretId') && attributes.key?(:'key_store_secret_id')

      self.key_store_secret_id = attributes[:'key_store_secret_id'] if attributes[:'key_store_secret_id']

      self.key_store_password = attributes[:'keyStorePassword'] if attributes[:'keyStorePassword']

      raise 'You cannot provide both :keyStorePassword and :key_store_password' if attributes.key?(:'keyStorePassword') && attributes.key?(:'key_store_password')

      self.key_store_password = attributes[:'key_store_password'] if attributes[:'key_store_password']

      self.key_store_password_secret_id = attributes[:'keyStorePasswordSecretId'] if attributes[:'keyStorePasswordSecretId']

      raise 'You cannot provide both :keyStorePasswordSecretId and :key_store_password_secret_id' if attributes.key?(:'keyStorePasswordSecretId') && attributes.key?(:'key_store_password_secret_id')

      self.key_store_password_secret_id = attributes[:'key_store_password_secret_id'] if attributes[:'key_store_password_secret_id']

      self.ssl_key_password = attributes[:'sslKeyPassword'] if attributes[:'sslKeyPassword']

      raise 'You cannot provide both :sslKeyPassword and :ssl_key_password' if attributes.key?(:'sslKeyPassword') && attributes.key?(:'ssl_key_password')

      self.ssl_key_password = attributes[:'ssl_key_password'] if attributes[:'ssl_key_password']

      self.ssl_key_password_secret_id = attributes[:'sslKeyPasswordSecretId'] if attributes[:'sslKeyPasswordSecretId']

      raise 'You cannot provide both :sslKeyPasswordSecretId and :ssl_key_password_secret_id' if attributes.key?(:'sslKeyPasswordSecretId') && attributes.key?(:'ssl_key_password_secret_id')

      self.ssl_key_password_secret_id = attributes[:'ssl_key_password_secret_id'] if attributes[:'ssl_key_password_secret_id']

      self.private_ip = attributes[:'privateIp'] if attributes[:'privateIp']

      raise 'You cannot provide both :privateIp and :private_ip' if attributes.key?(:'privateIp') && attributes.key?(:'private_ip')

      self.private_ip = attributes[:'private_ip'] if attributes[:'private_ip']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        connection_type == other.connection_type &&
        display_name == other.display_name &&
        description == other.description &&
        compartment_id == other.compartment_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        locks == other.locks &&
        vault_id == other.vault_id &&
        key_id == other.key_id &&
        nsg_ids == other.nsg_ids &&
        subnet_id == other.subnet_id &&
        routing_method == other.routing_method &&
        does_use_secret_ids == other.does_use_secret_ids &&
        technology_type == other.technology_type &&
        url == other.url &&
        authentication_type == other.authentication_type &&
        username == other.username &&
        password == other.password &&
        password_secret_id == other.password_secret_id &&
        trust_store == other.trust_store &&
        trust_store_secret_id == other.trust_store_secret_id &&
        trust_store_password == other.trust_store_password &&
        trust_store_password_secret_id == other.trust_store_password_secret_id &&
        key_store == other.key_store &&
        key_store_secret_id == other.key_store_secret_id &&
        key_store_password == other.key_store_password &&
        key_store_password_secret_id == other.key_store_password_secret_id &&
        ssl_key_password == other.ssl_key_password &&
        ssl_key_password_secret_id == other.ssl_key_password_secret_id &&
        private_ip == other.private_ip
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [connection_type, display_name, description, compartment_id, freeform_tags, defined_tags, locks, vault_id, key_id, nsg_ids, subnet_id, routing_method, does_use_secret_ids, technology_type, url, authentication_type, username, password, password_secret_id, trust_store, trust_store_secret_id, trust_store_password, trust_store_password_secret_id, key_store, key_store_secret_id, key_store_password, key_store_password_secret_id, ssl_key_password, ssl_key_password_secret_id, private_ip].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
