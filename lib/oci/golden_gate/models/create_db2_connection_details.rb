# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require_relative 'create_connection_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about a new DB2 Connection.
  #
  class GoldenGate::Models::CreateDb2ConnectionDetails < GoldenGate::Models::CreateConnectionDetails
    # **[Required]** The DB2 technology type.
    # @return [String]
    attr_accessor :technology_type

    # **[Required]** The name of the database.
    #
    # @return [String]
    attr_accessor :database_name

    # **[Required]** The name or address of a host.
    #
    # @return [String]
    attr_accessor :host

    # **[Required]** The port of an endpoint usually specified for a connection.
    #
    # @return [Integer]
    attr_accessor :port

    # **[Required]** The username Oracle GoldenGate uses to connect to the DB2 database.
    # This username must already exist and be available by the DB2 to be connected to.
    #
    # @return [String]
    attr_accessor :username

    # The password Oracle GoldenGate uses to connect the associated DB2 database.
    # Deprecated: This field is deprecated and replaced by \"passwordSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :password

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored,
    # that Oracle GoldenGate uses to connect the associated DB2 database.
    # Note: When provided, 'password' field must not be provided.
    #
    # @return [String]
    attr_accessor :password_secret_id

    # An array of name-value pair attribute entries.
    # Used as additional parameters in connection string.
    #
    # @return [Array<OCI::GoldenGate::Models::NameValuePair>]
    attr_accessor :additional_attributes

    # **[Required]** Security protocol for the DB2 database.
    # @return [String]
    attr_accessor :security_protocol

    # The base64 encoded keystore file created at the client containing the server certificate / CA root certificate.
    # Deprecated: This field is deprecated and replaced by \"sslClientKeystoredbSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :ssl_client_keystoredb

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the keystore file stored,
    # which created at the client containing the server certificate / CA root certificate.
    # Note: When provided, 'sslClientKeystoredb' field must not be provided.
    #
    # @return [String]
    attr_accessor :ssl_client_keystoredb_secret_id

    # The base64 encoded keystash file which contains the encrypted password to the key database file.
    # Deprecated: This field is deprecated and replaced by \"sslClientKeystashSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :ssl_client_keystash

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the keystash file is stored,
    # which contains the encrypted password to the key database file.
    # Note: When provided, 'sslClientKeystash' field must not be provided.
    #
    # @return [String]
    attr_accessor :ssl_client_keystash_secret_id

    # The base64 encoded file which contains the self-signed server certificate / Certificate Authority (CA) certificate.
    #
    # @return [String]
    attr_accessor :ssl_server_certificate

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'connectionType',
        'display_name': :'displayName',
        'description': :'description',
        'compartment_id': :'compartmentId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'locks': :'locks',
        'vault_id': :'vaultId',
        'key_id': :'keyId',
        'nsg_ids': :'nsgIds',
        'subnet_id': :'subnetId',
        'routing_method': :'routingMethod',
        'does_use_secret_ids': :'doesUseSecretIds',
        'technology_type': :'technologyType',
        'database_name': :'databaseName',
        'host': :'host',
        'port': :'port',
        'username': :'username',
        'password': :'password',
        'password_secret_id': :'passwordSecretId',
        'additional_attributes': :'additionalAttributes',
        'security_protocol': :'securityProtocol',
        'ssl_client_keystoredb': :'sslClientKeystoredb',
        'ssl_client_keystoredb_secret_id': :'sslClientKeystoredbSecretId',
        'ssl_client_keystash': :'sslClientKeystash',
        'ssl_client_keystash_secret_id': :'sslClientKeystashSecretId',
        'ssl_server_certificate': :'sslServerCertificate'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'String',
        'display_name': :'String',
        'description': :'String',
        'compartment_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'locks': :'Array<OCI::GoldenGate::Models::AddResourceLockDetails>',
        'vault_id': :'String',
        'key_id': :'String',
        'nsg_ids': :'Array<String>',
        'subnet_id': :'String',
        'routing_method': :'String',
        'does_use_secret_ids': :'BOOLEAN',
        'technology_type': :'String',
        'database_name': :'String',
        'host': :'String',
        'port': :'Integer',
        'username': :'String',
        'password': :'String',
        'password_secret_id': :'String',
        'additional_attributes': :'Array<OCI::GoldenGate::Models::NameValuePair>',
        'security_protocol': :'String',
        'ssl_client_keystoredb': :'String',
        'ssl_client_keystoredb_secret_id': :'String',
        'ssl_client_keystash': :'String',
        'ssl_client_keystash_secret_id': :'String',
        'ssl_server_certificate': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#description #description} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#compartment_id #compartment_id} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#defined_tags #defined_tags} proprety
    # @option attributes [Array<OCI::GoldenGate::Models::AddResourceLockDetails>] :locks The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#locks #locks} proprety
    # @option attributes [String] :vault_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#vault_id #vault_id} proprety
    # @option attributes [String] :key_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#key_id #key_id} proprety
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#nsg_ids #nsg_ids} proprety
    # @option attributes [String] :subnet_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#subnet_id #subnet_id} proprety
    # @option attributes [String] :routing_method The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#routing_method #routing_method} proprety
    # @option attributes [BOOLEAN] :does_use_secret_ids The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#does_use_secret_ids #does_use_secret_ids} proprety
    # @option attributes [String] :technology_type The value to assign to the {#technology_type} property
    # @option attributes [String] :database_name The value to assign to the {#database_name} property
    # @option attributes [String] :host The value to assign to the {#host} property
    # @option attributes [Integer] :port The value to assign to the {#port} property
    # @option attributes [String] :username The value to assign to the {#username} property
    # @option attributes [String] :password The value to assign to the {#password} property
    # @option attributes [String] :password_secret_id The value to assign to the {#password_secret_id} property
    # @option attributes [Array<OCI::GoldenGate::Models::NameValuePair>] :additional_attributes The value to assign to the {#additional_attributes} property
    # @option attributes [String] :security_protocol The value to assign to the {#security_protocol} property
    # @option attributes [String] :ssl_client_keystoredb The value to assign to the {#ssl_client_keystoredb} property
    # @option attributes [String] :ssl_client_keystoredb_secret_id The value to assign to the {#ssl_client_keystoredb_secret_id} property
    # @option attributes [String] :ssl_client_keystash The value to assign to the {#ssl_client_keystash} property
    # @option attributes [String] :ssl_client_keystash_secret_id The value to assign to the {#ssl_client_keystash_secret_id} property
    # @option attributes [String] :ssl_server_certificate The value to assign to the {#ssl_server_certificate} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['connectionType'] = 'DB2'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.technology_type = attributes[:'technologyType'] if attributes[:'technologyType']

      raise 'You cannot provide both :technologyType and :technology_type' if attributes.key?(:'technologyType') && attributes.key?(:'technology_type')

      self.technology_type = attributes[:'technology_type'] if attributes[:'technology_type']

      self.database_name = attributes[:'databaseName'] if attributes[:'databaseName']

      raise 'You cannot provide both :databaseName and :database_name' if attributes.key?(:'databaseName') && attributes.key?(:'database_name')

      self.database_name = attributes[:'database_name'] if attributes[:'database_name']

      self.host = attributes[:'host'] if attributes[:'host']

      self.port = attributes[:'port'] if attributes[:'port']

      self.username = attributes[:'username'] if attributes[:'username']

      self.password = attributes[:'password'] if attributes[:'password']

      self.password_secret_id = attributes[:'passwordSecretId'] if attributes[:'passwordSecretId']

      raise 'You cannot provide both :passwordSecretId and :password_secret_id' if attributes.key?(:'passwordSecretId') && attributes.key?(:'password_secret_id')

      self.password_secret_id = attributes[:'password_secret_id'] if attributes[:'password_secret_id']

      self.additional_attributes = attributes[:'additionalAttributes'] if attributes[:'additionalAttributes']

      raise 'You cannot provide both :additionalAttributes and :additional_attributes' if attributes.key?(:'additionalAttributes') && attributes.key?(:'additional_attributes')

      self.additional_attributes = attributes[:'additional_attributes'] if attributes[:'additional_attributes']

      self.security_protocol = attributes[:'securityProtocol'] if attributes[:'securityProtocol']

      raise 'You cannot provide both :securityProtocol and :security_protocol' if attributes.key?(:'securityProtocol') && attributes.key?(:'security_protocol')

      self.security_protocol = attributes[:'security_protocol'] if attributes[:'security_protocol']

      self.ssl_client_keystoredb = attributes[:'sslClientKeystoredb'] if attributes[:'sslClientKeystoredb']

      raise 'You cannot provide both :sslClientKeystoredb and :ssl_client_keystoredb' if attributes.key?(:'sslClientKeystoredb') && attributes.key?(:'ssl_client_keystoredb')

      self.ssl_client_keystoredb = attributes[:'ssl_client_keystoredb'] if attributes[:'ssl_client_keystoredb']

      self.ssl_client_keystoredb_secret_id = attributes[:'sslClientKeystoredbSecretId'] if attributes[:'sslClientKeystoredbSecretId']

      raise 'You cannot provide both :sslClientKeystoredbSecretId and :ssl_client_keystoredb_secret_id' if attributes.key?(:'sslClientKeystoredbSecretId') && attributes.key?(:'ssl_client_keystoredb_secret_id')

      self.ssl_client_keystoredb_secret_id = attributes[:'ssl_client_keystoredb_secret_id'] if attributes[:'ssl_client_keystoredb_secret_id']

      self.ssl_client_keystash = attributes[:'sslClientKeystash'] if attributes[:'sslClientKeystash']

      raise 'You cannot provide both :sslClientKeystash and :ssl_client_keystash' if attributes.key?(:'sslClientKeystash') && attributes.key?(:'ssl_client_keystash')

      self.ssl_client_keystash = attributes[:'ssl_client_keystash'] if attributes[:'ssl_client_keystash']

      self.ssl_client_keystash_secret_id = attributes[:'sslClientKeystashSecretId'] if attributes[:'sslClientKeystashSecretId']

      raise 'You cannot provide both :sslClientKeystashSecretId and :ssl_client_keystash_secret_id' if attributes.key?(:'sslClientKeystashSecretId') && attributes.key?(:'ssl_client_keystash_secret_id')

      self.ssl_client_keystash_secret_id = attributes[:'ssl_client_keystash_secret_id'] if attributes[:'ssl_client_keystash_secret_id']

      self.ssl_server_certificate = attributes[:'sslServerCertificate'] if attributes[:'sslServerCertificate']

      raise 'You cannot provide both :sslServerCertificate and :ssl_server_certificate' if attributes.key?(:'sslServerCertificate') && attributes.key?(:'ssl_server_certificate')

      self.ssl_server_certificate = attributes[:'ssl_server_certificate'] if attributes[:'ssl_server_certificate']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        connection_type == other.connection_type &&
        display_name == other.display_name &&
        description == other.description &&
        compartment_id == other.compartment_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        locks == other.locks &&
        vault_id == other.vault_id &&
        key_id == other.key_id &&
        nsg_ids == other.nsg_ids &&
        subnet_id == other.subnet_id &&
        routing_method == other.routing_method &&
        does_use_secret_ids == other.does_use_secret_ids &&
        technology_type == other.technology_type &&
        database_name == other.database_name &&
        host == other.host &&
        port == other.port &&
        username == other.username &&
        password == other.password &&
        password_secret_id == other.password_secret_id &&
        additional_attributes == other.additional_attributes &&
        security_protocol == other.security_protocol &&
        ssl_client_keystoredb == other.ssl_client_keystoredb &&
        ssl_client_keystoredb_secret_id == other.ssl_client_keystoredb_secret_id &&
        ssl_client_keystash == other.ssl_client_keystash &&
        ssl_client_keystash_secret_id == other.ssl_client_keystash_secret_id &&
        ssl_server_certificate == other.ssl_server_certificate
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [connection_type, display_name, description, compartment_id, freeform_tags, defined_tags, locks, vault_id, key_id, nsg_ids, subnet_id, routing_method, does_use_secret_ids, technology_type, database_name, host, port, username, password, password_secret_id, additional_attributes, security_protocol, ssl_client_keystoredb, ssl_client_keystoredb_secret_id, ssl_client_keystash, ssl_client_keystash_secret_id, ssl_server_certificate].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
