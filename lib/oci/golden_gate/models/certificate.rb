# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Certificate data.
  class GoldenGate::Models::Certificate
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The identifier key (unique name in the scope of the deployment) of the certificate being referenced.
    # It must be 1 to 32 characters long, must contain only alphanumeric characters and must start with a letter.
    #
    # @return [String]
    attr_accessor :key

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the deployment being referenced.
    #
    # @return [String]
    attr_accessor :deployment_id

    # **[Required]** The base64 encoded content of the PEM file containing the SSL certificate.
    #
    # @return [String]
    attr_accessor :certificate_content

    # **[Required]** The Certificate issuer.
    #
    # @return [String]
    attr_accessor :issuer

    # **[Required]** Indicates if the certificate is self signed.
    #
    # @return [BOOLEAN]
    attr_accessor :is_self_signed

    # **[Required]** The Certificate md5Hash.
    #
    # @return [String]
    attr_accessor :md5_hash

    # **[Required]** The Certificate public key.
    #
    # @return [String]
    attr_accessor :public_key

    # **[Required]** The Certificate public key algorithm.
    #
    # @return [String]
    attr_accessor :public_key_algorithm

    # **[Required]** The Certificate public key size.
    #
    # @return [Integer]
    attr_accessor :public_key_size

    # **[Required]** The Certificate serial.
    #
    # @return [String]
    attr_accessor :serial

    # **[Required]** The Certificate subject.
    #
    # @return [String]
    attr_accessor :subject

    # **[Required]** The time the certificate is valid from. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_valid_from

    # **[Required]** The time the certificate is valid to. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_valid_to

    # **[Required]** The Certificate version.
    #
    # @return [String]
    attr_accessor :version

    # **[Required]** The Certificate sha1 hash.
    #
    # @return [String]
    attr_accessor :sha1_hash

    # **[Required]** The Certificate authority key id.
    #
    # @return [String]
    attr_accessor :authority_key_id

    # **[Required]** Indicates if the certificate is ca.
    #
    # @return [BOOLEAN]
    attr_accessor :is_ca

    # **[Required]** The Certificate subject key id.
    #
    # @return [String]
    attr_accessor :subject_key_id

    # **[Required]** Possible certificate lifecycle states.
    #
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The time the resource was created. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_created

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'key',
        'deployment_id': :'deploymentId',
        'certificate_content': :'certificateContent',
        'issuer': :'issuer',
        'is_self_signed': :'isSelfSigned',
        'md5_hash': :'md5Hash',
        'public_key': :'publicKey',
        'public_key_algorithm': :'publicKeyAlgorithm',
        'public_key_size': :'publicKeySize',
        'serial': :'serial',
        'subject': :'subject',
        'time_valid_from': :'timeValidFrom',
        'time_valid_to': :'timeValidTo',
        'version': :'version',
        'sha1_hash': :'sha1Hash',
        'authority_key_id': :'authorityKeyId',
        'is_ca': :'isCa',
        'subject_key_id': :'subjectKeyId',
        'lifecycle_state': :'lifecycleState',
        'time_created': :'timeCreated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'String',
        'deployment_id': :'String',
        'certificate_content': :'String',
        'issuer': :'String',
        'is_self_signed': :'BOOLEAN',
        'md5_hash': :'String',
        'public_key': :'String',
        'public_key_algorithm': :'String',
        'public_key_size': :'Integer',
        'serial': :'String',
        'subject': :'String',
        'time_valid_from': :'DateTime',
        'time_valid_to': :'DateTime',
        'version': :'String',
        'sha1_hash': :'String',
        'authority_key_id': :'String',
        'is_ca': :'BOOLEAN',
        'subject_key_id': :'String',
        'lifecycle_state': :'String',
        'time_created': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [String] :deployment_id The value to assign to the {#deployment_id} property
    # @option attributes [String] :certificate_content The value to assign to the {#certificate_content} property
    # @option attributes [String] :issuer The value to assign to the {#issuer} property
    # @option attributes [BOOLEAN] :is_self_signed The value to assign to the {#is_self_signed} property
    # @option attributes [String] :md5_hash The value to assign to the {#md5_hash} property
    # @option attributes [String] :public_key The value to assign to the {#public_key} property
    # @option attributes [String] :public_key_algorithm The value to assign to the {#public_key_algorithm} property
    # @option attributes [Integer] :public_key_size The value to assign to the {#public_key_size} property
    # @option attributes [String] :serial The value to assign to the {#serial} property
    # @option attributes [String] :subject The value to assign to the {#subject} property
    # @option attributes [DateTime] :time_valid_from The value to assign to the {#time_valid_from} property
    # @option attributes [DateTime] :time_valid_to The value to assign to the {#time_valid_to} property
    # @option attributes [String] :version The value to assign to the {#version} property
    # @option attributes [String] :sha1_hash The value to assign to the {#sha1_hash} property
    # @option attributes [String] :authority_key_id The value to assign to the {#authority_key_id} property
    # @option attributes [BOOLEAN] :is_ca The value to assign to the {#is_ca} property
    # @option attributes [String] :subject_key_id The value to assign to the {#subject_key_id} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.key = attributes[:'key'] if attributes[:'key']

      self.deployment_id = attributes[:'deploymentId'] if attributes[:'deploymentId']

      raise 'You cannot provide both :deploymentId and :deployment_id' if attributes.key?(:'deploymentId') && attributes.key?(:'deployment_id')

      self.deployment_id = attributes[:'deployment_id'] if attributes[:'deployment_id']

      self.certificate_content = attributes[:'certificateContent'] if attributes[:'certificateContent']

      raise 'You cannot provide both :certificateContent and :certificate_content' if attributes.key?(:'certificateContent') && attributes.key?(:'certificate_content')

      self.certificate_content = attributes[:'certificate_content'] if attributes[:'certificate_content']

      self.issuer = attributes[:'issuer'] if attributes[:'issuer']

      self.is_self_signed = attributes[:'isSelfSigned'] unless attributes[:'isSelfSigned'].nil?

      raise 'You cannot provide both :isSelfSigned and :is_self_signed' if attributes.key?(:'isSelfSigned') && attributes.key?(:'is_self_signed')

      self.is_self_signed = attributes[:'is_self_signed'] unless attributes[:'is_self_signed'].nil?

      self.md5_hash = attributes[:'md5Hash'] if attributes[:'md5Hash']

      raise 'You cannot provide both :md5Hash and :md5_hash' if attributes.key?(:'md5Hash') && attributes.key?(:'md5_hash')

      self.md5_hash = attributes[:'md5_hash'] if attributes[:'md5_hash']

      self.public_key = attributes[:'publicKey'] if attributes[:'publicKey']

      raise 'You cannot provide both :publicKey and :public_key' if attributes.key?(:'publicKey') && attributes.key?(:'public_key')

      self.public_key = attributes[:'public_key'] if attributes[:'public_key']

      self.public_key_algorithm = attributes[:'publicKeyAlgorithm'] if attributes[:'publicKeyAlgorithm']

      raise 'You cannot provide both :publicKeyAlgorithm and :public_key_algorithm' if attributes.key?(:'publicKeyAlgorithm') && attributes.key?(:'public_key_algorithm')

      self.public_key_algorithm = attributes[:'public_key_algorithm'] if attributes[:'public_key_algorithm']

      self.public_key_size = attributes[:'publicKeySize'] if attributes[:'publicKeySize']

      raise 'You cannot provide both :publicKeySize and :public_key_size' if attributes.key?(:'publicKeySize') && attributes.key?(:'public_key_size')

      self.public_key_size = attributes[:'public_key_size'] if attributes[:'public_key_size']

      self.serial = attributes[:'serial'] if attributes[:'serial']

      self.subject = attributes[:'subject'] if attributes[:'subject']

      self.time_valid_from = attributes[:'timeValidFrom'] if attributes[:'timeValidFrom']

      raise 'You cannot provide both :timeValidFrom and :time_valid_from' if attributes.key?(:'timeValidFrom') && attributes.key?(:'time_valid_from')

      self.time_valid_from = attributes[:'time_valid_from'] if attributes[:'time_valid_from']

      self.time_valid_to = attributes[:'timeValidTo'] if attributes[:'timeValidTo']

      raise 'You cannot provide both :timeValidTo and :time_valid_to' if attributes.key?(:'timeValidTo') && attributes.key?(:'time_valid_to')

      self.time_valid_to = attributes[:'time_valid_to'] if attributes[:'time_valid_to']

      self.version = attributes[:'version'] if attributes[:'version']

      self.sha1_hash = attributes[:'sha1Hash'] if attributes[:'sha1Hash']

      raise 'You cannot provide both :sha1Hash and :sha1_hash' if attributes.key?(:'sha1Hash') && attributes.key?(:'sha1_hash')

      self.sha1_hash = attributes[:'sha1_hash'] if attributes[:'sha1_hash']

      self.authority_key_id = attributes[:'authorityKeyId'] if attributes[:'authorityKeyId']

      raise 'You cannot provide both :authorityKeyId and :authority_key_id' if attributes.key?(:'authorityKeyId') && attributes.key?(:'authority_key_id')

      self.authority_key_id = attributes[:'authority_key_id'] if attributes[:'authority_key_id']

      self.is_ca = attributes[:'isCa'] unless attributes[:'isCa'].nil?

      raise 'You cannot provide both :isCa and :is_ca' if attributes.key?(:'isCa') && attributes.key?(:'is_ca')

      self.is_ca = attributes[:'is_ca'] unless attributes[:'is_ca'].nil?

      self.subject_key_id = attributes[:'subjectKeyId'] if attributes[:'subjectKeyId']

      raise 'You cannot provide both :subjectKeyId and :subject_key_id' if attributes.key?(:'subjectKeyId') && attributes.key?(:'subject_key_id')

      self.subject_key_id = attributes[:'subject_key_id'] if attributes[:'subject_key_id']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        key == other.key &&
        deployment_id == other.deployment_id &&
        certificate_content == other.certificate_content &&
        issuer == other.issuer &&
        is_self_signed == other.is_self_signed &&
        md5_hash == other.md5_hash &&
        public_key == other.public_key &&
        public_key_algorithm == other.public_key_algorithm &&
        public_key_size == other.public_key_size &&
        serial == other.serial &&
        subject == other.subject &&
        time_valid_from == other.time_valid_from &&
        time_valid_to == other.time_valid_to &&
        version == other.version &&
        sha1_hash == other.sha1_hash &&
        authority_key_id == other.authority_key_id &&
        is_ca == other.is_ca &&
        subject_key_id == other.subject_key_id &&
        lifecycle_state == other.lifecycle_state &&
        time_created == other.time_created
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [key, deployment_id, certificate_content, issuer, is_self_signed, md5_hash, public_key, public_key_algorithm, public_key_size, serial, subject, time_valid_from, time_valid_to, version, sha1_hash, authority_key_id, is_ca, subject_key_id, lifecycle_state, time_created].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
