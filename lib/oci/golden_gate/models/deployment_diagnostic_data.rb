# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Information regarding the deployment diagnostic collection
  #
  class GoldenGate::Models::DeploymentDiagnosticData
    DIAGNOSTIC_STATE_ENUM = [
      DIAGNOSTIC_STATE_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      DIAGNOSTIC_STATE_SUCCEEDED = 'SUCCEEDED'.freeze,
      DIAGNOSTIC_STATE_FAILED = 'FAILED'.freeze,
      DIAGNOSTIC_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Name of namespace that serves as a container for all of your buckets
    # @return [String]
    attr_accessor :namespace_name

    # **[Required]** Name of the bucket where the object is to be uploaded in the object storage
    # @return [String]
    attr_accessor :bucket_name

    # **[Required]** Name of the diagnostic collected and uploaded to object storage
    # @return [String]
    attr_accessor :object_name

    # **[Required]** The state of the deployment diagnostic collection.
    #
    # @return [String]
    attr_reader :diagnostic_state

    # The time from which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    # @return [DateTime]
    attr_accessor :time_diagnostic_start

    # The time until which the diagnostic collection should collect the logs. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    # @return [DateTime]
    attr_accessor :time_diagnostic_end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'namespace_name': :'namespaceName',
        'bucket_name': :'bucketName',
        'object_name': :'objectName',
        'diagnostic_state': :'diagnosticState',
        'time_diagnostic_start': :'timeDiagnosticStart',
        'time_diagnostic_end': :'timeDiagnosticEnd'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'namespace_name': :'String',
        'bucket_name': :'String',
        'object_name': :'String',
        'diagnostic_state': :'String',
        'time_diagnostic_start': :'DateTime',
        'time_diagnostic_end': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :namespace_name The value to assign to the {#namespace_name} property
    # @option attributes [String] :bucket_name The value to assign to the {#bucket_name} property
    # @option attributes [String] :object_name The value to assign to the {#object_name} property
    # @option attributes [String] :diagnostic_state The value to assign to the {#diagnostic_state} property
    # @option attributes [DateTime] :time_diagnostic_start The value to assign to the {#time_diagnostic_start} property
    # @option attributes [DateTime] :time_diagnostic_end The value to assign to the {#time_diagnostic_end} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.namespace_name = attributes[:'namespaceName'] if attributes[:'namespaceName']

      raise 'You cannot provide both :namespaceName and :namespace_name' if attributes.key?(:'namespaceName') && attributes.key?(:'namespace_name')

      self.namespace_name = attributes[:'namespace_name'] if attributes[:'namespace_name']

      self.bucket_name = attributes[:'bucketName'] if attributes[:'bucketName']

      raise 'You cannot provide both :bucketName and :bucket_name' if attributes.key?(:'bucketName') && attributes.key?(:'bucket_name')

      self.bucket_name = attributes[:'bucket_name'] if attributes[:'bucket_name']

      self.object_name = attributes[:'objectName'] if attributes[:'objectName']

      raise 'You cannot provide both :objectName and :object_name' if attributes.key?(:'objectName') && attributes.key?(:'object_name')

      self.object_name = attributes[:'object_name'] if attributes[:'object_name']

      self.diagnostic_state = attributes[:'diagnosticState'] if attributes[:'diagnosticState']

      raise 'You cannot provide both :diagnosticState and :diagnostic_state' if attributes.key?(:'diagnosticState') && attributes.key?(:'diagnostic_state')

      self.diagnostic_state = attributes[:'diagnostic_state'] if attributes[:'diagnostic_state']

      self.time_diagnostic_start = attributes[:'timeDiagnosticStart'] if attributes[:'timeDiagnosticStart']

      raise 'You cannot provide both :timeDiagnosticStart and :time_diagnostic_start' if attributes.key?(:'timeDiagnosticStart') && attributes.key?(:'time_diagnostic_start')

      self.time_diagnostic_start = attributes[:'time_diagnostic_start'] if attributes[:'time_diagnostic_start']

      self.time_diagnostic_end = attributes[:'timeDiagnosticEnd'] if attributes[:'timeDiagnosticEnd']

      raise 'You cannot provide both :timeDiagnosticEnd and :time_diagnostic_end' if attributes.key?(:'timeDiagnosticEnd') && attributes.key?(:'time_diagnostic_end')

      self.time_diagnostic_end = attributes[:'time_diagnostic_end'] if attributes[:'time_diagnostic_end']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] diagnostic_state Object to be assigned
    def diagnostic_state=(diagnostic_state)
      # rubocop:disable Style/ConditionalAssignment
      if diagnostic_state && !DIAGNOSTIC_STATE_ENUM.include?(diagnostic_state)
        OCI.logger.debug("Unknown value for 'diagnostic_state' [" + diagnostic_state + "]. Mapping to 'DIAGNOSTIC_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @diagnostic_state = DIAGNOSTIC_STATE_UNKNOWN_ENUM_VALUE
      else
        @diagnostic_state = diagnostic_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        namespace_name == other.namespace_name &&
        bucket_name == other.bucket_name &&
        object_name == other.object_name &&
        diagnostic_state == other.diagnostic_state &&
        time_diagnostic_start == other.time_diagnostic_start &&
        time_diagnostic_end == other.time_diagnostic_end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [namespace_name, bucket_name, object_name, diagnostic_state, time_diagnostic_start, time_diagnostic_end].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
