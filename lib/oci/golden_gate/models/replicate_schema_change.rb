# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Options required for pipeline Initial Data Load. If enabled, copies existing data from source to target before replication.
  #
  class GoldenGate::Models::ReplicateSchemaChange
    CAN_REPLICATE_SCHEMA_CHANGE_ENUM = [
      CAN_REPLICATE_SCHEMA_CHANGE_ENABLED = 'ENABLED'.freeze,
      CAN_REPLICATE_SCHEMA_CHANGE_DISABLED = 'DISABLED'.freeze,
      CAN_REPLICATE_SCHEMA_CHANGE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ACTION_ON_DDL_ERROR_ENUM = [
      ACTION_ON_DDL_ERROR_TERMINATE = 'TERMINATE'.freeze,
      ACTION_ON_DDL_ERROR_DISCARD = 'DISCARD'.freeze,
      ACTION_ON_DDL_ERROR_IGNORE = 'IGNORE'.freeze,
      ACTION_ON_DDL_ERROR_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ACTION_ON_DML_ERROR_ENUM = [
      ACTION_ON_DML_ERROR_TERMINATE = 'TERMINATE'.freeze,
      ACTION_ON_DML_ERROR_DISCARD = 'DISCARD'.freeze,
      ACTION_ON_DML_ERROR_IGNORE = 'IGNORE'.freeze,
      ACTION_ON_DML_ERROR_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** If ENABLED, then addition or removal of schema is also replicated, apart from individual tables and records when creating or updating the pipeline.
    #
    # @return [String]
    attr_reader :can_replicate_schema_change

    # Action upon DDL Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
    #
    # @return [String]
    attr_reader :action_on_ddl_error

    # Action upon DML Error (active only if 'Replicate schema changes (DDL)' is selected) i.e canReplicateSchemaChange=true
    #
    # @return [String]
    attr_reader :action_on_dml_error

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'can_replicate_schema_change': :'canReplicateSchemaChange',
        'action_on_ddl_error': :'actionOnDdlError',
        'action_on_dml_error': :'actionOnDmlError'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'can_replicate_schema_change': :'String',
        'action_on_ddl_error': :'String',
        'action_on_dml_error': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :can_replicate_schema_change The value to assign to the {#can_replicate_schema_change} property
    # @option attributes [String] :action_on_ddl_error The value to assign to the {#action_on_ddl_error} property
    # @option attributes [String] :action_on_dml_error The value to assign to the {#action_on_dml_error} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.can_replicate_schema_change = attributes[:'canReplicateSchemaChange'] if attributes[:'canReplicateSchemaChange']
      self.can_replicate_schema_change = "ENABLED" if can_replicate_schema_change.nil? && !attributes.key?(:'canReplicateSchemaChange') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :canReplicateSchemaChange and :can_replicate_schema_change' if attributes.key?(:'canReplicateSchemaChange') && attributes.key?(:'can_replicate_schema_change')

      self.can_replicate_schema_change = attributes[:'can_replicate_schema_change'] if attributes[:'can_replicate_schema_change']
      self.can_replicate_schema_change = "ENABLED" if can_replicate_schema_change.nil? && !attributes.key?(:'canReplicateSchemaChange') && !attributes.key?(:'can_replicate_schema_change') # rubocop:disable Style/StringLiterals

      self.action_on_ddl_error = attributes[:'actionOnDdlError'] if attributes[:'actionOnDdlError']
      self.action_on_ddl_error = "TERMINATE" if action_on_ddl_error.nil? && !attributes.key?(:'actionOnDdlError') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :actionOnDdlError and :action_on_ddl_error' if attributes.key?(:'actionOnDdlError') && attributes.key?(:'action_on_ddl_error')

      self.action_on_ddl_error = attributes[:'action_on_ddl_error'] if attributes[:'action_on_ddl_error']
      self.action_on_ddl_error = "TERMINATE" if action_on_ddl_error.nil? && !attributes.key?(:'actionOnDdlError') && !attributes.key?(:'action_on_ddl_error') # rubocop:disable Style/StringLiterals

      self.action_on_dml_error = attributes[:'actionOnDmlError'] if attributes[:'actionOnDmlError']
      self.action_on_dml_error = "TERMINATE" if action_on_dml_error.nil? && !attributes.key?(:'actionOnDmlError') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :actionOnDmlError and :action_on_dml_error' if attributes.key?(:'actionOnDmlError') && attributes.key?(:'action_on_dml_error')

      self.action_on_dml_error = attributes[:'action_on_dml_error'] if attributes[:'action_on_dml_error']
      self.action_on_dml_error = "TERMINATE" if action_on_dml_error.nil? && !attributes.key?(:'actionOnDmlError') && !attributes.key?(:'action_on_dml_error') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] can_replicate_schema_change Object to be assigned
    def can_replicate_schema_change=(can_replicate_schema_change)
      # rubocop:disable Style/ConditionalAssignment
      if can_replicate_schema_change && !CAN_REPLICATE_SCHEMA_CHANGE_ENUM.include?(can_replicate_schema_change)
        OCI.logger.debug("Unknown value for 'can_replicate_schema_change' [" + can_replicate_schema_change + "]. Mapping to 'CAN_REPLICATE_SCHEMA_CHANGE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @can_replicate_schema_change = CAN_REPLICATE_SCHEMA_CHANGE_UNKNOWN_ENUM_VALUE
      else
        @can_replicate_schema_change = can_replicate_schema_change
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action_on_ddl_error Object to be assigned
    def action_on_ddl_error=(action_on_ddl_error)
      # rubocop:disable Style/ConditionalAssignment
      if action_on_ddl_error && !ACTION_ON_DDL_ERROR_ENUM.include?(action_on_ddl_error)
        OCI.logger.debug("Unknown value for 'action_on_ddl_error' [" + action_on_ddl_error + "]. Mapping to 'ACTION_ON_DDL_ERROR_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @action_on_ddl_error = ACTION_ON_DDL_ERROR_UNKNOWN_ENUM_VALUE
      else
        @action_on_ddl_error = action_on_ddl_error
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action_on_dml_error Object to be assigned
    def action_on_dml_error=(action_on_dml_error)
      # rubocop:disable Style/ConditionalAssignment
      if action_on_dml_error && !ACTION_ON_DML_ERROR_ENUM.include?(action_on_dml_error)
        OCI.logger.debug("Unknown value for 'action_on_dml_error' [" + action_on_dml_error + "]. Mapping to 'ACTION_ON_DML_ERROR_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @action_on_dml_error = ACTION_ON_DML_ERROR_UNKNOWN_ENUM_VALUE
      else
        @action_on_dml_error = action_on_dml_error
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        can_replicate_schema_change == other.can_replicate_schema_change &&
        action_on_ddl_error == other.action_on_ddl_error &&
        action_on_dml_error == other.action_on_dml_error
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [can_replicate_schema_change, action_on_ddl_error, action_on_dml_error].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
