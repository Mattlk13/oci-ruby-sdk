# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Defines the IDP Groups to GoldenGate roles mapping. This field is used only for IAM deployment and does not have any impact on non-IAM deployments.
  # For IAM deployment, when user does not specify this mapping, then it has null value and default mapping is used.
  # User belonging to each group can only perform the actions according to the role the respective group is mapped to.
  #
  class GoldenGate::Models::GroupToRolesMappingDetails
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role securityGroup.
    # It grants administration of security related objects and invoke security related service requests. This role has full privileges.
    #
    # @return [String]
    attr_accessor :security_group_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role administratorGroup.
    # It grants full access to the user, including the ability to alter general, non-security related operational parameters
    # and profiles of the server.
    #
    # @return [String]
    attr_accessor :administrator_group_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role operatorGroup.
    # It allows users to perform only operational actions, like starting and stopping resources.
    # Operators cannot alter the operational parameters or profiles of the MA server.
    #
    # @return [String]
    attr_accessor :operator_group_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the IDP group which will be mapped to goldengate role userGroup.
    # It allows information-only service requests, which do not alter or affect the operation of either the MA.
    # Examples of query and read-only information include performance metric information and resource status and monitoring information
    #
    # @return [String]
    attr_accessor :user_group_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'security_group_id': :'securityGroupId',
        'administrator_group_id': :'administratorGroupId',
        'operator_group_id': :'operatorGroupId',
        'user_group_id': :'userGroupId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'security_group_id': :'String',
        'administrator_group_id': :'String',
        'operator_group_id': :'String',
        'user_group_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :security_group_id The value to assign to the {#security_group_id} property
    # @option attributes [String] :administrator_group_id The value to assign to the {#administrator_group_id} property
    # @option attributes [String] :operator_group_id The value to assign to the {#operator_group_id} property
    # @option attributes [String] :user_group_id The value to assign to the {#user_group_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.security_group_id = attributes[:'securityGroupId'] if attributes[:'securityGroupId']

      raise 'You cannot provide both :securityGroupId and :security_group_id' if attributes.key?(:'securityGroupId') && attributes.key?(:'security_group_id')

      self.security_group_id = attributes[:'security_group_id'] if attributes[:'security_group_id']

      self.administrator_group_id = attributes[:'administratorGroupId'] if attributes[:'administratorGroupId']

      raise 'You cannot provide both :administratorGroupId and :administrator_group_id' if attributes.key?(:'administratorGroupId') && attributes.key?(:'administrator_group_id')

      self.administrator_group_id = attributes[:'administrator_group_id'] if attributes[:'administrator_group_id']

      self.operator_group_id = attributes[:'operatorGroupId'] if attributes[:'operatorGroupId']

      raise 'You cannot provide both :operatorGroupId and :operator_group_id' if attributes.key?(:'operatorGroupId') && attributes.key?(:'operator_group_id')

      self.operator_group_id = attributes[:'operator_group_id'] if attributes[:'operator_group_id']

      self.user_group_id = attributes[:'userGroupId'] if attributes[:'userGroupId']

      raise 'You cannot provide both :userGroupId and :user_group_id' if attributes.key?(:'userGroupId') && attributes.key?(:'user_group_id')

      self.user_group_id = attributes[:'user_group_id'] if attributes[:'user_group_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        security_group_id == other.security_group_id &&
        administrator_group_id == other.administrator_group_id &&
        operator_group_id == other.operator_group_id &&
        user_group_id == other.user_group_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [security_group_id, administrator_group_id, operator_group_id, user_group_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
