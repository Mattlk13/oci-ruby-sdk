# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require_relative 'pipeline'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details of a ZeroETL pipeline.
  #
  class GoldenGate::Models::ZeroEtlPipeline < GoldenGate::Models::Pipeline
    # Mapping for source/target schema/tables for the pipeline data replication.
    #
    # @return [Array<OCI::GoldenGate::Models::MappingRule>]
    attr_accessor :mapping_rules

    # @return [OCI::GoldenGate::Models::ProcessOptions]
    attr_accessor :process_options

    # When the resource was last updated. This option applies when retrieving a pipeline. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-07-25T21:10:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_last_recorded

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'recipe_type': :'recipeType',
        'id': :'id',
        'display_name': :'displayName',
        'description': :'description',
        'compartment_id': :'compartmentId',
        'license_model': :'licenseModel',
        'cpu_core_count': :'cpuCoreCount',
        'is_auto_scaling_enabled': :'isAutoScalingEnabled',
        'source_connection_details': :'sourceConnectionDetails',
        'target_connection_details': :'targetConnectionDetails',
        'pipeline_diagnostic_data': :'pipelineDiagnosticData',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'locks': :'locks',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_sub_state': :'lifecycleSubState',
        'lifecycle_details': :'lifecycleDetails',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'mapping_rules': :'mappingRules',
        'process_options': :'processOptions',
        'time_last_recorded': :'timeLastRecorded'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'recipe_type': :'String',
        'id': :'String',
        'display_name': :'String',
        'description': :'String',
        'compartment_id': :'String',
        'license_model': :'String',
        'cpu_core_count': :'Integer',
        'is_auto_scaling_enabled': :'BOOLEAN',
        'source_connection_details': :'OCI::GoldenGate::Models::SourcePipelineConnectionDetails',
        'target_connection_details': :'OCI::GoldenGate::Models::TargetPipelineConnectionDetails',
        'pipeline_diagnostic_data': :'OCI::GoldenGate::Models::PipelineDiagnosticData',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'locks': :'Array<OCI::GoldenGate::Models::ResourceLock>',
        'lifecycle_state': :'String',
        'lifecycle_sub_state': :'String',
        'lifecycle_details': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'mapping_rules': :'Array<OCI::GoldenGate::Models::MappingRule>',
        'process_options': :'OCI::GoldenGate::Models::ProcessOptions',
        'time_last_recorded': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {OCI::GoldenGate::Models::Pipeline#id #id} proprety
    # @option attributes [String] :display_name The value to assign to the {OCI::GoldenGate::Models::Pipeline#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::GoldenGate::Models::Pipeline#description #description} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::GoldenGate::Models::Pipeline#compartment_id #compartment_id} proprety
    # @option attributes [String] :license_model The value to assign to the {OCI::GoldenGate::Models::Pipeline#license_model #license_model} proprety
    # @option attributes [Integer] :cpu_core_count The value to assign to the {OCI::GoldenGate::Models::Pipeline#cpu_core_count #cpu_core_count} proprety
    # @option attributes [BOOLEAN] :is_auto_scaling_enabled The value to assign to the {OCI::GoldenGate::Models::Pipeline#is_auto_scaling_enabled #is_auto_scaling_enabled} proprety
    # @option attributes [OCI::GoldenGate::Models::SourcePipelineConnectionDetails] :source_connection_details The value to assign to the {OCI::GoldenGate::Models::Pipeline#source_connection_details #source_connection_details} proprety
    # @option attributes [OCI::GoldenGate::Models::TargetPipelineConnectionDetails] :target_connection_details The value to assign to the {OCI::GoldenGate::Models::Pipeline#target_connection_details #target_connection_details} proprety
    # @option attributes [OCI::GoldenGate::Models::PipelineDiagnosticData] :pipeline_diagnostic_data The value to assign to the {OCI::GoldenGate::Models::Pipeline#pipeline_diagnostic_data #pipeline_diagnostic_data} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::GoldenGate::Models::Pipeline#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::GoldenGate::Models::Pipeline#defined_tags #defined_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {OCI::GoldenGate::Models::Pipeline#system_tags #system_tags} proprety
    # @option attributes [Array<OCI::GoldenGate::Models::ResourceLock>] :locks The value to assign to the {OCI::GoldenGate::Models::Pipeline#locks #locks} proprety
    # @option attributes [String] :lifecycle_state The value to assign to the {OCI::GoldenGate::Models::Pipeline#lifecycle_state #lifecycle_state} proprety
    # @option attributes [String] :lifecycle_sub_state The value to assign to the {OCI::GoldenGate::Models::Pipeline#lifecycle_sub_state #lifecycle_sub_state} proprety
    # @option attributes [String] :lifecycle_details The value to assign to the {OCI::GoldenGate::Models::Pipeline#lifecycle_details #lifecycle_details} proprety
    # @option attributes [DateTime] :time_created The value to assign to the {OCI::GoldenGate::Models::Pipeline#time_created #time_created} proprety
    # @option attributes [DateTime] :time_updated The value to assign to the {OCI::GoldenGate::Models::Pipeline#time_updated #time_updated} proprety
    # @option attributes [Array<OCI::GoldenGate::Models::MappingRule>] :mapping_rules The value to assign to the {#mapping_rules} property
    # @option attributes [OCI::GoldenGate::Models::ProcessOptions] :process_options The value to assign to the {#process_options} property
    # @option attributes [DateTime] :time_last_recorded The value to assign to the {#time_last_recorded} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['recipeType'] = 'ZERO_ETL'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.mapping_rules = attributes[:'mappingRules'] if attributes[:'mappingRules']

      raise 'You cannot provide both :mappingRules and :mapping_rules' if attributes.key?(:'mappingRules') && attributes.key?(:'mapping_rules')

      self.mapping_rules = attributes[:'mapping_rules'] if attributes[:'mapping_rules']

      self.process_options = attributes[:'processOptions'] if attributes[:'processOptions']

      raise 'You cannot provide both :processOptions and :process_options' if attributes.key?(:'processOptions') && attributes.key?(:'process_options')

      self.process_options = attributes[:'process_options'] if attributes[:'process_options']

      self.time_last_recorded = attributes[:'timeLastRecorded'] if attributes[:'timeLastRecorded']

      raise 'You cannot provide both :timeLastRecorded and :time_last_recorded' if attributes.key?(:'timeLastRecorded') && attributes.key?(:'time_last_recorded')

      self.time_last_recorded = attributes[:'time_last_recorded'] if attributes[:'time_last_recorded']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        recipe_type == other.recipe_type &&
        id == other.id &&
        display_name == other.display_name &&
        description == other.description &&
        compartment_id == other.compartment_id &&
        license_model == other.license_model &&
        cpu_core_count == other.cpu_core_count &&
        is_auto_scaling_enabled == other.is_auto_scaling_enabled &&
        source_connection_details == other.source_connection_details &&
        target_connection_details == other.target_connection_details &&
        pipeline_diagnostic_data == other.pipeline_diagnostic_data &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        locks == other.locks &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_sub_state == other.lifecycle_sub_state &&
        lifecycle_details == other.lifecycle_details &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        mapping_rules == other.mapping_rules &&
        process_options == other.process_options &&
        time_last_recorded == other.time_last_recorded
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [recipe_type, id, display_name, description, compartment_id, license_model, cpu_core_count, is_auto_scaling_enabled, source_connection_details, target_connection_details, pipeline_diagnostic_data, freeform_tags, defined_tags, system_tags, locks, lifecycle_state, lifecycle_sub_state, lifecycle_details, time_created, time_updated, mapping_rules, process_options, time_last_recorded].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
