# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of the deployment wallets operations.
  #
  class GoldenGate::Models::DeploymentWalletsOperationSummary
    DEPLOYMENT_WALLET_OPERATION_TYPE_ENUM = [
      DEPLOYMENT_WALLET_OPERATION_TYPE_EXPORT = 'EXPORT'.freeze,
      DEPLOYMENT_WALLET_OPERATION_TYPE_IMPORT = 'IMPORT'.freeze,
      DEPLOYMENT_WALLET_OPERATION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DEPLOYMENT_WALLET_OPERATION_STATUS_ENUM = [
      DEPLOYMENT_WALLET_OPERATION_STATUS_EXPORTING = 'EXPORTING'.freeze,
      DEPLOYMENT_WALLET_OPERATION_STATUS_EXPORTED = 'EXPORTED'.freeze,
      DEPLOYMENT_WALLET_OPERATION_STATUS_IMPORTED = 'IMPORTED'.freeze,
      DEPLOYMENT_WALLET_OPERATION_STATUS_IMPORTING = 'IMPORTING'.freeze,
      DEPLOYMENT_WALLET_OPERATION_STATUS_FAILED = 'FAILED'.freeze,
      DEPLOYMENT_WALLET_OPERATION_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The UUID of the wallet operation performed by the customer.
    # If provided, this will reference a key which the customer can use to query or search a particular wallet operation
    #
    # @return [String]
    attr_accessor :wallet_operation_id

    # **[Required]** The OCID of the customer's GoldenGate Service Secret.
    # If provided, it references a key that customers will be required to ensure the policies are established
    # to permit GoldenGate to use this Secret.
    #
    # @return [String]
    attr_accessor :wallet_secret_id

    # **[Required]** The operation type of the deployment wallet.
    #
    # @return [String]
    attr_reader :deployment_wallet_operation_type

    # **[Required]** The status of the deployment wallet.
    #
    # @return [String]
    attr_reader :deployment_wallet_operation_status

    # **[Required]** The date and time the request was started. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_started

    # The date and time the request was finished. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_completed

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'wallet_operation_id': :'walletOperationId',
        'wallet_secret_id': :'walletSecretId',
        'deployment_wallet_operation_type': :'deploymentWalletOperationType',
        'deployment_wallet_operation_status': :'deploymentWalletOperationStatus',
        'time_started': :'timeStarted',
        'time_completed': :'timeCompleted'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'wallet_operation_id': :'String',
        'wallet_secret_id': :'String',
        'deployment_wallet_operation_type': :'String',
        'deployment_wallet_operation_status': :'String',
        'time_started': :'DateTime',
        'time_completed': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :wallet_operation_id The value to assign to the {#wallet_operation_id} property
    # @option attributes [String] :wallet_secret_id The value to assign to the {#wallet_secret_id} property
    # @option attributes [String] :deployment_wallet_operation_type The value to assign to the {#deployment_wallet_operation_type} property
    # @option attributes [String] :deployment_wallet_operation_status The value to assign to the {#deployment_wallet_operation_status} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_completed The value to assign to the {#time_completed} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.wallet_operation_id = attributes[:'walletOperationId'] if attributes[:'walletOperationId']

      raise 'You cannot provide both :walletOperationId and :wallet_operation_id' if attributes.key?(:'walletOperationId') && attributes.key?(:'wallet_operation_id')

      self.wallet_operation_id = attributes[:'wallet_operation_id'] if attributes[:'wallet_operation_id']

      self.wallet_secret_id = attributes[:'walletSecretId'] if attributes[:'walletSecretId']

      raise 'You cannot provide both :walletSecretId and :wallet_secret_id' if attributes.key?(:'walletSecretId') && attributes.key?(:'wallet_secret_id')

      self.wallet_secret_id = attributes[:'wallet_secret_id'] if attributes[:'wallet_secret_id']

      self.deployment_wallet_operation_type = attributes[:'deploymentWalletOperationType'] if attributes[:'deploymentWalletOperationType']

      raise 'You cannot provide both :deploymentWalletOperationType and :deployment_wallet_operation_type' if attributes.key?(:'deploymentWalletOperationType') && attributes.key?(:'deployment_wallet_operation_type')

      self.deployment_wallet_operation_type = attributes[:'deployment_wallet_operation_type'] if attributes[:'deployment_wallet_operation_type']

      self.deployment_wallet_operation_status = attributes[:'deploymentWalletOperationStatus'] if attributes[:'deploymentWalletOperationStatus']

      raise 'You cannot provide both :deploymentWalletOperationStatus and :deployment_wallet_operation_status' if attributes.key?(:'deploymentWalletOperationStatus') && attributes.key?(:'deployment_wallet_operation_status')

      self.deployment_wallet_operation_status = attributes[:'deployment_wallet_operation_status'] if attributes[:'deployment_wallet_operation_status']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_completed = attributes[:'timeCompleted'] if attributes[:'timeCompleted']

      raise 'You cannot provide both :timeCompleted and :time_completed' if attributes.key?(:'timeCompleted') && attributes.key?(:'time_completed')

      self.time_completed = attributes[:'time_completed'] if attributes[:'time_completed']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_wallet_operation_type Object to be assigned
    def deployment_wallet_operation_type=(deployment_wallet_operation_type)
      # rubocop:disable Style/ConditionalAssignment
      if deployment_wallet_operation_type && !DEPLOYMENT_WALLET_OPERATION_TYPE_ENUM.include?(deployment_wallet_operation_type)
        OCI.logger.debug("Unknown value for 'deployment_wallet_operation_type' [" + deployment_wallet_operation_type + "]. Mapping to 'DEPLOYMENT_WALLET_OPERATION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @deployment_wallet_operation_type = DEPLOYMENT_WALLET_OPERATION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @deployment_wallet_operation_type = deployment_wallet_operation_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_wallet_operation_status Object to be assigned
    def deployment_wallet_operation_status=(deployment_wallet_operation_status)
      # rubocop:disable Style/ConditionalAssignment
      if deployment_wallet_operation_status && !DEPLOYMENT_WALLET_OPERATION_STATUS_ENUM.include?(deployment_wallet_operation_status)
        OCI.logger.debug("Unknown value for 'deployment_wallet_operation_status' [" + deployment_wallet_operation_status + "]. Mapping to 'DEPLOYMENT_WALLET_OPERATION_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @deployment_wallet_operation_status = DEPLOYMENT_WALLET_OPERATION_STATUS_UNKNOWN_ENUM_VALUE
      else
        @deployment_wallet_operation_status = deployment_wallet_operation_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        wallet_operation_id == other.wallet_operation_id &&
        wallet_secret_id == other.wallet_secret_id &&
        deployment_wallet_operation_type == other.deployment_wallet_operation_type &&
        deployment_wallet_operation_status == other.deployment_wallet_operation_status &&
        time_started == other.time_started &&
        time_completed == other.time_completed
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [wallet_operation_id, wallet_secret_id, deployment_wallet_operation_type, deployment_wallet_operation_status, time_started, time_completed].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
