# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require_relative 'create_connection_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about a new Snowflake Connection.
  #
  class GoldenGate::Models::CreateSnowflakeConnectionDetails < GoldenGate::Models::CreateConnectionDetails
    # **[Required]** The Snowflake technology type.
    # @return [String]
    attr_accessor :technology_type

    # **[Required]** JDBC connection URL.
    # e.g.: 'jdbc:snowflake://<account_name>.snowflakecomputing.com/?warehouse=<warehouse-name>&db=<db-name>'
    #
    # @return [String]
    attr_accessor :connection_url

    # **[Required]** Used authentication mechanism to access Snowflake.
    #
    # @return [String]
    attr_accessor :authentication_type

    # The username Oracle GoldenGate uses to connect to Snowflake.
    # This username must already exist and be available by Snowflake platform to be connected to.
    #
    # @return [String]
    attr_accessor :username

    # The password Oracle GoldenGate uses to connect to Snowflake platform.
    # Deprecated: This field is deprecated and replaced by \"passwordSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :password

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret where the password is stored.
    # The password Oracle GoldenGate uses to connect the associated system of the given technology.
    # It must conform to the specific security requirements including length, case sensitivity, and so on.
    # If secretId is used plaintext field must not be provided.
    # Note: When provided, 'password' field must not be provided.
    #
    # @return [String]
    attr_accessor :password_secret_id

    # The base64 encoded content of private key file in PEM format.
    # Deprecated: This field is deprecated and replaced by \"privateKeyFileSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :private_key_file

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret that stores the content of the private key file (PEM file) corresponding to the API key of the fingerprint.
    # See documentation: https://docs.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcredentials.htm
    # Note: When provided, 'privateKeyFile' field must not be provided.
    #
    # @return [String]
    attr_accessor :private_key_file_secret_id

    # Password if the private key file is encrypted.
    # Deprecated: This field is deprecated and replaced by \"privateKeyPassphraseSecretId\". This field will be removed after February 15 2026.
    #
    # @return [String]
    attr_accessor :private_key_passphrase

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Secret that stores the password for the private key file.
    # Note: When provided, 'privateKeyPassphrase' field must not be provided.
    #
    # @return [String]
    attr_accessor :private_key_passphrase_secret_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'connectionType',
        'display_name': :'displayName',
        'description': :'description',
        'compartment_id': :'compartmentId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'locks': :'locks',
        'vault_id': :'vaultId',
        'key_id': :'keyId',
        'nsg_ids': :'nsgIds',
        'subnet_id': :'subnetId',
        'routing_method': :'routingMethod',
        'does_use_secret_ids': :'doesUseSecretIds',
        'technology_type': :'technologyType',
        'connection_url': :'connectionUrl',
        'authentication_type': :'authenticationType',
        'username': :'username',
        'password': :'password',
        'password_secret_id': :'passwordSecretId',
        'private_key_file': :'privateKeyFile',
        'private_key_file_secret_id': :'privateKeyFileSecretId',
        'private_key_passphrase': :'privateKeyPassphrase',
        'private_key_passphrase_secret_id': :'privateKeyPassphraseSecretId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'String',
        'display_name': :'String',
        'description': :'String',
        'compartment_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'locks': :'Array<OCI::GoldenGate::Models::AddResourceLockDetails>',
        'vault_id': :'String',
        'key_id': :'String',
        'nsg_ids': :'Array<String>',
        'subnet_id': :'String',
        'routing_method': :'String',
        'does_use_secret_ids': :'BOOLEAN',
        'technology_type': :'String',
        'connection_url': :'String',
        'authentication_type': :'String',
        'username': :'String',
        'password': :'String',
        'password_secret_id': :'String',
        'private_key_file': :'String',
        'private_key_file_secret_id': :'String',
        'private_key_passphrase': :'String',
        'private_key_passphrase_secret_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#description #description} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#compartment_id #compartment_id} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#defined_tags #defined_tags} proprety
    # @option attributes [Array<OCI::GoldenGate::Models::AddResourceLockDetails>] :locks The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#locks #locks} proprety
    # @option attributes [String] :vault_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#vault_id #vault_id} proprety
    # @option attributes [String] :key_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#key_id #key_id} proprety
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#nsg_ids #nsg_ids} proprety
    # @option attributes [String] :subnet_id The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#subnet_id #subnet_id} proprety
    # @option attributes [String] :routing_method The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#routing_method #routing_method} proprety
    # @option attributes [BOOLEAN] :does_use_secret_ids The value to assign to the {OCI::GoldenGate::Models::CreateConnectionDetails#does_use_secret_ids #does_use_secret_ids} proprety
    # @option attributes [String] :technology_type The value to assign to the {#technology_type} property
    # @option attributes [String] :connection_url The value to assign to the {#connection_url} property
    # @option attributes [String] :authentication_type The value to assign to the {#authentication_type} property
    # @option attributes [String] :username The value to assign to the {#username} property
    # @option attributes [String] :password The value to assign to the {#password} property
    # @option attributes [String] :password_secret_id The value to assign to the {#password_secret_id} property
    # @option attributes [String] :private_key_file The value to assign to the {#private_key_file} property
    # @option attributes [String] :private_key_file_secret_id The value to assign to the {#private_key_file_secret_id} property
    # @option attributes [String] :private_key_passphrase The value to assign to the {#private_key_passphrase} property
    # @option attributes [String] :private_key_passphrase_secret_id The value to assign to the {#private_key_passphrase_secret_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['connectionType'] = 'SNOWFLAKE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.technology_type = attributes[:'technologyType'] if attributes[:'technologyType']

      raise 'You cannot provide both :technologyType and :technology_type' if attributes.key?(:'technologyType') && attributes.key?(:'technology_type')

      self.technology_type = attributes[:'technology_type'] if attributes[:'technology_type']

      self.connection_url = attributes[:'connectionUrl'] if attributes[:'connectionUrl']

      raise 'You cannot provide both :connectionUrl and :connection_url' if attributes.key?(:'connectionUrl') && attributes.key?(:'connection_url')

      self.connection_url = attributes[:'connection_url'] if attributes[:'connection_url']

      self.authentication_type = attributes[:'authenticationType'] if attributes[:'authenticationType']

      raise 'You cannot provide both :authenticationType and :authentication_type' if attributes.key?(:'authenticationType') && attributes.key?(:'authentication_type')

      self.authentication_type = attributes[:'authentication_type'] if attributes[:'authentication_type']

      self.username = attributes[:'username'] if attributes[:'username']

      self.password = attributes[:'password'] if attributes[:'password']

      self.password_secret_id = attributes[:'passwordSecretId'] if attributes[:'passwordSecretId']

      raise 'You cannot provide both :passwordSecretId and :password_secret_id' if attributes.key?(:'passwordSecretId') && attributes.key?(:'password_secret_id')

      self.password_secret_id = attributes[:'password_secret_id'] if attributes[:'password_secret_id']

      self.private_key_file = attributes[:'privateKeyFile'] if attributes[:'privateKeyFile']

      raise 'You cannot provide both :privateKeyFile and :private_key_file' if attributes.key?(:'privateKeyFile') && attributes.key?(:'private_key_file')

      self.private_key_file = attributes[:'private_key_file'] if attributes[:'private_key_file']

      self.private_key_file_secret_id = attributes[:'privateKeyFileSecretId'] if attributes[:'privateKeyFileSecretId']

      raise 'You cannot provide both :privateKeyFileSecretId and :private_key_file_secret_id' if attributes.key?(:'privateKeyFileSecretId') && attributes.key?(:'private_key_file_secret_id')

      self.private_key_file_secret_id = attributes[:'private_key_file_secret_id'] if attributes[:'private_key_file_secret_id']

      self.private_key_passphrase = attributes[:'privateKeyPassphrase'] if attributes[:'privateKeyPassphrase']

      raise 'You cannot provide both :privateKeyPassphrase and :private_key_passphrase' if attributes.key?(:'privateKeyPassphrase') && attributes.key?(:'private_key_passphrase')

      self.private_key_passphrase = attributes[:'private_key_passphrase'] if attributes[:'private_key_passphrase']

      self.private_key_passphrase_secret_id = attributes[:'privateKeyPassphraseSecretId'] if attributes[:'privateKeyPassphraseSecretId']

      raise 'You cannot provide both :privateKeyPassphraseSecretId and :private_key_passphrase_secret_id' if attributes.key?(:'privateKeyPassphraseSecretId') && attributes.key?(:'private_key_passphrase_secret_id')

      self.private_key_passphrase_secret_id = attributes[:'private_key_passphrase_secret_id'] if attributes[:'private_key_passphrase_secret_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        connection_type == other.connection_type &&
        display_name == other.display_name &&
        description == other.description &&
        compartment_id == other.compartment_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        locks == other.locks &&
        vault_id == other.vault_id &&
        key_id == other.key_id &&
        nsg_ids == other.nsg_ids &&
        subnet_id == other.subnet_id &&
        routing_method == other.routing_method &&
        does_use_secret_ids == other.does_use_secret_ids &&
        technology_type == other.technology_type &&
        connection_url == other.connection_url &&
        authentication_type == other.authentication_type &&
        username == other.username &&
        password == other.password &&
        password_secret_id == other.password_secret_id &&
        private_key_file == other.private_key_file &&
        private_key_file_secret_id == other.private_key_file_secret_id &&
        private_key_passphrase == other.private_key_passphrase &&
        private_key_passphrase_secret_id == other.private_key_passphrase_secret_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [connection_type, display_name, description, compartment_id, freeform_tags, defined_tags, locks, vault_id, key_id, nsg_ids, subnet_id, routing_method, does_use_secret_ids, technology_type, connection_url, authentication_type, username, password, password_secret_id, private_key_file, private_key_file_secret_id, private_key_passphrase, private_key_passphrase_secret_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
