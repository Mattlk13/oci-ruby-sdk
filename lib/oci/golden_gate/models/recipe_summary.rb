# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The list of recipe details to create pipelines.
  #
  class GoldenGate::Models::RecipeSummary
    RECIPE_TYPE_ENUM = [
      RECIPE_TYPE_ZERO_ETL = 'ZERO_ETL'.freeze,
      RECIPE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The type of the recipe
    #
    # @return [String]
    attr_reader :recipe_type

    # **[Required]** An object's Display Name.
    #
    # @return [String]
    attr_accessor :name

    # **[Required]** An object's Display Name.
    #
    # @return [String]
    attr_accessor :display_name

    # Metadata about this specific object.
    #
    # @return [String]
    attr_accessor :description

    # **[Required]** Array of supported technology types for this recipe.
    #
    # @return [Array<OCI::GoldenGate::Models::TechnologyType>]
    attr_accessor :supported_source_technology_types

    # **[Required]** Array of supported technology types for this recipe.
    #
    # @return [Array<OCI::GoldenGate::Models::TechnologyType>]
    attr_accessor :supported_target_technology_types

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'recipe_type': :'recipeType',
        'name': :'name',
        'display_name': :'displayName',
        'description': :'description',
        'supported_source_technology_types': :'supportedSourceTechnologyTypes',
        'supported_target_technology_types': :'supportedTargetTechnologyTypes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'recipe_type': :'String',
        'name': :'String',
        'display_name': :'String',
        'description': :'String',
        'supported_source_technology_types': :'Array<OCI::GoldenGate::Models::TechnologyType>',
        'supported_target_technology_types': :'Array<OCI::GoldenGate::Models::TechnologyType>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :recipe_type The value to assign to the {#recipe_type} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Array<OCI::GoldenGate::Models::TechnologyType>] :supported_source_technology_types The value to assign to the {#supported_source_technology_types} property
    # @option attributes [Array<OCI::GoldenGate::Models::TechnologyType>] :supported_target_technology_types The value to assign to the {#supported_target_technology_types} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.recipe_type = attributes[:'recipeType'] if attributes[:'recipeType']

      raise 'You cannot provide both :recipeType and :recipe_type' if attributes.key?(:'recipeType') && attributes.key?(:'recipe_type')

      self.recipe_type = attributes[:'recipe_type'] if attributes[:'recipe_type']

      self.name = attributes[:'name'] if attributes[:'name']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.supported_source_technology_types = attributes[:'supportedSourceTechnologyTypes'] if attributes[:'supportedSourceTechnologyTypes']

      raise 'You cannot provide both :supportedSourceTechnologyTypes and :supported_source_technology_types' if attributes.key?(:'supportedSourceTechnologyTypes') && attributes.key?(:'supported_source_technology_types')

      self.supported_source_technology_types = attributes[:'supported_source_technology_types'] if attributes[:'supported_source_technology_types']

      self.supported_target_technology_types = attributes[:'supportedTargetTechnologyTypes'] if attributes[:'supportedTargetTechnologyTypes']

      raise 'You cannot provide both :supportedTargetTechnologyTypes and :supported_target_technology_types' if attributes.key?(:'supportedTargetTechnologyTypes') && attributes.key?(:'supported_target_technology_types')

      self.supported_target_technology_types = attributes[:'supported_target_technology_types'] if attributes[:'supported_target_technology_types']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recipe_type Object to be assigned
    def recipe_type=(recipe_type)
      # rubocop:disable Style/ConditionalAssignment
      if recipe_type && !RECIPE_TYPE_ENUM.include?(recipe_type)
        OCI.logger.debug("Unknown value for 'recipe_type' [" + recipe_type + "]. Mapping to 'RECIPE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @recipe_type = RECIPE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @recipe_type = recipe_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        recipe_type == other.recipe_type &&
        name == other.name &&
        display_name == other.display_name &&
        description == other.description &&
        supported_source_technology_types == other.supported_source_technology_types &&
        supported_target_technology_types == other.supported_target_technology_types
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [recipe_type, name, display_name, description, supported_source_technology_types, supported_target_technology_types].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
