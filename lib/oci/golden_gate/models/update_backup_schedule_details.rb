# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200407
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Defines the backup schedule details for update operation.
  #
  class GoldenGate::Models::UpdateBackupScheduleDetails
    FREQUENCY_BACKUP_SCHEDULED_ENUM = [
      FREQUENCY_BACKUP_SCHEDULED_DAILY = 'DAILY'.freeze,
      FREQUENCY_BACKUP_SCHEDULED_WEEKLY = 'WEEKLY'.freeze,
      FREQUENCY_BACKUP_SCHEDULED_MONTHLY = 'MONTHLY'.freeze
    ].freeze

    # The start timestamp for the deployment backup schedule. The format is defined by
    # [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2024-10-25T18:19:29.600Z`.
    #
    # @return [DateTime]
    attr_accessor :time_backup_scheduled

    # The frequency of the deployment backup schedule. Frequency can be DAILY, WEEKLY or MONTHLY.
    #
    # @return [String]
    attr_reader :frequency_backup_scheduled

    # Name of the bucket where the object is to be uploaded in the object storage
    # @return [String]
    attr_accessor :bucket_name

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
    #
    # @return [String]
    attr_accessor :compartment_id

    # Name of namespace that serves as a container for all of your buckets
    # @return [String]
    attr_accessor :namespace_name

    # Parameter to allow users to create backup without trails
    # @return [BOOLEAN]
    attr_accessor :is_metadata_only

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'time_backup_scheduled': :'timeBackupScheduled',
        'frequency_backup_scheduled': :'frequencyBackupScheduled',
        'bucket_name': :'bucketName',
        'compartment_id': :'compartmentId',
        'namespace_name': :'namespaceName',
        'is_metadata_only': :'isMetadataOnly'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'time_backup_scheduled': :'DateTime',
        'frequency_backup_scheduled': :'String',
        'bucket_name': :'String',
        'compartment_id': :'String',
        'namespace_name': :'String',
        'is_metadata_only': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_backup_scheduled The value to assign to the {#time_backup_scheduled} property
    # @option attributes [String] :frequency_backup_scheduled The value to assign to the {#frequency_backup_scheduled} property
    # @option attributes [String] :bucket_name The value to assign to the {#bucket_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :namespace_name The value to assign to the {#namespace_name} property
    # @option attributes [BOOLEAN] :is_metadata_only The value to assign to the {#is_metadata_only} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.time_backup_scheduled = attributes[:'timeBackupScheduled'] if attributes[:'timeBackupScheduled']

      raise 'You cannot provide both :timeBackupScheduled and :time_backup_scheduled' if attributes.key?(:'timeBackupScheduled') && attributes.key?(:'time_backup_scheduled')

      self.time_backup_scheduled = attributes[:'time_backup_scheduled'] if attributes[:'time_backup_scheduled']

      self.frequency_backup_scheduled = attributes[:'frequencyBackupScheduled'] if attributes[:'frequencyBackupScheduled']

      raise 'You cannot provide both :frequencyBackupScheduled and :frequency_backup_scheduled' if attributes.key?(:'frequencyBackupScheduled') && attributes.key?(:'frequency_backup_scheduled')

      self.frequency_backup_scheduled = attributes[:'frequency_backup_scheduled'] if attributes[:'frequency_backup_scheduled']

      self.bucket_name = attributes[:'bucketName'] if attributes[:'bucketName']

      raise 'You cannot provide both :bucketName and :bucket_name' if attributes.key?(:'bucketName') && attributes.key?(:'bucket_name')

      self.bucket_name = attributes[:'bucket_name'] if attributes[:'bucket_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.namespace_name = attributes[:'namespaceName'] if attributes[:'namespaceName']

      raise 'You cannot provide both :namespaceName and :namespace_name' if attributes.key?(:'namespaceName') && attributes.key?(:'namespace_name')

      self.namespace_name = attributes[:'namespace_name'] if attributes[:'namespace_name']

      self.is_metadata_only = attributes[:'isMetadataOnly'] unless attributes[:'isMetadataOnly'].nil?
      self.is_metadata_only = false if is_metadata_only.nil? && !attributes.key?(:'isMetadataOnly') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isMetadataOnly and :is_metadata_only' if attributes.key?(:'isMetadataOnly') && attributes.key?(:'is_metadata_only')

      self.is_metadata_only = attributes[:'is_metadata_only'] unless attributes[:'is_metadata_only'].nil?
      self.is_metadata_only = false if is_metadata_only.nil? && !attributes.key?(:'isMetadataOnly') && !attributes.key?(:'is_metadata_only') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] frequency_backup_scheduled Object to be assigned
    def frequency_backup_scheduled=(frequency_backup_scheduled)
      raise "Invalid value for 'frequency_backup_scheduled': this must be one of the values in FREQUENCY_BACKUP_SCHEDULED_ENUM." if frequency_backup_scheduled && !FREQUENCY_BACKUP_SCHEDULED_ENUM.include?(frequency_backup_scheduled)

      @frequency_backup_scheduled = frequency_backup_scheduled
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        time_backup_scheduled == other.time_backup_scheduled &&
        frequency_backup_scheduled == other.frequency_backup_scheduled &&
        bucket_name == other.bucket_name &&
        compartment_id == other.compartment_id &&
        namespace_name == other.namespace_name &&
        is_metadata_only == other.is_metadata_only
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [time_backup_scheduled, frequency_backup_scheduled, bucket_name, compartment_id, namespace_name, is_metadata_only].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
