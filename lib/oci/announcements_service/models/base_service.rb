# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 0.0.1
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Object representing a single service.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class AnnouncementsService::Models::BaseService
    PLATFORM_TYPE_ENUM = [
      PLATFORM_TYPE_IAAS = 'IAAS'.freeze,
      PLATFORM_TYPE_SAAS = 'SAAS'.freeze,
      PLATFORM_TYPE_PAAS = 'PAAS'.freeze,
      PLATFORM_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    COMMS_MANAGER_NAME_ENUM = [
      COMMS_MANAGER_NAME_CN = 'CN'.freeze,
      COMMS_MANAGER_NAME_FUSION = 'FUSION'.freeze,
      COMMS_MANAGER_NAME_AS = 'AS'.freeze,
      COMMS_MANAGER_NAME_ERF = 'ERF'.freeze,
      COMMS_MANAGER_NAME_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The discriminator property.
    # @return [String]
    attr_accessor :type

    # **[Required]** ID of the service object.
    # @return [String]
    attr_accessor :id

    # **[Required]** Name of the service represented by this object.
    # @return [String]
    attr_accessor :service_name

    # **[Required]** Short name of the team to whom this service object is related.
    # @return [String]
    attr_accessor :short_name

    # **[Required]** Team name to which this service object is related.
    # @return [String]
    attr_accessor :team_name

    # **[Required]** The platform type this service object is related to.
    # @return [String]
    attr_reader :platform_type

    # **[Required]** Name of the comms manager team that manages Notifications to this service.
    # @return [String]
    attr_reader :comms_manager_name

    # **[Required]** The list of realms where this service is not available to be used.
    # @return [Array<String>]
    attr_accessor :excluded_realms

    # **[Required]** The list of previously used names for this service object.
    # @return [Array<String>]
    attr_accessor :previous_service_names

    # The date and time when the service object was created.
    # @return [DateTime]
    attr_accessor :time_created

    # The date and time when the service object was updated.
    # @return [DateTime]
    attr_accessor :time_updated

    # Current state of the service object.
    # @return [String]
    attr_reader :lifecycle_state

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'type',
        'id': :'id',
        'service_name': :'serviceName',
        'short_name': :'shortName',
        'team_name': :'teamName',
        'platform_type': :'platformType',
        'comms_manager_name': :'commsManagerName',
        'excluded_realms': :'excludedRealms',
        'previous_service_names': :'previousServiceNames',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'String',
        'id': :'String',
        'service_name': :'String',
        'short_name': :'String',
        'team_name': :'String',
        'platform_type': :'String',
        'comms_manager_name': :'String',
        'excluded_realms': :'Array<String>',
        'previous_service_names': :'Array<String>',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'type'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::AnnouncementsService::Models::Service' if type == 'Service'
      return 'OCI::AnnouncementsService::Models::ServiceSummary' if type == 'ServiceSummary'
      return 'OCI::AnnouncementsService::Models::NotificationsSummary' if type == 'NotificationsSummary'

      # TODO: Log a warning when the subtype is not found.
      'OCI::AnnouncementsService::Models::BaseService'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :service_name The value to assign to the {#service_name} property
    # @option attributes [String] :short_name The value to assign to the {#short_name} property
    # @option attributes [String] :team_name The value to assign to the {#team_name} property
    # @option attributes [String] :platform_type The value to assign to the {#platform_type} property
    # @option attributes [String] :comms_manager_name The value to assign to the {#comms_manager_name} property
    # @option attributes [Array<String>] :excluded_realms The value to assign to the {#excluded_realms} property
    # @option attributes [Array<String>] :previous_service_names The value to assign to the {#previous_service_names} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.type = attributes[:'type'] if attributes[:'type']

      self.id = attributes[:'id'] if attributes[:'id']

      self.service_name = attributes[:'serviceName'] if attributes[:'serviceName']

      raise 'You cannot provide both :serviceName and :service_name' if attributes.key?(:'serviceName') && attributes.key?(:'service_name')

      self.service_name = attributes[:'service_name'] if attributes[:'service_name']

      self.short_name = attributes[:'shortName'] if attributes[:'shortName']

      raise 'You cannot provide both :shortName and :short_name' if attributes.key?(:'shortName') && attributes.key?(:'short_name')

      self.short_name = attributes[:'short_name'] if attributes[:'short_name']

      self.team_name = attributes[:'teamName'] if attributes[:'teamName']

      raise 'You cannot provide both :teamName and :team_name' if attributes.key?(:'teamName') && attributes.key?(:'team_name')

      self.team_name = attributes[:'team_name'] if attributes[:'team_name']

      self.platform_type = attributes[:'platformType'] if attributes[:'platformType']

      raise 'You cannot provide both :platformType and :platform_type' if attributes.key?(:'platformType') && attributes.key?(:'platform_type')

      self.platform_type = attributes[:'platform_type'] if attributes[:'platform_type']

      self.comms_manager_name = attributes[:'commsManagerName'] if attributes[:'commsManagerName']

      raise 'You cannot provide both :commsManagerName and :comms_manager_name' if attributes.key?(:'commsManagerName') && attributes.key?(:'comms_manager_name')

      self.comms_manager_name = attributes[:'comms_manager_name'] if attributes[:'comms_manager_name']

      self.excluded_realms = attributes[:'excludedRealms'] if attributes[:'excludedRealms']

      raise 'You cannot provide both :excludedRealms and :excluded_realms' if attributes.key?(:'excludedRealms') && attributes.key?(:'excluded_realms')

      self.excluded_realms = attributes[:'excluded_realms'] if attributes[:'excluded_realms']

      self.previous_service_names = attributes[:'previousServiceNames'] if attributes[:'previousServiceNames']

      raise 'You cannot provide both :previousServiceNames and :previous_service_names' if attributes.key?(:'previousServiceNames') && attributes.key?(:'previous_service_names')

      self.previous_service_names = attributes[:'previous_service_names'] if attributes[:'previous_service_names']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] platform_type Object to be assigned
    def platform_type=(platform_type)
      # rubocop:disable Style/ConditionalAssignment
      if platform_type && !PLATFORM_TYPE_ENUM.include?(platform_type)
        OCI.logger.debug("Unknown value for 'platform_type' [" + platform_type + "]. Mapping to 'PLATFORM_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @platform_type = PLATFORM_TYPE_UNKNOWN_ENUM_VALUE
      else
        @platform_type = platform_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] comms_manager_name Object to be assigned
    def comms_manager_name=(comms_manager_name)
      # rubocop:disable Style/ConditionalAssignment
      if comms_manager_name && !COMMS_MANAGER_NAME_ENUM.include?(comms_manager_name)
        OCI.logger.debug("Unknown value for 'comms_manager_name' [" + comms_manager_name + "]. Mapping to 'COMMS_MANAGER_NAME_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @comms_manager_name = COMMS_MANAGER_NAME_UNKNOWN_ENUM_VALUE
      else
        @comms_manager_name = comms_manager_name
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        id == other.id &&
        service_name == other.service_name &&
        short_name == other.short_name &&
        team_name == other.team_name &&
        platform_type == other.platform_type &&
        comms_manager_name == other.comms_manager_name &&
        excluded_realms == other.excluded_realms &&
        previous_service_names == other.previous_service_names &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, id, service_name, short_name, team_name, platform_type, comms_manager_name, excluded_realms, previous_service_names, time_created, time_updated, lifecycle_state].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
