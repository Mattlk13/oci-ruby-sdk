# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230601
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Attributes to summarize the Java download counts in a tenancy.
  class JmsJavaDownloads::Models::RequestSummarizedJavaDownloadCountsDetails
    GROUP_AS_ENUM = [
      GROUP_AS_JAVA_FAMILY = 'JAVA_FAMILY'.freeze,
      GROUP_AS_JAVA_RELEASE = 'JAVA_RELEASE'.freeze,
      GROUP_AS_PLATFORM = 'PLATFORM'.freeze
    ].freeze

    SORT_BY_ENUM = [
      SORT_BY_FAMILY_VERSION = 'FAMILY_VERSION'.freeze,
      SORT_BY_DOWNLOAD_COUNT = 'DOWNLOAD_COUNT'.freeze
    ].freeze

    SORT_ORDER_ENUM = [
      SORT_ORDER_ASC = 'ASC'.freeze,
      SORT_ORDER_DESC = 'DESC'.freeze
    ].freeze

    # **[Required]** The compartment [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) here should be the tenancy OCID.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** Group as property specifying the aggregation type for download counts.
    # @return [String]
    attr_reader :group_as

    # Unique Java family version identifier.
    # @return [String]
    attr_accessor :family_version

    # Unique Java release version identifier.
    # @return [String]
    attr_accessor :release_version

    # The start time from when download data has to be included (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    #
    # @return [DateTime]
    attr_accessor :time_start

    # The end time until when the download data has to be included (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    #
    # @return [DateTime]
    attr_accessor :time_end

    # The property to be used for sorting the aggregated report.
    # @return [String]
    attr_reader :sort_by

    # The sort order for the aggregated report.
    # @return [String]
    attr_reader :sort_order

    # The maximum number of items to return.
    # @return [Integer]
    attr_accessor :limit

    # The page token representing the page at which to start retrieving results. The token is usually retrieved from a previous call.
    #
    # @return [String]
    attr_accessor :page

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'group_as': :'groupAs',
        'family_version': :'familyVersion',
        'release_version': :'releaseVersion',
        'time_start': :'timeStart',
        'time_end': :'timeEnd',
        'sort_by': :'sortBy',
        'sort_order': :'sortOrder',
        'limit': :'limit',
        'page': :'page'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'group_as': :'String',
        'family_version': :'String',
        'release_version': :'String',
        'time_start': :'DateTime',
        'time_end': :'DateTime',
        'sort_by': :'String',
        'sort_order': :'String',
        'limit': :'Integer',
        'page': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :group_as The value to assign to the {#group_as} property
    # @option attributes [String] :family_version The value to assign to the {#family_version} property
    # @option attributes [String] :release_version The value to assign to the {#release_version} property
    # @option attributes [DateTime] :time_start The value to assign to the {#time_start} property
    # @option attributes [DateTime] :time_end The value to assign to the {#time_end} property
    # @option attributes [String] :sort_by The value to assign to the {#sort_by} property
    # @option attributes [String] :sort_order The value to assign to the {#sort_order} property
    # @option attributes [Integer] :limit The value to assign to the {#limit} property
    # @option attributes [String] :page The value to assign to the {#page} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.group_as = attributes[:'groupAs'] if attributes[:'groupAs']

      raise 'You cannot provide both :groupAs and :group_as' if attributes.key?(:'groupAs') && attributes.key?(:'group_as')

      self.group_as = attributes[:'group_as'] if attributes[:'group_as']

      self.family_version = attributes[:'familyVersion'] if attributes[:'familyVersion']

      raise 'You cannot provide both :familyVersion and :family_version' if attributes.key?(:'familyVersion') && attributes.key?(:'family_version')

      self.family_version = attributes[:'family_version'] if attributes[:'family_version']

      self.release_version = attributes[:'releaseVersion'] if attributes[:'releaseVersion']

      raise 'You cannot provide both :releaseVersion and :release_version' if attributes.key?(:'releaseVersion') && attributes.key?(:'release_version')

      self.release_version = attributes[:'release_version'] if attributes[:'release_version']

      self.time_start = attributes[:'timeStart'] if attributes[:'timeStart']

      raise 'You cannot provide both :timeStart and :time_start' if attributes.key?(:'timeStart') && attributes.key?(:'time_start')

      self.time_start = attributes[:'time_start'] if attributes[:'time_start']

      self.time_end = attributes[:'timeEnd'] if attributes[:'timeEnd']

      raise 'You cannot provide both :timeEnd and :time_end' if attributes.key?(:'timeEnd') && attributes.key?(:'time_end')

      self.time_end = attributes[:'time_end'] if attributes[:'time_end']

      self.sort_by = attributes[:'sortBy'] if attributes[:'sortBy']
      self.sort_by = "FAMILY_VERSION" if sort_by.nil? && !attributes.key?(:'sortBy') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :sortBy and :sort_by' if attributes.key?(:'sortBy') && attributes.key?(:'sort_by')

      self.sort_by = attributes[:'sort_by'] if attributes[:'sort_by']
      self.sort_by = "FAMILY_VERSION" if sort_by.nil? && !attributes.key?(:'sortBy') && !attributes.key?(:'sort_by') # rubocop:disable Style/StringLiterals

      self.sort_order = attributes[:'sortOrder'] if attributes[:'sortOrder']
      self.sort_order = "DESC" if sort_order.nil? && !attributes.key?(:'sortOrder') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :sortOrder and :sort_order' if attributes.key?(:'sortOrder') && attributes.key?(:'sort_order')

      self.sort_order = attributes[:'sort_order'] if attributes[:'sort_order']
      self.sort_order = "DESC" if sort_order.nil? && !attributes.key?(:'sortOrder') && !attributes.key?(:'sort_order') # rubocop:disable Style/StringLiterals

      self.limit = attributes[:'limit'] if attributes[:'limit']

      self.page = attributes[:'page'] if attributes[:'page']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] group_as Object to be assigned
    def group_as=(group_as)
      raise "Invalid value for 'group_as': this must be one of the values in GROUP_AS_ENUM." if group_as && !GROUP_AS_ENUM.include?(group_as)

      @group_as = group_as
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort_by Object to be assigned
    def sort_by=(sort_by)
      raise "Invalid value for 'sort_by': this must be one of the values in SORT_BY_ENUM." if sort_by && !SORT_BY_ENUM.include?(sort_by)

      @sort_by = sort_by
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sort_order Object to be assigned
    def sort_order=(sort_order)
      raise "Invalid value for 'sort_order': this must be one of the values in SORT_ORDER_ENUM." if sort_order && !SORT_ORDER_ENUM.include?(sort_order)

      @sort_order = sort_order
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        group_as == other.group_as &&
        family_version == other.family_version &&
        release_version == other.release_version &&
        time_start == other.time_start &&
        time_end == other.time_end &&
        sort_by == other.sort_by &&
        sort_order == other.sort_order &&
        limit == other.limit &&
        page == other.page
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, group_as, family_version, release_version, time_start, time_end, sort_by, sort_order, limit, page].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
