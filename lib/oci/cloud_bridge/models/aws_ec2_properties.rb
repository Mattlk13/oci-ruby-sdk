# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220509
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # AWS virtual machine related properties.
  class CloudBridge::Models::AwsEc2Properties
    # **[Required]** The architecture of the image.
    # @return [String]
    attr_accessor :architecture

    # The boot mode of the instance.
    # @return [String]
    attr_accessor :boot_mode

    # The ID of the Capacity Reservation.
    # @return [String]
    attr_accessor :capacity_reservation_key

    # Indicates if the elastic inference accelerators attached to an instance
    # @return [BOOLEAN]
    attr_accessor :are_elastic_inference_accelerators_present

    # Indicates whether the instance is enabled for AWS Nitro Enclaves.
    # @return [BOOLEAN]
    attr_accessor :is_enclave_options

    # Indicates whether the instance is enabled for hibernation.
    # @return [BOOLEAN]
    attr_accessor :is_hibernation_options

    # The ID of the AMI used to launch the instance.
    # @return [String]
    attr_accessor :image_key

    # **[Required]** The ID of the instance.
    # @return [String]
    attr_accessor :instance_key

    # Indicates whether this is a Spot Instance or a Scheduled Instance.
    # @return [String]
    attr_accessor :instance_lifecycle

    # **[Required]** The instance type.
    # @return [String]
    attr_accessor :instance_type

    # The public IPv4 address, or the Carrier IP address assigned to the instance.
    # @return [String]
    attr_accessor :ip_address

    # The IPv6 address assigned to the instance.
    # @return [String]
    attr_accessor :ipv6_address

    # The kernel associated with this instance, if applicable.
    # @return [String]
    attr_accessor :kernel_key

    # The time the instance was launched.
    # @return [DateTime]
    attr_accessor :time_launch

    # The license configurations for the instance.
    # @return [Array<String>]
    attr_accessor :licenses

    # Provides information on the recovery and maintenance options of your instance.
    # @return [String]
    attr_accessor :maintenance_options

    # The monitoring for the instance.
    # @return [String]
    attr_accessor :monitoring

    # The network interfaces for the instance.
    # @return [Array<OCI::CloudBridge::Models::InstanceNetworkInterface>]
    attr_accessor :network_interfaces

    # @return [OCI::CloudBridge::Models::Placement]
    attr_accessor :placement

    # (IPv4 only) The private DNS hostname name assigned to the instance.
    # @return [String]
    attr_accessor :private_dns_name

    # The private IPv4 address assigned to the instance.
    # @return [String]
    attr_accessor :private_ip_address

    # **[Required]** The device name of the root device volume.
    # @return [String]
    attr_accessor :root_device_name

    # The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
    # @return [String]
    attr_accessor :root_device_type

    # The security groups for the instance.
    # @return [Array<OCI::CloudBridge::Models::GroupIdentifier>]
    attr_accessor :security_groups

    # Indicates whether source/destination checking is enabled.
    # @return [BOOLEAN]
    attr_accessor :is_source_dest_check

    # If the request is a Spot Instance request, this value will be true.
    # @return [BOOLEAN]
    attr_accessor :is_spot_instance

    # Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
    # @return [String]
    attr_accessor :sriov_net_support

    # This attribute is required.
    # @return [OCI::CloudBridge::Models::InstanceState]
    attr_accessor :state

    # EC2-VPC The ID of the subnet in which the instance is running.
    # @return [String]
    attr_accessor :subnet_key

    # Any tags assigned to the instance.
    # @return [Array<OCI::CloudBridge::Models::Tag>]
    attr_accessor :tags

    # If the instance is configured for NitroTPM support, the value is v2.0.
    # @return [String]
    attr_accessor :tpm_support

    # The virtualization type of the instance.
    # @return [String]
    attr_accessor :virtualization_type

    # EC2-VPC The ID of the VPC in which the instance is running.
    # @return [String]
    attr_accessor :vpc_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'architecture': :'architecture',
        'boot_mode': :'bootMode',
        'capacity_reservation_key': :'capacityReservationKey',
        'are_elastic_inference_accelerators_present': :'areElasticInferenceAcceleratorsPresent',
        'is_enclave_options': :'isEnclaveOptions',
        'is_hibernation_options': :'isHibernationOptions',
        'image_key': :'imageKey',
        'instance_key': :'instanceKey',
        'instance_lifecycle': :'instanceLifecycle',
        'instance_type': :'instanceType',
        'ip_address': :'ipAddress',
        'ipv6_address': :'ipv6Address',
        'kernel_key': :'kernelKey',
        'time_launch': :'timeLaunch',
        'licenses': :'licenses',
        'maintenance_options': :'maintenanceOptions',
        'monitoring': :'monitoring',
        'network_interfaces': :'networkInterfaces',
        'placement': :'placement',
        'private_dns_name': :'privateDnsName',
        'private_ip_address': :'privateIpAddress',
        'root_device_name': :'rootDeviceName',
        'root_device_type': :'rootDeviceType',
        'security_groups': :'securityGroups',
        'is_source_dest_check': :'isSourceDestCheck',
        'is_spot_instance': :'isSpotInstance',
        'sriov_net_support': :'sriovNetSupport',
        'state': :'state',
        'subnet_key': :'subnetKey',
        'tags': :'tags',
        'tpm_support': :'tpmSupport',
        'virtualization_type': :'virtualizationType',
        'vpc_key': :'vpcKey'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'architecture': :'String',
        'boot_mode': :'String',
        'capacity_reservation_key': :'String',
        'are_elastic_inference_accelerators_present': :'BOOLEAN',
        'is_enclave_options': :'BOOLEAN',
        'is_hibernation_options': :'BOOLEAN',
        'image_key': :'String',
        'instance_key': :'String',
        'instance_lifecycle': :'String',
        'instance_type': :'String',
        'ip_address': :'String',
        'ipv6_address': :'String',
        'kernel_key': :'String',
        'time_launch': :'DateTime',
        'licenses': :'Array<String>',
        'maintenance_options': :'String',
        'monitoring': :'String',
        'network_interfaces': :'Array<OCI::CloudBridge::Models::InstanceNetworkInterface>',
        'placement': :'OCI::CloudBridge::Models::Placement',
        'private_dns_name': :'String',
        'private_ip_address': :'String',
        'root_device_name': :'String',
        'root_device_type': :'String',
        'security_groups': :'Array<OCI::CloudBridge::Models::GroupIdentifier>',
        'is_source_dest_check': :'BOOLEAN',
        'is_spot_instance': :'BOOLEAN',
        'sriov_net_support': :'String',
        'state': :'OCI::CloudBridge::Models::InstanceState',
        'subnet_key': :'String',
        'tags': :'Array<OCI::CloudBridge::Models::Tag>',
        'tpm_support': :'String',
        'virtualization_type': :'String',
        'vpc_key': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :architecture The value to assign to the {#architecture} property
    # @option attributes [String] :boot_mode The value to assign to the {#boot_mode} property
    # @option attributes [String] :capacity_reservation_key The value to assign to the {#capacity_reservation_key} property
    # @option attributes [BOOLEAN] :are_elastic_inference_accelerators_present The value to assign to the {#are_elastic_inference_accelerators_present} property
    # @option attributes [BOOLEAN] :is_enclave_options The value to assign to the {#is_enclave_options} property
    # @option attributes [BOOLEAN] :is_hibernation_options The value to assign to the {#is_hibernation_options} property
    # @option attributes [String] :image_key The value to assign to the {#image_key} property
    # @option attributes [String] :instance_key The value to assign to the {#instance_key} property
    # @option attributes [String] :instance_lifecycle The value to assign to the {#instance_lifecycle} property
    # @option attributes [String] :instance_type The value to assign to the {#instance_type} property
    # @option attributes [String] :ip_address The value to assign to the {#ip_address} property
    # @option attributes [String] :ipv6_address The value to assign to the {#ipv6_address} property
    # @option attributes [String] :kernel_key The value to assign to the {#kernel_key} property
    # @option attributes [DateTime] :time_launch The value to assign to the {#time_launch} property
    # @option attributes [Array<String>] :licenses The value to assign to the {#licenses} property
    # @option attributes [String] :maintenance_options The value to assign to the {#maintenance_options} property
    # @option attributes [String] :monitoring The value to assign to the {#monitoring} property
    # @option attributes [Array<OCI::CloudBridge::Models::InstanceNetworkInterface>] :network_interfaces The value to assign to the {#network_interfaces} property
    # @option attributes [OCI::CloudBridge::Models::Placement] :placement The value to assign to the {#placement} property
    # @option attributes [String] :private_dns_name The value to assign to the {#private_dns_name} property
    # @option attributes [String] :private_ip_address The value to assign to the {#private_ip_address} property
    # @option attributes [String] :root_device_name The value to assign to the {#root_device_name} property
    # @option attributes [String] :root_device_type The value to assign to the {#root_device_type} property
    # @option attributes [Array<OCI::CloudBridge::Models::GroupIdentifier>] :security_groups The value to assign to the {#security_groups} property
    # @option attributes [BOOLEAN] :is_source_dest_check The value to assign to the {#is_source_dest_check} property
    # @option attributes [BOOLEAN] :is_spot_instance The value to assign to the {#is_spot_instance} property
    # @option attributes [String] :sriov_net_support The value to assign to the {#sriov_net_support} property
    # @option attributes [OCI::CloudBridge::Models::InstanceState] :state The value to assign to the {#state} property
    # @option attributes [String] :subnet_key The value to assign to the {#subnet_key} property
    # @option attributes [Array<OCI::CloudBridge::Models::Tag>] :tags The value to assign to the {#tags} property
    # @option attributes [String] :tpm_support The value to assign to the {#tpm_support} property
    # @option attributes [String] :virtualization_type The value to assign to the {#virtualization_type} property
    # @option attributes [String] :vpc_key The value to assign to the {#vpc_key} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.architecture = attributes[:'architecture'] if attributes[:'architecture']

      self.boot_mode = attributes[:'bootMode'] if attributes[:'bootMode']

      raise 'You cannot provide both :bootMode and :boot_mode' if attributes.key?(:'bootMode') && attributes.key?(:'boot_mode')

      self.boot_mode = attributes[:'boot_mode'] if attributes[:'boot_mode']

      self.capacity_reservation_key = attributes[:'capacityReservationKey'] if attributes[:'capacityReservationKey']

      raise 'You cannot provide both :capacityReservationKey and :capacity_reservation_key' if attributes.key?(:'capacityReservationKey') && attributes.key?(:'capacity_reservation_key')

      self.capacity_reservation_key = attributes[:'capacity_reservation_key'] if attributes[:'capacity_reservation_key']

      self.are_elastic_inference_accelerators_present = attributes[:'areElasticInferenceAcceleratorsPresent'] unless attributes[:'areElasticInferenceAcceleratorsPresent'].nil?
      self.are_elastic_inference_accelerators_present = false if are_elastic_inference_accelerators_present.nil? && !attributes.key?(:'areElasticInferenceAcceleratorsPresent') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :areElasticInferenceAcceleratorsPresent and :are_elastic_inference_accelerators_present' if attributes.key?(:'areElasticInferenceAcceleratorsPresent') && attributes.key?(:'are_elastic_inference_accelerators_present')

      self.are_elastic_inference_accelerators_present = attributes[:'are_elastic_inference_accelerators_present'] unless attributes[:'are_elastic_inference_accelerators_present'].nil?
      self.are_elastic_inference_accelerators_present = false if are_elastic_inference_accelerators_present.nil? && !attributes.key?(:'areElasticInferenceAcceleratorsPresent') && !attributes.key?(:'are_elastic_inference_accelerators_present') # rubocop:disable Style/StringLiterals

      self.is_enclave_options = attributes[:'isEnclaveOptions'] unless attributes[:'isEnclaveOptions'].nil?
      self.is_enclave_options = false if is_enclave_options.nil? && !attributes.key?(:'isEnclaveOptions') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEnclaveOptions and :is_enclave_options' if attributes.key?(:'isEnclaveOptions') && attributes.key?(:'is_enclave_options')

      self.is_enclave_options = attributes[:'is_enclave_options'] unless attributes[:'is_enclave_options'].nil?
      self.is_enclave_options = false if is_enclave_options.nil? && !attributes.key?(:'isEnclaveOptions') && !attributes.key?(:'is_enclave_options') # rubocop:disable Style/StringLiterals

      self.is_hibernation_options = attributes[:'isHibernationOptions'] unless attributes[:'isHibernationOptions'].nil?
      self.is_hibernation_options = false if is_hibernation_options.nil? && !attributes.key?(:'isHibernationOptions') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isHibernationOptions and :is_hibernation_options' if attributes.key?(:'isHibernationOptions') && attributes.key?(:'is_hibernation_options')

      self.is_hibernation_options = attributes[:'is_hibernation_options'] unless attributes[:'is_hibernation_options'].nil?
      self.is_hibernation_options = false if is_hibernation_options.nil? && !attributes.key?(:'isHibernationOptions') && !attributes.key?(:'is_hibernation_options') # rubocop:disable Style/StringLiterals

      self.image_key = attributes[:'imageKey'] if attributes[:'imageKey']

      raise 'You cannot provide both :imageKey and :image_key' if attributes.key?(:'imageKey') && attributes.key?(:'image_key')

      self.image_key = attributes[:'image_key'] if attributes[:'image_key']

      self.instance_key = attributes[:'instanceKey'] if attributes[:'instanceKey']

      raise 'You cannot provide both :instanceKey and :instance_key' if attributes.key?(:'instanceKey') && attributes.key?(:'instance_key')

      self.instance_key = attributes[:'instance_key'] if attributes[:'instance_key']

      self.instance_lifecycle = attributes[:'instanceLifecycle'] if attributes[:'instanceLifecycle']

      raise 'You cannot provide both :instanceLifecycle and :instance_lifecycle' if attributes.key?(:'instanceLifecycle') && attributes.key?(:'instance_lifecycle')

      self.instance_lifecycle = attributes[:'instance_lifecycle'] if attributes[:'instance_lifecycle']

      self.instance_type = attributes[:'instanceType'] if attributes[:'instanceType']

      raise 'You cannot provide both :instanceType and :instance_type' if attributes.key?(:'instanceType') && attributes.key?(:'instance_type')

      self.instance_type = attributes[:'instance_type'] if attributes[:'instance_type']

      self.ip_address = attributes[:'ipAddress'] if attributes[:'ipAddress']

      raise 'You cannot provide both :ipAddress and :ip_address' if attributes.key?(:'ipAddress') && attributes.key?(:'ip_address')

      self.ip_address = attributes[:'ip_address'] if attributes[:'ip_address']

      self.ipv6_address = attributes[:'ipv6Address'] if attributes[:'ipv6Address']

      raise 'You cannot provide both :ipv6Address and :ipv6_address' if attributes.key?(:'ipv6Address') && attributes.key?(:'ipv6_address')

      self.ipv6_address = attributes[:'ipv6_address'] if attributes[:'ipv6_address']

      self.kernel_key = attributes[:'kernelKey'] if attributes[:'kernelKey']

      raise 'You cannot provide both :kernelKey and :kernel_key' if attributes.key?(:'kernelKey') && attributes.key?(:'kernel_key')

      self.kernel_key = attributes[:'kernel_key'] if attributes[:'kernel_key']

      self.time_launch = attributes[:'timeLaunch'] if attributes[:'timeLaunch']

      raise 'You cannot provide both :timeLaunch and :time_launch' if attributes.key?(:'timeLaunch') && attributes.key?(:'time_launch')

      self.time_launch = attributes[:'time_launch'] if attributes[:'time_launch']

      self.licenses = attributes[:'licenses'] if attributes[:'licenses']

      self.maintenance_options = attributes[:'maintenanceOptions'] if attributes[:'maintenanceOptions']

      raise 'You cannot provide both :maintenanceOptions and :maintenance_options' if attributes.key?(:'maintenanceOptions') && attributes.key?(:'maintenance_options')

      self.maintenance_options = attributes[:'maintenance_options'] if attributes[:'maintenance_options']

      self.monitoring = attributes[:'monitoring'] if attributes[:'monitoring']

      self.network_interfaces = attributes[:'networkInterfaces'] if attributes[:'networkInterfaces']

      raise 'You cannot provide both :networkInterfaces and :network_interfaces' if attributes.key?(:'networkInterfaces') && attributes.key?(:'network_interfaces')

      self.network_interfaces = attributes[:'network_interfaces'] if attributes[:'network_interfaces']

      self.placement = attributes[:'placement'] if attributes[:'placement']

      self.private_dns_name = attributes[:'privateDnsName'] if attributes[:'privateDnsName']

      raise 'You cannot provide both :privateDnsName and :private_dns_name' if attributes.key?(:'privateDnsName') && attributes.key?(:'private_dns_name')

      self.private_dns_name = attributes[:'private_dns_name'] if attributes[:'private_dns_name']

      self.private_ip_address = attributes[:'privateIpAddress'] if attributes[:'privateIpAddress']

      raise 'You cannot provide both :privateIpAddress and :private_ip_address' if attributes.key?(:'privateIpAddress') && attributes.key?(:'private_ip_address')

      self.private_ip_address = attributes[:'private_ip_address'] if attributes[:'private_ip_address']

      self.root_device_name = attributes[:'rootDeviceName'] if attributes[:'rootDeviceName']

      raise 'You cannot provide both :rootDeviceName and :root_device_name' if attributes.key?(:'rootDeviceName') && attributes.key?(:'root_device_name')

      self.root_device_name = attributes[:'root_device_name'] if attributes[:'root_device_name']

      self.root_device_type = attributes[:'rootDeviceType'] if attributes[:'rootDeviceType']

      raise 'You cannot provide both :rootDeviceType and :root_device_type' if attributes.key?(:'rootDeviceType') && attributes.key?(:'root_device_type')

      self.root_device_type = attributes[:'root_device_type'] if attributes[:'root_device_type']

      self.security_groups = attributes[:'securityGroups'] if attributes[:'securityGroups']

      raise 'You cannot provide both :securityGroups and :security_groups' if attributes.key?(:'securityGroups') && attributes.key?(:'security_groups')

      self.security_groups = attributes[:'security_groups'] if attributes[:'security_groups']

      self.is_source_dest_check = attributes[:'isSourceDestCheck'] unless attributes[:'isSourceDestCheck'].nil?
      self.is_source_dest_check = false if is_source_dest_check.nil? && !attributes.key?(:'isSourceDestCheck') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSourceDestCheck and :is_source_dest_check' if attributes.key?(:'isSourceDestCheck') && attributes.key?(:'is_source_dest_check')

      self.is_source_dest_check = attributes[:'is_source_dest_check'] unless attributes[:'is_source_dest_check'].nil?
      self.is_source_dest_check = false if is_source_dest_check.nil? && !attributes.key?(:'isSourceDestCheck') && !attributes.key?(:'is_source_dest_check') # rubocop:disable Style/StringLiterals

      self.is_spot_instance = attributes[:'isSpotInstance'] unless attributes[:'isSpotInstance'].nil?
      self.is_spot_instance = false if is_spot_instance.nil? && !attributes.key?(:'isSpotInstance') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSpotInstance and :is_spot_instance' if attributes.key?(:'isSpotInstance') && attributes.key?(:'is_spot_instance')

      self.is_spot_instance = attributes[:'is_spot_instance'] unless attributes[:'is_spot_instance'].nil?
      self.is_spot_instance = false if is_spot_instance.nil? && !attributes.key?(:'isSpotInstance') && !attributes.key?(:'is_spot_instance') # rubocop:disable Style/StringLiterals

      self.sriov_net_support = attributes[:'sriovNetSupport'] if attributes[:'sriovNetSupport']

      raise 'You cannot provide both :sriovNetSupport and :sriov_net_support' if attributes.key?(:'sriovNetSupport') && attributes.key?(:'sriov_net_support')

      self.sriov_net_support = attributes[:'sriov_net_support'] if attributes[:'sriov_net_support']

      self.state = attributes[:'state'] if attributes[:'state']

      self.subnet_key = attributes[:'subnetKey'] if attributes[:'subnetKey']

      raise 'You cannot provide both :subnetKey and :subnet_key' if attributes.key?(:'subnetKey') && attributes.key?(:'subnet_key')

      self.subnet_key = attributes[:'subnet_key'] if attributes[:'subnet_key']

      self.tags = attributes[:'tags'] if attributes[:'tags']

      self.tpm_support = attributes[:'tpmSupport'] if attributes[:'tpmSupport']

      raise 'You cannot provide both :tpmSupport and :tpm_support' if attributes.key?(:'tpmSupport') && attributes.key?(:'tpm_support')

      self.tpm_support = attributes[:'tpm_support'] if attributes[:'tpm_support']

      self.virtualization_type = attributes[:'virtualizationType'] if attributes[:'virtualizationType']

      raise 'You cannot provide both :virtualizationType and :virtualization_type' if attributes.key?(:'virtualizationType') && attributes.key?(:'virtualization_type')

      self.virtualization_type = attributes[:'virtualization_type'] if attributes[:'virtualization_type']

      self.vpc_key = attributes[:'vpcKey'] if attributes[:'vpcKey']

      raise 'You cannot provide both :vpcKey and :vpc_key' if attributes.key?(:'vpcKey') && attributes.key?(:'vpc_key')

      self.vpc_key = attributes[:'vpc_key'] if attributes[:'vpc_key']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        architecture == other.architecture &&
        boot_mode == other.boot_mode &&
        capacity_reservation_key == other.capacity_reservation_key &&
        are_elastic_inference_accelerators_present == other.are_elastic_inference_accelerators_present &&
        is_enclave_options == other.is_enclave_options &&
        is_hibernation_options == other.is_hibernation_options &&
        image_key == other.image_key &&
        instance_key == other.instance_key &&
        instance_lifecycle == other.instance_lifecycle &&
        instance_type == other.instance_type &&
        ip_address == other.ip_address &&
        ipv6_address == other.ipv6_address &&
        kernel_key == other.kernel_key &&
        time_launch == other.time_launch &&
        licenses == other.licenses &&
        maintenance_options == other.maintenance_options &&
        monitoring == other.monitoring &&
        network_interfaces == other.network_interfaces &&
        placement == other.placement &&
        private_dns_name == other.private_dns_name &&
        private_ip_address == other.private_ip_address &&
        root_device_name == other.root_device_name &&
        root_device_type == other.root_device_type &&
        security_groups == other.security_groups &&
        is_source_dest_check == other.is_source_dest_check &&
        is_spot_instance == other.is_spot_instance &&
        sriov_net_support == other.sriov_net_support &&
        state == other.state &&
        subnet_key == other.subnet_key &&
        tags == other.tags &&
        tpm_support == other.tpm_support &&
        virtualization_type == other.virtualization_type &&
        vpc_key == other.vpc_key
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [architecture, boot_mode, capacity_reservation_key, are_elastic_inference_accelerators_present, is_enclave_options, is_hibernation_options, image_key, instance_key, instance_lifecycle, instance_type, ip_address, ipv6_address, kernel_key, time_launch, licenses, maintenance_options, monitoring, network_interfaces, placement, private_dns_name, private_ip_address, root_device_name, root_device_type, security_groups, is_source_dest_check, is_spot_instance, sriov_net_support, state, subnet_key, tags, tpm_support, virtualization_type, vpc_key].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
