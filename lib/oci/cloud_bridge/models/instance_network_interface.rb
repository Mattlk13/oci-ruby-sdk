# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220509
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Describes a network interface.
  class CloudBridge::Models::InstanceNetworkInterface
    # @return [OCI::CloudBridge::Models::InstanceNetworkInterfaceAssociation]
    attr_accessor :association

    # @return [OCI::CloudBridge::Models::InstanceNetworkInterfaceAttachment]
    attr_accessor :attachment

    # The description.
    # @return [String]
    attr_accessor :description

    # The security groups.
    # @return [Array<OCI::CloudBridge::Models::GroupIdentifier>]
    attr_accessor :security_groups

    # The type of network interface.
    # @return [String]
    attr_accessor :interface_type

    # The IPv4 delegated prefixes that are assigned to the network interface.
    # @return [Array<String>]
    attr_accessor :ipv4_prefixes

    # The IPv6 addresses associated with the network interface.
    # @return [Array<String>]
    attr_accessor :ipv6_addresses

    # The IPv6 delegated prefixes that are assigned to the network interface.
    # @return [Array<String>]
    attr_accessor :ipv6_prefixes

    # The MAC address.
    # @return [String]
    attr_accessor :mac_address

    # The ID of the network interface.
    # @return [String]
    attr_accessor :network_interface_key

    # The ID of the AWS account that created the network interface.
    # @return [String]
    attr_accessor :owner_key

    # The private IPv4 addresses associated with the network interface.
    # @return [Array<OCI::CloudBridge::Models::InstancePrivateIpAddress>]
    attr_accessor :private_ip_addresses

    # Indicates whether source/destination checking is enabled.
    # @return [BOOLEAN]
    attr_accessor :is_source_dest_check

    # The status of the network interface.
    # @return [String]
    attr_accessor :status

    # The ID of the subnet.
    # @return [String]
    attr_accessor :subnet_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'association': :'association',
        'attachment': :'attachment',
        'description': :'description',
        'security_groups': :'securityGroups',
        'interface_type': :'interfaceType',
        'ipv4_prefixes': :'ipv4Prefixes',
        'ipv6_addresses': :'ipv6Addresses',
        'ipv6_prefixes': :'ipv6Prefixes',
        'mac_address': :'macAddress',
        'network_interface_key': :'networkInterfaceKey',
        'owner_key': :'ownerKey',
        'private_ip_addresses': :'privateIpAddresses',
        'is_source_dest_check': :'isSourceDestCheck',
        'status': :'status',
        'subnet_key': :'subnetKey'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'association': :'OCI::CloudBridge::Models::InstanceNetworkInterfaceAssociation',
        'attachment': :'OCI::CloudBridge::Models::InstanceNetworkInterfaceAttachment',
        'description': :'String',
        'security_groups': :'Array<OCI::CloudBridge::Models::GroupIdentifier>',
        'interface_type': :'String',
        'ipv4_prefixes': :'Array<String>',
        'ipv6_addresses': :'Array<String>',
        'ipv6_prefixes': :'Array<String>',
        'mac_address': :'String',
        'network_interface_key': :'String',
        'owner_key': :'String',
        'private_ip_addresses': :'Array<OCI::CloudBridge::Models::InstancePrivateIpAddress>',
        'is_source_dest_check': :'BOOLEAN',
        'status': :'String',
        'subnet_key': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::CloudBridge::Models::InstanceNetworkInterfaceAssociation] :association The value to assign to the {#association} property
    # @option attributes [OCI::CloudBridge::Models::InstanceNetworkInterfaceAttachment] :attachment The value to assign to the {#attachment} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Array<OCI::CloudBridge::Models::GroupIdentifier>] :security_groups The value to assign to the {#security_groups} property
    # @option attributes [String] :interface_type The value to assign to the {#interface_type} property
    # @option attributes [Array<String>] :ipv4_prefixes The value to assign to the {#ipv4_prefixes} property
    # @option attributes [Array<String>] :ipv6_addresses The value to assign to the {#ipv6_addresses} property
    # @option attributes [Array<String>] :ipv6_prefixes The value to assign to the {#ipv6_prefixes} property
    # @option attributes [String] :mac_address The value to assign to the {#mac_address} property
    # @option attributes [String] :network_interface_key The value to assign to the {#network_interface_key} property
    # @option attributes [String] :owner_key The value to assign to the {#owner_key} property
    # @option attributes [Array<OCI::CloudBridge::Models::InstancePrivateIpAddress>] :private_ip_addresses The value to assign to the {#private_ip_addresses} property
    # @option attributes [BOOLEAN] :is_source_dest_check The value to assign to the {#is_source_dest_check} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :subnet_key The value to assign to the {#subnet_key} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.association = attributes[:'association'] if attributes[:'association']

      self.attachment = attributes[:'attachment'] if attributes[:'attachment']

      self.description = attributes[:'description'] if attributes[:'description']

      self.security_groups = attributes[:'securityGroups'] if attributes[:'securityGroups']

      raise 'You cannot provide both :securityGroups and :security_groups' if attributes.key?(:'securityGroups') && attributes.key?(:'security_groups')

      self.security_groups = attributes[:'security_groups'] if attributes[:'security_groups']

      self.interface_type = attributes[:'interfaceType'] if attributes[:'interfaceType']

      raise 'You cannot provide both :interfaceType and :interface_type' if attributes.key?(:'interfaceType') && attributes.key?(:'interface_type')

      self.interface_type = attributes[:'interface_type'] if attributes[:'interface_type']

      self.ipv4_prefixes = attributes[:'ipv4Prefixes'] if attributes[:'ipv4Prefixes']

      raise 'You cannot provide both :ipv4Prefixes and :ipv4_prefixes' if attributes.key?(:'ipv4Prefixes') && attributes.key?(:'ipv4_prefixes')

      self.ipv4_prefixes = attributes[:'ipv4_prefixes'] if attributes[:'ipv4_prefixes']

      self.ipv6_addresses = attributes[:'ipv6Addresses'] if attributes[:'ipv6Addresses']

      raise 'You cannot provide both :ipv6Addresses and :ipv6_addresses' if attributes.key?(:'ipv6Addresses') && attributes.key?(:'ipv6_addresses')

      self.ipv6_addresses = attributes[:'ipv6_addresses'] if attributes[:'ipv6_addresses']

      self.ipv6_prefixes = attributes[:'ipv6Prefixes'] if attributes[:'ipv6Prefixes']

      raise 'You cannot provide both :ipv6Prefixes and :ipv6_prefixes' if attributes.key?(:'ipv6Prefixes') && attributes.key?(:'ipv6_prefixes')

      self.ipv6_prefixes = attributes[:'ipv6_prefixes'] if attributes[:'ipv6_prefixes']

      self.mac_address = attributes[:'macAddress'] if attributes[:'macAddress']

      raise 'You cannot provide both :macAddress and :mac_address' if attributes.key?(:'macAddress') && attributes.key?(:'mac_address')

      self.mac_address = attributes[:'mac_address'] if attributes[:'mac_address']

      self.network_interface_key = attributes[:'networkInterfaceKey'] if attributes[:'networkInterfaceKey']

      raise 'You cannot provide both :networkInterfaceKey and :network_interface_key' if attributes.key?(:'networkInterfaceKey') && attributes.key?(:'network_interface_key')

      self.network_interface_key = attributes[:'network_interface_key'] if attributes[:'network_interface_key']

      self.owner_key = attributes[:'ownerKey'] if attributes[:'ownerKey']

      raise 'You cannot provide both :ownerKey and :owner_key' if attributes.key?(:'ownerKey') && attributes.key?(:'owner_key')

      self.owner_key = attributes[:'owner_key'] if attributes[:'owner_key']

      self.private_ip_addresses = attributes[:'privateIpAddresses'] if attributes[:'privateIpAddresses']

      raise 'You cannot provide both :privateIpAddresses and :private_ip_addresses' if attributes.key?(:'privateIpAddresses') && attributes.key?(:'private_ip_addresses')

      self.private_ip_addresses = attributes[:'private_ip_addresses'] if attributes[:'private_ip_addresses']

      self.is_source_dest_check = attributes[:'isSourceDestCheck'] unless attributes[:'isSourceDestCheck'].nil?
      self.is_source_dest_check = false if is_source_dest_check.nil? && !attributes.key?(:'isSourceDestCheck') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSourceDestCheck and :is_source_dest_check' if attributes.key?(:'isSourceDestCheck') && attributes.key?(:'is_source_dest_check')

      self.is_source_dest_check = attributes[:'is_source_dest_check'] unless attributes[:'is_source_dest_check'].nil?
      self.is_source_dest_check = false if is_source_dest_check.nil? && !attributes.key?(:'isSourceDestCheck') && !attributes.key?(:'is_source_dest_check') # rubocop:disable Style/StringLiterals

      self.status = attributes[:'status'] if attributes[:'status']

      self.subnet_key = attributes[:'subnetKey'] if attributes[:'subnetKey']

      raise 'You cannot provide both :subnetKey and :subnet_key' if attributes.key?(:'subnetKey') && attributes.key?(:'subnet_key')

      self.subnet_key = attributes[:'subnet_key'] if attributes[:'subnet_key']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        association == other.association &&
        attachment == other.attachment &&
        description == other.description &&
        security_groups == other.security_groups &&
        interface_type == other.interface_type &&
        ipv4_prefixes == other.ipv4_prefixes &&
        ipv6_addresses == other.ipv6_addresses &&
        ipv6_prefixes == other.ipv6_prefixes &&
        mac_address == other.mac_address &&
        network_interface_key == other.network_interface_key &&
        owner_key == other.owner_key &&
        private_ip_addresses == other.private_ip_addresses &&
        is_source_dest_check == other.is_source_dest_check &&
        status == other.status &&
        subnet_key == other.subnet_key
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [association, attachment, description, security_groups, interface_type, ipv4_prefixes, ipv6_addresses, ipv6_prefixes, mac_address, network_interface_key, owner_key, private_ip_addresses, is_source_dest_check, status, subnet_key].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
