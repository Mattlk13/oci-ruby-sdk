# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Settings to use for generating speech with a model from ORACLE family.
  class AiSpeech::Models::TtsOracleSpeechSettings
    TEXT_TYPE_ENUM = [
      TEXT_TYPE_TEXT = 'TEXT'.freeze,
      TEXT_TYPE_SSML = 'SSML'.freeze
    ].freeze

    OUTPUT_FORMAT_ENUM = [
      OUTPUT_FORMAT_MP3 = 'MP3'.freeze,
      OUTPUT_FORMAT_OGG = 'OGG'.freeze,
      OUTPUT_FORMAT_PCM = 'PCM'.freeze,
      OUTPUT_FORMAT_JSON = 'JSON'.freeze
    ].freeze

    SPEECH_MARK_TYPES_ENUM = [
      SPEECH_MARK_TYPES_SENTENCE = 'SENTENCE'.freeze,
      SPEECH_MARK_TYPES_WORD = 'WORD'.freeze
    ].freeze

    # The format in which the input text has been supplied i.e., Text or SSML. The supported text types are:
    # - TEXT
    # - SSML
    #
    # @return [String]
    attr_reader :text_type

    # The sample rate of the generated audio. By default, the audio will be generated with speaker voice sample rate.
    #
    # @return [Integer]
    attr_accessor :sample_rate_in_hz

    # The format of audio in which the user wants the audio to be in. The supported output formats are:
    # - MP3
    # - OGG
    # - PCM
    # - JSON
    #
    # @return [String]
    attr_reader :output_format

    # The kind of time stamp markings the user wants for the audio.
    # This property should be provided if outputFormat is json, otherwise it will be ignored.
    # null value (i.e. no value is not specified) indicates no speech marking.
    # The supported speech mark types are:
    # - SENTENCE
    # - WORD
    #
    # @return [Array<String>]
    attr_reader :speech_mark_types

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'text_type': :'textType',
        'sample_rate_in_hz': :'sampleRateInHz',
        'output_format': :'outputFormat',
        'speech_mark_types': :'speechMarkTypes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'text_type': :'String',
        'sample_rate_in_hz': :'Integer',
        'output_format': :'String',
        'speech_mark_types': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :text_type The value to assign to the {#text_type} property
    # @option attributes [Integer] :sample_rate_in_hz The value to assign to the {#sample_rate_in_hz} property
    # @option attributes [String] :output_format The value to assign to the {#output_format} property
    # @option attributes [Array<String>] :speech_mark_types The value to assign to the {#speech_mark_types} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.text_type = attributes[:'textType'] if attributes[:'textType']
      self.text_type = "TEXT" if text_type.nil? && !attributes.key?(:'textType') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :textType and :text_type' if attributes.key?(:'textType') && attributes.key?(:'text_type')

      self.text_type = attributes[:'text_type'] if attributes[:'text_type']
      self.text_type = "TEXT" if text_type.nil? && !attributes.key?(:'textType') && !attributes.key?(:'text_type') # rubocop:disable Style/StringLiterals

      self.sample_rate_in_hz = attributes[:'sampleRateInHz'] if attributes[:'sampleRateInHz']

      raise 'You cannot provide both :sampleRateInHz and :sample_rate_in_hz' if attributes.key?(:'sampleRateInHz') && attributes.key?(:'sample_rate_in_hz')

      self.sample_rate_in_hz = attributes[:'sample_rate_in_hz'] if attributes[:'sample_rate_in_hz']

      self.output_format = attributes[:'outputFormat'] if attributes[:'outputFormat']
      self.output_format = "PCM" if output_format.nil? && !attributes.key?(:'outputFormat') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :outputFormat and :output_format' if attributes.key?(:'outputFormat') && attributes.key?(:'output_format')

      self.output_format = attributes[:'output_format'] if attributes[:'output_format']
      self.output_format = "PCM" if output_format.nil? && !attributes.key?(:'outputFormat') && !attributes.key?(:'output_format') # rubocop:disable Style/StringLiterals

      self.speech_mark_types = attributes[:'speechMarkTypes'] if attributes[:'speechMarkTypes']

      raise 'You cannot provide both :speechMarkTypes and :speech_mark_types' if attributes.key?(:'speechMarkTypes') && attributes.key?(:'speech_mark_types')

      self.speech_mark_types = attributes[:'speech_mark_types'] if attributes[:'speech_mark_types']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] text_type Object to be assigned
    def text_type=(text_type)
      raise "Invalid value for 'text_type': this must be one of the values in TEXT_TYPE_ENUM." if text_type && !TEXT_TYPE_ENUM.include?(text_type)

      @text_type = text_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] output_format Object to be assigned
    def output_format=(output_format)
      raise "Invalid value for 'output_format': this must be one of the values in OUTPUT_FORMAT_ENUM." if output_format && !OUTPUT_FORMAT_ENUM.include?(output_format)

      @output_format = output_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] speech_mark_types Object to be assigned
    def speech_mark_types=(speech_mark_types)
      # rubocop:disable Style/ConditionalAssignment
      if speech_mark_types.nil?
        @speech_mark_types = nil
      else
        speech_mark_types.each do |item|
          raise "Invalid value for 'speech_mark_types': this must be one of the values in SPEECH_MARK_TYPES_ENUM." unless SPEECH_MARK_TYPES_ENUM.include?(item)
        end
        @speech_mark_types = speech_mark_types
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        text_type == other.text_type &&
        sample_rate_in_hz == other.sample_rate_in_hz &&
        output_format == other.output_format &&
        speech_mark_types == other.speech_mark_types
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [text_type, sample_rate_in_hz, output_format, speech_mark_types].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
