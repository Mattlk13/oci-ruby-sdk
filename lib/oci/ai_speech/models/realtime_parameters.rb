# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220101
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Parameters to be sent to the realtime speech service over a websocket connection.
  class AiSpeech::Models::RealtimeParameters
    STABILIZE_PARTIAL_RESULTS_ENUM = [
      STABILIZE_PARTIAL_RESULTS_NONE = 'NONE'.freeze,
      STABILIZE_PARTIAL_RESULTS_LOW = 'LOW'.freeze,
      STABILIZE_PARTIAL_RESULTS_MEDIUM = 'MEDIUM'.freeze,
      STABILIZE_PARTIAL_RESULTS_HIGH = 'HIGH'.freeze
    ].freeze

    MODEL_DOMAIN_ENUM = [
      MODEL_DOMAIN_GENERIC = 'GENERIC'.freeze,
      MODEL_DOMAIN_MEDICAL = 'MEDICAL'.freeze
    ].freeze

    PUNCTUATION_ENUM = [
      PUNCTUATION_NONE = 'NONE'.freeze,
      PUNCTUATION_SPOKEN = 'SPOKEN'.freeze,
      PUNCTUATION_AUTO = 'AUTO'.freeze
    ].freeze

    # Audio encoding to use
    # - audio/raw;rate=16000
    # - audio/raw;rate=8000
    # - audio/raw;rate=8000;codec=mulaw
    # - audio/raw;rate=8000;codec=alaw
    #
    # @return [String]
    attr_accessor :encoding

    # Toggle for ack messages.
    # @return [BOOLEAN]
    attr_accessor :is_ack_enabled

    # Silence threshold for Realtime Speech partial results in milliseconds.
    # @return [Integer]
    attr_accessor :partial_silence_threshold_in_ms

    # Silence threshold for Realtime Speech final results in milliseconds.
    # @return [Integer]
    attr_accessor :final_silence_threshold_in_ms

    # When enabled sets the amount of confidence required for latest tokens before returning them as part of a new partial result
    # @return [String]
    attr_reader :stabilize_partial_results

    # Model Domain.
    # @return [String]
    attr_reader :model_domain

    # Locale value as per given in [https://datatracker.ietf.org/doc/html/rfc5646].
    # - en-US: English - United States
    # - es-ES: Spanish - Spain
    # - pt-BR: Portuguese - Brazil
    # - en-GB: English - Great Britain
    # - en-AU: English - Australia
    # - en-IN: English - India
    # - hi-IN: Hindi - India
    # - fr-FR: French - France
    # - de-DE: German - Germany
    # - it-IT: Italian - Italy
    #
    # @return [String]
    attr_accessor :language_code

    # If set to true, the service will not fail connection attempt if it encounters any issues that prevent the loading of all specified user customizations. Any invalid customizations will simply be ignored and connection will continue being established with the default base model and any remaining valid customizations.
    # If set to false, if the service is unable to load any of the specified customizations, an error detailing why will be returned and the session will end.
    #
    # @return [BOOLEAN]
    attr_accessor :should_ignore_invalid_customizations

    # Array of customization objects.
    # @return [Array<OCI::AiSpeech::Models::CustomizationInference>]
    attr_accessor :customizations

    # Configure punctuations in the generated transcriptions. Disabled by default.
    # - NONE: No punctuation in the transcription response
    # - SPOKEN: Punctuations in response only when verbally spoken
    # - AUTO: Automatic punctuation in the response, spoken punctuations are disabled
    #
    # @return [String]
    attr_reader :punctuation

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'encoding': :'encoding',
        'is_ack_enabled': :'isAckEnabled',
        'partial_silence_threshold_in_ms': :'partialSilenceThresholdInMs',
        'final_silence_threshold_in_ms': :'finalSilenceThresholdInMs',
        'stabilize_partial_results': :'stabilizePartialResults',
        'model_domain': :'modelDomain',
        'language_code': :'languageCode',
        'should_ignore_invalid_customizations': :'shouldIgnoreInvalidCustomizations',
        'customizations': :'customizations',
        'punctuation': :'punctuation'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'encoding': :'String',
        'is_ack_enabled': :'BOOLEAN',
        'partial_silence_threshold_in_ms': :'Integer',
        'final_silence_threshold_in_ms': :'Integer',
        'stabilize_partial_results': :'String',
        'model_domain': :'String',
        'language_code': :'String',
        'should_ignore_invalid_customizations': :'BOOLEAN',
        'customizations': :'Array<OCI::AiSpeech::Models::CustomizationInference>',
        'punctuation': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :encoding The value to assign to the {#encoding} property
    # @option attributes [BOOLEAN] :is_ack_enabled The value to assign to the {#is_ack_enabled} property
    # @option attributes [Integer] :partial_silence_threshold_in_ms The value to assign to the {#partial_silence_threshold_in_ms} property
    # @option attributes [Integer] :final_silence_threshold_in_ms The value to assign to the {#final_silence_threshold_in_ms} property
    # @option attributes [String] :stabilize_partial_results The value to assign to the {#stabilize_partial_results} property
    # @option attributes [String] :model_domain The value to assign to the {#model_domain} property
    # @option attributes [String] :language_code The value to assign to the {#language_code} property
    # @option attributes [BOOLEAN] :should_ignore_invalid_customizations The value to assign to the {#should_ignore_invalid_customizations} property
    # @option attributes [Array<OCI::AiSpeech::Models::CustomizationInference>] :customizations The value to assign to the {#customizations} property
    # @option attributes [String] :punctuation The value to assign to the {#punctuation} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.encoding = attributes[:'encoding'] if attributes[:'encoding']
      self.encoding = "audio/raw;rate=16000" if encoding.nil? && !attributes.key?(:'encoding') # rubocop:disable Style/StringLiterals

      self.is_ack_enabled = attributes[:'isAckEnabled'] unless attributes[:'isAckEnabled'].nil?
      self.is_ack_enabled = false if is_ack_enabled.nil? && !attributes.key?(:'isAckEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isAckEnabled and :is_ack_enabled' if attributes.key?(:'isAckEnabled') && attributes.key?(:'is_ack_enabled')

      self.is_ack_enabled = attributes[:'is_ack_enabled'] unless attributes[:'is_ack_enabled'].nil?
      self.is_ack_enabled = false if is_ack_enabled.nil? && !attributes.key?(:'isAckEnabled') && !attributes.key?(:'is_ack_enabled') # rubocop:disable Style/StringLiterals

      self.partial_silence_threshold_in_ms = attributes[:'partialSilenceThresholdInMs'] if attributes[:'partialSilenceThresholdInMs']

      raise 'You cannot provide both :partialSilenceThresholdInMs and :partial_silence_threshold_in_ms' if attributes.key?(:'partialSilenceThresholdInMs') && attributes.key?(:'partial_silence_threshold_in_ms')

      self.partial_silence_threshold_in_ms = attributes[:'partial_silence_threshold_in_ms'] if attributes[:'partial_silence_threshold_in_ms']

      self.final_silence_threshold_in_ms = attributes[:'finalSilenceThresholdInMs'] if attributes[:'finalSilenceThresholdInMs']

      raise 'You cannot provide both :finalSilenceThresholdInMs and :final_silence_threshold_in_ms' if attributes.key?(:'finalSilenceThresholdInMs') && attributes.key?(:'final_silence_threshold_in_ms')

      self.final_silence_threshold_in_ms = attributes[:'final_silence_threshold_in_ms'] if attributes[:'final_silence_threshold_in_ms']

      self.stabilize_partial_results = attributes[:'stabilizePartialResults'] if attributes[:'stabilizePartialResults']
      self.stabilize_partial_results = "NONE" if stabilize_partial_results.nil? && !attributes.key?(:'stabilizePartialResults') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :stabilizePartialResults and :stabilize_partial_results' if attributes.key?(:'stabilizePartialResults') && attributes.key?(:'stabilize_partial_results')

      self.stabilize_partial_results = attributes[:'stabilize_partial_results'] if attributes[:'stabilize_partial_results']
      self.stabilize_partial_results = "NONE" if stabilize_partial_results.nil? && !attributes.key?(:'stabilizePartialResults') && !attributes.key?(:'stabilize_partial_results') # rubocop:disable Style/StringLiterals

      self.model_domain = attributes[:'modelDomain'] if attributes[:'modelDomain']
      self.model_domain = "GENERIC" if model_domain.nil? && !attributes.key?(:'modelDomain') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :modelDomain and :model_domain' if attributes.key?(:'modelDomain') && attributes.key?(:'model_domain')

      self.model_domain = attributes[:'model_domain'] if attributes[:'model_domain']
      self.model_domain = "GENERIC" if model_domain.nil? && !attributes.key?(:'modelDomain') && !attributes.key?(:'model_domain') # rubocop:disable Style/StringLiterals

      self.language_code = attributes[:'languageCode'] if attributes[:'languageCode']

      raise 'You cannot provide both :languageCode and :language_code' if attributes.key?(:'languageCode') && attributes.key?(:'language_code')

      self.language_code = attributes[:'language_code'] if attributes[:'language_code']

      self.should_ignore_invalid_customizations = attributes[:'shouldIgnoreInvalidCustomizations'] unless attributes[:'shouldIgnoreInvalidCustomizations'].nil?
      self.should_ignore_invalid_customizations = false if should_ignore_invalid_customizations.nil? && !attributes.key?(:'shouldIgnoreInvalidCustomizations') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldIgnoreInvalidCustomizations and :should_ignore_invalid_customizations' if attributes.key?(:'shouldIgnoreInvalidCustomizations') && attributes.key?(:'should_ignore_invalid_customizations')

      self.should_ignore_invalid_customizations = attributes[:'should_ignore_invalid_customizations'] unless attributes[:'should_ignore_invalid_customizations'].nil?
      self.should_ignore_invalid_customizations = false if should_ignore_invalid_customizations.nil? && !attributes.key?(:'shouldIgnoreInvalidCustomizations') && !attributes.key?(:'should_ignore_invalid_customizations') # rubocop:disable Style/StringLiterals

      self.customizations = attributes[:'customizations'] if attributes[:'customizations']

      self.punctuation = attributes[:'punctuation'] if attributes[:'punctuation']
      self.punctuation = "NONE" if punctuation.nil? && !attributes.key?(:'punctuation') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stabilize_partial_results Object to be assigned
    def stabilize_partial_results=(stabilize_partial_results)
      raise "Invalid value for 'stabilize_partial_results': this must be one of the values in STABILIZE_PARTIAL_RESULTS_ENUM." if stabilize_partial_results && !STABILIZE_PARTIAL_RESULTS_ENUM.include?(stabilize_partial_results)

      @stabilize_partial_results = stabilize_partial_results
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] model_domain Object to be assigned
    def model_domain=(model_domain)
      raise "Invalid value for 'model_domain': this must be one of the values in MODEL_DOMAIN_ENUM." if model_domain && !MODEL_DOMAIN_ENUM.include?(model_domain)

      @model_domain = model_domain
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] punctuation Object to be assigned
    def punctuation=(punctuation)
      raise "Invalid value for 'punctuation': this must be one of the values in PUNCTUATION_ENUM." if punctuation && !PUNCTUATION_ENUM.include?(punctuation)

      @punctuation = punctuation
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        encoding == other.encoding &&
        is_ack_enabled == other.is_ack_enabled &&
        partial_silence_threshold_in_ms == other.partial_silence_threshold_in_ms &&
        final_silence_threshold_in_ms == other.final_silence_threshold_in_ms &&
        stabilize_partial_results == other.stabilize_partial_results &&
        model_domain == other.model_domain &&
        language_code == other.language_code &&
        should_ignore_invalid_customizations == other.should_ignore_invalid_customizations &&
        customizations == other.customizations &&
        punctuation == other.punctuation
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [encoding, is_ack_enabled, partial_silence_threshold_in_ms, final_silence_threshold_in_ms, stabilize_partial_results, model_domain, language_code, should_ignore_invalid_customizations, customizations, punctuation].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
