# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details related to the voice available for the given language code and voice type.
  class AiSpeech::Models::VoiceSummary
    GENDER_ENUM = [
      GENDER_MALE = 'MALE'.freeze,
      GENDER_FEMALE = 'FEMALE'.freeze,
      GENDER_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LANGUAGE_CODE_ENUM = [
      LANGUAGE_CODE_EN_US = 'en-US'.freeze,
      LANGUAGE_CODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique Id of the voice.
    # @return [String]
    attr_accessor :voice_id

    # **[Required]** A user-friendly display name of the language for the user.
    # @return [String]
    attr_accessor :display_name

    # A small description of the voice like its language and voice type.
    # @return [String]
    attr_accessor :description

    # **[Required]** Gender of the speaker.
    # @return [String]
    attr_reader :gender

    # Models the particular speaker is aligned to.
    # @return [Array<String>]
    attr_accessor :supported_models

    # An abbreviated notation of region to which the language and accent of the speaker belongs to.
    # @return [String]
    attr_reader :language_code

    # A description of region to which the language and accent of the speaker belongs to.
    # @return [String]
    attr_accessor :language_description

    # **[Required]** The sample rate of the speaker in Hertz.
    # @return [Integer]
    attr_accessor :sample_rate_in_hertz

    # **[Required]** The number of words the speaker can narrate per minute. It signifies the speed of the speech produced by the speaker.
    # @return [Integer]
    attr_accessor :words_per_minute

    # Whether this voice id is default voice used for inference.
    # @return [BOOLEAN]
    attr_accessor :is_default_voice

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'voice_id': :'voiceId',
        'display_name': :'displayName',
        'description': :'description',
        'gender': :'gender',
        'supported_models': :'supportedModels',
        'language_code': :'languageCode',
        'language_description': :'languageDescription',
        'sample_rate_in_hertz': :'sampleRateInHertz',
        'words_per_minute': :'wordsPerMinute',
        'is_default_voice': :'isDefaultVoice'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'voice_id': :'String',
        'display_name': :'String',
        'description': :'String',
        'gender': :'String',
        'supported_models': :'Array<String>',
        'language_code': :'String',
        'language_description': :'String',
        'sample_rate_in_hertz': :'Integer',
        'words_per_minute': :'Integer',
        'is_default_voice': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :voice_id The value to assign to the {#voice_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :gender The value to assign to the {#gender} property
    # @option attributes [Array<String>] :supported_models The value to assign to the {#supported_models} property
    # @option attributes [String] :language_code The value to assign to the {#language_code} property
    # @option attributes [String] :language_description The value to assign to the {#language_description} property
    # @option attributes [Integer] :sample_rate_in_hertz The value to assign to the {#sample_rate_in_hertz} property
    # @option attributes [Integer] :words_per_minute The value to assign to the {#words_per_minute} property
    # @option attributes [BOOLEAN] :is_default_voice The value to assign to the {#is_default_voice} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.voice_id = attributes[:'voiceId'] if attributes[:'voiceId']

      raise 'You cannot provide both :voiceId and :voice_id' if attributes.key?(:'voiceId') && attributes.key?(:'voice_id')

      self.voice_id = attributes[:'voice_id'] if attributes[:'voice_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.gender = attributes[:'gender'] if attributes[:'gender']

      self.supported_models = attributes[:'supportedModels'] if attributes[:'supportedModels']

      raise 'You cannot provide both :supportedModels and :supported_models' if attributes.key?(:'supportedModels') && attributes.key?(:'supported_models')

      self.supported_models = attributes[:'supported_models'] if attributes[:'supported_models']

      self.language_code = attributes[:'languageCode'] if attributes[:'languageCode']

      raise 'You cannot provide both :languageCode and :language_code' if attributes.key?(:'languageCode') && attributes.key?(:'language_code')

      self.language_code = attributes[:'language_code'] if attributes[:'language_code']

      self.language_description = attributes[:'languageDescription'] if attributes[:'languageDescription']

      raise 'You cannot provide both :languageDescription and :language_description' if attributes.key?(:'languageDescription') && attributes.key?(:'language_description')

      self.language_description = attributes[:'language_description'] if attributes[:'language_description']

      self.sample_rate_in_hertz = attributes[:'sampleRateInHertz'] if attributes[:'sampleRateInHertz']

      raise 'You cannot provide both :sampleRateInHertz and :sample_rate_in_hertz' if attributes.key?(:'sampleRateInHertz') && attributes.key?(:'sample_rate_in_hertz')

      self.sample_rate_in_hertz = attributes[:'sample_rate_in_hertz'] if attributes[:'sample_rate_in_hertz']

      self.words_per_minute = attributes[:'wordsPerMinute'] if attributes[:'wordsPerMinute']

      raise 'You cannot provide both :wordsPerMinute and :words_per_minute' if attributes.key?(:'wordsPerMinute') && attributes.key?(:'words_per_minute')

      self.words_per_minute = attributes[:'words_per_minute'] if attributes[:'words_per_minute']

      self.is_default_voice = attributes[:'isDefaultVoice'] unless attributes[:'isDefaultVoice'].nil?

      raise 'You cannot provide both :isDefaultVoice and :is_default_voice' if attributes.key?(:'isDefaultVoice') && attributes.key?(:'is_default_voice')

      self.is_default_voice = attributes[:'is_default_voice'] unless attributes[:'is_default_voice'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      # rubocop:disable Style/ConditionalAssignment
      if gender && !GENDER_ENUM.include?(gender)
        OCI.logger.debug("Unknown value for 'gender' [" + gender + "]. Mapping to 'GENDER_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @gender = GENDER_UNKNOWN_ENUM_VALUE
      else
        @gender = gender
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] language_code Object to be assigned
    def language_code=(language_code)
      # rubocop:disable Style/ConditionalAssignment
      if language_code && !LANGUAGE_CODE_ENUM.include?(language_code)
        OCI.logger.debug("Unknown value for 'language_code' [" + language_code + "]. Mapping to 'LANGUAGE_CODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @language_code = LANGUAGE_CODE_UNKNOWN_ENUM_VALUE
      else
        @language_code = language_code
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        voice_id == other.voice_id &&
        display_name == other.display_name &&
        description == other.description &&
        gender == other.gender &&
        supported_models == other.supported_models &&
        language_code == other.language_code &&
        language_description == other.language_description &&
        sample_rate_in_hertz == other.sample_rate_in_hertz &&
        words_per_minute == other.words_per_minute &&
        is_default_voice == other.is_default_voice
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [voice_id, display_name, description, gender, supported_models, language_code, language_description, sample_rate_in_hertz, words_per_minute, is_default_voice].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
