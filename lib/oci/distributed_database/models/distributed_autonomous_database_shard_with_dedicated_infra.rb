# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250101
require 'date'
require 'logger'
require_relative 'distributed_autonomous_database_shard'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Globally distributed autonomous database shard with dedicated autonomous infrastructure.
  class DistributedDatabase::Models::DistributedAutonomousDatabaseShardWithDedicatedInfra < DistributedDatabase::Models::DistributedAutonomousDatabaseShard
    STATUS_ENUM = [
      STATUS_FAILED = 'FAILED'.freeze,
      STATUS_DELETING = 'DELETING'.freeze,
      STATUS_DELETED = 'DELETED'.freeze,
      STATUS_UPDATING = 'UPDATING'.freeze,
      STATUS_CREATING = 'CREATING'.freeze,
      STATUS_CREATED = 'CREATED'.freeze,
      STATUS_READY_FOR_CONFIGURATION = 'READY_FOR_CONFIGURATION'.freeze,
      STATUS_CONFIGURED = 'CONFIGURED'.freeze,
      STATUS_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The compute count for the shard database. It has to be in multiples of 2.
    # @return [Float]
    attr_accessor :compute_count

    # **[Required]** The data disk group size to be allocated in GBs for the shard database.
    # @return [Float]
    attr_accessor :data_storage_size_in_gbs

    # **[Required]** Determines the auto-scaling mode for the shard database.
    # @return [BOOLEAN]
    attr_accessor :is_auto_scaling_enabled

    # **[Required]** The name of the shardGroup for the shard.
    # @return [String]
    attr_accessor :shard_group

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the cloudAutonomousVmCluster.
    # @return [String]
    attr_accessor :cloud_autonomous_vm_cluster_id

    # The collection of [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the peer cloudAutonomousVmClusters.
    # @return [Array<String>]
    attr_accessor :peer_cloud_autonomous_vm_cluster_ids

    # The shard space name for the Globally distributed autonomous database. Shard space for existing shard cannot be changed, once shard is created.
    # Shard space name shall be used while creation of new shards.
    #
    # @return [String]
    attr_accessor :shard_space

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `kmsKeyId` are required for Customer Managed Keys.
    # @return [String]
    attr_accessor :vault_id

    # The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
    # @return [String]
    attr_accessor :kms_key_id

    # The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions.
    #
    # @return [String]
    attr_accessor :kms_key_version_id

    # **[Required]** Status of shard with dedicated infrastructure for the Globally distributed autonomous database.
    # @return [String]
    attr_reader :status

    # the identifier of the underlying supporting resource.
    # @return [String]
    attr_accessor :supporting_resource_id

    # the identifier of the container database for underlying supporting resource.
    # @return [String]
    attr_accessor :container_database_id

    # Peer details for the shard with dedicated infrastructure.
    # @return [Array<OCI::DistributedDatabase::Models::ShardPeerWithDedicatedInfra>]
    attr_accessor :peer_details

    # @return [OCI::DistributedDatabase::Models::DistributedAutonomousDbMetadata]
    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'source': :'source',
        'name': :'name',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'compute_count': :'computeCount',
        'data_storage_size_in_gbs': :'dataStorageSizeInGbs',
        'is_auto_scaling_enabled': :'isAutoScalingEnabled',
        'shard_group': :'shardGroup',
        'cloud_autonomous_vm_cluster_id': :'cloudAutonomousVmClusterId',
        'peer_cloud_autonomous_vm_cluster_ids': :'peerCloudAutonomousVmClusterIds',
        'shard_space': :'shardSpace',
        'vault_id': :'vaultId',
        'kms_key_id': :'kmsKeyId',
        'kms_key_version_id': :'kmsKeyVersionId',
        'status': :'status',
        'supporting_resource_id': :'supportingResourceId',
        'container_database_id': :'containerDatabaseId',
        'peer_details': :'peerDetails',
        'metadata': :'metadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'source': :'String',
        'name': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'compute_count': :'Float',
        'data_storage_size_in_gbs': :'Float',
        'is_auto_scaling_enabled': :'BOOLEAN',
        'shard_group': :'String',
        'cloud_autonomous_vm_cluster_id': :'String',
        'peer_cloud_autonomous_vm_cluster_ids': :'Array<String>',
        'shard_space': :'String',
        'vault_id': :'String',
        'kms_key_id': :'String',
        'kms_key_version_id': :'String',
        'status': :'String',
        'supporting_resource_id': :'String',
        'container_database_id': :'String',
        'peer_details': :'Array<OCI::DistributedDatabase::Models::ShardPeerWithDedicatedInfra>',
        'metadata': :'OCI::DistributedDatabase::Models::DistributedAutonomousDbMetadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {OCI::DistributedDatabase::Models::DistributedAutonomousDatabaseShard#name #name} proprety
    # @option attributes [DateTime] :time_created The value to assign to the {OCI::DistributedDatabase::Models::DistributedAutonomousDatabaseShard#time_created #time_created} proprety
    # @option attributes [DateTime] :time_updated The value to assign to the {OCI::DistributedDatabase::Models::DistributedAutonomousDatabaseShard#time_updated #time_updated} proprety
    # @option attributes [Float] :compute_count The value to assign to the {#compute_count} property
    # @option attributes [Float] :data_storage_size_in_gbs The value to assign to the {#data_storage_size_in_gbs} property
    # @option attributes [BOOLEAN] :is_auto_scaling_enabled The value to assign to the {#is_auto_scaling_enabled} property
    # @option attributes [String] :shard_group The value to assign to the {#shard_group} property
    # @option attributes [String] :cloud_autonomous_vm_cluster_id The value to assign to the {#cloud_autonomous_vm_cluster_id} property
    # @option attributes [Array<String>] :peer_cloud_autonomous_vm_cluster_ids The value to assign to the {#peer_cloud_autonomous_vm_cluster_ids} property
    # @option attributes [String] :shard_space The value to assign to the {#shard_space} property
    # @option attributes [String] :vault_id The value to assign to the {#vault_id} property
    # @option attributes [String] :kms_key_id The value to assign to the {#kms_key_id} property
    # @option attributes [String] :kms_key_version_id The value to assign to the {#kms_key_version_id} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :supporting_resource_id The value to assign to the {#supporting_resource_id} property
    # @option attributes [String] :container_database_id The value to assign to the {#container_database_id} property
    # @option attributes [Array<OCI::DistributedDatabase::Models::ShardPeerWithDedicatedInfra>] :peer_details The value to assign to the {#peer_details} property
    # @option attributes [OCI::DistributedDatabase::Models::DistributedAutonomousDbMetadata] :metadata The value to assign to the {#metadata} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['source'] = 'ADB_D'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compute_count = attributes[:'computeCount'] if attributes[:'computeCount']

      raise 'You cannot provide both :computeCount and :compute_count' if attributes.key?(:'computeCount') && attributes.key?(:'compute_count')

      self.compute_count = attributes[:'compute_count'] if attributes[:'compute_count']

      self.data_storage_size_in_gbs = attributes[:'dataStorageSizeInGbs'] if attributes[:'dataStorageSizeInGbs']

      raise 'You cannot provide both :dataStorageSizeInGbs and :data_storage_size_in_gbs' if attributes.key?(:'dataStorageSizeInGbs') && attributes.key?(:'data_storage_size_in_gbs')

      self.data_storage_size_in_gbs = attributes[:'data_storage_size_in_gbs'] if attributes[:'data_storage_size_in_gbs']

      self.is_auto_scaling_enabled = attributes[:'isAutoScalingEnabled'] unless attributes[:'isAutoScalingEnabled'].nil?

      raise 'You cannot provide both :isAutoScalingEnabled and :is_auto_scaling_enabled' if attributes.key?(:'isAutoScalingEnabled') && attributes.key?(:'is_auto_scaling_enabled')

      self.is_auto_scaling_enabled = attributes[:'is_auto_scaling_enabled'] unless attributes[:'is_auto_scaling_enabled'].nil?

      self.shard_group = attributes[:'shardGroup'] if attributes[:'shardGroup']

      raise 'You cannot provide both :shardGroup and :shard_group' if attributes.key?(:'shardGroup') && attributes.key?(:'shard_group')

      self.shard_group = attributes[:'shard_group'] if attributes[:'shard_group']

      self.cloud_autonomous_vm_cluster_id = attributes[:'cloudAutonomousVmClusterId'] if attributes[:'cloudAutonomousVmClusterId']

      raise 'You cannot provide both :cloudAutonomousVmClusterId and :cloud_autonomous_vm_cluster_id' if attributes.key?(:'cloudAutonomousVmClusterId') && attributes.key?(:'cloud_autonomous_vm_cluster_id')

      self.cloud_autonomous_vm_cluster_id = attributes[:'cloud_autonomous_vm_cluster_id'] if attributes[:'cloud_autonomous_vm_cluster_id']

      self.peer_cloud_autonomous_vm_cluster_ids = attributes[:'peerCloudAutonomousVmClusterIds'] if attributes[:'peerCloudAutonomousVmClusterIds']

      raise 'You cannot provide both :peerCloudAutonomousVmClusterIds and :peer_cloud_autonomous_vm_cluster_ids' if attributes.key?(:'peerCloudAutonomousVmClusterIds') && attributes.key?(:'peer_cloud_autonomous_vm_cluster_ids')

      self.peer_cloud_autonomous_vm_cluster_ids = attributes[:'peer_cloud_autonomous_vm_cluster_ids'] if attributes[:'peer_cloud_autonomous_vm_cluster_ids']

      self.shard_space = attributes[:'shardSpace'] if attributes[:'shardSpace']

      raise 'You cannot provide both :shardSpace and :shard_space' if attributes.key?(:'shardSpace') && attributes.key?(:'shard_space')

      self.shard_space = attributes[:'shard_space'] if attributes[:'shard_space']

      self.vault_id = attributes[:'vaultId'] if attributes[:'vaultId']

      raise 'You cannot provide both :vaultId and :vault_id' if attributes.key?(:'vaultId') && attributes.key?(:'vault_id')

      self.vault_id = attributes[:'vault_id'] if attributes[:'vault_id']

      self.kms_key_id = attributes[:'kmsKeyId'] if attributes[:'kmsKeyId']

      raise 'You cannot provide both :kmsKeyId and :kms_key_id' if attributes.key?(:'kmsKeyId') && attributes.key?(:'kms_key_id')

      self.kms_key_id = attributes[:'kms_key_id'] if attributes[:'kms_key_id']

      self.kms_key_version_id = attributes[:'kmsKeyVersionId'] if attributes[:'kmsKeyVersionId']

      raise 'You cannot provide both :kmsKeyVersionId and :kms_key_version_id' if attributes.key?(:'kmsKeyVersionId') && attributes.key?(:'kms_key_version_id')

      self.kms_key_version_id = attributes[:'kms_key_version_id'] if attributes[:'kms_key_version_id']

      self.status = attributes[:'status'] if attributes[:'status']

      self.supporting_resource_id = attributes[:'supportingResourceId'] if attributes[:'supportingResourceId']

      raise 'You cannot provide both :supportingResourceId and :supporting_resource_id' if attributes.key?(:'supportingResourceId') && attributes.key?(:'supporting_resource_id')

      self.supporting_resource_id = attributes[:'supporting_resource_id'] if attributes[:'supporting_resource_id']

      self.container_database_id = attributes[:'containerDatabaseId'] if attributes[:'containerDatabaseId']

      raise 'You cannot provide both :containerDatabaseId and :container_database_id' if attributes.key?(:'containerDatabaseId') && attributes.key?(:'container_database_id')

      self.container_database_id = attributes[:'container_database_id'] if attributes[:'container_database_id']

      self.peer_details = attributes[:'peerDetails'] if attributes[:'peerDetails']

      raise 'You cannot provide both :peerDetails and :peer_details' if attributes.key?(:'peerDetails') && attributes.key?(:'peer_details')

      self.peer_details = attributes[:'peer_details'] if attributes[:'peer_details']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        source == other.source &&
        name == other.name &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        compute_count == other.compute_count &&
        data_storage_size_in_gbs == other.data_storage_size_in_gbs &&
        is_auto_scaling_enabled == other.is_auto_scaling_enabled &&
        shard_group == other.shard_group &&
        cloud_autonomous_vm_cluster_id == other.cloud_autonomous_vm_cluster_id &&
        peer_cloud_autonomous_vm_cluster_ids == other.peer_cloud_autonomous_vm_cluster_ids &&
        shard_space == other.shard_space &&
        vault_id == other.vault_id &&
        kms_key_id == other.kms_key_id &&
        kms_key_version_id == other.kms_key_version_id &&
        status == other.status &&
        supporting_resource_id == other.supporting_resource_id &&
        container_database_id == other.container_database_id &&
        peer_details == other.peer_details &&
        metadata == other.metadata
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [source, name, time_created, time_updated, compute_count, data_storage_size_in_gbs, is_auto_scaling_enabled, shard_group, cloud_autonomous_vm_cluster_id, peer_cloud_autonomous_vm_cluster_ids, shard_space, vault_id, kms_key_id, kms_key_version_id, status, supporting_resource_id, container_database_id, peer_details, metadata].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
