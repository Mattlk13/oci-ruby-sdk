# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Globally distributed database.
  class DistributedDatabase::Models::DistributedDatabase
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SHARDING_METHOD_ENUM = [
      SHARDING_METHOD_USER = 'USER'.freeze,
      SHARDING_METHOD_SYSTEM = 'SYSTEM'.freeze,
      SHARDING_METHOD_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    REPLICATION_METHOD_ENUM = [
      REPLICATION_METHOD_RAFT = 'RAFT'.freeze,
      REPLICATION_METHOD_DG = 'DG'.freeze,
      REPLICATION_METHOD_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DB_DEPLOYMENT_TYPE_ENUM = [
      DB_DEPLOYMENT_TYPE_EXADB_XS = 'EXADB_XS'.freeze,
      DB_DEPLOYMENT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Globally distributed database.
    # @return [String]
    attr_accessor :id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Globally distributed database compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The display name of the Globally distributed database.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The time the Globally distributed database was created. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The time the Globally distributed database was last updated. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** Oracle Database version for the shards and catalog used in Globally distributed database.
    # @return [String]
    attr_accessor :database_version

    # **[Required]** Lifecycle states for the Globally distributed database.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The lifecycleDetails for the Globally distributed database.
    # @return [String]
    attr_accessor :lifecycle_details

    # @return [OCI::DistributedDatabase::Models::DistributedDbConnectionString]
    attr_accessor :connection_strings

    # **[Required]** Unique name prefix for the Globally distributed databases. Only alpha-numeric values are allowed. First character
    # has to be a letter followed by any combination of letter and number.
    #
    # @return [String]
    attr_accessor :prefix

    # **[Required]** The collection of [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the private endpoint associated with Globally distributed autonomous database.
    # @return [Array<String>]
    attr_accessor :private_endpoint_ids

    # @return [OCI::DistributedDatabase::Models::DistributedDbGsmImage]
    attr_accessor :latest_gsm_image_details

    # **[Required]** Sharding Methods for the Globally distributed database.
    # @return [String]
    attr_reader :sharding_method

    # **[Required]** The character set for the database.
    # @return [String]
    attr_accessor :character_set

    # **[Required]** The national character set for the database.
    # @return [String]
    attr_accessor :ncharacter_set

    # The default number of unique chunks in a shardspace. The value of chunks must be
    # greater than 2 times the size of the largest shardgroup in any shardspace.
    #
    # @return [Integer]
    attr_accessor :chunks

    # **[Required]** The Global service manager listener port number for the Globally distributed database.
    # @return [Integer]
    attr_accessor :listener_port

    # The TLS listener port number for Globally distributed database.
    # @return [Integer]
    attr_accessor :listener_port_tls

    # **[Required]** Ons local port number.
    # @return [Integer]
    attr_accessor :ons_port_local

    # **[Required]** Ons remote port number.
    # @return [Integer]
    attr_accessor :ons_port_remote

    # The Replication method for Globally distributed database. Use RAFT for Raft replication, and DG for
    # DataGuard. If replicationMethod is not provided, it defaults to DG.
    #
    # @return [String]
    attr_reader :replication_method

    # The Replication factor for RAFT replication based Globally distributed database. Currently supported values are 3, 5 and 7.
    #
    # @return [Integer]
    attr_accessor :replication_factor

    # For RAFT replication based Globally distributed database, the value should be atleast twice the number of shards.
    # @return [Integer]
    attr_accessor :replication_unit

    # **[Required]** The distributed database deployment type.
    #
    # @return [String]
    attr_reader :db_deployment_type

    # Collection of shards associated with the Globally distributed database.
    # @return [Array<OCI::DistributedDatabase::Models::DistributedDatabaseShard>]
    attr_accessor :shard_details

    # Collection of catalogs associated with the Globally distributed database.
    # @return [Array<OCI::DistributedDatabase::Models::DistributedDatabaseCatalog>]
    attr_accessor :catalog_details

    # Collection of catalogs associated with the Globally distributed database.
    # @return [Array<OCI::DistributedDatabase::Models::DistributedDatabaseGsm>]
    attr_accessor :gsm_details

    # @return [OCI::DistributedDatabase::Models::DistributedDbBackupConfig]
    attr_accessor :db_backup_config

    # The SSH public key for Global service manager instances.
    # @return [String]
    attr_accessor :gsm_ssh_public_key

    # @return [OCI::DistributedDatabase::Models::DistributedDbMetadata]
    attr_accessor :metadata

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'database_version': :'databaseVersion',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'connection_strings': :'connectionStrings',
        'prefix': :'prefix',
        'private_endpoint_ids': :'privateEndpointIds',
        'latest_gsm_image_details': :'latestGsmImageDetails',
        'sharding_method': :'shardingMethod',
        'character_set': :'characterSet',
        'ncharacter_set': :'ncharacterSet',
        'chunks': :'chunks',
        'listener_port': :'listenerPort',
        'listener_port_tls': :'listenerPortTls',
        'ons_port_local': :'onsPortLocal',
        'ons_port_remote': :'onsPortRemote',
        'replication_method': :'replicationMethod',
        'replication_factor': :'replicationFactor',
        'replication_unit': :'replicationUnit',
        'db_deployment_type': :'dbDeploymentType',
        'shard_details': :'shardDetails',
        'catalog_details': :'catalogDetails',
        'gsm_details': :'gsmDetails',
        'db_backup_config': :'dbBackupConfig',
        'gsm_ssh_public_key': :'gsmSshPublicKey',
        'metadata': :'metadata',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'database_version': :'String',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'connection_strings': :'OCI::DistributedDatabase::Models::DistributedDbConnectionString',
        'prefix': :'String',
        'private_endpoint_ids': :'Array<String>',
        'latest_gsm_image_details': :'OCI::DistributedDatabase::Models::DistributedDbGsmImage',
        'sharding_method': :'String',
        'character_set': :'String',
        'ncharacter_set': :'String',
        'chunks': :'Integer',
        'listener_port': :'Integer',
        'listener_port_tls': :'Integer',
        'ons_port_local': :'Integer',
        'ons_port_remote': :'Integer',
        'replication_method': :'String',
        'replication_factor': :'Integer',
        'replication_unit': :'Integer',
        'db_deployment_type': :'String',
        'shard_details': :'Array<OCI::DistributedDatabase::Models::DistributedDatabaseShard>',
        'catalog_details': :'Array<OCI::DistributedDatabase::Models::DistributedDatabaseCatalog>',
        'gsm_details': :'Array<OCI::DistributedDatabase::Models::DistributedDatabaseGsm>',
        'db_backup_config': :'OCI::DistributedDatabase::Models::DistributedDbBackupConfig',
        'gsm_ssh_public_key': :'String',
        'metadata': :'OCI::DistributedDatabase::Models::DistributedDbMetadata',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :database_version The value to assign to the {#database_version} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [OCI::DistributedDatabase::Models::DistributedDbConnectionString] :connection_strings The value to assign to the {#connection_strings} property
    # @option attributes [String] :prefix The value to assign to the {#prefix} property
    # @option attributes [Array<String>] :private_endpoint_ids The value to assign to the {#private_endpoint_ids} property
    # @option attributes [OCI::DistributedDatabase::Models::DistributedDbGsmImage] :latest_gsm_image_details The value to assign to the {#latest_gsm_image_details} property
    # @option attributes [String] :sharding_method The value to assign to the {#sharding_method} property
    # @option attributes [String] :character_set The value to assign to the {#character_set} property
    # @option attributes [String] :ncharacter_set The value to assign to the {#ncharacter_set} property
    # @option attributes [Integer] :chunks The value to assign to the {#chunks} property
    # @option attributes [Integer] :listener_port The value to assign to the {#listener_port} property
    # @option attributes [Integer] :listener_port_tls The value to assign to the {#listener_port_tls} property
    # @option attributes [Integer] :ons_port_local The value to assign to the {#ons_port_local} property
    # @option attributes [Integer] :ons_port_remote The value to assign to the {#ons_port_remote} property
    # @option attributes [String] :replication_method The value to assign to the {#replication_method} property
    # @option attributes [Integer] :replication_factor The value to assign to the {#replication_factor} property
    # @option attributes [Integer] :replication_unit The value to assign to the {#replication_unit} property
    # @option attributes [String] :db_deployment_type The value to assign to the {#db_deployment_type} property
    # @option attributes [Array<OCI::DistributedDatabase::Models::DistributedDatabaseShard>] :shard_details The value to assign to the {#shard_details} property
    # @option attributes [Array<OCI::DistributedDatabase::Models::DistributedDatabaseCatalog>] :catalog_details The value to assign to the {#catalog_details} property
    # @option attributes [Array<OCI::DistributedDatabase::Models::DistributedDatabaseGsm>] :gsm_details The value to assign to the {#gsm_details} property
    # @option attributes [OCI::DistributedDatabase::Models::DistributedDbBackupConfig] :db_backup_config The value to assign to the {#db_backup_config} property
    # @option attributes [String] :gsm_ssh_public_key The value to assign to the {#gsm_ssh_public_key} property
    # @option attributes [OCI::DistributedDatabase::Models::DistributedDbMetadata] :metadata The value to assign to the {#metadata} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.database_version = attributes[:'databaseVersion'] if attributes[:'databaseVersion']

      raise 'You cannot provide both :databaseVersion and :database_version' if attributes.key?(:'databaseVersion') && attributes.key?(:'database_version')

      self.database_version = attributes[:'database_version'] if attributes[:'database_version']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.connection_strings = attributes[:'connectionStrings'] if attributes[:'connectionStrings']

      raise 'You cannot provide both :connectionStrings and :connection_strings' if attributes.key?(:'connectionStrings') && attributes.key?(:'connection_strings')

      self.connection_strings = attributes[:'connection_strings'] if attributes[:'connection_strings']

      self.prefix = attributes[:'prefix'] if attributes[:'prefix']

      self.private_endpoint_ids = attributes[:'privateEndpointIds'] if attributes[:'privateEndpointIds']

      raise 'You cannot provide both :privateEndpointIds and :private_endpoint_ids' if attributes.key?(:'privateEndpointIds') && attributes.key?(:'private_endpoint_ids')

      self.private_endpoint_ids = attributes[:'private_endpoint_ids'] if attributes[:'private_endpoint_ids']

      self.latest_gsm_image_details = attributes[:'latestGsmImageDetails'] if attributes[:'latestGsmImageDetails']

      raise 'You cannot provide both :latestGsmImageDetails and :latest_gsm_image_details' if attributes.key?(:'latestGsmImageDetails') && attributes.key?(:'latest_gsm_image_details')

      self.latest_gsm_image_details = attributes[:'latest_gsm_image_details'] if attributes[:'latest_gsm_image_details']

      self.sharding_method = attributes[:'shardingMethod'] if attributes[:'shardingMethod']

      raise 'You cannot provide both :shardingMethod and :sharding_method' if attributes.key?(:'shardingMethod') && attributes.key?(:'sharding_method')

      self.sharding_method = attributes[:'sharding_method'] if attributes[:'sharding_method']

      self.character_set = attributes[:'characterSet'] if attributes[:'characterSet']

      raise 'You cannot provide both :characterSet and :character_set' if attributes.key?(:'characterSet') && attributes.key?(:'character_set')

      self.character_set = attributes[:'character_set'] if attributes[:'character_set']

      self.ncharacter_set = attributes[:'ncharacterSet'] if attributes[:'ncharacterSet']

      raise 'You cannot provide both :ncharacterSet and :ncharacter_set' if attributes.key?(:'ncharacterSet') && attributes.key?(:'ncharacter_set')

      self.ncharacter_set = attributes[:'ncharacter_set'] if attributes[:'ncharacter_set']

      self.chunks = attributes[:'chunks'] if attributes[:'chunks']

      self.listener_port = attributes[:'listenerPort'] if attributes[:'listenerPort']

      raise 'You cannot provide both :listenerPort and :listener_port' if attributes.key?(:'listenerPort') && attributes.key?(:'listener_port')

      self.listener_port = attributes[:'listener_port'] if attributes[:'listener_port']

      self.listener_port_tls = attributes[:'listenerPortTls'] if attributes[:'listenerPortTls']

      raise 'You cannot provide both :listenerPortTls and :listener_port_tls' if attributes.key?(:'listenerPortTls') && attributes.key?(:'listener_port_tls')

      self.listener_port_tls = attributes[:'listener_port_tls'] if attributes[:'listener_port_tls']

      self.ons_port_local = attributes[:'onsPortLocal'] if attributes[:'onsPortLocal']

      raise 'You cannot provide both :onsPortLocal and :ons_port_local' if attributes.key?(:'onsPortLocal') && attributes.key?(:'ons_port_local')

      self.ons_port_local = attributes[:'ons_port_local'] if attributes[:'ons_port_local']

      self.ons_port_remote = attributes[:'onsPortRemote'] if attributes[:'onsPortRemote']

      raise 'You cannot provide both :onsPortRemote and :ons_port_remote' if attributes.key?(:'onsPortRemote') && attributes.key?(:'ons_port_remote')

      self.ons_port_remote = attributes[:'ons_port_remote'] if attributes[:'ons_port_remote']

      self.replication_method = attributes[:'replicationMethod'] if attributes[:'replicationMethod']

      raise 'You cannot provide both :replicationMethod and :replication_method' if attributes.key?(:'replicationMethod') && attributes.key?(:'replication_method')

      self.replication_method = attributes[:'replication_method'] if attributes[:'replication_method']

      self.replication_factor = attributes[:'replicationFactor'] if attributes[:'replicationFactor']

      raise 'You cannot provide both :replicationFactor and :replication_factor' if attributes.key?(:'replicationFactor') && attributes.key?(:'replication_factor')

      self.replication_factor = attributes[:'replication_factor'] if attributes[:'replication_factor']

      self.replication_unit = attributes[:'replicationUnit'] if attributes[:'replicationUnit']

      raise 'You cannot provide both :replicationUnit and :replication_unit' if attributes.key?(:'replicationUnit') && attributes.key?(:'replication_unit')

      self.replication_unit = attributes[:'replication_unit'] if attributes[:'replication_unit']

      self.db_deployment_type = attributes[:'dbDeploymentType'] if attributes[:'dbDeploymentType']

      raise 'You cannot provide both :dbDeploymentType and :db_deployment_type' if attributes.key?(:'dbDeploymentType') && attributes.key?(:'db_deployment_type')

      self.db_deployment_type = attributes[:'db_deployment_type'] if attributes[:'db_deployment_type']

      self.shard_details = attributes[:'shardDetails'] if attributes[:'shardDetails']

      raise 'You cannot provide both :shardDetails and :shard_details' if attributes.key?(:'shardDetails') && attributes.key?(:'shard_details')

      self.shard_details = attributes[:'shard_details'] if attributes[:'shard_details']

      self.catalog_details = attributes[:'catalogDetails'] if attributes[:'catalogDetails']

      raise 'You cannot provide both :catalogDetails and :catalog_details' if attributes.key?(:'catalogDetails') && attributes.key?(:'catalog_details')

      self.catalog_details = attributes[:'catalog_details'] if attributes[:'catalog_details']

      self.gsm_details = attributes[:'gsmDetails'] if attributes[:'gsmDetails']

      raise 'You cannot provide both :gsmDetails and :gsm_details' if attributes.key?(:'gsmDetails') && attributes.key?(:'gsm_details')

      self.gsm_details = attributes[:'gsm_details'] if attributes[:'gsm_details']

      self.db_backup_config = attributes[:'dbBackupConfig'] if attributes[:'dbBackupConfig']

      raise 'You cannot provide both :dbBackupConfig and :db_backup_config' if attributes.key?(:'dbBackupConfig') && attributes.key?(:'db_backup_config')

      self.db_backup_config = attributes[:'db_backup_config'] if attributes[:'db_backup_config']

      self.gsm_ssh_public_key = attributes[:'gsmSshPublicKey'] if attributes[:'gsmSshPublicKey']

      raise 'You cannot provide both :gsmSshPublicKey and :gsm_ssh_public_key' if attributes.key?(:'gsmSshPublicKey') && attributes.key?(:'gsm_ssh_public_key')

      self.gsm_ssh_public_key = attributes[:'gsm_ssh_public_key'] if attributes[:'gsm_ssh_public_key']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sharding_method Object to be assigned
    def sharding_method=(sharding_method)
      # rubocop:disable Style/ConditionalAssignment
      if sharding_method && !SHARDING_METHOD_ENUM.include?(sharding_method)
        OCI.logger.debug("Unknown value for 'sharding_method' [" + sharding_method + "]. Mapping to 'SHARDING_METHOD_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @sharding_method = SHARDING_METHOD_UNKNOWN_ENUM_VALUE
      else
        @sharding_method = sharding_method
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] replication_method Object to be assigned
    def replication_method=(replication_method)
      # rubocop:disable Style/ConditionalAssignment
      if replication_method && !REPLICATION_METHOD_ENUM.include?(replication_method)
        OCI.logger.debug("Unknown value for 'replication_method' [" + replication_method + "]. Mapping to 'REPLICATION_METHOD_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @replication_method = REPLICATION_METHOD_UNKNOWN_ENUM_VALUE
      else
        @replication_method = replication_method
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] db_deployment_type Object to be assigned
    def db_deployment_type=(db_deployment_type)
      # rubocop:disable Style/ConditionalAssignment
      if db_deployment_type && !DB_DEPLOYMENT_TYPE_ENUM.include?(db_deployment_type)
        OCI.logger.debug("Unknown value for 'db_deployment_type' [" + db_deployment_type + "]. Mapping to 'DB_DEPLOYMENT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @db_deployment_type = DB_DEPLOYMENT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @db_deployment_type = db_deployment_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        database_version == other.database_version &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        connection_strings == other.connection_strings &&
        prefix == other.prefix &&
        private_endpoint_ids == other.private_endpoint_ids &&
        latest_gsm_image_details == other.latest_gsm_image_details &&
        sharding_method == other.sharding_method &&
        character_set == other.character_set &&
        ncharacter_set == other.ncharacter_set &&
        chunks == other.chunks &&
        listener_port == other.listener_port &&
        listener_port_tls == other.listener_port_tls &&
        ons_port_local == other.ons_port_local &&
        ons_port_remote == other.ons_port_remote &&
        replication_method == other.replication_method &&
        replication_factor == other.replication_factor &&
        replication_unit == other.replication_unit &&
        db_deployment_type == other.db_deployment_type &&
        shard_details == other.shard_details &&
        catalog_details == other.catalog_details &&
        gsm_details == other.gsm_details &&
        db_backup_config == other.db_backup_config &&
        gsm_ssh_public_key == other.gsm_ssh_public_key &&
        metadata == other.metadata &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, time_created, time_updated, database_version, lifecycle_state, lifecycle_details, connection_strings, prefix, private_endpoint_ids, latest_gsm_image_details, sharding_method, character_set, ncharacter_set, chunks, listener_port, listener_port_tls, ons_port_local, ons_port_remote, replication_method, replication_factor, replication_unit, db_deployment_type, shard_details, catalog_details, gsm_details, db_backup_config, gsm_ssh_public_key, metadata, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
