# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20250101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of global service manager(GSM also known as shard director) instances for the Globally distributed autonomous database.
  class DistributedDatabase::Models::DistributedAutonomousDatabaseGsm
    STATUS_ENUM = [
      STATUS_FAILED = 'FAILED'.freeze,
      STATUS_DELETING = 'DELETING'.freeze,
      STATUS_DELETED = 'DELETED'.freeze,
      STATUS_UPDATING = 'UPDATING'.freeze,
      STATUS_CREATING = 'CREATING'.freeze,
      STATUS_CREATED = 'CREATED'.freeze,
      STATUS_READY_FOR_CONFIGURATION = 'READY_FOR_CONFIGURATION'.freeze,
      STATUS_CONFIGURED = 'CONFIGURED'.freeze,
      STATUS_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Name of the Global service manager instance
    # @return [String]
    attr_accessor :name

    # **[Required]** The compute count for the Global service manager instance.
    # @return [Float]
    attr_accessor :compute_count

    # **[Required]** The data disk group size to be allocated in GBs for the Global service manager instance.
    # @return [Float]
    attr_accessor :data_storage_size_in_gbs

    # **[Required]** The time the Global service manager instance was created. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The time the Global service manager instance was last updated. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** Status of the gsm for the Globally distributed autonomous database.
    # @return [String]
    attr_reader :status

    # The time the ssl certificate associated with Global service manager expires. An RFC3339 formatted datetime string
    # @return [DateTime]
    attr_accessor :time_ssl_certificate_expires

    # the identifier of the underlying supporting resource.
    # @return [String]
    attr_accessor :supporting_resource_id

    # @return [OCI::DistributedDatabase::Models::DistributedAutonomousDatabaseGsmImage]
    attr_accessor :gsm_image_details

    # @return [OCI::DistributedDatabase::Models::DistributedAutonomousDbMetadata]
    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'compute_count': :'computeCount',
        'data_storage_size_in_gbs': :'dataStorageSizeInGbs',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'status': :'status',
        'time_ssl_certificate_expires': :'timeSslCertificateExpires',
        'supporting_resource_id': :'supportingResourceId',
        'gsm_image_details': :'gsmImageDetails',
        'metadata': :'metadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'compute_count': :'Float',
        'data_storage_size_in_gbs': :'Float',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'status': :'String',
        'time_ssl_certificate_expires': :'DateTime',
        'supporting_resource_id': :'String',
        'gsm_image_details': :'OCI::DistributedDatabase::Models::DistributedAutonomousDatabaseGsmImage',
        'metadata': :'OCI::DistributedDatabase::Models::DistributedAutonomousDbMetadata'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [Float] :compute_count The value to assign to the {#compute_count} property
    # @option attributes [Float] :data_storage_size_in_gbs The value to assign to the {#data_storage_size_in_gbs} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [DateTime] :time_ssl_certificate_expires The value to assign to the {#time_ssl_certificate_expires} property
    # @option attributes [String] :supporting_resource_id The value to assign to the {#supporting_resource_id} property
    # @option attributes [OCI::DistributedDatabase::Models::DistributedAutonomousDatabaseGsmImage] :gsm_image_details The value to assign to the {#gsm_image_details} property
    # @option attributes [OCI::DistributedDatabase::Models::DistributedAutonomousDbMetadata] :metadata The value to assign to the {#metadata} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.compute_count = attributes[:'computeCount'] if attributes[:'computeCount']

      raise 'You cannot provide both :computeCount and :compute_count' if attributes.key?(:'computeCount') && attributes.key?(:'compute_count')

      self.compute_count = attributes[:'compute_count'] if attributes[:'compute_count']

      self.data_storage_size_in_gbs = attributes[:'dataStorageSizeInGbs'] if attributes[:'dataStorageSizeInGbs']

      raise 'You cannot provide both :dataStorageSizeInGbs and :data_storage_size_in_gbs' if attributes.key?(:'dataStorageSizeInGbs') && attributes.key?(:'data_storage_size_in_gbs')

      self.data_storage_size_in_gbs = attributes[:'data_storage_size_in_gbs'] if attributes[:'data_storage_size_in_gbs']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.status = attributes[:'status'] if attributes[:'status']

      self.time_ssl_certificate_expires = attributes[:'timeSslCertificateExpires'] if attributes[:'timeSslCertificateExpires']

      raise 'You cannot provide both :timeSslCertificateExpires and :time_ssl_certificate_expires' if attributes.key?(:'timeSslCertificateExpires') && attributes.key?(:'time_ssl_certificate_expires')

      self.time_ssl_certificate_expires = attributes[:'time_ssl_certificate_expires'] if attributes[:'time_ssl_certificate_expires']

      self.supporting_resource_id = attributes[:'supportingResourceId'] if attributes[:'supportingResourceId']

      raise 'You cannot provide both :supportingResourceId and :supporting_resource_id' if attributes.key?(:'supportingResourceId') && attributes.key?(:'supporting_resource_id')

      self.supporting_resource_id = attributes[:'supporting_resource_id'] if attributes[:'supporting_resource_id']

      self.gsm_image_details = attributes[:'gsmImageDetails'] if attributes[:'gsmImageDetails']

      raise 'You cannot provide both :gsmImageDetails and :gsm_image_details' if attributes.key?(:'gsmImageDetails') && attributes.key?(:'gsm_image_details')

      self.gsm_image_details = attributes[:'gsm_image_details'] if attributes[:'gsm_image_details']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        compute_count == other.compute_count &&
        data_storage_size_in_gbs == other.data_storage_size_in_gbs &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        status == other.status &&
        time_ssl_certificate_expires == other.time_ssl_certificate_expires &&
        supporting_resource_id == other.supporting_resource_id &&
        gsm_image_details == other.gsm_image_details &&
        metadata == other.metadata
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, compute_count, data_storage_size_in_gbs, time_created, time_updated, status, time_ssl_certificate_expires, supporting_resource_id, gsm_image_details, metadata].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
