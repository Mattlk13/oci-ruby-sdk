# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220915
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of the database system shape.
  class Psql::Models::ShapeSummary
    # A unique identifier for the shape.
    # @return [String]
    attr_accessor :id

    # **[Required]** The name of the Compute VM shape.
    # Example: `VM.Standard.E4.Flex`
    #
    # @return [String]
    attr_accessor :shape

    # Indicates if the shape is a flex shape.
    # @return [BOOLEAN]
    attr_accessor :is_flexible

    # **[Required]** The number of OCPUs.
    # @return [Integer]
    attr_accessor :ocpu_count

    # **[Required]** The amount of memory in gigabytes.
    # @return [Integer]
    attr_accessor :memory_size_in_gbs

    # @return [OCI::Psql::Models::ShapeOcpuOptions]
    attr_accessor :shape_ocpu_options

    # @return [OCI::Psql::Models::ShapeMemoryOptions]
    attr_accessor :shape_memory_options

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'shape': :'shape',
        'is_flexible': :'isFlexible',
        'ocpu_count': :'ocpuCount',
        'memory_size_in_gbs': :'memorySizeInGBs',
        'shape_ocpu_options': :'shapeOcpuOptions',
        'shape_memory_options': :'shapeMemoryOptions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'shape': :'String',
        'is_flexible': :'BOOLEAN',
        'ocpu_count': :'Integer',
        'memory_size_in_gbs': :'Integer',
        'shape_ocpu_options': :'OCI::Psql::Models::ShapeOcpuOptions',
        'shape_memory_options': :'OCI::Psql::Models::ShapeMemoryOptions'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :shape The value to assign to the {#shape} property
    # @option attributes [BOOLEAN] :is_flexible The value to assign to the {#is_flexible} property
    # @option attributes [Integer] :ocpu_count The value to assign to the {#ocpu_count} property
    # @option attributes [Integer] :memory_size_in_gbs The value to assign to the {#memory_size_in_gbs} property
    # @option attributes [OCI::Psql::Models::ShapeOcpuOptions] :shape_ocpu_options The value to assign to the {#shape_ocpu_options} property
    # @option attributes [OCI::Psql::Models::ShapeMemoryOptions] :shape_memory_options The value to assign to the {#shape_memory_options} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.shape = attributes[:'shape'] if attributes[:'shape']

      self.is_flexible = attributes[:'isFlexible'] unless attributes[:'isFlexible'].nil?

      raise 'You cannot provide both :isFlexible and :is_flexible' if attributes.key?(:'isFlexible') && attributes.key?(:'is_flexible')

      self.is_flexible = attributes[:'is_flexible'] unless attributes[:'is_flexible'].nil?

      self.ocpu_count = attributes[:'ocpuCount'] if attributes[:'ocpuCount']

      raise 'You cannot provide both :ocpuCount and :ocpu_count' if attributes.key?(:'ocpuCount') && attributes.key?(:'ocpu_count')

      self.ocpu_count = attributes[:'ocpu_count'] if attributes[:'ocpu_count']

      self.memory_size_in_gbs = attributes[:'memorySizeInGBs'] if attributes[:'memorySizeInGBs']

      raise 'You cannot provide both :memorySizeInGBs and :memory_size_in_gbs' if attributes.key?(:'memorySizeInGBs') && attributes.key?(:'memory_size_in_gbs')

      self.memory_size_in_gbs = attributes[:'memory_size_in_gbs'] if attributes[:'memory_size_in_gbs']

      self.shape_ocpu_options = attributes[:'shapeOcpuOptions'] if attributes[:'shapeOcpuOptions']

      raise 'You cannot provide both :shapeOcpuOptions and :shape_ocpu_options' if attributes.key?(:'shapeOcpuOptions') && attributes.key?(:'shape_ocpu_options')

      self.shape_ocpu_options = attributes[:'shape_ocpu_options'] if attributes[:'shape_ocpu_options']

      self.shape_memory_options = attributes[:'shapeMemoryOptions'] if attributes[:'shapeMemoryOptions']

      raise 'You cannot provide both :shapeMemoryOptions and :shape_memory_options' if attributes.key?(:'shapeMemoryOptions') && attributes.key?(:'shape_memory_options')

      self.shape_memory_options = attributes[:'shape_memory_options'] if attributes[:'shape_memory_options']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        shape == other.shape &&
        is_flexible == other.is_flexible &&
        ocpu_count == other.ocpu_count &&
        memory_size_in_gbs == other.memory_size_in_gbs &&
        shape_ocpu_options == other.shape_ocpu_options &&
        shape_memory_options == other.shape_memory_options
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, shape, is_flexible, ocpu_count, memory_size_in_gbs, shape_ocpu_options, shape_memory_options].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
