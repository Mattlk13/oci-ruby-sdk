# Copyright (c) 2016, 2023, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220915
require 'date'
require 'logger'
require_relative 'backup_policy'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Weekly backup policy
  class Psql::Models::WeeklyBackupPolicy < Psql::Models::BackupPolicy
    DAYS_OF_THE_WEEK_ENUM = [
      DAYS_OF_THE_WEEK_SUNDAY = 'SUNDAY'.freeze,
      DAYS_OF_THE_WEEK_MONDAY = 'MONDAY'.freeze,
      DAYS_OF_THE_WEEK_TUESDAY = 'TUESDAY'.freeze,
      DAYS_OF_THE_WEEK_WEDNESDAY = 'WEDNESDAY'.freeze,
      DAYS_OF_THE_WEEK_THURSDAY = 'THURSDAY'.freeze,
      DAYS_OF_THE_WEEK_FRIDAY = 'FRIDAY'.freeze,
      DAYS_OF_THE_WEEK_SATURDAY = 'SATURDAY'.freeze,
      DAYS_OF_THE_WEEK_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Weekly days
    # @return [Array<String>]
    attr_reader :days_of_the_week

    # **[Required]** Hour of the day when backup starts.
    # @return [String]
    attr_accessor :backup_start

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'kind': :'kind',
        'retention_days': :'retentionDays',
        'days_of_the_week': :'daysOfTheWeek',
        'backup_start': :'backupStart'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'kind': :'String',
        'retention_days': :'Integer',
        'days_of_the_week': :'Array<String>',
        'backup_start': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :retention_days The value to assign to the {OCI::Psql::Models::BackupPolicy#retention_days #retention_days} proprety
    # @option attributes [Array<String>] :days_of_the_week The value to assign to the {#days_of_the_week} property
    # @option attributes [String] :backup_start The value to assign to the {#backup_start} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['kind'] = 'WEEKLY'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.days_of_the_week = attributes[:'daysOfTheWeek'] if attributes[:'daysOfTheWeek']

      raise 'You cannot provide both :daysOfTheWeek and :days_of_the_week' if attributes.key?(:'daysOfTheWeek') && attributes.key?(:'days_of_the_week')

      self.days_of_the_week = attributes[:'days_of_the_week'] if attributes[:'days_of_the_week']

      self.backup_start = attributes[:'backupStart'] if attributes[:'backupStart']

      raise 'You cannot provide both :backupStart and :backup_start' if attributes.key?(:'backupStart') && attributes.key?(:'backup_start')

      self.backup_start = attributes[:'backup_start'] if attributes[:'backup_start']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] days_of_the_week Object to be assigned
    def days_of_the_week=(days_of_the_week)
      # rubocop:disable Style/ConditionalAssignment
      if days_of_the_week.nil?
        @days_of_the_week = nil
      else
        @days_of_the_week =
          days_of_the_week.collect do |item|
            if DAYS_OF_THE_WEEK_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'days_of_the_week' [#{item}]. Mapping to 'DAYS_OF_THE_WEEK_UNKNOWN_ENUM_VALUE'") if OCI.logger
              DAYS_OF_THE_WEEK_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        kind == other.kind &&
        retention_days == other.retention_days &&
        days_of_the_week == other.days_of_the_week &&
        backup_start == other.backup_start
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [kind, retention_days, days_of_the_week, backup_start].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
