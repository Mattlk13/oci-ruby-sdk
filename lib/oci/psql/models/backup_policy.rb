# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220915
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # PostgreSQL database system backup policy.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class Psql::Models::BackupPolicy
    KIND_ENUM = [
      KIND_DAILY = 'DAILY'.freeze,
      KIND_WEEKLY = 'WEEKLY'.freeze,
      KIND_MONTHLY = 'MONTHLY'.freeze,
      KIND_NONE = 'NONE'.freeze,
      KIND_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The kind of backup policy.
    # @return [String]
    attr_reader :kind

    # How many days the data should be stored after the database system deletion.
    # @return [Integer]
    attr_accessor :retention_days

    # @return [OCI::Psql::Models::BackupCopyPolicy]
    attr_accessor :copy_policy

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'kind': :'kind',
        'retention_days': :'retentionDays',
        'copy_policy': :'copyPolicy'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'kind': :'String',
        'retention_days': :'Integer',
        'copy_policy': :'OCI::Psql::Models::BackupCopyPolicy'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'kind'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::Psql::Models::DailyBackupPolicy' if type == 'DAILY'
      return 'OCI::Psql::Models::WeeklyBackupPolicy' if type == 'WEEKLY'
      return 'OCI::Psql::Models::NoneBackupPolicy' if type == 'NONE'
      return 'OCI::Psql::Models::MonthlyBackupPolicy' if type == 'MONTHLY'

      # TODO: Log a warning when the subtype is not found.
      'OCI::Psql::Models::BackupPolicy'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :kind The value to assign to the {#kind} property
    # @option attributes [Integer] :retention_days The value to assign to the {#retention_days} property
    # @option attributes [OCI::Psql::Models::BackupCopyPolicy] :copy_policy The value to assign to the {#copy_policy} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.kind = attributes[:'kind'] if attributes[:'kind']

      self.retention_days = attributes[:'retentionDays'] if attributes[:'retentionDays']

      raise 'You cannot provide both :retentionDays and :retention_days' if attributes.key?(:'retentionDays') && attributes.key?(:'retention_days')

      self.retention_days = attributes[:'retention_days'] if attributes[:'retention_days']

      self.copy_policy = attributes[:'copyPolicy'] if attributes[:'copyPolicy']

      raise 'You cannot provide both :copyPolicy and :copy_policy' if attributes.key?(:'copyPolicy') && attributes.key?(:'copy_policy')

      self.copy_policy = attributes[:'copy_policy'] if attributes[:'copy_policy']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kind Object to be assigned
    def kind=(kind)
      # rubocop:disable Style/ConditionalAssignment
      if kind && !KIND_ENUM.include?(kind)
        OCI.logger.debug("Unknown value for 'kind' [" + kind + "]. Mapping to 'KIND_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @kind = KIND_UNKNOWN_ENUM_VALUE
      else
        @kind = kind
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        kind == other.kind &&
        retention_days == other.retention_days &&
        copy_policy == other.copy_policy
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [kind, retention_days, copy_policy].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
