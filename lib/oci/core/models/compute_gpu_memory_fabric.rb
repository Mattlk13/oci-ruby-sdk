# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The customer facing object includes GPU memory fabric details.
  #
  class Core::Models::ComputeGpuMemoryFabric
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_AVAILABLE = 'AVAILABLE'.freeze,
      LIFECYCLE_STATE_OCCUPIED = 'OCCUPIED'.freeze,
      LIFECYCLE_STATE_PROVISIONING = 'PROVISIONING'.freeze,
      LIFECYCLE_STATE_DEGRADED = 'DEGRADED'.freeze,
      LIFECYCLE_STATE_UNAVAILABLE = 'UNAVAILABLE'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    FABRIC_HEALTH_ENUM = [
      FABRIC_HEALTH_HEALTHY = 'HEALTHY'.freeze,
      FABRIC_HEALTH_UNHEALTHY = 'UNHEALTHY'.freeze,
      FABRIC_HEALTH_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Customer-unique GPU memory fabric
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment. This should always be the root
    # compartment.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for Customer-unique HPC Island
    #
    # @return [String]
    attr_accessor :compute_hpc_island_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for Customer-unique Network Block
    #
    # @return [String]
    attr_accessor :compute_network_block_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for Customer-unique Local Block
    #
    # @return [String]
    attr_accessor :compute_local_block_id

    # **[Required]** The lifecycle state of the GPU memory fabric
    #
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The health state of the GPU memory fabric
    #
    # @return [String]
    attr_reader :fabric_health

    # Additional data that can be exposed to the customer. Right now it will include the switch tray ids.
    #
    # @return [Hash<String, Object>]
    attr_accessor :additional_data

    # **[Required]** The total number of healthy bare metal hosts located in this compute GPU memory fabric.
    # @return [Integer]
    attr_accessor :healthy_host_count

    # **[Required]** The total number of bare metal hosts located in this compute GPU memory fabric.
    # @return [Integer]
    attr_accessor :total_host_count

    # **[Required]** The date and time that the compute GPU memory fabric record was created, in the format defined by [RFC3339]
    # (https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # Defined tags for this resource. Each key is predefined and scoped to a
    # namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Free-form tags for this resource. Each tag is a simple key-value pair with no
    # predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{ \"orcl-cloud\": { \"free-tier-retained\": \"true\" } }`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :display_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'compute_hpc_island_id': :'computeHpcIslandId',
        'compute_network_block_id': :'computeNetworkBlockId',
        'compute_local_block_id': :'computeLocalBlockId',
        'lifecycle_state': :'lifecycleState',
        'fabric_health': :'fabricHealth',
        'additional_data': :'additionalData',
        'healthy_host_count': :'healthyHostCount',
        'total_host_count': :'totalHostCount',
        'time_created': :'timeCreated',
        'defined_tags': :'definedTags',
        'freeform_tags': :'freeformTags',
        'system_tags': :'systemTags',
        'display_name': :'displayName'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'compute_hpc_island_id': :'String',
        'compute_network_block_id': :'String',
        'compute_local_block_id': :'String',
        'lifecycle_state': :'String',
        'fabric_health': :'String',
        'additional_data': :'Hash<String, Object>',
        'healthy_host_count': :'Integer',
        'total_host_count': :'Integer',
        'time_created': :'DateTime',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'freeform_tags': :'Hash<String, String>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'display_name': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :compute_hpc_island_id The value to assign to the {#compute_hpc_island_id} property
    # @option attributes [String] :compute_network_block_id The value to assign to the {#compute_network_block_id} property
    # @option attributes [String] :compute_local_block_id The value to assign to the {#compute_local_block_id} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :fabric_health The value to assign to the {#fabric_health} property
    # @option attributes [Hash<String, Object>] :additional_data The value to assign to the {#additional_data} property
    # @option attributes [Integer] :healthy_host_count The value to assign to the {#healthy_host_count} property
    # @option attributes [Integer] :total_host_count The value to assign to the {#total_host_count} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.compute_hpc_island_id = attributes[:'computeHpcIslandId'] if attributes[:'computeHpcIslandId']

      raise 'You cannot provide both :computeHpcIslandId and :compute_hpc_island_id' if attributes.key?(:'computeHpcIslandId') && attributes.key?(:'compute_hpc_island_id')

      self.compute_hpc_island_id = attributes[:'compute_hpc_island_id'] if attributes[:'compute_hpc_island_id']

      self.compute_network_block_id = attributes[:'computeNetworkBlockId'] if attributes[:'computeNetworkBlockId']

      raise 'You cannot provide both :computeNetworkBlockId and :compute_network_block_id' if attributes.key?(:'computeNetworkBlockId') && attributes.key?(:'compute_network_block_id')

      self.compute_network_block_id = attributes[:'compute_network_block_id'] if attributes[:'compute_network_block_id']

      self.compute_local_block_id = attributes[:'computeLocalBlockId'] if attributes[:'computeLocalBlockId']

      raise 'You cannot provide both :computeLocalBlockId and :compute_local_block_id' if attributes.key?(:'computeLocalBlockId') && attributes.key?(:'compute_local_block_id')

      self.compute_local_block_id = attributes[:'compute_local_block_id'] if attributes[:'compute_local_block_id']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.fabric_health = attributes[:'fabricHealth'] if attributes[:'fabricHealth']

      raise 'You cannot provide both :fabricHealth and :fabric_health' if attributes.key?(:'fabricHealth') && attributes.key?(:'fabric_health')

      self.fabric_health = attributes[:'fabric_health'] if attributes[:'fabric_health']

      self.additional_data = attributes[:'additionalData'] if attributes[:'additionalData']

      raise 'You cannot provide both :additionalData and :additional_data' if attributes.key?(:'additionalData') && attributes.key?(:'additional_data')

      self.additional_data = attributes[:'additional_data'] if attributes[:'additional_data']

      self.healthy_host_count = attributes[:'healthyHostCount'] if attributes[:'healthyHostCount']

      raise 'You cannot provide both :healthyHostCount and :healthy_host_count' if attributes.key?(:'healthyHostCount') && attributes.key?(:'healthy_host_count')

      self.healthy_host_count = attributes[:'healthy_host_count'] if attributes[:'healthy_host_count']

      self.total_host_count = attributes[:'totalHostCount'] if attributes[:'totalHostCount']

      raise 'You cannot provide both :totalHostCount and :total_host_count' if attributes.key?(:'totalHostCount') && attributes.key?(:'total_host_count')

      self.total_host_count = attributes[:'total_host_count'] if attributes[:'total_host_count']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fabric_health Object to be assigned
    def fabric_health=(fabric_health)
      # rubocop:disable Style/ConditionalAssignment
      if fabric_health && !FABRIC_HEALTH_ENUM.include?(fabric_health)
        OCI.logger.debug("Unknown value for 'fabric_health' [" + fabric_health + "]. Mapping to 'FABRIC_HEALTH_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @fabric_health = FABRIC_HEALTH_UNKNOWN_ENUM_VALUE
      else
        @fabric_health = fabric_health
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        compute_hpc_island_id == other.compute_hpc_island_id &&
        compute_network_block_id == other.compute_network_block_id &&
        compute_local_block_id == other.compute_local_block_id &&
        lifecycle_state == other.lifecycle_state &&
        fabric_health == other.fabric_health &&
        additional_data == other.additional_data &&
        healthy_host_count == other.healthy_host_count &&
        total_host_count == other.total_host_count &&
        time_created == other.time_created &&
        defined_tags == other.defined_tags &&
        freeform_tags == other.freeform_tags &&
        system_tags == other.system_tags &&
        display_name == other.display_name
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, compute_hpc_island_id, compute_network_block_id, compute_local_block_id, lifecycle_state, fabric_health, additional_data, healthy_host_count, total_host_count, time_created, defined_tags, freeform_tags, system_tags, display_name].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
