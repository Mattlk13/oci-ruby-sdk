# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Compute Host Group Configuration Details Check
  #
  class Core::Models::ComputeHostConfigurationCheckDetails
    TYPE_ENUM = [
      TYPE_FIRMWARE = 'FIRMWARE'.freeze,
      TYPE_RECYCLE = 'RECYCLE'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CONFIGURATION_STATE_ENUM = [
      CONFIGURATION_STATE_CONFORMANT = 'CONFORMANT'.freeze,
      CONFIGURATION_STATE_NON_CONFORMANT = 'NON_CONFORMANT'.freeze,
      CONFIGURATION_STATE_CHECKING = 'CHECKING'.freeze,
      CONFIGURATION_STATE_PRE_APPLYING = 'PRE_APPLYING'.freeze,
      CONFIGURATION_STATE_APPLYING = 'APPLYING'.freeze,
      CONFIGURATION_STATE_UNKNOWN = 'UNKNOWN'.freeze,
      CONFIGURATION_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    RECYCLE_LEVEL_ENUM = [
      RECYCLE_LEVEL_SKIP_RECYCLE = 'SKIP_RECYCLE'.freeze,
      RECYCLE_LEVEL_FULL_RECYCLE = 'FULL_RECYCLE'.freeze,
      RECYCLE_LEVEL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The type of configuration
    # @return [String]
    attr_reader :type

    # The current state of the host configuration. The Host is either |
    # CONFORMANT - current state matches the desired configuration
    # NON_CONFORMANT - current state does not match the desired configuration
    # PRE_APPLYING, APPLYING, CHECKING- transitional states
    # UNKNOWN - current state is unknown
    #
    # @return [String]
    attr_reader :configuration_state

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Customer-unique firmware bundle associated with the Host Configuration.
    #
    # @return [String]
    attr_accessor :firmware_bundle_id

    # Preferred recycle level for hosts associated with the reservation config.
    # * `SKIP_RECYCLE` - Skips host wipe.
    # * `FULL_RECYCLE` - Does not skip host wipe. This is the default behavior.
    #
    # @return [String]
    attr_reader :recycle_level

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'type',
        'configuration_state': :'configurationState',
        'firmware_bundle_id': :'firmwareBundleId',
        'recycle_level': :'recycleLevel'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'String',
        'configuration_state': :'String',
        'firmware_bundle_id': :'String',
        'recycle_level': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :configuration_state The value to assign to the {#configuration_state} property
    # @option attributes [String] :firmware_bundle_id The value to assign to the {#firmware_bundle_id} property
    # @option attributes [String] :recycle_level The value to assign to the {#recycle_level} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.type = attributes[:'type'] if attributes[:'type']

      self.configuration_state = attributes[:'configurationState'] if attributes[:'configurationState']

      raise 'You cannot provide both :configurationState and :configuration_state' if attributes.key?(:'configurationState') && attributes.key?(:'configuration_state')

      self.configuration_state = attributes[:'configuration_state'] if attributes[:'configuration_state']

      self.firmware_bundle_id = attributes[:'firmwareBundleId'] if attributes[:'firmwareBundleId']

      raise 'You cannot provide both :firmwareBundleId and :firmware_bundle_id' if attributes.key?(:'firmwareBundleId') && attributes.key?(:'firmware_bundle_id')

      self.firmware_bundle_id = attributes[:'firmware_bundle_id'] if attributes[:'firmware_bundle_id']

      self.recycle_level = attributes[:'recycleLevel'] if attributes[:'recycleLevel']

      raise 'You cannot provide both :recycleLevel and :recycle_level' if attributes.key?(:'recycleLevel') && attributes.key?(:'recycle_level')

      self.recycle_level = attributes[:'recycle_level'] if attributes[:'recycle_level']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] configuration_state Object to be assigned
    def configuration_state=(configuration_state)
      # rubocop:disable Style/ConditionalAssignment
      if configuration_state && !CONFIGURATION_STATE_ENUM.include?(configuration_state)
        OCI.logger.debug("Unknown value for 'configuration_state' [" + configuration_state + "]. Mapping to 'CONFIGURATION_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @configuration_state = CONFIGURATION_STATE_UNKNOWN_ENUM_VALUE
      else
        @configuration_state = configuration_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recycle_level Object to be assigned
    def recycle_level=(recycle_level)
      # rubocop:disable Style/ConditionalAssignment
      if recycle_level && !RECYCLE_LEVEL_ENUM.include?(recycle_level)
        OCI.logger.debug("Unknown value for 'recycle_level' [" + recycle_level + "]. Mapping to 'RECYCLE_LEVEL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @recycle_level = RECYCLE_LEVEL_UNKNOWN_ENUM_VALUE
      else
        @recycle_level = recycle_level
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        configuration_state == other.configuration_state &&
        firmware_bundle_id == other.firmware_bundle_id &&
        recycle_level == other.recycle_level
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, configuration_state, firmware_bundle_id, recycle_level].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
