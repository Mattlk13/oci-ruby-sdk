# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Specifies the properties for updating maintenance due date.
  #
  class Core::Models::UpdateInstanceMaintenanceEventDetails
    ALTERNATIVE_RESOLUTION_ACTION_ENUM = [
      ALTERNATIVE_RESOLUTION_ACTION_REBOOT_MIGRATION = 'REBOOT_MIGRATION'.freeze,
      ALTERNATIVE_RESOLUTION_ACTION_TERMINATE = 'TERMINATE'.freeze
    ].freeze

    # The beginning of the time window when Maintenance is scheduled to begin. The Maintenance will not begin before
    # this time.
    #
    # The timeWindowEnd is automatically calculated based on the maintenanceReason and the instanceAction.
    #
    # @return [DateTime]
    attr_accessor :time_window_start

    # One of the alternativeResolutionActions that was provided in the InstanceMaintenanceEvent.
    #
    # @return [String]
    attr_reader :alternative_resolution_action

    # This field is only applicable when setting the alternativeResolutionAction.
    #
    # For Instances that have local storage, this must be set to true to verify that the local storage
    # will be deleted during the migration. For instances without, this parameter has no effect.
    #
    # In cases where the local storage will be lost, this parameter must be set or the request will fail.
    #
    # @return [BOOLEAN]
    attr_accessor :can_delete_local_storage

    # A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :display_name

    # Defined tags for this resource. Each key is predefined and scoped to a
    # namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Free-form tags for this resource. Each tag is a simple key-value pair with no
    # predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'time_window_start': :'timeWindowStart',
        'alternative_resolution_action': :'alternativeResolutionAction',
        'can_delete_local_storage': :'canDeleteLocalStorage',
        'display_name': :'displayName',
        'defined_tags': :'definedTags',
        'freeform_tags': :'freeformTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'time_window_start': :'DateTime',
        'alternative_resolution_action': :'String',
        'can_delete_local_storage': :'BOOLEAN',
        'display_name': :'String',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'freeform_tags': :'Hash<String, String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_window_start The value to assign to the {#time_window_start} property
    # @option attributes [String] :alternative_resolution_action The value to assign to the {#alternative_resolution_action} property
    # @option attributes [BOOLEAN] :can_delete_local_storage The value to assign to the {#can_delete_local_storage} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.time_window_start = attributes[:'timeWindowStart'] if attributes[:'timeWindowStart']

      raise 'You cannot provide both :timeWindowStart and :time_window_start' if attributes.key?(:'timeWindowStart') && attributes.key?(:'time_window_start')

      self.time_window_start = attributes[:'time_window_start'] if attributes[:'time_window_start']

      self.alternative_resolution_action = attributes[:'alternativeResolutionAction'] if attributes[:'alternativeResolutionAction']

      raise 'You cannot provide both :alternativeResolutionAction and :alternative_resolution_action' if attributes.key?(:'alternativeResolutionAction') && attributes.key?(:'alternative_resolution_action')

      self.alternative_resolution_action = attributes[:'alternative_resolution_action'] if attributes[:'alternative_resolution_action']

      self.can_delete_local_storage = attributes[:'canDeleteLocalStorage'] unless attributes[:'canDeleteLocalStorage'].nil?

      raise 'You cannot provide both :canDeleteLocalStorage and :can_delete_local_storage' if attributes.key?(:'canDeleteLocalStorage') && attributes.key?(:'can_delete_local_storage')

      self.can_delete_local_storage = attributes[:'can_delete_local_storage'] unless attributes[:'can_delete_local_storage'].nil?

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alternative_resolution_action Object to be assigned
    def alternative_resolution_action=(alternative_resolution_action)
      raise "Invalid value for 'alternative_resolution_action': this must be one of the values in ALTERNATIVE_RESOLUTION_ACTION_ENUM." if alternative_resolution_action && !ALTERNATIVE_RESOLUTION_ACTION_ENUM.include?(alternative_resolution_action)

      @alternative_resolution_action = alternative_resolution_action
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        time_window_start == other.time_window_start &&
        alternative_resolution_action == other.alternative_resolution_action &&
        can_delete_local_storage == other.can_delete_local_storage &&
        display_name == other.display_name &&
        defined_tags == other.defined_tags &&
        freeform_tags == other.freeform_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [time_window_start, alternative_resolution_action, can_delete_local_storage, display_name, defined_tags, freeform_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
