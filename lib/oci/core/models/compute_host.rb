# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The customer facing object includes host details.
  #
  class Core::Models::ComputeHost
    CONFIGURATION_STATE_ENUM = [
      CONFIGURATION_STATE_CONFORMANT = 'CONFORMANT'.freeze,
      CONFIGURATION_STATE_NON_CONFORMANT = 'NON_CONFORMANT'.freeze,
      CONFIGURATION_STATE_CHECKING = 'CHECKING'.freeze,
      CONFIGURATION_STATE_PRE_APPLYING = 'PRE_APPLYING'.freeze,
      CONFIGURATION_STATE_APPLYING = 'APPLYING'.freeze,
      CONFIGURATION_STATE_UNKNOWN = 'UNKNOWN'.freeze,
      CONFIGURATION_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    HEALTH_ENUM = [
      HEALTH_HEALTHY = 'HEALTHY'.freeze,
      HEALTH_UNHEALTHY = 'UNHEALTHY'.freeze,
      HEALTH_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_AVAILABLE = 'AVAILABLE'.freeze,
      LIFECYCLE_STATE_OCCUPIED = 'OCCUPIED'.freeze,
      LIFECYCLE_STATE_PROVISIONING = 'PROVISIONING'.freeze,
      LIFECYCLE_STATE_REPAIR = 'REPAIR'.freeze,
      LIFECYCLE_STATE_UNAVAILABLE = 'UNAVAILABLE'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The availability domain of the compute host.
    #
    # Example: `Uocm:US-CHICAGO-1-AD-2`
    #
    # @return [String]
    attr_accessor :availability_domain

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the compartment. This should always be the root
    # compartment.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Customer-unique host
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** A fault domain is a grouping of hardware and infrastructure within an availability domain.
    # Each availability domain contains three fault domains. Fault domains let you distribute your
    # instances so that they are not on the same physical hardware within a single availability domain.
    # A hardware failure or Compute hardware maintenance that affects one fault domain does not affect
    # instances in other fault domains.
    #
    # This field is the Fault domain of the host
    #
    # @return [String]
    attr_accessor :fault_domain

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for Customer-unique HPC Island
    #
    # @return [String]
    attr_accessor :hpc_island_id

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Customer-unique host group associated with the Compute Bare Metal Host.
    #
    # @return [String]
    attr_accessor :compute_host_group_id

    # Configuration state of the Compute Bare Metal Host.
    #
    # @return [String]
    attr_reader :configuration_state

    # The date and time that the compute bare metal host configuration check was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_configuration_check

    # @return [OCI::Core::Models::ComputeHostConfigurationData]
    attr_accessor :configuration_data

    # @return [OCI::Core::Models::RecycleDetails]
    attr_accessor :recycle_details

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for Customer-unique Network Block
    #
    # @return [String]
    attr_accessor :network_block_id

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for Customer-unique Local Block
    #
    # @return [String]
    attr_accessor :local_block_id

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for Customer-unique GPU Memory Fabric
    #
    # @return [String]
    attr_accessor :gpu_memory_fabric_id

    # The public [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Virtual Machine or Bare Metal instance
    #
    # @return [String]
    attr_accessor :instance_id

    # **[Required]** The shape of host
    #
    # @return [String]
    attr_accessor :shape

    # **[Required]** The heathy state of the host
    #
    # @return [String]
    attr_reader :health

    # Additional data that can be exposed to the customer.  Will include raw fault codes for strategic customers
    #
    # @return [Hash<String, Object>]
    attr_accessor :additional_data

    # **[Required]** The lifecycle state of the host
    #
    # @return [String]
    attr_reader :lifecycle_state

    # A free-form description detailing why the host is in its current state.
    #
    # @return [Hash<String, Object>]
    attr_accessor :lifecycle_details

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) for the Capacity Reserver that is currently on host
    #
    # @return [String]
    attr_accessor :capacity_reservation_id

    # A list that contains impacted components related to an unhealthy host. An impacted component will be a
    # free-form structure of key values pairs that will provide more or less details based on data tiering
    #
    # @return [Hash<String, Object>]
    attr_accessor :impacted_component_details

    # **[Required]** The date and time that the compute host record was created, in the format defined by [RFC3339](https://tools
    # .ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time that the compute host record was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # Defined tags for this resource. Each key is predefined and scoped to a
    # namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :display_name

    # Free-form tags for this resource. Each tag is a simple key-value pair with no
    # predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'availabilityDomain',
        'compartment_id': :'compartmentId',
        'id': :'id',
        'fault_domain': :'faultDomain',
        'hpc_island_id': :'hpcIslandId',
        'compute_host_group_id': :'computeHostGroupId',
        'configuration_state': :'configurationState',
        'time_configuration_check': :'timeConfigurationCheck',
        'configuration_data': :'configurationData',
        'recycle_details': :'recycleDetails',
        'network_block_id': :'networkBlockId',
        'local_block_id': :'localBlockId',
        'gpu_memory_fabric_id': :'gpuMemoryFabricId',
        'instance_id': :'instanceId',
        'shape': :'shape',
        'health': :'health',
        'additional_data': :'additionalData',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'capacity_reservation_id': :'capacityReservationId',
        'impacted_component_details': :'impactedComponentDetails',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'defined_tags': :'definedTags',
        'display_name': :'displayName',
        'freeform_tags': :'freeformTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'String',
        'compartment_id': :'String',
        'id': :'String',
        'fault_domain': :'String',
        'hpc_island_id': :'String',
        'compute_host_group_id': :'String',
        'configuration_state': :'String',
        'time_configuration_check': :'DateTime',
        'configuration_data': :'OCI::Core::Models::ComputeHostConfigurationData',
        'recycle_details': :'OCI::Core::Models::RecycleDetails',
        'network_block_id': :'String',
        'local_block_id': :'String',
        'gpu_memory_fabric_id': :'String',
        'instance_id': :'String',
        'shape': :'String',
        'health': :'String',
        'additional_data': :'Hash<String, Object>',
        'lifecycle_state': :'String',
        'lifecycle_details': :'Hash<String, Object>',
        'capacity_reservation_id': :'String',
        'impacted_component_details': :'Hash<String, Object>',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'display_name': :'String',
        'freeform_tags': :'Hash<String, String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :fault_domain The value to assign to the {#fault_domain} property
    # @option attributes [String] :hpc_island_id The value to assign to the {#hpc_island_id} property
    # @option attributes [String] :compute_host_group_id The value to assign to the {#compute_host_group_id} property
    # @option attributes [String] :configuration_state The value to assign to the {#configuration_state} property
    # @option attributes [DateTime] :time_configuration_check The value to assign to the {#time_configuration_check} property
    # @option attributes [OCI::Core::Models::ComputeHostConfigurationData] :configuration_data The value to assign to the {#configuration_data} property
    # @option attributes [OCI::Core::Models::RecycleDetails] :recycle_details The value to assign to the {#recycle_details} property
    # @option attributes [String] :network_block_id The value to assign to the {#network_block_id} property
    # @option attributes [String] :local_block_id The value to assign to the {#local_block_id} property
    # @option attributes [String] :gpu_memory_fabric_id The value to assign to the {#gpu_memory_fabric_id} property
    # @option attributes [String] :instance_id The value to assign to the {#instance_id} property
    # @option attributes [String] :shape The value to assign to the {#shape} property
    # @option attributes [String] :health The value to assign to the {#health} property
    # @option attributes [Hash<String, Object>] :additional_data The value to assign to the {#additional_data} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, Object>] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :capacity_reservation_id The value to assign to the {#capacity_reservation_id} property
    # @option attributes [Hash<String, Object>] :impacted_component_details The value to assign to the {#impacted_component_details} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.id = attributes[:'id'] if attributes[:'id']

      self.fault_domain = attributes[:'faultDomain'] if attributes[:'faultDomain']

      raise 'You cannot provide both :faultDomain and :fault_domain' if attributes.key?(:'faultDomain') && attributes.key?(:'fault_domain')

      self.fault_domain = attributes[:'fault_domain'] if attributes[:'fault_domain']

      self.hpc_island_id = attributes[:'hpcIslandId'] if attributes[:'hpcIslandId']

      raise 'You cannot provide both :hpcIslandId and :hpc_island_id' if attributes.key?(:'hpcIslandId') && attributes.key?(:'hpc_island_id')

      self.hpc_island_id = attributes[:'hpc_island_id'] if attributes[:'hpc_island_id']

      self.compute_host_group_id = attributes[:'computeHostGroupId'] if attributes[:'computeHostGroupId']

      raise 'You cannot provide both :computeHostGroupId and :compute_host_group_id' if attributes.key?(:'computeHostGroupId') && attributes.key?(:'compute_host_group_id')

      self.compute_host_group_id = attributes[:'compute_host_group_id'] if attributes[:'compute_host_group_id']

      self.configuration_state = attributes[:'configurationState'] if attributes[:'configurationState']

      raise 'You cannot provide both :configurationState and :configuration_state' if attributes.key?(:'configurationState') && attributes.key?(:'configuration_state')

      self.configuration_state = attributes[:'configuration_state'] if attributes[:'configuration_state']

      self.time_configuration_check = attributes[:'timeConfigurationCheck'] if attributes[:'timeConfigurationCheck']

      raise 'You cannot provide both :timeConfigurationCheck and :time_configuration_check' if attributes.key?(:'timeConfigurationCheck') && attributes.key?(:'time_configuration_check')

      self.time_configuration_check = attributes[:'time_configuration_check'] if attributes[:'time_configuration_check']

      self.configuration_data = attributes[:'configurationData'] if attributes[:'configurationData']

      raise 'You cannot provide both :configurationData and :configuration_data' if attributes.key?(:'configurationData') && attributes.key?(:'configuration_data')

      self.configuration_data = attributes[:'configuration_data'] if attributes[:'configuration_data']

      self.recycle_details = attributes[:'recycleDetails'] if attributes[:'recycleDetails']

      raise 'You cannot provide both :recycleDetails and :recycle_details' if attributes.key?(:'recycleDetails') && attributes.key?(:'recycle_details')

      self.recycle_details = attributes[:'recycle_details'] if attributes[:'recycle_details']

      self.network_block_id = attributes[:'networkBlockId'] if attributes[:'networkBlockId']

      raise 'You cannot provide both :networkBlockId and :network_block_id' if attributes.key?(:'networkBlockId') && attributes.key?(:'network_block_id')

      self.network_block_id = attributes[:'network_block_id'] if attributes[:'network_block_id']

      self.local_block_id = attributes[:'localBlockId'] if attributes[:'localBlockId']

      raise 'You cannot provide both :localBlockId and :local_block_id' if attributes.key?(:'localBlockId') && attributes.key?(:'local_block_id')

      self.local_block_id = attributes[:'local_block_id'] if attributes[:'local_block_id']

      self.gpu_memory_fabric_id = attributes[:'gpuMemoryFabricId'] if attributes[:'gpuMemoryFabricId']

      raise 'You cannot provide both :gpuMemoryFabricId and :gpu_memory_fabric_id' if attributes.key?(:'gpuMemoryFabricId') && attributes.key?(:'gpu_memory_fabric_id')

      self.gpu_memory_fabric_id = attributes[:'gpu_memory_fabric_id'] if attributes[:'gpu_memory_fabric_id']

      self.instance_id = attributes[:'instanceId'] if attributes[:'instanceId']

      raise 'You cannot provide both :instanceId and :instance_id' if attributes.key?(:'instanceId') && attributes.key?(:'instance_id')

      self.instance_id = attributes[:'instance_id'] if attributes[:'instance_id']

      self.shape = attributes[:'shape'] if attributes[:'shape']

      self.health = attributes[:'health'] if attributes[:'health']

      self.additional_data = attributes[:'additionalData'] if attributes[:'additionalData']

      raise 'You cannot provide both :additionalData and :additional_data' if attributes.key?(:'additionalData') && attributes.key?(:'additional_data')

      self.additional_data = attributes[:'additional_data'] if attributes[:'additional_data']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.capacity_reservation_id = attributes[:'capacityReservationId'] if attributes[:'capacityReservationId']

      raise 'You cannot provide both :capacityReservationId and :capacity_reservation_id' if attributes.key?(:'capacityReservationId') && attributes.key?(:'capacity_reservation_id')

      self.capacity_reservation_id = attributes[:'capacity_reservation_id'] if attributes[:'capacity_reservation_id']

      self.impacted_component_details = attributes[:'impactedComponentDetails'] if attributes[:'impactedComponentDetails']

      raise 'You cannot provide both :impactedComponentDetails and :impacted_component_details' if attributes.key?(:'impactedComponentDetails') && attributes.key?(:'impacted_component_details')

      self.impacted_component_details = attributes[:'impacted_component_details'] if attributes[:'impacted_component_details']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] configuration_state Object to be assigned
    def configuration_state=(configuration_state)
      # rubocop:disable Style/ConditionalAssignment
      if configuration_state && !CONFIGURATION_STATE_ENUM.include?(configuration_state)
        OCI.logger.debug("Unknown value for 'configuration_state' [" + configuration_state + "]. Mapping to 'CONFIGURATION_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @configuration_state = CONFIGURATION_STATE_UNKNOWN_ENUM_VALUE
      else
        @configuration_state = configuration_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] health Object to be assigned
    def health=(health)
      # rubocop:disable Style/ConditionalAssignment
      if health && !HEALTH_ENUM.include?(health)
        OCI.logger.debug("Unknown value for 'health' [" + health + "]. Mapping to 'HEALTH_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @health = HEALTH_UNKNOWN_ENUM_VALUE
      else
        @health = health
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        availability_domain == other.availability_domain &&
        compartment_id == other.compartment_id &&
        id == other.id &&
        fault_domain == other.fault_domain &&
        hpc_island_id == other.hpc_island_id &&
        compute_host_group_id == other.compute_host_group_id &&
        configuration_state == other.configuration_state &&
        time_configuration_check == other.time_configuration_check &&
        configuration_data == other.configuration_data &&
        recycle_details == other.recycle_details &&
        network_block_id == other.network_block_id &&
        local_block_id == other.local_block_id &&
        gpu_memory_fabric_id == other.gpu_memory_fabric_id &&
        instance_id == other.instance_id &&
        shape == other.shape &&
        health == other.health &&
        additional_data == other.additional_data &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        capacity_reservation_id == other.capacity_reservation_id &&
        impacted_component_details == other.impacted_component_details &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        defined_tags == other.defined_tags &&
        display_name == other.display_name &&
        freeform_tags == other.freeform_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [availability_domain, compartment_id, id, fault_domain, hpc_island_id, compute_host_group_id, configuration_state, time_configuration_check, configuration_data, recycle_details, network_block_id, local_block_id, gpu_memory_fabric_id, instance_id, shape, health, additional_data, lifecycle_state, lifecycle_details, capacity_reservation_id, impacted_component_details, time_created, time_updated, defined_tags, display_name, freeform_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
