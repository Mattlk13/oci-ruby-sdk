# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # It is the event in which the maintenance action will be be performed on the customer instance on the scheduled date and time.
  #
  class Core::Models::InstanceMaintenanceEvent
    MAINTENANCE_CATEGORY_ENUM = [
      MAINTENANCE_CATEGORY_EMERGENCY = 'EMERGENCY'.freeze,
      MAINTENANCE_CATEGORY_MANDATORY = 'MANDATORY'.freeze,
      MAINTENANCE_CATEGORY_FLEXIBLE = 'FLEXIBLE'.freeze,
      MAINTENANCE_CATEGORY_OPTIONAL = 'OPTIONAL'.freeze,
      MAINTENANCE_CATEGORY_NOTIFICATION = 'NOTIFICATION'.freeze,
      MAINTENANCE_CATEGORY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MAINTENANCE_REASON_ENUM = [
      MAINTENANCE_REASON_EVACUATION = 'EVACUATION'.freeze,
      MAINTENANCE_REASON_ENVIRONMENTAL_FACTORS = 'ENVIRONMENTAL_FACTORS'.freeze,
      MAINTENANCE_REASON_DECOMMISSION = 'DECOMMISSION'.freeze,
      MAINTENANCE_REASON_HARDWARE_REPLACEMENT = 'HARDWARE_REPLACEMENT'.freeze,
      MAINTENANCE_REASON_FIRMWARE_UPDATE = 'FIRMWARE_UPDATE'.freeze,
      MAINTENANCE_REASON_SECURITY_UPDATE = 'SECURITY_UPDATE'.freeze,
      MAINTENANCE_REASON_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    INSTANCE_ACTION_ENUM = [
      INSTANCE_ACTION_REBOOT_MIGRATION = 'REBOOT_MIGRATION'.freeze,
      INSTANCE_ACTION_TERMINATE = 'TERMINATE'.freeze,
      INSTANCE_ACTION_STOP = 'STOP'.freeze,
      INSTANCE_ACTION_NONE = 'NONE'.freeze,
      INSTANCE_ACTION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ALTERNATIVE_RESOLUTION_ACTIONS_ENUM = [
      ALTERNATIVE_RESOLUTION_ACTIONS_REBOOT_MIGRATION = 'REBOOT_MIGRATION'.freeze,
      ALTERNATIVE_RESOLUTION_ACTIONS_TERMINATE = 'TERMINATE'.freeze,
      ALTERNATIVE_RESOLUTION_ACTIONS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_SCHEDULED = 'SCHEDULED'.freeze,
      LIFECYCLE_STATE_STARTED = 'STARTED'.freeze,
      LIFECYCLE_STATE_PROCESSING = 'PROCESSING'.freeze,
      LIFECYCLE_STATE_SUCCEEDED = 'SUCCEEDED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_CANCELED = 'CANCELED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CREATED_BY_ENUM = [
      CREATED_BY_CUSTOMER = 'CUSTOMER'.freeze,
      CREATED_BY_SYSTEM = 'SYSTEM'.freeze,
      CREATED_BY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # A user-friendly name. Does not have to be unique, and it's changeable.
    # Avoid entering confidential information.
    #
    # @return [String]
    attr_accessor :display_name

    # Defined tags for this resource. Each key is predefined and scoped to a
    # namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Free-form tags for this resource. Each tag is a simple key-value pair with no
    # predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance event.
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the instance.
    # @return [String]
    attr_accessor :instance_id

    # **[Required]** The OCID of the compartment that contains the instance.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** This indicates the priority and allowed actions for this Maintenance. Higher priority forms of Maintenance have
    # tighter restrictions and may not be rescheduled, while lower priority/severity Maintenance can be rescheduled,
    # deferred, or even cancelled. Please see the
    # [Instance Maintenance](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/placeholder.htm) documentation for details.
    #
    # @return [String]
    attr_reader :maintenance_category

    # **[Required]** This is the reason that Maintenance is being performed. See
    # [Instance Maintenance](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/placeholder.htm) documentation for details.
    #
    # @return [String]
    attr_reader :maintenance_reason

    # **[Required]** This is the action that will be performed on the Instance by OCI when the Maintenance begins.
    #
    # @return [String]
    attr_reader :instance_action

    # **[Required]** These are alternative actions to the requested instanceAction that can be taken to resolve the Maintenance.
    #
    # @return [Array<String>]
    attr_reader :alternative_resolution_actions

    # The time at which the Maintenance actually started.
    #
    # @return [DateTime]
    attr_accessor :time_started

    # The time at which the Maintenance actually finished.
    #
    # @return [DateTime]
    attr_accessor :time_finished

    # **[Required]** The beginning of the time window when Maintenance is scheduled to begin. The Maintenance will not begin before
    # this time.
    #
    # @return [DateTime]
    attr_accessor :time_window_start

    # The duration of the time window Maintenance is scheduled to begin within.
    #
    # @return [String]
    attr_accessor :start_window_duration

    # This is the estimated duration of the Maintenance, once the Maintenance has entered the STARTED state.
    #
    # @return [String]
    attr_accessor :estimated_duration

    # It is the scheduled hard due date and time of the maintenance event.
    # The maintenance event will happen at this time and the due date will not be extended.
    #
    # @return [DateTime]
    attr_accessor :time_hard_due_date

    # **[Required]** Indicates if this MaintenanceEvent is capable of being rescheduled up to the timeHardDueDate.
    #
    # @return [BOOLEAN]
    attr_accessor :can_reschedule

    # **[Required]** The date and time the maintenance event was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The current state of the maintenance event.
    #
    # @return [String]
    attr_reader :lifecycle_state

    # Provides more details about the state of the maintenance event.
    #
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** The creator of the maintenance event.
    #
    # @return [String]
    attr_reader :created_by

    # It is the descriptive information about the maintenance taking place on the customer instance.
    #
    # @return [String]
    attr_accessor :description

    # A unique identifier that will group Instances that have a relationship with one another and must be scheduled
    # together for the Maintenance to proceed. Any Instances that have a relationship with one another from a Maintenance
    # perspective will have a matching correlationToken.
    #
    # @return [String]
    attr_accessor :correlation_token

    # For Instances that have local storage, this field is set to true when local storage
    # will be deleted as a result of the Maintenance.
    #
    # @return [BOOLEAN]
    attr_accessor :can_delete_local_storage

    # Additional details of the maintenance in the form of json.
    #
    # @return [Hash<String, String>]
    attr_accessor :additional_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'defined_tags': :'definedTags',
        'freeform_tags': :'freeformTags',
        'id': :'id',
        'instance_id': :'instanceId',
        'compartment_id': :'compartmentId',
        'maintenance_category': :'maintenanceCategory',
        'maintenance_reason': :'maintenanceReason',
        'instance_action': :'instanceAction',
        'alternative_resolution_actions': :'alternativeResolutionActions',
        'time_started': :'timeStarted',
        'time_finished': :'timeFinished',
        'time_window_start': :'timeWindowStart',
        'start_window_duration': :'startWindowDuration',
        'estimated_duration': :'estimatedDuration',
        'time_hard_due_date': :'timeHardDueDate',
        'can_reschedule': :'canReschedule',
        'time_created': :'timeCreated',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'created_by': :'createdBy',
        'description': :'description',
        'correlation_token': :'correlationToken',
        'can_delete_local_storage': :'canDeleteLocalStorage',
        'additional_details': :'additionalDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'freeform_tags': :'Hash<String, String>',
        'id': :'String',
        'instance_id': :'String',
        'compartment_id': :'String',
        'maintenance_category': :'String',
        'maintenance_reason': :'String',
        'instance_action': :'String',
        'alternative_resolution_actions': :'Array<String>',
        'time_started': :'DateTime',
        'time_finished': :'DateTime',
        'time_window_start': :'DateTime',
        'start_window_duration': :'String',
        'estimated_duration': :'String',
        'time_hard_due_date': :'DateTime',
        'can_reschedule': :'BOOLEAN',
        'time_created': :'DateTime',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'created_by': :'String',
        'description': :'String',
        'correlation_token': :'String',
        'can_delete_local_storage': :'BOOLEAN',
        'additional_details': :'Hash<String, String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :instance_id The value to assign to the {#instance_id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :maintenance_category The value to assign to the {#maintenance_category} property
    # @option attributes [String] :maintenance_reason The value to assign to the {#maintenance_reason} property
    # @option attributes [String] :instance_action The value to assign to the {#instance_action} property
    # @option attributes [Array<String>] :alternative_resolution_actions The value to assign to the {#alternative_resolution_actions} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_finished The value to assign to the {#time_finished} property
    # @option attributes [DateTime] :time_window_start The value to assign to the {#time_window_start} property
    # @option attributes [String] :start_window_duration The value to assign to the {#start_window_duration} property
    # @option attributes [String] :estimated_duration The value to assign to the {#estimated_duration} property
    # @option attributes [DateTime] :time_hard_due_date The value to assign to the {#time_hard_due_date} property
    # @option attributes [BOOLEAN] :can_reschedule The value to assign to the {#can_reschedule} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :created_by The value to assign to the {#created_by} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :correlation_token The value to assign to the {#correlation_token} property
    # @option attributes [BOOLEAN] :can_delete_local_storage The value to assign to the {#can_delete_local_storage} property
    # @option attributes [Hash<String, String>] :additional_details The value to assign to the {#additional_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.id = attributes[:'id'] if attributes[:'id']

      self.instance_id = attributes[:'instanceId'] if attributes[:'instanceId']

      raise 'You cannot provide both :instanceId and :instance_id' if attributes.key?(:'instanceId') && attributes.key?(:'instance_id')

      self.instance_id = attributes[:'instance_id'] if attributes[:'instance_id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.maintenance_category = attributes[:'maintenanceCategory'] if attributes[:'maintenanceCategory']

      raise 'You cannot provide both :maintenanceCategory and :maintenance_category' if attributes.key?(:'maintenanceCategory') && attributes.key?(:'maintenance_category')

      self.maintenance_category = attributes[:'maintenance_category'] if attributes[:'maintenance_category']

      self.maintenance_reason = attributes[:'maintenanceReason'] if attributes[:'maintenanceReason']

      raise 'You cannot provide both :maintenanceReason and :maintenance_reason' if attributes.key?(:'maintenanceReason') && attributes.key?(:'maintenance_reason')

      self.maintenance_reason = attributes[:'maintenance_reason'] if attributes[:'maintenance_reason']

      self.instance_action = attributes[:'instanceAction'] if attributes[:'instanceAction']

      raise 'You cannot provide both :instanceAction and :instance_action' if attributes.key?(:'instanceAction') && attributes.key?(:'instance_action')

      self.instance_action = attributes[:'instance_action'] if attributes[:'instance_action']

      self.alternative_resolution_actions = attributes[:'alternativeResolutionActions'] if attributes[:'alternativeResolutionActions']

      raise 'You cannot provide both :alternativeResolutionActions and :alternative_resolution_actions' if attributes.key?(:'alternativeResolutionActions') && attributes.key?(:'alternative_resolution_actions')

      self.alternative_resolution_actions = attributes[:'alternative_resolution_actions'] if attributes[:'alternative_resolution_actions']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_finished = attributes[:'timeFinished'] if attributes[:'timeFinished']

      raise 'You cannot provide both :timeFinished and :time_finished' if attributes.key?(:'timeFinished') && attributes.key?(:'time_finished')

      self.time_finished = attributes[:'time_finished'] if attributes[:'time_finished']

      self.time_window_start = attributes[:'timeWindowStart'] if attributes[:'timeWindowStart']

      raise 'You cannot provide both :timeWindowStart and :time_window_start' if attributes.key?(:'timeWindowStart') && attributes.key?(:'time_window_start')

      self.time_window_start = attributes[:'time_window_start'] if attributes[:'time_window_start']

      self.start_window_duration = attributes[:'startWindowDuration'] if attributes[:'startWindowDuration']

      raise 'You cannot provide both :startWindowDuration and :start_window_duration' if attributes.key?(:'startWindowDuration') && attributes.key?(:'start_window_duration')

      self.start_window_duration = attributes[:'start_window_duration'] if attributes[:'start_window_duration']

      self.estimated_duration = attributes[:'estimatedDuration'] if attributes[:'estimatedDuration']

      raise 'You cannot provide both :estimatedDuration and :estimated_duration' if attributes.key?(:'estimatedDuration') && attributes.key?(:'estimated_duration')

      self.estimated_duration = attributes[:'estimated_duration'] if attributes[:'estimated_duration']

      self.time_hard_due_date = attributes[:'timeHardDueDate'] if attributes[:'timeHardDueDate']

      raise 'You cannot provide both :timeHardDueDate and :time_hard_due_date' if attributes.key?(:'timeHardDueDate') && attributes.key?(:'time_hard_due_date')

      self.time_hard_due_date = attributes[:'time_hard_due_date'] if attributes[:'time_hard_due_date']

      self.can_reschedule = attributes[:'canReschedule'] unless attributes[:'canReschedule'].nil?

      raise 'You cannot provide both :canReschedule and :can_reschedule' if attributes.key?(:'canReschedule') && attributes.key?(:'can_reschedule')

      self.can_reschedule = attributes[:'can_reschedule'] unless attributes[:'can_reschedule'].nil?

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.created_by = attributes[:'createdBy'] if attributes[:'createdBy']

      raise 'You cannot provide both :createdBy and :created_by' if attributes.key?(:'createdBy') && attributes.key?(:'created_by')

      self.created_by = attributes[:'created_by'] if attributes[:'created_by']

      self.description = attributes[:'description'] if attributes[:'description']

      self.correlation_token = attributes[:'correlationToken'] if attributes[:'correlationToken']

      raise 'You cannot provide both :correlationToken and :correlation_token' if attributes.key?(:'correlationToken') && attributes.key?(:'correlation_token')

      self.correlation_token = attributes[:'correlation_token'] if attributes[:'correlation_token']

      self.can_delete_local_storage = attributes[:'canDeleteLocalStorage'] unless attributes[:'canDeleteLocalStorage'].nil?

      raise 'You cannot provide both :canDeleteLocalStorage and :can_delete_local_storage' if attributes.key?(:'canDeleteLocalStorage') && attributes.key?(:'can_delete_local_storage')

      self.can_delete_local_storage = attributes[:'can_delete_local_storage'] unless attributes[:'can_delete_local_storage'].nil?

      self.additional_details = attributes[:'additionalDetails'] if attributes[:'additionalDetails']

      raise 'You cannot provide both :additionalDetails and :additional_details' if attributes.key?(:'additionalDetails') && attributes.key?(:'additional_details')

      self.additional_details = attributes[:'additional_details'] if attributes[:'additional_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_category Object to be assigned
    def maintenance_category=(maintenance_category)
      # rubocop:disable Style/ConditionalAssignment
      if maintenance_category && !MAINTENANCE_CATEGORY_ENUM.include?(maintenance_category)
        OCI.logger.debug("Unknown value for 'maintenance_category' [" + maintenance_category + "]. Mapping to 'MAINTENANCE_CATEGORY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @maintenance_category = MAINTENANCE_CATEGORY_UNKNOWN_ENUM_VALUE
      else
        @maintenance_category = maintenance_category
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] maintenance_reason Object to be assigned
    def maintenance_reason=(maintenance_reason)
      # rubocop:disable Style/ConditionalAssignment
      if maintenance_reason && !MAINTENANCE_REASON_ENUM.include?(maintenance_reason)
        OCI.logger.debug("Unknown value for 'maintenance_reason' [" + maintenance_reason + "]. Mapping to 'MAINTENANCE_REASON_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @maintenance_reason = MAINTENANCE_REASON_UNKNOWN_ENUM_VALUE
      else
        @maintenance_reason = maintenance_reason
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] instance_action Object to be assigned
    def instance_action=(instance_action)
      # rubocop:disable Style/ConditionalAssignment
      if instance_action && !INSTANCE_ACTION_ENUM.include?(instance_action)
        OCI.logger.debug("Unknown value for 'instance_action' [" + instance_action + "]. Mapping to 'INSTANCE_ACTION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @instance_action = INSTANCE_ACTION_UNKNOWN_ENUM_VALUE
      else
        @instance_action = instance_action
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alternative_resolution_actions Object to be assigned
    def alternative_resolution_actions=(alternative_resolution_actions)
      # rubocop:disable Style/ConditionalAssignment
      if alternative_resolution_actions.nil?
        @alternative_resolution_actions = nil
      else
        @alternative_resolution_actions =
          alternative_resolution_actions.collect do |item|
            if ALTERNATIVE_RESOLUTION_ACTIONS_ENUM.include?(item)
              item
            else
              OCI.logger.debug("Unknown value for 'alternative_resolution_actions' [#{item}]. Mapping to 'ALTERNATIVE_RESOLUTION_ACTIONS_UNKNOWN_ENUM_VALUE'") if OCI.logger
              ALTERNATIVE_RESOLUTION_ACTIONS_UNKNOWN_ENUM_VALUE
            end
          end
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] created_by Object to be assigned
    def created_by=(created_by)
      # rubocop:disable Style/ConditionalAssignment
      if created_by && !CREATED_BY_ENUM.include?(created_by)
        OCI.logger.debug("Unknown value for 'created_by' [" + created_by + "]. Mapping to 'CREATED_BY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @created_by = CREATED_BY_UNKNOWN_ENUM_VALUE
      else
        @created_by = created_by
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        defined_tags == other.defined_tags &&
        freeform_tags == other.freeform_tags &&
        id == other.id &&
        instance_id == other.instance_id &&
        compartment_id == other.compartment_id &&
        maintenance_category == other.maintenance_category &&
        maintenance_reason == other.maintenance_reason &&
        instance_action == other.instance_action &&
        alternative_resolution_actions == other.alternative_resolution_actions &&
        time_started == other.time_started &&
        time_finished == other.time_finished &&
        time_window_start == other.time_window_start &&
        start_window_duration == other.start_window_duration &&
        estimated_duration == other.estimated_duration &&
        time_hard_due_date == other.time_hard_due_date &&
        can_reschedule == other.can_reschedule &&
        time_created == other.time_created &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        created_by == other.created_by &&
        description == other.description &&
        correlation_token == other.correlation_token &&
        can_delete_local_storage == other.can_delete_local_storage &&
        additional_details == other.additional_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, defined_tags, freeform_tags, id, instance_id, compartment_id, maintenance_category, maintenance_reason, instance_action, alternative_resolution_actions, time_started, time_finished, time_window_start, start_window_duration, estimated_duration, time_hard_due_date, can_reschedule, time_created, lifecycle_state, lifecycle_details, created_by, description, correlation_token, can_delete_local_storage, additional_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
