# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # This resource provides redundancy level details for the virtual circuit. For more about redundancy, see [FastConnect Redundancy Best Practices](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnectresiliency.htm).
  #
  class Core::Models::VirtualCircuitRedundancyMetadata
    CONFIGURED_REDUNDANCY_LEVEL_ENUM = [
      CONFIGURED_REDUNDANCY_LEVEL_DEVICE = 'DEVICE'.freeze,
      CONFIGURED_REDUNDANCY_LEVEL_POP = 'POP'.freeze,
      CONFIGURED_REDUNDANCY_LEVEL_REGION = 'REGION'.freeze,
      CONFIGURED_REDUNDANCY_LEVEL_NON_REDUNDANT = 'NON_REDUNDANT'.freeze,
      CONFIGURED_REDUNDANCY_LEVEL_PENDING = 'PENDING'.freeze,
      CONFIGURED_REDUNDANCY_LEVEL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    IPV4BGP_SESSION_REDUNDANCY_STATUS_ENUM = [
      IPV4BGP_SESSION_REDUNDANCY_STATUS_CONFIGURATION_MATCH = 'CONFIGURATION_MATCH'.freeze,
      IPV4BGP_SESSION_REDUNDANCY_STATUS_CONFIGURATION_MISMATCH = 'CONFIGURATION_MISMATCH'.freeze,
      IPV4BGP_SESSION_REDUNDANCY_STATUS_NOT_MET_SLA = 'NOT_MET_SLA'.freeze,
      IPV4BGP_SESSION_REDUNDANCY_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    IPV6BGP_SESSION_REDUNDANCY_STATUS_ENUM = [
      IPV6BGP_SESSION_REDUNDANCY_STATUS_CONFIGURATION_MATCH = 'CONFIGURATION_MATCH'.freeze,
      IPV6BGP_SESSION_REDUNDANCY_STATUS_CONFIGURATION_MISMATCH = 'CONFIGURATION_MISMATCH'.freeze,
      IPV6BGP_SESSION_REDUNDANCY_STATUS_NOT_MET_SLA = 'NOT_MET_SLA'.freeze,
      IPV6BGP_SESSION_REDUNDANCY_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The configured redundancy level of the virtual circuit.
    # @return [String]
    attr_reader :configured_redundancy_level

    # Indicates if the configured level is met for IPv4 BGP redundancy.
    #
    # @return [String]
    attr_reader :ipv4bgp_session_redundancy_status

    # Indicates if the configured level is met for IPv6 BGP redundancy.
    #
    # @return [String]
    attr_reader :ipv6bgp_session_redundancy_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'configured_redundancy_level': :'configuredRedundancyLevel',
        'ipv4bgp_session_redundancy_status': :'ipv4bgpSessionRedundancyStatus',
        'ipv6bgp_session_redundancy_status': :'ipv6bgpSessionRedundancyStatus'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'configured_redundancy_level': :'String',
        'ipv4bgp_session_redundancy_status': :'String',
        'ipv6bgp_session_redundancy_status': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :configured_redundancy_level The value to assign to the {#configured_redundancy_level} property
    # @option attributes [String] :ipv4bgp_session_redundancy_status The value to assign to the {#ipv4bgp_session_redundancy_status} property
    # @option attributes [String] :ipv6bgp_session_redundancy_status The value to assign to the {#ipv6bgp_session_redundancy_status} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.configured_redundancy_level = attributes[:'configuredRedundancyLevel'] if attributes[:'configuredRedundancyLevel']

      raise 'You cannot provide both :configuredRedundancyLevel and :configured_redundancy_level' if attributes.key?(:'configuredRedundancyLevel') && attributes.key?(:'configured_redundancy_level')

      self.configured_redundancy_level = attributes[:'configured_redundancy_level'] if attributes[:'configured_redundancy_level']

      self.ipv4bgp_session_redundancy_status = attributes[:'ipv4bgpSessionRedundancyStatus'] if attributes[:'ipv4bgpSessionRedundancyStatus']

      raise 'You cannot provide both :ipv4bgpSessionRedundancyStatus and :ipv4bgp_session_redundancy_status' if attributes.key?(:'ipv4bgpSessionRedundancyStatus') && attributes.key?(:'ipv4bgp_session_redundancy_status')

      self.ipv4bgp_session_redundancy_status = attributes[:'ipv4bgp_session_redundancy_status'] if attributes[:'ipv4bgp_session_redundancy_status']

      self.ipv6bgp_session_redundancy_status = attributes[:'ipv6bgpSessionRedundancyStatus'] if attributes[:'ipv6bgpSessionRedundancyStatus']

      raise 'You cannot provide both :ipv6bgpSessionRedundancyStatus and :ipv6bgp_session_redundancy_status' if attributes.key?(:'ipv6bgpSessionRedundancyStatus') && attributes.key?(:'ipv6bgp_session_redundancy_status')

      self.ipv6bgp_session_redundancy_status = attributes[:'ipv6bgp_session_redundancy_status'] if attributes[:'ipv6bgp_session_redundancy_status']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] configured_redundancy_level Object to be assigned
    def configured_redundancy_level=(configured_redundancy_level)
      # rubocop:disable Style/ConditionalAssignment
      if configured_redundancy_level && !CONFIGURED_REDUNDANCY_LEVEL_ENUM.include?(configured_redundancy_level)
        OCI.logger.debug("Unknown value for 'configured_redundancy_level' [" + configured_redundancy_level + "]. Mapping to 'CONFIGURED_REDUNDANCY_LEVEL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @configured_redundancy_level = CONFIGURED_REDUNDANCY_LEVEL_UNKNOWN_ENUM_VALUE
      else
        @configured_redundancy_level = configured_redundancy_level
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ipv4bgp_session_redundancy_status Object to be assigned
    def ipv4bgp_session_redundancy_status=(ipv4bgp_session_redundancy_status)
      # rubocop:disable Style/ConditionalAssignment
      if ipv4bgp_session_redundancy_status && !IPV4BGP_SESSION_REDUNDANCY_STATUS_ENUM.include?(ipv4bgp_session_redundancy_status)
        OCI.logger.debug("Unknown value for 'ipv4bgp_session_redundancy_status' [" + ipv4bgp_session_redundancy_status + "]. Mapping to 'IPV4BGP_SESSION_REDUNDANCY_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @ipv4bgp_session_redundancy_status = IPV4BGP_SESSION_REDUNDANCY_STATUS_UNKNOWN_ENUM_VALUE
      else
        @ipv4bgp_session_redundancy_status = ipv4bgp_session_redundancy_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ipv6bgp_session_redundancy_status Object to be assigned
    def ipv6bgp_session_redundancy_status=(ipv6bgp_session_redundancy_status)
      # rubocop:disable Style/ConditionalAssignment
      if ipv6bgp_session_redundancy_status && !IPV6BGP_SESSION_REDUNDANCY_STATUS_ENUM.include?(ipv6bgp_session_redundancy_status)
        OCI.logger.debug("Unknown value for 'ipv6bgp_session_redundancy_status' [" + ipv6bgp_session_redundancy_status + "]. Mapping to 'IPV6BGP_SESSION_REDUNDANCY_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @ipv6bgp_session_redundancy_status = IPV6BGP_SESSION_REDUNDANCY_STATUS_UNKNOWN_ENUM_VALUE
      else
        @ipv6bgp_session_redundancy_status = ipv6bgp_session_redundancy_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        configured_redundancy_level == other.configured_redundancy_level &&
        ipv4bgp_session_redundancy_status == other.ipv4bgp_session_redundancy_status &&
        ipv6bgp_session_redundancy_status == other.ipv6bgp_session_redundancy_status
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [configured_redundancy_level, ipv4bgp_session_redundancy_status, ipv6bgp_session_redundancy_status].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
