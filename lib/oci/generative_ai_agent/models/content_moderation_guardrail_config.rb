# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240531
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The configuration details about whether to apply the content moderation feature to input and output. Content moderation removes toxic and biased content from responses. It is recommended to use content moderation.
  class GenerativeAiAgent::Models::ContentModerationGuardrailConfig
    INPUT_GUARDRAIL_MODE_ENUM = [
      INPUT_GUARDRAIL_MODE_DISABLE = 'DISABLE'.freeze,
      INPUT_GUARDRAIL_MODE_BLOCK = 'BLOCK'.freeze,
      INPUT_GUARDRAIL_MODE_INFORM = 'INFORM'.freeze,
      INPUT_GUARDRAIL_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    OUTPUT_GUARDRAIL_MODE_ENUM = [
      OUTPUT_GUARDRAIL_MODE_DISABLE = 'DISABLE'.freeze,
      OUTPUT_GUARDRAIL_MODE_BLOCK = 'BLOCK'.freeze,
      OUTPUT_GUARDRAIL_MODE_INFORM = 'INFORM'.freeze,
      OUTPUT_GUARDRAIL_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # An input guardrail mode for content moderation.
    # @return [String]
    attr_reader :input_guardrail_mode

    # An output guardrail mode for content moderation.
    # @return [String]
    attr_reader :output_guardrail_mode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'input_guardrail_mode': :'inputGuardrailMode',
        'output_guardrail_mode': :'outputGuardrailMode'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'input_guardrail_mode': :'String',
        'output_guardrail_mode': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :input_guardrail_mode The value to assign to the {#input_guardrail_mode} property
    # @option attributes [String] :output_guardrail_mode The value to assign to the {#output_guardrail_mode} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.input_guardrail_mode = attributes[:'inputGuardrailMode'] if attributes[:'inputGuardrailMode']

      raise 'You cannot provide both :inputGuardrailMode and :input_guardrail_mode' if attributes.key?(:'inputGuardrailMode') && attributes.key?(:'input_guardrail_mode')

      self.input_guardrail_mode = attributes[:'input_guardrail_mode'] if attributes[:'input_guardrail_mode']

      self.output_guardrail_mode = attributes[:'outputGuardrailMode'] if attributes[:'outputGuardrailMode']

      raise 'You cannot provide both :outputGuardrailMode and :output_guardrail_mode' if attributes.key?(:'outputGuardrailMode') && attributes.key?(:'output_guardrail_mode')

      self.output_guardrail_mode = attributes[:'output_guardrail_mode'] if attributes[:'output_guardrail_mode']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] input_guardrail_mode Object to be assigned
    def input_guardrail_mode=(input_guardrail_mode)
      # rubocop:disable Style/ConditionalAssignment
      if input_guardrail_mode && !INPUT_GUARDRAIL_MODE_ENUM.include?(input_guardrail_mode)
        OCI.logger.debug("Unknown value for 'input_guardrail_mode' [" + input_guardrail_mode + "]. Mapping to 'INPUT_GUARDRAIL_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @input_guardrail_mode = INPUT_GUARDRAIL_MODE_UNKNOWN_ENUM_VALUE
      else
        @input_guardrail_mode = input_guardrail_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] output_guardrail_mode Object to be assigned
    def output_guardrail_mode=(output_guardrail_mode)
      # rubocop:disable Style/ConditionalAssignment
      if output_guardrail_mode && !OUTPUT_GUARDRAIL_MODE_ENUM.include?(output_guardrail_mode)
        OCI.logger.debug("Unknown value for 'output_guardrail_mode' [" + output_guardrail_mode + "]. Mapping to 'OUTPUT_GUARDRAIL_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @output_guardrail_mode = OUTPUT_GUARDRAIL_MODE_UNKNOWN_ENUM_VALUE
      else
        @output_guardrail_mode = output_guardrail_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        input_guardrail_mode == other.input_guardrail_mode &&
        output_guardrail_mode == other.output_guardrail_mode
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [input_guardrail_mode, output_guardrail_mode].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
