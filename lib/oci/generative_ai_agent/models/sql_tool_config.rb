# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240531
require 'date'
require 'logger'
require_relative 'tool_config'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The configuration for SQL Tool.
  #
  class GenerativeAiAgent::Models::SqlToolConfig < GenerativeAiAgent::Models::ToolConfig
    DIALECT_ENUM = [
      DIALECT_SQL_LITE = 'SQL_LITE'.freeze,
      DIALECT_ORACLE_SQL = 'ORACLE_SQL'.freeze,
      DIALECT_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MODEL_SIZE_ENUM = [
      MODEL_SIZE_SMALL = 'SMALL'.freeze,
      MODEL_SIZE_LARGE = 'LARGE'.freeze,
      MODEL_SIZE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # @return [OCI::GenerativeAiAgent::Models::InputLocation]
    attr_accessor :icl_examples

    # This attribute is required.
    # @return [OCI::GenerativeAiAgent::Models::InputLocation]
    attr_accessor :database_schema

    # To enable/disable SQL execution.
    # @return [BOOLEAN]
    attr_accessor :should_enable_sql_execution

    # **[Required]** Dialect to be used for SQL generation.
    # @return [String]
    attr_reader :dialect

    # Size of the model.
    # @return [String]
    attr_reader :model_size

    # To enable/disable self correction.
    # @return [BOOLEAN]
    attr_accessor :should_enable_self_correction

    # @return [OCI::GenerativeAiAgent::Models::InputLocation]
    attr_accessor :table_and_column_description

    # @return [OCI::GenerativeAiAgent::Models::LlmCustomization]
    attr_accessor :generation_llm_customization

    # @return [OCI::GenerativeAiAgent::Models::DatabaseConnection]
    attr_accessor :database_connection

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'tool_config_type': :'toolConfigType',
        'icl_examples': :'iclExamples',
        'database_schema': :'databaseSchema',
        'should_enable_sql_execution': :'shouldEnableSqlExecution',
        'dialect': :'dialect',
        'model_size': :'modelSize',
        'should_enable_self_correction': :'shouldEnableSelfCorrection',
        'table_and_column_description': :'tableAndColumnDescription',
        'generation_llm_customization': :'generationLlmCustomization',
        'database_connection': :'databaseConnection'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'tool_config_type': :'String',
        'icl_examples': :'OCI::GenerativeAiAgent::Models::InputLocation',
        'database_schema': :'OCI::GenerativeAiAgent::Models::InputLocation',
        'should_enable_sql_execution': :'BOOLEAN',
        'dialect': :'String',
        'model_size': :'String',
        'should_enable_self_correction': :'BOOLEAN',
        'table_and_column_description': :'OCI::GenerativeAiAgent::Models::InputLocation',
        'generation_llm_customization': :'OCI::GenerativeAiAgent::Models::LlmCustomization',
        'database_connection': :'OCI::GenerativeAiAgent::Models::DatabaseConnection'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::GenerativeAiAgent::Models::InputLocation] :icl_examples The value to assign to the {#icl_examples} property
    # @option attributes [OCI::GenerativeAiAgent::Models::InputLocation] :database_schema The value to assign to the {#database_schema} property
    # @option attributes [BOOLEAN] :should_enable_sql_execution The value to assign to the {#should_enable_sql_execution} property
    # @option attributes [String] :dialect The value to assign to the {#dialect} property
    # @option attributes [String] :model_size The value to assign to the {#model_size} property
    # @option attributes [BOOLEAN] :should_enable_self_correction The value to assign to the {#should_enable_self_correction} property
    # @option attributes [OCI::GenerativeAiAgent::Models::InputLocation] :table_and_column_description The value to assign to the {#table_and_column_description} property
    # @option attributes [OCI::GenerativeAiAgent::Models::LlmCustomization] :generation_llm_customization The value to assign to the {#generation_llm_customization} property
    # @option attributes [OCI::GenerativeAiAgent::Models::DatabaseConnection] :database_connection The value to assign to the {#database_connection} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['toolConfigType'] = 'SQL_TOOL_CONFIG'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.icl_examples = attributes[:'iclExamples'] if attributes[:'iclExamples']

      raise 'You cannot provide both :iclExamples and :icl_examples' if attributes.key?(:'iclExamples') && attributes.key?(:'icl_examples')

      self.icl_examples = attributes[:'icl_examples'] if attributes[:'icl_examples']

      self.database_schema = attributes[:'databaseSchema'] if attributes[:'databaseSchema']

      raise 'You cannot provide both :databaseSchema and :database_schema' if attributes.key?(:'databaseSchema') && attributes.key?(:'database_schema')

      self.database_schema = attributes[:'database_schema'] if attributes[:'database_schema']

      self.should_enable_sql_execution = attributes[:'shouldEnableSqlExecution'] unless attributes[:'shouldEnableSqlExecution'].nil?
      self.should_enable_sql_execution = false if should_enable_sql_execution.nil? && !attributes.key?(:'shouldEnableSqlExecution') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldEnableSqlExecution and :should_enable_sql_execution' if attributes.key?(:'shouldEnableSqlExecution') && attributes.key?(:'should_enable_sql_execution')

      self.should_enable_sql_execution = attributes[:'should_enable_sql_execution'] unless attributes[:'should_enable_sql_execution'].nil?
      self.should_enable_sql_execution = false if should_enable_sql_execution.nil? && !attributes.key?(:'shouldEnableSqlExecution') && !attributes.key?(:'should_enable_sql_execution') # rubocop:disable Style/StringLiterals

      self.dialect = attributes[:'dialect'] if attributes[:'dialect']

      self.model_size = attributes[:'modelSize'] if attributes[:'modelSize']
      self.model_size = "SMALL" if model_size.nil? && !attributes.key?(:'modelSize') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :modelSize and :model_size' if attributes.key?(:'modelSize') && attributes.key?(:'model_size')

      self.model_size = attributes[:'model_size'] if attributes[:'model_size']
      self.model_size = "SMALL" if model_size.nil? && !attributes.key?(:'modelSize') && !attributes.key?(:'model_size') # rubocop:disable Style/StringLiterals

      self.should_enable_self_correction = attributes[:'shouldEnableSelfCorrection'] unless attributes[:'shouldEnableSelfCorrection'].nil?
      self.should_enable_self_correction = false if should_enable_self_correction.nil? && !attributes.key?(:'shouldEnableSelfCorrection') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldEnableSelfCorrection and :should_enable_self_correction' if attributes.key?(:'shouldEnableSelfCorrection') && attributes.key?(:'should_enable_self_correction')

      self.should_enable_self_correction = attributes[:'should_enable_self_correction'] unless attributes[:'should_enable_self_correction'].nil?
      self.should_enable_self_correction = false if should_enable_self_correction.nil? && !attributes.key?(:'shouldEnableSelfCorrection') && !attributes.key?(:'should_enable_self_correction') # rubocop:disable Style/StringLiterals

      self.table_and_column_description = attributes[:'tableAndColumnDescription'] if attributes[:'tableAndColumnDescription']

      raise 'You cannot provide both :tableAndColumnDescription and :table_and_column_description' if attributes.key?(:'tableAndColumnDescription') && attributes.key?(:'table_and_column_description')

      self.table_and_column_description = attributes[:'table_and_column_description'] if attributes[:'table_and_column_description']

      self.generation_llm_customization = attributes[:'generationLlmCustomization'] if attributes[:'generationLlmCustomization']

      raise 'You cannot provide both :generationLlmCustomization and :generation_llm_customization' if attributes.key?(:'generationLlmCustomization') && attributes.key?(:'generation_llm_customization')

      self.generation_llm_customization = attributes[:'generation_llm_customization'] if attributes[:'generation_llm_customization']

      self.database_connection = attributes[:'databaseConnection'] if attributes[:'databaseConnection']

      raise 'You cannot provide both :databaseConnection and :database_connection' if attributes.key?(:'databaseConnection') && attributes.key?(:'database_connection')

      self.database_connection = attributes[:'database_connection'] if attributes[:'database_connection']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dialect Object to be assigned
    def dialect=(dialect)
      # rubocop:disable Style/ConditionalAssignment
      if dialect && !DIALECT_ENUM.include?(dialect)
        OCI.logger.debug("Unknown value for 'dialect' [" + dialect + "]. Mapping to 'DIALECT_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @dialect = DIALECT_UNKNOWN_ENUM_VALUE
      else
        @dialect = dialect
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] model_size Object to be assigned
    def model_size=(model_size)
      # rubocop:disable Style/ConditionalAssignment
      if model_size && !MODEL_SIZE_ENUM.include?(model_size)
        OCI.logger.debug("Unknown value for 'model_size' [" + model_size + "]. Mapping to 'MODEL_SIZE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @model_size = MODEL_SIZE_UNKNOWN_ENUM_VALUE
      else
        @model_size = model_size
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        tool_config_type == other.tool_config_type &&
        icl_examples == other.icl_examples &&
        database_schema == other.database_schema &&
        should_enable_sql_execution == other.should_enable_sql_execution &&
        dialect == other.dialect &&
        model_size == other.model_size &&
        should_enable_self_correction == other.should_enable_self_correction &&
        table_and_column_description == other.table_and_column_description &&
        generation_llm_customization == other.generation_llm_customization &&
        database_connection == other.database_connection
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [tool_config_type, icl_examples, database_schema, should_enable_sql_execution, dialect, model_size, should_enable_self_correction, table_and_column_description, generation_llm_customization, database_connection].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
