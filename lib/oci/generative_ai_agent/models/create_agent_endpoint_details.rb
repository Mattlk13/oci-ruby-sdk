# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20240531
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The data to create an endpoint.
  #
  class GenerativeAiAgent::Models::CreateAgentEndpointDetails
    # A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # An optional description of the endpoint.
    # @return [String]
    attr_accessor :description

    # **[Required]** The OCID of the agent that this endpoint is associated with.
    # @return [String]
    attr_accessor :agent_id

    # @return [OCI::GenerativeAiAgent::Models::ContentModerationConfig]
    attr_accessor :content_moderation_config

    # @return [OCI::GenerativeAiAgent::Models::GuardrailConfig]
    attr_accessor :guardrail_config

    # Key-value pairs to allow additional configurations.
    # @return [Hash<String, String>]
    attr_accessor :metadata

    # @return [OCI::GenerativeAiAgent::Models::HumanInputConfig]
    attr_accessor :human_input_config

    # @return [OCI::GenerativeAiAgent::Models::OutputConfig]
    attr_accessor :output_config

    # Whether to show traces in the chat result.
    # @return [BOOLEAN]
    attr_accessor :should_enable_trace

    # Whether to show citations in the chat result.
    # @return [BOOLEAN]
    attr_accessor :should_enable_citation

    # Whether or not to enable Session-based chat.
    # @return [BOOLEAN]
    attr_accessor :should_enable_session

    # Whether to enable multi-language for chat.
    # @return [BOOLEAN]
    attr_accessor :should_enable_multi_language

    # @return [OCI::GenerativeAiAgent::Models::SessionConfig]
    attr_accessor :session_config

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the endpoint in.
    #
    # @return [String]
    attr_accessor :compartment_id

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'description': :'description',
        'agent_id': :'agentId',
        'content_moderation_config': :'contentModerationConfig',
        'guardrail_config': :'guardrailConfig',
        'metadata': :'metadata',
        'human_input_config': :'humanInputConfig',
        'output_config': :'outputConfig',
        'should_enable_trace': :'shouldEnableTrace',
        'should_enable_citation': :'shouldEnableCitation',
        'should_enable_session': :'shouldEnableSession',
        'should_enable_multi_language': :'shouldEnableMultiLanguage',
        'session_config': :'sessionConfig',
        'compartment_id': :'compartmentId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'description': :'String',
        'agent_id': :'String',
        'content_moderation_config': :'OCI::GenerativeAiAgent::Models::ContentModerationConfig',
        'guardrail_config': :'OCI::GenerativeAiAgent::Models::GuardrailConfig',
        'metadata': :'Hash<String, String>',
        'human_input_config': :'OCI::GenerativeAiAgent::Models::HumanInputConfig',
        'output_config': :'OCI::GenerativeAiAgent::Models::OutputConfig',
        'should_enable_trace': :'BOOLEAN',
        'should_enable_citation': :'BOOLEAN',
        'should_enable_session': :'BOOLEAN',
        'should_enable_multi_language': :'BOOLEAN',
        'session_config': :'OCI::GenerativeAiAgent::Models::SessionConfig',
        'compartment_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :agent_id The value to assign to the {#agent_id} property
    # @option attributes [OCI::GenerativeAiAgent::Models::ContentModerationConfig] :content_moderation_config The value to assign to the {#content_moderation_config} property
    # @option attributes [OCI::GenerativeAiAgent::Models::GuardrailConfig] :guardrail_config The value to assign to the {#guardrail_config} property
    # @option attributes [Hash<String, String>] :metadata The value to assign to the {#metadata} property
    # @option attributes [OCI::GenerativeAiAgent::Models::HumanInputConfig] :human_input_config The value to assign to the {#human_input_config} property
    # @option attributes [OCI::GenerativeAiAgent::Models::OutputConfig] :output_config The value to assign to the {#output_config} property
    # @option attributes [BOOLEAN] :should_enable_trace The value to assign to the {#should_enable_trace} property
    # @option attributes [BOOLEAN] :should_enable_citation The value to assign to the {#should_enable_citation} property
    # @option attributes [BOOLEAN] :should_enable_session The value to assign to the {#should_enable_session} property
    # @option attributes [BOOLEAN] :should_enable_multi_language The value to assign to the {#should_enable_multi_language} property
    # @option attributes [OCI::GenerativeAiAgent::Models::SessionConfig] :session_config The value to assign to the {#session_config} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.agent_id = attributes[:'agentId'] if attributes[:'agentId']

      raise 'You cannot provide both :agentId and :agent_id' if attributes.key?(:'agentId') && attributes.key?(:'agent_id')

      self.agent_id = attributes[:'agent_id'] if attributes[:'agent_id']

      self.content_moderation_config = attributes[:'contentModerationConfig'] if attributes[:'contentModerationConfig']

      raise 'You cannot provide both :contentModerationConfig and :content_moderation_config' if attributes.key?(:'contentModerationConfig') && attributes.key?(:'content_moderation_config')

      self.content_moderation_config = attributes[:'content_moderation_config'] if attributes[:'content_moderation_config']

      self.guardrail_config = attributes[:'guardrailConfig'] if attributes[:'guardrailConfig']

      raise 'You cannot provide both :guardrailConfig and :guardrail_config' if attributes.key?(:'guardrailConfig') && attributes.key?(:'guardrail_config')

      self.guardrail_config = attributes[:'guardrail_config'] if attributes[:'guardrail_config']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']

      self.human_input_config = attributes[:'humanInputConfig'] if attributes[:'humanInputConfig']

      raise 'You cannot provide both :humanInputConfig and :human_input_config' if attributes.key?(:'humanInputConfig') && attributes.key?(:'human_input_config')

      self.human_input_config = attributes[:'human_input_config'] if attributes[:'human_input_config']

      self.output_config = attributes[:'outputConfig'] if attributes[:'outputConfig']

      raise 'You cannot provide both :outputConfig and :output_config' if attributes.key?(:'outputConfig') && attributes.key?(:'output_config')

      self.output_config = attributes[:'output_config'] if attributes[:'output_config']

      self.should_enable_trace = attributes[:'shouldEnableTrace'] unless attributes[:'shouldEnableTrace'].nil?
      self.should_enable_trace = false if should_enable_trace.nil? && !attributes.key?(:'shouldEnableTrace') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldEnableTrace and :should_enable_trace' if attributes.key?(:'shouldEnableTrace') && attributes.key?(:'should_enable_trace')

      self.should_enable_trace = attributes[:'should_enable_trace'] unless attributes[:'should_enable_trace'].nil?
      self.should_enable_trace = false if should_enable_trace.nil? && !attributes.key?(:'shouldEnableTrace') && !attributes.key?(:'should_enable_trace') # rubocop:disable Style/StringLiterals

      self.should_enable_citation = attributes[:'shouldEnableCitation'] unless attributes[:'shouldEnableCitation'].nil?
      self.should_enable_citation = false if should_enable_citation.nil? && !attributes.key?(:'shouldEnableCitation') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldEnableCitation and :should_enable_citation' if attributes.key?(:'shouldEnableCitation') && attributes.key?(:'should_enable_citation')

      self.should_enable_citation = attributes[:'should_enable_citation'] unless attributes[:'should_enable_citation'].nil?
      self.should_enable_citation = false if should_enable_citation.nil? && !attributes.key?(:'shouldEnableCitation') && !attributes.key?(:'should_enable_citation') # rubocop:disable Style/StringLiterals

      self.should_enable_session = attributes[:'shouldEnableSession'] unless attributes[:'shouldEnableSession'].nil?
      self.should_enable_session = true if should_enable_session.nil? && !attributes.key?(:'shouldEnableSession') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldEnableSession and :should_enable_session' if attributes.key?(:'shouldEnableSession') && attributes.key?(:'should_enable_session')

      self.should_enable_session = attributes[:'should_enable_session'] unless attributes[:'should_enable_session'].nil?
      self.should_enable_session = true if should_enable_session.nil? && !attributes.key?(:'shouldEnableSession') && !attributes.key?(:'should_enable_session') # rubocop:disable Style/StringLiterals

      self.should_enable_multi_language = attributes[:'shouldEnableMultiLanguage'] unless attributes[:'shouldEnableMultiLanguage'].nil?
      self.should_enable_multi_language = false if should_enable_multi_language.nil? && !attributes.key?(:'shouldEnableMultiLanguage') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :shouldEnableMultiLanguage and :should_enable_multi_language' if attributes.key?(:'shouldEnableMultiLanguage') && attributes.key?(:'should_enable_multi_language')

      self.should_enable_multi_language = attributes[:'should_enable_multi_language'] unless attributes[:'should_enable_multi_language'].nil?
      self.should_enable_multi_language = false if should_enable_multi_language.nil? && !attributes.key?(:'shouldEnableMultiLanguage') && !attributes.key?(:'should_enable_multi_language') # rubocop:disable Style/StringLiterals

      self.session_config = attributes[:'sessionConfig'] if attributes[:'sessionConfig']

      raise 'You cannot provide both :sessionConfig and :session_config' if attributes.key?(:'sessionConfig') && attributes.key?(:'session_config')

      self.session_config = attributes[:'session_config'] if attributes[:'session_config']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        description == other.description &&
        agent_id == other.agent_id &&
        content_moderation_config == other.content_moderation_config &&
        guardrail_config == other.guardrail_config &&
        metadata == other.metadata &&
        human_input_config == other.human_input_config &&
        output_config == other.output_config &&
        should_enable_trace == other.should_enable_trace &&
        should_enable_citation == other.should_enable_citation &&
        should_enable_session == other.should_enable_session &&
        should_enable_multi_language == other.should_enable_multi_language &&
        session_config == other.session_config &&
        compartment_id == other.compartment_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, description, agent_id, content_moderation_config, guardrail_config, metadata, human_input_config, output_config, should_enable_trace, should_enable_citation, should_enable_session, should_enable_multi_language, session_config, compartment_id, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
