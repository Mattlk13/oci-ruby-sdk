# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190111
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The redemption summary for the requested subscription ID and date range.
  class Usage::Models::RedemptionSummary
    # It provides redeem date.
    # @return [DateTime]
    attr_accessor :time_redeemed

    # It provides the redemption email id.
    # @return [String]
    attr_accessor :redemption_email

    # The redemption code used in the Billing Center during the reward redemption process.
    # @return [String]
    attr_accessor :redemption_code

    # It provides the invoice number against the redemption.
    # @return [String]
    attr_accessor :invoice_number

    # It provides the invoice total amount of given redemption.
    # @return [Float]
    attr_accessor :invoice_total_amount

    # The currency associated with invoice.
    # @return [String]
    attr_accessor :invoice_currency

    # It provides the redeemed rewards in invoice currency.
    # @return [Float]
    attr_accessor :redeemed_rewards

    # It provides the redeemed rewards in base/subscription currency.
    # @return [Float]
    attr_accessor :base_rewards

    # It provides the fxRate between invoice currency and subscription currency.
    # @return [Float]
    attr_accessor :fx_rate

    # It provides the invoice date.
    # @return [DateTime]
    attr_accessor :time_invoiced

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'time_redeemed': :'timeRedeemed',
        'redemption_email': :'redemptionEmail',
        'redemption_code': :'redemptionCode',
        'invoice_number': :'invoiceNumber',
        'invoice_total_amount': :'invoiceTotalAmount',
        'invoice_currency': :'invoiceCurrency',
        'redeemed_rewards': :'redeemedRewards',
        'base_rewards': :'baseRewards',
        'fx_rate': :'fxRate',
        'time_invoiced': :'timeInvoiced'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'time_redeemed': :'DateTime',
        'redemption_email': :'String',
        'redemption_code': :'String',
        'invoice_number': :'String',
        'invoice_total_amount': :'Float',
        'invoice_currency': :'String',
        'redeemed_rewards': :'Float',
        'base_rewards': :'Float',
        'fx_rate': :'Float',
        'time_invoiced': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_redeemed The value to assign to the {#time_redeemed} property
    # @option attributes [String] :redemption_email The value to assign to the {#redemption_email} property
    # @option attributes [String] :redemption_code The value to assign to the {#redemption_code} property
    # @option attributes [String] :invoice_number The value to assign to the {#invoice_number} property
    # @option attributes [Float] :invoice_total_amount The value to assign to the {#invoice_total_amount} property
    # @option attributes [String] :invoice_currency The value to assign to the {#invoice_currency} property
    # @option attributes [Float] :redeemed_rewards The value to assign to the {#redeemed_rewards} property
    # @option attributes [Float] :base_rewards The value to assign to the {#base_rewards} property
    # @option attributes [Float] :fx_rate The value to assign to the {#fx_rate} property
    # @option attributes [DateTime] :time_invoiced The value to assign to the {#time_invoiced} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.time_redeemed = attributes[:'timeRedeemed'] if attributes[:'timeRedeemed']

      raise 'You cannot provide both :timeRedeemed and :time_redeemed' if attributes.key?(:'timeRedeemed') && attributes.key?(:'time_redeemed')

      self.time_redeemed = attributes[:'time_redeemed'] if attributes[:'time_redeemed']

      self.redemption_email = attributes[:'redemptionEmail'] if attributes[:'redemptionEmail']

      raise 'You cannot provide both :redemptionEmail and :redemption_email' if attributes.key?(:'redemptionEmail') && attributes.key?(:'redemption_email')

      self.redemption_email = attributes[:'redemption_email'] if attributes[:'redemption_email']

      self.redemption_code = attributes[:'redemptionCode'] if attributes[:'redemptionCode']

      raise 'You cannot provide both :redemptionCode and :redemption_code' if attributes.key?(:'redemptionCode') && attributes.key?(:'redemption_code')

      self.redemption_code = attributes[:'redemption_code'] if attributes[:'redemption_code']

      self.invoice_number = attributes[:'invoiceNumber'] if attributes[:'invoiceNumber']

      raise 'You cannot provide both :invoiceNumber and :invoice_number' if attributes.key?(:'invoiceNumber') && attributes.key?(:'invoice_number')

      self.invoice_number = attributes[:'invoice_number'] if attributes[:'invoice_number']

      self.invoice_total_amount = attributes[:'invoiceTotalAmount'] if attributes[:'invoiceTotalAmount']

      raise 'You cannot provide both :invoiceTotalAmount and :invoice_total_amount' if attributes.key?(:'invoiceTotalAmount') && attributes.key?(:'invoice_total_amount')

      self.invoice_total_amount = attributes[:'invoice_total_amount'] if attributes[:'invoice_total_amount']

      self.invoice_currency = attributes[:'invoiceCurrency'] if attributes[:'invoiceCurrency']

      raise 'You cannot provide both :invoiceCurrency and :invoice_currency' if attributes.key?(:'invoiceCurrency') && attributes.key?(:'invoice_currency')

      self.invoice_currency = attributes[:'invoice_currency'] if attributes[:'invoice_currency']

      self.redeemed_rewards = attributes[:'redeemedRewards'] if attributes[:'redeemedRewards']

      raise 'You cannot provide both :redeemedRewards and :redeemed_rewards' if attributes.key?(:'redeemedRewards') && attributes.key?(:'redeemed_rewards')

      self.redeemed_rewards = attributes[:'redeemed_rewards'] if attributes[:'redeemed_rewards']

      self.base_rewards = attributes[:'baseRewards'] if attributes[:'baseRewards']

      raise 'You cannot provide both :baseRewards and :base_rewards' if attributes.key?(:'baseRewards') && attributes.key?(:'base_rewards')

      self.base_rewards = attributes[:'base_rewards'] if attributes[:'base_rewards']

      self.fx_rate = attributes[:'fxRate'] if attributes[:'fxRate']

      raise 'You cannot provide both :fxRate and :fx_rate' if attributes.key?(:'fxRate') && attributes.key?(:'fx_rate')

      self.fx_rate = attributes[:'fx_rate'] if attributes[:'fx_rate']

      self.time_invoiced = attributes[:'timeInvoiced'] if attributes[:'timeInvoiced']

      raise 'You cannot provide both :timeInvoiced and :time_invoiced' if attributes.key?(:'timeInvoiced') && attributes.key?(:'time_invoiced')

      self.time_invoiced = attributes[:'time_invoiced'] if attributes[:'time_invoiced']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        time_redeemed == other.time_redeemed &&
        redemption_email == other.redemption_email &&
        redemption_code == other.redemption_code &&
        invoice_number == other.invoice_number &&
        invoice_total_amount == other.invoice_total_amount &&
        invoice_currency == other.invoice_currency &&
        redeemed_rewards == other.redeemed_rewards &&
        base_rewards == other.base_rewards &&
        fx_rate == other.fx_rate &&
        time_invoiced == other.time_invoiced
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [time_redeemed, redemption_email, redemption_code, invoice_number, invoice_total_amount, invoice_currency, redeemed_rewards, base_rewards, fx_rate, time_invoiced].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
