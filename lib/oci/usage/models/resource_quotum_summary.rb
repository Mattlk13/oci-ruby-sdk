# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190111
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The resource quota balance details.
  #
  class Usage::Models::ResourceQuotumSummary
    # The resource name.
    # @return [String]
    attr_accessor :name

    # Used to indicate if further quota consumption isAllowed.
    # @return [BOOLEAN]
    attr_accessor :is_allowed

    # The quota limit.
    # @return [Float]
    attr_accessor :limit

    # The quota balance.
    # @return [Float]
    attr_accessor :balance

    # Used to indicate if overages are incurred.
    # @return [BOOLEAN]
    attr_accessor :is_overage

    # The purchased quota limit.
    # @return [Float]
    attr_accessor :purchased_limit

    # The service name.
    # @return [String]
    attr_accessor :service

    # Used to indicate any resource dependencies.
    # @return [BOOLEAN]
    attr_accessor :is_dependency

    # The affected resource name.
    # @return [String]
    attr_accessor :affected_resource

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'is_allowed': :'isAllowed',
        'limit': :'limit',
        'balance': :'balance',
        'is_overage': :'isOverage',
        'purchased_limit': :'purchasedLimit',
        'service': :'service',
        'is_dependency': :'isDependency',
        'affected_resource': :'affectedResource'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'is_allowed': :'BOOLEAN',
        'limit': :'Float',
        'balance': :'Float',
        'is_overage': :'BOOLEAN',
        'purchased_limit': :'Float',
        'service': :'String',
        'is_dependency': :'BOOLEAN',
        'affected_resource': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [BOOLEAN] :is_allowed The value to assign to the {#is_allowed} property
    # @option attributes [Float] :limit The value to assign to the {#limit} property
    # @option attributes [Float] :balance The value to assign to the {#balance} property
    # @option attributes [BOOLEAN] :is_overage The value to assign to the {#is_overage} property
    # @option attributes [Float] :purchased_limit The value to assign to the {#purchased_limit} property
    # @option attributes [String] :service The value to assign to the {#service} property
    # @option attributes [BOOLEAN] :is_dependency The value to assign to the {#is_dependency} property
    # @option attributes [String] :affected_resource The value to assign to the {#affected_resource} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.is_allowed = attributes[:'isAllowed'] unless attributes[:'isAllowed'].nil?
      self.is_allowed = true if is_allowed.nil? && !attributes.key?(:'isAllowed') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isAllowed and :is_allowed' if attributes.key?(:'isAllowed') && attributes.key?(:'is_allowed')

      self.is_allowed = attributes[:'is_allowed'] unless attributes[:'is_allowed'].nil?
      self.is_allowed = true if is_allowed.nil? && !attributes.key?(:'isAllowed') && !attributes.key?(:'is_allowed') # rubocop:disable Style/StringLiterals

      self.limit = attributes[:'limit'] if attributes[:'limit']

      self.balance = attributes[:'balance'] if attributes[:'balance']

      self.is_overage = attributes[:'isOverage'] unless attributes[:'isOverage'].nil?

      raise 'You cannot provide both :isOverage and :is_overage' if attributes.key?(:'isOverage') && attributes.key?(:'is_overage')

      self.is_overage = attributes[:'is_overage'] unless attributes[:'is_overage'].nil?

      self.purchased_limit = attributes[:'purchasedLimit'] if attributes[:'purchasedLimit']

      raise 'You cannot provide both :purchasedLimit and :purchased_limit' if attributes.key?(:'purchasedLimit') && attributes.key?(:'purchased_limit')

      self.purchased_limit = attributes[:'purchased_limit'] if attributes[:'purchased_limit']

      self.service = attributes[:'service'] if attributes[:'service']

      self.is_dependency = attributes[:'isDependency'] unless attributes[:'isDependency'].nil?

      raise 'You cannot provide both :isDependency and :is_dependency' if attributes.key?(:'isDependency') && attributes.key?(:'is_dependency')

      self.is_dependency = attributes[:'is_dependency'] unless attributes[:'is_dependency'].nil?

      self.affected_resource = attributes[:'affectedResource'] if attributes[:'affectedResource']

      raise 'You cannot provide both :affectedResource and :affected_resource' if attributes.key?(:'affectedResource') && attributes.key?(:'affected_resource')

      self.affected_resource = attributes[:'affected_resource'] if attributes[:'affected_resource']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        is_allowed == other.is_allowed &&
        limit == other.limit &&
        balance == other.balance &&
        is_overage == other.is_overage &&
        purchased_limit == other.purchased_limit &&
        service == other.service &&
        is_dependency == other.is_dependency &&
        affected_resource == other.affected_resource
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, is_allowed, limit, balance, is_overage, purchased_limit, service, is_dependency, affected_resource].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
