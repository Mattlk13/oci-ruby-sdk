# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190111
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Encapsulates a collection of Hard and Soft Limits for a resource within a subscription.
  class Usage::Models::UsageLimitSummary
    ACTION_ENUM = [
      ACTION_QUOTA_BREACH = 'QUOTA_BREACH'.freeze,
      ACTION_QUOTA_ALERT = 'QUOTA_ALERT'.freeze,
      ACTION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIMIT_TYPE_ENUM = [
      LIMIT_TYPE_HARD = 'HARD'.freeze,
      LIMIT_TYPE_SOFT = 'SOFT'.freeze,
      LIMIT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    VALUE_TYPE_ENUM = [
      VALUE_TYPE_ABSOLUTE = 'ABSOLUTE'.freeze,
      VALUE_TYPE_PERCENTAGE = 'PERCENTAGE'.freeze,
      VALUE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Time when the usage limit was created
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** Entitlement ID of the usage limit
    # @return [String]
    attr_accessor :entitlement_id

    # **[Required]** The usage limit ID
    # @return [String]
    attr_accessor :id

    # **[Required]** Time when the usage limit was modified
    # @return [DateTime]
    attr_accessor :time_modified

    # **[Required]** The resource for which the limit is defined
    # @return [String]
    attr_accessor :resource_name

    # **[Required]** The service for which the limit is defined
    # @return [String]
    attr_accessor :service_name

    # **[Required]** The limit value
    # @return [String]
    attr_accessor :limit

    # **[Required]** The user who created the limit
    # @return [String]
    attr_accessor :created_by

    # **[Required]** The user who modified the limit
    # @return [String]
    attr_accessor :modified_by

    # **[Required]** The action when usage limit is hit
    # @return [String]
    attr_reader :action

    # **[Required]** The alert level of the usage limit
    # @return [Float]
    attr_accessor :alert_level

    # **[Required]** The limit type of the usage limit
    # @return [String]
    attr_reader :limit_type

    # **[Required]** The value type of the usage limit
    # @return [String]
    attr_reader :value_type

    # **[Required]** The usage limit lifecycle state.
    # @return [String]
    attr_reader :lifecycle_state

    # The maximum hard limit set for the usage limit
    # @return [String]
    attr_accessor :max_hard_limit

    # The SKU for which the usage limit is set
    # @return [String]
    attr_accessor :sku_part_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'time_created': :'timeCreated',
        'entitlement_id': :'entitlementId',
        'id': :'id',
        'time_modified': :'timeModified',
        'resource_name': :'resourceName',
        'service_name': :'serviceName',
        'limit': :'limit',
        'created_by': :'createdBy',
        'modified_by': :'modifiedBy',
        'action': :'action',
        'alert_level': :'alertLevel',
        'limit_type': :'limitType',
        'value_type': :'valueType',
        'lifecycle_state': :'lifecycleState',
        'max_hard_limit': :'maxHardLimit',
        'sku_part_id': :'skuPartId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'time_created': :'DateTime',
        'entitlement_id': :'String',
        'id': :'String',
        'time_modified': :'DateTime',
        'resource_name': :'String',
        'service_name': :'String',
        'limit': :'String',
        'created_by': :'String',
        'modified_by': :'String',
        'action': :'String',
        'alert_level': :'Float',
        'limit_type': :'String',
        'value_type': :'String',
        'lifecycle_state': :'String',
        'max_hard_limit': :'String',
        'sku_part_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [String] :entitlement_id The value to assign to the {#entitlement_id} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [DateTime] :time_modified The value to assign to the {#time_modified} property
    # @option attributes [String] :resource_name The value to assign to the {#resource_name} property
    # @option attributes [String] :service_name The value to assign to the {#service_name} property
    # @option attributes [String] :limit The value to assign to the {#limit} property
    # @option attributes [String] :created_by The value to assign to the {#created_by} property
    # @option attributes [String] :modified_by The value to assign to the {#modified_by} property
    # @option attributes [String] :action The value to assign to the {#action} property
    # @option attributes [Float] :alert_level The value to assign to the {#alert_level} property
    # @option attributes [String] :limit_type The value to assign to the {#limit_type} property
    # @option attributes [String] :value_type The value to assign to the {#value_type} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :max_hard_limit The value to assign to the {#max_hard_limit} property
    # @option attributes [String] :sku_part_id The value to assign to the {#sku_part_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.entitlement_id = attributes[:'entitlementId'] if attributes[:'entitlementId']

      raise 'You cannot provide both :entitlementId and :entitlement_id' if attributes.key?(:'entitlementId') && attributes.key?(:'entitlement_id')

      self.entitlement_id = attributes[:'entitlement_id'] if attributes[:'entitlement_id']

      self.id = attributes[:'id'] if attributes[:'id']

      self.time_modified = attributes[:'timeModified'] if attributes[:'timeModified']

      raise 'You cannot provide both :timeModified and :time_modified' if attributes.key?(:'timeModified') && attributes.key?(:'time_modified')

      self.time_modified = attributes[:'time_modified'] if attributes[:'time_modified']

      self.resource_name = attributes[:'resourceName'] if attributes[:'resourceName']

      raise 'You cannot provide both :resourceName and :resource_name' if attributes.key?(:'resourceName') && attributes.key?(:'resource_name')

      self.resource_name = attributes[:'resource_name'] if attributes[:'resource_name']

      self.service_name = attributes[:'serviceName'] if attributes[:'serviceName']

      raise 'You cannot provide both :serviceName and :service_name' if attributes.key?(:'serviceName') && attributes.key?(:'service_name')

      self.service_name = attributes[:'service_name'] if attributes[:'service_name']

      self.limit = attributes[:'limit'] if attributes[:'limit']

      self.created_by = attributes[:'createdBy'] if attributes[:'createdBy']

      raise 'You cannot provide both :createdBy and :created_by' if attributes.key?(:'createdBy') && attributes.key?(:'created_by')

      self.created_by = attributes[:'created_by'] if attributes[:'created_by']

      self.modified_by = attributes[:'modifiedBy'] if attributes[:'modifiedBy']

      raise 'You cannot provide both :modifiedBy and :modified_by' if attributes.key?(:'modifiedBy') && attributes.key?(:'modified_by')

      self.modified_by = attributes[:'modified_by'] if attributes[:'modified_by']

      self.action = attributes[:'action'] if attributes[:'action']

      self.alert_level = attributes[:'alertLevel'] if attributes[:'alertLevel']

      raise 'You cannot provide both :alertLevel and :alert_level' if attributes.key?(:'alertLevel') && attributes.key?(:'alert_level')

      self.alert_level = attributes[:'alert_level'] if attributes[:'alert_level']

      self.limit_type = attributes[:'limitType'] if attributes[:'limitType']

      raise 'You cannot provide both :limitType and :limit_type' if attributes.key?(:'limitType') && attributes.key?(:'limit_type')

      self.limit_type = attributes[:'limit_type'] if attributes[:'limit_type']

      self.value_type = attributes[:'valueType'] if attributes[:'valueType']

      raise 'You cannot provide both :valueType and :value_type' if attributes.key?(:'valueType') && attributes.key?(:'value_type')

      self.value_type = attributes[:'value_type'] if attributes[:'value_type']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.max_hard_limit = attributes[:'maxHardLimit'] if attributes[:'maxHardLimit']

      raise 'You cannot provide both :maxHardLimit and :max_hard_limit' if attributes.key?(:'maxHardLimit') && attributes.key?(:'max_hard_limit')

      self.max_hard_limit = attributes[:'max_hard_limit'] if attributes[:'max_hard_limit']

      self.sku_part_id = attributes[:'skuPartId'] if attributes[:'skuPartId']

      raise 'You cannot provide both :skuPartId and :sku_part_id' if attributes.key?(:'skuPartId') && attributes.key?(:'sku_part_id')

      self.sku_part_id = attributes[:'sku_part_id'] if attributes[:'sku_part_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      # rubocop:disable Style/ConditionalAssignment
      if action && !ACTION_ENUM.include?(action)
        OCI.logger.debug("Unknown value for 'action' [" + action + "]. Mapping to 'ACTION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @action = ACTION_UNKNOWN_ENUM_VALUE
      else
        @action = action
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] limit_type Object to be assigned
    def limit_type=(limit_type)
      # rubocop:disable Style/ConditionalAssignment
      if limit_type && !LIMIT_TYPE_ENUM.include?(limit_type)
        OCI.logger.debug("Unknown value for 'limit_type' [" + limit_type + "]. Mapping to 'LIMIT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @limit_type = LIMIT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @limit_type = limit_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] value_type Object to be assigned
    def value_type=(value_type)
      # rubocop:disable Style/ConditionalAssignment
      if value_type && !VALUE_TYPE_ENUM.include?(value_type)
        OCI.logger.debug("Unknown value for 'value_type' [" + value_type + "]. Mapping to 'VALUE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @value_type = VALUE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @value_type = value_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        time_created == other.time_created &&
        entitlement_id == other.entitlement_id &&
        id == other.id &&
        time_modified == other.time_modified &&
        resource_name == other.resource_name &&
        service_name == other.service_name &&
        limit == other.limit &&
        created_by == other.created_by &&
        modified_by == other.modified_by &&
        action == other.action &&
        alert_level == other.alert_level &&
        limit_type == other.limit_type &&
        value_type == other.value_type &&
        lifecycle_state == other.lifecycle_state &&
        max_hard_limit == other.max_hard_limit &&
        sku_part_id == other.sku_part_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [time_created, entitlement_id, id, time_modified, resource_name, service_name, limit, created_by, modified_by, action, alert_level, limit_type, value_type, lifecycle_state, max_hard_limit, sku_part_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
