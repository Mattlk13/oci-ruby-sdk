# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230518
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Optional dump settings
  class DatabaseMigration::Models::MySqlInitialLoadSettings
    PRIMARY_KEY_COMPATIBILITY_ENUM = [
      PRIMARY_KEY_COMPATIBILITY_NONE = 'NONE'.freeze,
      PRIMARY_KEY_COMPATIBILITY_IGNORE_MISSING_PKS = 'IGNORE_MISSING_PKS'.freeze,
      PRIMARY_KEY_COMPATIBILITY_CREATE_INVISIBLE_PKS = 'CREATE_INVISIBLE_PKS'.freeze,
      PRIMARY_KEY_COMPATIBILITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    HANDLE_GRANT_ERRORS_ENUM = [
      HANDLE_GRANT_ERRORS_ABORT = 'ABORT'.freeze,
      HANDLE_GRANT_ERRORS_DROP_ACCOUNT = 'DROP_ACCOUNT'.freeze,
      HANDLE_GRANT_ERRORS_IGNORE = 'IGNORE'.freeze,
      HANDLE_GRANT_ERRORS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    JOB_MODE_ENUM = [
      JOB_MODE_FULL = 'FULL'.freeze,
      JOB_MODE_SCHEMA = 'SCHEMA'.freeze,
      JOB_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
    #
    # @return [BOOLEAN]
    attr_accessor :is_consistent

    # Include a statement at the start of the dump to set the time zone to UTC.
    #
    # @return [BOOLEAN]
    attr_accessor :is_tz_utc

    # Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump
    # output, altering the dump files as necessary.
    #
    # @return [Array<OCI::DatabaseMigration::Models::CompatibilityOption>]
    attr_accessor :compatibility

    # Primary key compatibility option
    # @return [String]
    attr_reader :primary_key_compatibility

    # Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
    #
    # @return [BOOLEAN]
    attr_accessor :is_ignore_existing_objects

    # The action taken in the event of errors related to GRANT or REVOKE errors.
    # @return [String]
    attr_reader :handle_grant_errors

    # **[Required]** MySql Job Mode
    # @return [String]
    attr_reader :job_mode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'is_consistent': :'isConsistent',
        'is_tz_utc': :'isTzUtc',
        'compatibility': :'compatibility',
        'primary_key_compatibility': :'primaryKeyCompatibility',
        'is_ignore_existing_objects': :'isIgnoreExistingObjects',
        'handle_grant_errors': :'handleGrantErrors',
        'job_mode': :'jobMode'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'is_consistent': :'BOOLEAN',
        'is_tz_utc': :'BOOLEAN',
        'compatibility': :'Array<OCI::DatabaseMigration::Models::CompatibilityOption>',
        'primary_key_compatibility': :'String',
        'is_ignore_existing_objects': :'BOOLEAN',
        'handle_grant_errors': :'String',
        'job_mode': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_consistent The value to assign to the {#is_consistent} property
    # @option attributes [BOOLEAN] :is_tz_utc The value to assign to the {#is_tz_utc} property
    # @option attributes [Array<OCI::DatabaseMigration::Models::CompatibilityOption>] :compatibility The value to assign to the {#compatibility} property
    # @option attributes [String] :primary_key_compatibility The value to assign to the {#primary_key_compatibility} property
    # @option attributes [BOOLEAN] :is_ignore_existing_objects The value to assign to the {#is_ignore_existing_objects} property
    # @option attributes [String] :handle_grant_errors The value to assign to the {#handle_grant_errors} property
    # @option attributes [String] :job_mode The value to assign to the {#job_mode} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.is_consistent = attributes[:'isConsistent'] unless attributes[:'isConsistent'].nil?
      self.is_consistent = true if is_consistent.nil? && !attributes.key?(:'isConsistent') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isConsistent and :is_consistent' if attributes.key?(:'isConsistent') && attributes.key?(:'is_consistent')

      self.is_consistent = attributes[:'is_consistent'] unless attributes[:'is_consistent'].nil?
      self.is_consistent = true if is_consistent.nil? && !attributes.key?(:'isConsistent') && !attributes.key?(:'is_consistent') # rubocop:disable Style/StringLiterals

      self.is_tz_utc = attributes[:'isTzUtc'] unless attributes[:'isTzUtc'].nil?
      self.is_tz_utc = true if is_tz_utc.nil? && !attributes.key?(:'isTzUtc') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isTzUtc and :is_tz_utc' if attributes.key?(:'isTzUtc') && attributes.key?(:'is_tz_utc')

      self.is_tz_utc = attributes[:'is_tz_utc'] unless attributes[:'is_tz_utc'].nil?
      self.is_tz_utc = true if is_tz_utc.nil? && !attributes.key?(:'isTzUtc') && !attributes.key?(:'is_tz_utc') # rubocop:disable Style/StringLiterals

      self.compatibility = attributes[:'compatibility'] if attributes[:'compatibility']

      self.primary_key_compatibility = attributes[:'primaryKeyCompatibility'] if attributes[:'primaryKeyCompatibility']
      self.primary_key_compatibility = "NONE" if primary_key_compatibility.nil? && !attributes.key?(:'primaryKeyCompatibility') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :primaryKeyCompatibility and :primary_key_compatibility' if attributes.key?(:'primaryKeyCompatibility') && attributes.key?(:'primary_key_compatibility')

      self.primary_key_compatibility = attributes[:'primary_key_compatibility'] if attributes[:'primary_key_compatibility']
      self.primary_key_compatibility = "NONE" if primary_key_compatibility.nil? && !attributes.key?(:'primaryKeyCompatibility') && !attributes.key?(:'primary_key_compatibility') # rubocop:disable Style/StringLiterals

      self.is_ignore_existing_objects = attributes[:'isIgnoreExistingObjects'] unless attributes[:'isIgnoreExistingObjects'].nil?
      self.is_ignore_existing_objects = false if is_ignore_existing_objects.nil? && !attributes.key?(:'isIgnoreExistingObjects') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isIgnoreExistingObjects and :is_ignore_existing_objects' if attributes.key?(:'isIgnoreExistingObjects') && attributes.key?(:'is_ignore_existing_objects')

      self.is_ignore_existing_objects = attributes[:'is_ignore_existing_objects'] unless attributes[:'is_ignore_existing_objects'].nil?
      self.is_ignore_existing_objects = false if is_ignore_existing_objects.nil? && !attributes.key?(:'isIgnoreExistingObjects') && !attributes.key?(:'is_ignore_existing_objects') # rubocop:disable Style/StringLiterals

      self.handle_grant_errors = attributes[:'handleGrantErrors'] if attributes[:'handleGrantErrors']

      raise 'You cannot provide both :handleGrantErrors and :handle_grant_errors' if attributes.key?(:'handleGrantErrors') && attributes.key?(:'handle_grant_errors')

      self.handle_grant_errors = attributes[:'handle_grant_errors'] if attributes[:'handle_grant_errors']

      self.job_mode = attributes[:'jobMode'] if attributes[:'jobMode']

      raise 'You cannot provide both :jobMode and :job_mode' if attributes.key?(:'jobMode') && attributes.key?(:'job_mode')

      self.job_mode = attributes[:'job_mode'] if attributes[:'job_mode']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] primary_key_compatibility Object to be assigned
    def primary_key_compatibility=(primary_key_compatibility)
      # rubocop:disable Style/ConditionalAssignment
      if primary_key_compatibility && !PRIMARY_KEY_COMPATIBILITY_ENUM.include?(primary_key_compatibility)
        OCI.logger.debug("Unknown value for 'primary_key_compatibility' [" + primary_key_compatibility + "]. Mapping to 'PRIMARY_KEY_COMPATIBILITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @primary_key_compatibility = PRIMARY_KEY_COMPATIBILITY_UNKNOWN_ENUM_VALUE
      else
        @primary_key_compatibility = primary_key_compatibility
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] handle_grant_errors Object to be assigned
    def handle_grant_errors=(handle_grant_errors)
      # rubocop:disable Style/ConditionalAssignment
      if handle_grant_errors && !HANDLE_GRANT_ERRORS_ENUM.include?(handle_grant_errors)
        OCI.logger.debug("Unknown value for 'handle_grant_errors' [" + handle_grant_errors + "]. Mapping to 'HANDLE_GRANT_ERRORS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @handle_grant_errors = HANDLE_GRANT_ERRORS_UNKNOWN_ENUM_VALUE
      else
        @handle_grant_errors = handle_grant_errors
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] job_mode Object to be assigned
    def job_mode=(job_mode)
      # rubocop:disable Style/ConditionalAssignment
      if job_mode && !JOB_MODE_ENUM.include?(job_mode)
        OCI.logger.debug("Unknown value for 'job_mode' [" + job_mode + "]. Mapping to 'JOB_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @job_mode = JOB_MODE_UNKNOWN_ENUM_VALUE
      else
        @job_mode = job_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        is_consistent == other.is_consistent &&
        is_tz_utc == other.is_tz_utc &&
        compatibility == other.compatibility &&
        primary_key_compatibility == other.primary_key_compatibility &&
        is_ignore_existing_objects == other.is_ignore_existing_objects &&
        handle_grant_errors == other.handle_grant_errors &&
        job_mode == other.job_mode
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_consistent, is_tz_utc, compatibility, primary_key_compatibility, is_ignore_existing_objects, handle_grant_errors, job_mode].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
