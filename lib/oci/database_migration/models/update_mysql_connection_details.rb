# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230518
require 'date'
require_relative 'update_connection_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information to update a MySQL Connection.
  class DatabaseMigration::Models::UpdateMysqlConnectionDetails < DatabaseMigration::Models::UpdateConnectionDetails
    # The IP Address of the host.
    # @return [String]
    attr_accessor :host

    # The port to be used for the connection.
    # @return [Integer]
    attr_accessor :port

    # The name of the database being referenced.
    # @return [String]
    attr_accessor :database_name

    # Security Type for MySQL.
    # @return [String]
    attr_accessor :security_protocol

    # SSL modes for MySQL.
    # @return [String]
    attr_accessor :ssl_mode

    # Database Certificate - The base64 encoded content of mysql.pem file
    # containing the server public key (for 1 and 2-way SSL).
    #
    # @return [String]
    attr_accessor :ssl_ca

    # Certificates revoked by certificate authorities (CA).
    # Server certificate must not be on this list (for 1 and 2-way SSL).
    # Note: This is an optional and that too only applicable if TLS/MTLS option is selected.
    #
    # @return [String]
    attr_accessor :ssl_crl

    # Client Certificate - The base64 encoded content of client-cert.pem file
    # containing the client public key (for 2-way SSL).
    #
    # @return [String]
    attr_accessor :ssl_cert

    # Client Key - The client-key.pem containing the client private key (for 2-way SSL).
    # @return [String]
    attr_accessor :ssl_key

    # An array of name-value pair attribute entries.
    # @return [Array<OCI::DatabaseMigration::Models::NameValuePair>]
    attr_accessor :additional_attributes

    # The OCID of the database system being referenced.
    #
    # @return [String]
    attr_accessor :db_system_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'connectionType',
        'display_name': :'displayName',
        'description': :'description',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'vault_id': :'vaultId',
        'key_id': :'keyId',
        'subnet_id': :'subnetId',
        'nsg_ids': :'nsgIds',
        'username': :'username',
        'password': :'password',
        'replication_username': :'replicationUsername',
        'replication_password': :'replicationPassword',
        'host': :'host',
        'port': :'port',
        'database_name': :'databaseName',
        'security_protocol': :'securityProtocol',
        'ssl_mode': :'sslMode',
        'ssl_ca': :'sslCa',
        'ssl_crl': :'sslCrl',
        'ssl_cert': :'sslCert',
        'ssl_key': :'sslKey',
        'additional_attributes': :'additionalAttributes',
        'db_system_id': :'dbSystemId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'String',
        'display_name': :'String',
        'description': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'vault_id': :'String',
        'key_id': :'String',
        'subnet_id': :'String',
        'nsg_ids': :'Array<String>',
        'username': :'String',
        'password': :'String',
        'replication_username': :'String',
        'replication_password': :'String',
        'host': :'String',
        'port': :'Integer',
        'database_name': :'String',
        'security_protocol': :'String',
        'ssl_mode': :'String',
        'ssl_ca': :'String',
        'ssl_crl': :'String',
        'ssl_cert': :'String',
        'ssl_key': :'String',
        'additional_attributes': :'Array<OCI::DatabaseMigration::Models::NameValuePair>',
        'db_system_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#description #description} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#defined_tags #defined_tags} proprety
    # @option attributes [String] :vault_id The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#vault_id #vault_id} proprety
    # @option attributes [String] :key_id The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#key_id #key_id} proprety
    # @option attributes [String] :subnet_id The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#subnet_id #subnet_id} proprety
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#nsg_ids #nsg_ids} proprety
    # @option attributes [String] :username The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#username #username} proprety
    # @option attributes [String] :password The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#password #password} proprety
    # @option attributes [String] :replication_username The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#replication_username #replication_username} proprety
    # @option attributes [String] :replication_password The value to assign to the {OCI::DatabaseMigration::Models::UpdateConnectionDetails#replication_password #replication_password} proprety
    # @option attributes [String] :host The value to assign to the {#host} property
    # @option attributes [Integer] :port The value to assign to the {#port} property
    # @option attributes [String] :database_name The value to assign to the {#database_name} property
    # @option attributes [String] :security_protocol The value to assign to the {#security_protocol} property
    # @option attributes [String] :ssl_mode The value to assign to the {#ssl_mode} property
    # @option attributes [String] :ssl_ca The value to assign to the {#ssl_ca} property
    # @option attributes [String] :ssl_crl The value to assign to the {#ssl_crl} property
    # @option attributes [String] :ssl_cert The value to assign to the {#ssl_cert} property
    # @option attributes [String] :ssl_key The value to assign to the {#ssl_key} property
    # @option attributes [Array<OCI::DatabaseMigration::Models::NameValuePair>] :additional_attributes The value to assign to the {#additional_attributes} property
    # @option attributes [String] :db_system_id The value to assign to the {#db_system_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['connectionType'] = 'MYSQL'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.host = attributes[:'host'] if attributes[:'host']

      self.port = attributes[:'port'] if attributes[:'port']

      self.database_name = attributes[:'databaseName'] if attributes[:'databaseName']

      raise 'You cannot provide both :databaseName and :database_name' if attributes.key?(:'databaseName') && attributes.key?(:'database_name')

      self.database_name = attributes[:'database_name'] if attributes[:'database_name']

      self.security_protocol = attributes[:'securityProtocol'] if attributes[:'securityProtocol']

      raise 'You cannot provide both :securityProtocol and :security_protocol' if attributes.key?(:'securityProtocol') && attributes.key?(:'security_protocol')

      self.security_protocol = attributes[:'security_protocol'] if attributes[:'security_protocol']

      self.ssl_mode = attributes[:'sslMode'] if attributes[:'sslMode']

      raise 'You cannot provide both :sslMode and :ssl_mode' if attributes.key?(:'sslMode') && attributes.key?(:'ssl_mode')

      self.ssl_mode = attributes[:'ssl_mode'] if attributes[:'ssl_mode']

      self.ssl_ca = attributes[:'sslCa'] if attributes[:'sslCa']

      raise 'You cannot provide both :sslCa and :ssl_ca' if attributes.key?(:'sslCa') && attributes.key?(:'ssl_ca')

      self.ssl_ca = attributes[:'ssl_ca'] if attributes[:'ssl_ca']

      self.ssl_crl = attributes[:'sslCrl'] if attributes[:'sslCrl']

      raise 'You cannot provide both :sslCrl and :ssl_crl' if attributes.key?(:'sslCrl') && attributes.key?(:'ssl_crl')

      self.ssl_crl = attributes[:'ssl_crl'] if attributes[:'ssl_crl']

      self.ssl_cert = attributes[:'sslCert'] if attributes[:'sslCert']

      raise 'You cannot provide both :sslCert and :ssl_cert' if attributes.key?(:'sslCert') && attributes.key?(:'ssl_cert')

      self.ssl_cert = attributes[:'ssl_cert'] if attributes[:'ssl_cert']

      self.ssl_key = attributes[:'sslKey'] if attributes[:'sslKey']

      raise 'You cannot provide both :sslKey and :ssl_key' if attributes.key?(:'sslKey') && attributes.key?(:'ssl_key')

      self.ssl_key = attributes[:'ssl_key'] if attributes[:'ssl_key']

      self.additional_attributes = attributes[:'additionalAttributes'] if attributes[:'additionalAttributes']

      raise 'You cannot provide both :additionalAttributes and :additional_attributes' if attributes.key?(:'additionalAttributes') && attributes.key?(:'additional_attributes')

      self.additional_attributes = attributes[:'additional_attributes'] if attributes[:'additional_attributes']

      self.db_system_id = attributes[:'dbSystemId'] if attributes[:'dbSystemId']

      raise 'You cannot provide both :dbSystemId and :db_system_id' if attributes.key?(:'dbSystemId') && attributes.key?(:'db_system_id')

      self.db_system_id = attributes[:'db_system_id'] if attributes[:'db_system_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        connection_type == other.connection_type &&
        display_name == other.display_name &&
        description == other.description &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        vault_id == other.vault_id &&
        key_id == other.key_id &&
        subnet_id == other.subnet_id &&
        nsg_ids == other.nsg_ids &&
        username == other.username &&
        password == other.password &&
        replication_username == other.replication_username &&
        replication_password == other.replication_password &&
        host == other.host &&
        port == other.port &&
        database_name == other.database_name &&
        security_protocol == other.security_protocol &&
        ssl_mode == other.ssl_mode &&
        ssl_ca == other.ssl_ca &&
        ssl_crl == other.ssl_crl &&
        ssl_cert == other.ssl_cert &&
        ssl_key == other.ssl_key &&
        additional_attributes == other.additional_attributes &&
        db_system_id == other.db_system_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [connection_type, display_name, description, freeform_tags, defined_tags, vault_id, key_id, subnet_id, nsg_ids, username, password, replication_username, replication_password, host, port, database_name, security_protocol, ssl_mode, ssl_ca, ssl_crl, ssl_cert, ssl_key, additional_attributes, db_system_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
