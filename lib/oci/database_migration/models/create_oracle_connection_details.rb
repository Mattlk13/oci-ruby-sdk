# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230518
require 'date'
require_relative 'create_connection_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about a new Oracle Database Connection.
  class DatabaseMigration::Models::CreateOracleConnectionDetails < DatabaseMigration::Models::CreateConnectionDetails
    # **[Required]** The Oracle technology type.
    # @return [String]
    attr_accessor :technology_type

    # Connect descriptor or Easy Connect Naming method used to connect to a database.
    #
    # @return [String]
    attr_accessor :connection_string

    # The wallet contents used to make connections to a database.  This
    # attribute is expected to be base64 encoded.
    #
    # @return [String]
    attr_accessor :wallet

    # The OCID of the database being referenced.
    #
    # @return [String]
    attr_accessor :database_id

    # Name of the host the SSH key is valid for.
    #
    # @return [String]
    attr_accessor :ssh_host

    # Private SSH key string.
    #
    # @return [String]
    attr_accessor :ssh_key

    # The username (credential) used when creating or updating this resource.
    #
    # @return [String]
    attr_accessor :ssh_user

    # Sudo location
    #
    # @return [String]
    attr_accessor :ssh_sudo_location

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'connectionType',
        'display_name': :'displayName',
        'description': :'description',
        'compartment_id': :'compartmentId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'vault_id': :'vaultId',
        'key_id': :'keyId',
        'subnet_id': :'subnetId',
        'nsg_ids': :'nsgIds',
        'username': :'username',
        'password': :'password',
        'replication_username': :'replicationUsername',
        'replication_password': :'replicationPassword',
        'technology_type': :'technologyType',
        'connection_string': :'connectionString',
        'wallet': :'wallet',
        'database_id': :'databaseId',
        'ssh_host': :'sshHost',
        'ssh_key': :'sshKey',
        'ssh_user': :'sshUser',
        'ssh_sudo_location': :'sshSudoLocation'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'connection_type': :'String',
        'display_name': :'String',
        'description': :'String',
        'compartment_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'vault_id': :'String',
        'key_id': :'String',
        'subnet_id': :'String',
        'nsg_ids': :'Array<String>',
        'username': :'String',
        'password': :'String',
        'replication_username': :'String',
        'replication_password': :'String',
        'technology_type': :'String',
        'connection_string': :'String',
        'wallet': :'String',
        'database_id': :'String',
        'ssh_host': :'String',
        'ssh_key': :'String',
        'ssh_user': :'String',
        'ssh_sudo_location': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#display_name #display_name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#description #description} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#compartment_id #compartment_id} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#defined_tags #defined_tags} proprety
    # @option attributes [String] :vault_id The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#vault_id #vault_id} proprety
    # @option attributes [String] :key_id The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#key_id #key_id} proprety
    # @option attributes [String] :subnet_id The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#subnet_id #subnet_id} proprety
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#nsg_ids #nsg_ids} proprety
    # @option attributes [String] :username The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#username #username} proprety
    # @option attributes [String] :password The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#password #password} proprety
    # @option attributes [String] :replication_username The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#replication_username #replication_username} proprety
    # @option attributes [String] :replication_password The value to assign to the {OCI::DatabaseMigration::Models::CreateConnectionDetails#replication_password #replication_password} proprety
    # @option attributes [String] :technology_type The value to assign to the {#technology_type} property
    # @option attributes [String] :connection_string The value to assign to the {#connection_string} property
    # @option attributes [String] :wallet The value to assign to the {#wallet} property
    # @option attributes [String] :database_id The value to assign to the {#database_id} property
    # @option attributes [String] :ssh_host The value to assign to the {#ssh_host} property
    # @option attributes [String] :ssh_key The value to assign to the {#ssh_key} property
    # @option attributes [String] :ssh_user The value to assign to the {#ssh_user} property
    # @option attributes [String] :ssh_sudo_location The value to assign to the {#ssh_sudo_location} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['connectionType'] = 'ORACLE'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.technology_type = attributes[:'technologyType'] if attributes[:'technologyType']

      raise 'You cannot provide both :technologyType and :technology_type' if attributes.key?(:'technologyType') && attributes.key?(:'technology_type')

      self.technology_type = attributes[:'technology_type'] if attributes[:'technology_type']

      self.connection_string = attributes[:'connectionString'] if attributes[:'connectionString']

      raise 'You cannot provide both :connectionString and :connection_string' if attributes.key?(:'connectionString') && attributes.key?(:'connection_string')

      self.connection_string = attributes[:'connection_string'] if attributes[:'connection_string']

      self.wallet = attributes[:'wallet'] if attributes[:'wallet']

      self.database_id = attributes[:'databaseId'] if attributes[:'databaseId']

      raise 'You cannot provide both :databaseId and :database_id' if attributes.key?(:'databaseId') && attributes.key?(:'database_id')

      self.database_id = attributes[:'database_id'] if attributes[:'database_id']

      self.ssh_host = attributes[:'sshHost'] if attributes[:'sshHost']

      raise 'You cannot provide both :sshHost and :ssh_host' if attributes.key?(:'sshHost') && attributes.key?(:'ssh_host')

      self.ssh_host = attributes[:'ssh_host'] if attributes[:'ssh_host']

      self.ssh_key = attributes[:'sshKey'] if attributes[:'sshKey']

      raise 'You cannot provide both :sshKey and :ssh_key' if attributes.key?(:'sshKey') && attributes.key?(:'ssh_key')

      self.ssh_key = attributes[:'ssh_key'] if attributes[:'ssh_key']

      self.ssh_user = attributes[:'sshUser'] if attributes[:'sshUser']

      raise 'You cannot provide both :sshUser and :ssh_user' if attributes.key?(:'sshUser') && attributes.key?(:'ssh_user')

      self.ssh_user = attributes[:'ssh_user'] if attributes[:'ssh_user']

      self.ssh_sudo_location = attributes[:'sshSudoLocation'] if attributes[:'sshSudoLocation']

      raise 'You cannot provide both :sshSudoLocation and :ssh_sudo_location' if attributes.key?(:'sshSudoLocation') && attributes.key?(:'ssh_sudo_location')

      self.ssh_sudo_location = attributes[:'ssh_sudo_location'] if attributes[:'ssh_sudo_location']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        connection_type == other.connection_type &&
        display_name == other.display_name &&
        description == other.description &&
        compartment_id == other.compartment_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        vault_id == other.vault_id &&
        key_id == other.key_id &&
        subnet_id == other.subnet_id &&
        nsg_ids == other.nsg_ids &&
        username == other.username &&
        password == other.password &&
        replication_username == other.replication_username &&
        replication_password == other.replication_password &&
        technology_type == other.technology_type &&
        connection_string == other.connection_string &&
        wallet == other.wallet &&
        database_id == other.database_id &&
        ssh_host == other.ssh_host &&
        ssh_key == other.ssh_key &&
        ssh_user == other.ssh_user &&
        ssh_sudo_location == other.ssh_sudo_location
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [connection_type, display_name, description, compartment_id, freeform_tags, defined_tags, vault_id, key_id, subnet_id, nsg_ids, username, password, replication_username, replication_password, technology_type, connection_string, wallet, database_id, ssh_host, ssh_key, ssh_user, ssh_sudo_location].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
