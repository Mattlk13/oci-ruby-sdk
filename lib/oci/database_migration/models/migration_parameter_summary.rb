# Copyright (c) 2016, 2025, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230518
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Migration parameter response object.
  class DatabaseMigration::Models::MigrationParameterSummary
    DATABASE_COMBINATION_ENUM = [
      DATABASE_COMBINATION_MYSQL = 'MYSQL'.freeze,
      DATABASE_COMBINATION_ORACLE = 'ORACLE'.freeze,
      DATABASE_COMBINATION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MIGRATION_TYPE_ENUM = [
      MIGRATION_TYPE_ONLINE = 'ONLINE'.freeze,
      MIGRATION_TYPE_OFFLINE = 'OFFLINE'.freeze,
      MIGRATION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    DATA_TYPE_ENUM = [
      DATA_TYPE_STRING = 'STRING'.freeze,
      DATA_TYPE_INTEGER = 'INTEGER'.freeze,
      DATA_TYPE_FLOAT = 'FLOAT'.freeze,
      DATA_TYPE_BOOLEAN = 'BOOLEAN'.freeze,
      DATA_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The combination of source and target databases participating in a migration.
    # Example: ORACLE means the migration is meant for migrating Oracle source and target databases.
    #
    # @return [String]
    attr_reader :database_combination

    # **[Required]** Parameter display name.
    # @return [String]
    attr_accessor :display_name

    # Parameter documentation URL link.
    # @return [String]
    attr_accessor :doc_url_link

    # **[Required]** Parameter name description.
    # @return [String]
    attr_accessor :description

    # **[Required]** Parameter category name.
    # @return [String]
    attr_accessor :category_name

    # **[Required]** Parameter category display name.
    # @return [String]
    attr_accessor :category_display_name

    # **[Required]** Migration Stage.
    # @return [String]
    attr_reader :migration_type

    # Default value for a parameter.
    # @return [String]
    attr_accessor :default_value

    # Parameter minimum value.
    # @return [Float]
    attr_accessor :min_value

    # Parameter maximum value.
    # @return [Float]
    attr_accessor :max_value

    # Hint text for parameter value.
    # @return [String]
    attr_accessor :hint_text

    # **[Required]** Parameter name.
    # @return [String]
    attr_accessor :name

    # **[Required]** Parameter data type.
    # @return [String]
    attr_reader :data_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'database_combination': :'databaseCombination',
        'display_name': :'displayName',
        'doc_url_link': :'docUrlLink',
        'description': :'description',
        'category_name': :'categoryName',
        'category_display_name': :'categoryDisplayName',
        'migration_type': :'migrationType',
        'default_value': :'defaultValue',
        'min_value': :'minValue',
        'max_value': :'maxValue',
        'hint_text': :'hintText',
        'name': :'name',
        'data_type': :'dataType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'database_combination': :'String',
        'display_name': :'String',
        'doc_url_link': :'String',
        'description': :'String',
        'category_name': :'String',
        'category_display_name': :'String',
        'migration_type': :'String',
        'default_value': :'String',
        'min_value': :'Float',
        'max_value': :'Float',
        'hint_text': :'String',
        'name': :'String',
        'data_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :database_combination The value to assign to the {#database_combination} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :doc_url_link The value to assign to the {#doc_url_link} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :category_name The value to assign to the {#category_name} property
    # @option attributes [String] :category_display_name The value to assign to the {#category_display_name} property
    # @option attributes [String] :migration_type The value to assign to the {#migration_type} property
    # @option attributes [String] :default_value The value to assign to the {#default_value} property
    # @option attributes [Float] :min_value The value to assign to the {#min_value} property
    # @option attributes [Float] :max_value The value to assign to the {#max_value} property
    # @option attributes [String] :hint_text The value to assign to the {#hint_text} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :data_type The value to assign to the {#data_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.database_combination = attributes[:'databaseCombination'] if attributes[:'databaseCombination']

      raise 'You cannot provide both :databaseCombination and :database_combination' if attributes.key?(:'databaseCombination') && attributes.key?(:'database_combination')

      self.database_combination = attributes[:'database_combination'] if attributes[:'database_combination']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.doc_url_link = attributes[:'docUrlLink'] if attributes[:'docUrlLink']

      raise 'You cannot provide both :docUrlLink and :doc_url_link' if attributes.key?(:'docUrlLink') && attributes.key?(:'doc_url_link')

      self.doc_url_link = attributes[:'doc_url_link'] if attributes[:'doc_url_link']

      self.description = attributes[:'description'] if attributes[:'description']

      self.category_name = attributes[:'categoryName'] if attributes[:'categoryName']

      raise 'You cannot provide both :categoryName and :category_name' if attributes.key?(:'categoryName') && attributes.key?(:'category_name')

      self.category_name = attributes[:'category_name'] if attributes[:'category_name']

      self.category_display_name = attributes[:'categoryDisplayName'] if attributes[:'categoryDisplayName']

      raise 'You cannot provide both :categoryDisplayName and :category_display_name' if attributes.key?(:'categoryDisplayName') && attributes.key?(:'category_display_name')

      self.category_display_name = attributes[:'category_display_name'] if attributes[:'category_display_name']

      self.migration_type = attributes[:'migrationType'] if attributes[:'migrationType']

      raise 'You cannot provide both :migrationType and :migration_type' if attributes.key?(:'migrationType') && attributes.key?(:'migration_type')

      self.migration_type = attributes[:'migration_type'] if attributes[:'migration_type']

      self.default_value = attributes[:'defaultValue'] if attributes[:'defaultValue']

      raise 'You cannot provide both :defaultValue and :default_value' if attributes.key?(:'defaultValue') && attributes.key?(:'default_value')

      self.default_value = attributes[:'default_value'] if attributes[:'default_value']

      self.min_value = attributes[:'minValue'] if attributes[:'minValue']

      raise 'You cannot provide both :minValue and :min_value' if attributes.key?(:'minValue') && attributes.key?(:'min_value')

      self.min_value = attributes[:'min_value'] if attributes[:'min_value']

      self.max_value = attributes[:'maxValue'] if attributes[:'maxValue']

      raise 'You cannot provide both :maxValue and :max_value' if attributes.key?(:'maxValue') && attributes.key?(:'max_value')

      self.max_value = attributes[:'max_value'] if attributes[:'max_value']

      self.hint_text = attributes[:'hintText'] if attributes[:'hintText']

      raise 'You cannot provide both :hintText and :hint_text' if attributes.key?(:'hintText') && attributes.key?(:'hint_text')

      self.hint_text = attributes[:'hint_text'] if attributes[:'hint_text']

      self.name = attributes[:'name'] if attributes[:'name']

      self.data_type = attributes[:'dataType'] if attributes[:'dataType']

      raise 'You cannot provide both :dataType and :data_type' if attributes.key?(:'dataType') && attributes.key?(:'data_type')

      self.data_type = attributes[:'data_type'] if attributes[:'data_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] database_combination Object to be assigned
    def database_combination=(database_combination)
      # rubocop:disable Style/ConditionalAssignment
      if database_combination && !DATABASE_COMBINATION_ENUM.include?(database_combination)
        OCI.logger.debug("Unknown value for 'database_combination' [" + database_combination + "]. Mapping to 'DATABASE_COMBINATION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @database_combination = DATABASE_COMBINATION_UNKNOWN_ENUM_VALUE
      else
        @database_combination = database_combination
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] migration_type Object to be assigned
    def migration_type=(migration_type)
      # rubocop:disable Style/ConditionalAssignment
      if migration_type && !MIGRATION_TYPE_ENUM.include?(migration_type)
        OCI.logger.debug("Unknown value for 'migration_type' [" + migration_type + "]. Mapping to 'MIGRATION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @migration_type = MIGRATION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @migration_type = migration_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] data_type Object to be assigned
    def data_type=(data_type)
      # rubocop:disable Style/ConditionalAssignment
      if data_type && !DATA_TYPE_ENUM.include?(data_type)
        OCI.logger.debug("Unknown value for 'data_type' [" + data_type + "]. Mapping to 'DATA_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @data_type = DATA_TYPE_UNKNOWN_ENUM_VALUE
      else
        @data_type = data_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        database_combination == other.database_combination &&
        display_name == other.display_name &&
        doc_url_link == other.doc_url_link &&
        description == other.description &&
        category_name == other.category_name &&
        category_display_name == other.category_display_name &&
        migration_type == other.migration_type &&
        default_value == other.default_value &&
        min_value == other.min_value &&
        max_value == other.max_value &&
        hint_text == other.hint_text &&
        name == other.name &&
        data_type == other.data_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [database_combination, display_name, doc_url_link, description, category_name, category_display_name, migration_type, default_value, min_value, max_value, hint_text, name, data_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
